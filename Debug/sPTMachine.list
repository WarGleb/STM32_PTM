
sPTMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cc34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003418  0801cde8  0801cde8  0002cde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020200  08020200  0004020c  2**0
                  CONTENTS
  4 .ARM          00000008  08020200  08020200  00030200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020208  08020208  0004020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020208  08020208  00030208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802020c  0802020c  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08020210  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004020c  2**0
                  CONTENTS
 10 .bss          0000f24c  2000020c  2000020c  0004020c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  2000f458  2000f458  0004020c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039932  00000000  00000000  0004027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009e57  00000000  00000000  00079bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002cf0  00000000  00000000  00083a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000236b  00000000  00000000  000866f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037688  00000000  00000000  00088a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047453  00000000  00000000  000c00eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109255  00000000  00000000  0010753e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c8f0  00000000  00000000  00210794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0021d084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801cdcc 	.word	0x0801cdcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	0801cdcc 	.word	0x0801cdcc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <SysTask_Init>:
static void SysTim_Callback(TimerHandle_t xTimer);
static void ScreenTim_Callback(TimerHandle_t xTimer);
static void ConTimeout_Callback(TimerHandle_t xTimer);

/*  */
void SysTask_Init(void) {
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af02      	add	r7, sp, #8
	/* Init Beep perif. */
	//BeepTim = htim1;

	/* Callback's register functions. */
	/* Creating semaphores. */
	BtnPressed_sh = xSemaphoreCreateBinary();
 8000eca:	2203      	movs	r2, #3
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f00b f9aa 	bl	800c228 <xQueueGenericCreate>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <SysTask_Init+0x144>)
 8000ed8:	6013      	str	r3, [r2, #0]
	BtnTimeout_sh = xSemaphoreCreateBinary();
 8000eda:	2203      	movs	r2, #3
 8000edc:	2100      	movs	r1, #0
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f00b f9a2 	bl	800c228 <xQueueGenericCreate>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a49      	ldr	r2, [pc, #292]	; (800100c <SysTask_Init+0x148>)
 8000ee8:	6013      	str	r3, [r2, #0]
	SoftBtnPressed_sh = xSemaphoreCreateBinary();
 8000eea:	2203      	movs	r2, #3
 8000eec:	2100      	movs	r1, #0
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f00b f99a 	bl	800c228 <xQueueGenericCreate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a46      	ldr	r2, [pc, #280]	; (8001010 <SysTask_Init+0x14c>)
 8000ef8:	6013      	str	r3, [r2, #0]
	ClrScreen_sh = xSemaphoreCreateBinary();
 8000efa:	2203      	movs	r2, #3
 8000efc:	2100      	movs	r1, #0
 8000efe:	2001      	movs	r0, #1
 8000f00:	f00b f992 	bl	800c228 <xQueueGenericCreate>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a43      	ldr	r2, [pc, #268]	; (8001014 <SysTask_Init+0x150>)
 8000f08:	6013      	str	r3, [r2, #0]
	DotToggle_sh = xSemaphoreCreateBinary();
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f00b f98a 	bl	800c228 <xQueueGenericCreate>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a40      	ldr	r2, [pc, #256]	; (8001018 <SysTask_Init+0x154>)
 8000f18:	6013      	str	r3, [r2, #0]
	ViewAddr_sh = xSemaphoreCreateBinary();
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f00b f982 	bl	800c228 <xQueueGenericCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a3d      	ldr	r2, [pc, #244]	; (800101c <SysTask_Init+0x158>)
 8000f28:	6013      	str	r3, [r2, #0]

	/* Creating queues. */
	ChLed_qh = xQueueCreate(6, sizeof(LedChData_t));
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	2006      	movs	r0, #6
 8000f30:	f00b f97a 	bl	800c228 <xQueueGenericCreate>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a3a      	ldr	r2, [pc, #232]	; (8001020 <SysTask_Init+0x15c>)
 8000f38:	6013      	str	r3, [r2, #0]
	SetAddr_qh = xQueueCreate(1, sizeof(uint8_t));
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f00b f972 	bl	800c228 <xQueueGenericCreate>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a37      	ldr	r2, [pc, #220]	; (8001024 <SysTask_Init+0x160>)
 8000f48:	6013      	str	r3, [r2, #0]
	DisplayAddr_qh = xQueueCreate(1, sizeof(uint8_t));
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f00b f96a 	bl	800c228 <xQueueGenericCreate>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a34      	ldr	r2, [pc, #208]	; (8001028 <SysTask_Init+0x164>)
 8000f58:	6013      	str	r3, [r2, #0]


	/* Creating timers. */
	ConTimeout_th = xTimerCreate("ConTim", pdMS_TO_TICKS(DEFAULT_CONNECTION_TIMEOUT), osTimerOnce, NULL, ConTimeout_Callback);
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <SysTask_Init+0x168>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	f247 5130 	movw	r1, #30000	; 0x7530
 8000f66:	4832      	ldr	r0, [pc, #200]	; (8001030 <SysTask_Init+0x16c>)
 8000f68:	f00d f8b4 	bl	800e0d4 <xTimerCreate>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <SysTask_Init+0x170>)
 8000f70:	6013      	str	r3, [r2, #0]
	Screen_th = xTimerCreate("ScreenTim", pdMS_TO_TICKS(SCREEN_TIMEOUT), osTimerOnce, NULL, ScreenTim_Callback);
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <SysTask_Init+0x174>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f7e:	482f      	ldr	r0, [pc, #188]	; (800103c <SysTask_Init+0x178>)
 8000f80:	f00d f8a8 	bl	800e0d4 <xTimerCreate>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <SysTask_Init+0x17c>)
 8000f88:	6013      	str	r3, [r2, #0]
	System_th = xTimerCreate("SysTim", pdMS_TO_TICKS(500), osTimerPeriodic, NULL, SysTim_Callback);
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <SysTask_Init+0x180>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <SysTask_Init+0x184>)
 8000f98:	f00d f89c 	bl	800e0d4 <xTimerCreate>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a2b      	ldr	r2, [pc, #172]	; (800104c <SysTask_Init+0x188>)
 8000fa0:	6013      	str	r3, [r2, #0]
	if (System_th != NULL) {
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <SysTask_Init+0x188>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <SysTask_Init+0xfe>
		xTimerStart(System_th, 0);
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <SysTask_Init+0x188>)
 8000fac:	681c      	ldr	r4, [r3, #0]
 8000fae:	f00c fb1b 	bl	800d5e8 <xTaskGetTickCount>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f00d f8e5 	bl	800e18c <xTimerGenericCommand>
	}

	/* Creating tasks. */
	xTaskCreate(Display_Ti, "Display", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &Display_th);
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <SysTask_Init+0x18c>)
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	4921      	ldr	r1, [pc, #132]	; (8001054 <SysTask_Init+0x190>)
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <SysTask_Init+0x194>)
 8000fd2:	f00c f8ab 	bl	800d12c <xTaskCreate>
	xTaskCreate(AddrBtn_Ti, "Btn_Task", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &AddrBtn_th);
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <SysTask_Init+0x198>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	491f      	ldr	r1, [pc, #124]	; (8001060 <SysTask_Init+0x19c>)
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <SysTask_Init+0x1a0>)
 8000fe6:	f00c f8a1 	bl	800d12c <xTaskCreate>
	xTaskCreate(Beep_Ti, "Beep_Task", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &Beep_th);
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <SysTask_Init+0x1a4>)
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	491d      	ldr	r1, [pc, #116]	; (800106c <SysTask_Init+0x1a8>)
 8000ff8:	481d      	ldr	r0, [pc, #116]	; (8001070 <SysTask_Init+0x1ac>)
 8000ffa:	f00c f897 	bl	800d12c <xTaskCreate>
}
 8000ffe:	bf00      	nop
 8001000:	3704      	adds	r7, #4
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000234 	.word	0x20000234
 800100c:	20000238 	.word	0x20000238
 8001010:	2000023c 	.word	0x2000023c
 8001014:	2000022c 	.word	0x2000022c
 8001018:	20000230 	.word	0x20000230
 800101c:	20000228 	.word	0x20000228
 8001020:	20000240 	.word	0x20000240
 8001024:	20000244 	.word	0x20000244
 8001028:	20000248 	.word	0x20000248
 800102c:	0800137d 	.word	0x0800137d
 8001030:	0801cde8 	.word	0x0801cde8
 8001034:	20000260 	.word	0x20000260
 8001038:	08001319 	.word	0x08001319
 800103c:	0801cdf0 	.word	0x0801cdf0
 8001040:	2000025c 	.word	0x2000025c
 8001044:	0800134d 	.word	0x0800134d
 8001048:	0801cdfc 	.word	0x0801cdfc
 800104c:	20000258 	.word	0x20000258
 8001050:	20000250 	.word	0x20000250
 8001054:	0801ce04 	.word	0x0801ce04
 8001058:	08001075 	.word	0x08001075
 800105c:	20000254 	.word	0x20000254
 8001060:	0801ce0c 	.word	0x0801ce0c
 8001064:	08001125 	.word	0x08001125
 8001068:	2000024c 	.word	0x2000024c
 800106c:	0801ce18 	.word	0x0801ce18
 8001070:	08001271 	.word	0x08001271

08001074 <Display_Ti>:

/*
	@brief Display task implementation.
*/
static void Display_Ti(void* const param) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af04      	add	r7, sp, #16
 800107a:	6078      	str	r0, [r7, #4]

	/* Device address variable. */
	uint8_t BoardAddr = 0, PrevAddr = TYPE_UNDEFINED, isWriteDelayed = 0, isFirstPowerUp = 1;
 800107c:	2300      	movs	r3, #0
 800107e:	737b      	strb	r3, [r7, #13]
 8001080:	23ff      	movs	r3, #255	; 0xff
 8001082:	733b      	strb	r3, [r7, #12]
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	2301      	movs	r3, #1
 800108a:	73bb      	strb	r3, [r7, #14]


	/* External memory data. */
	M24128_MEM_DATA_t UserData = {
 800108c:	2300      	movs	r3, #0
 800108e:	723b      	strb	r3, [r7, #8]
 8001090:	2300      	movs	r3, #0
 8001092:	727b      	strb	r3, [r7, #9]
	};

	/* General screen struct instance. */

	/* Software press button for first power up to view current device address. */
	BTN_SWPress();
 8001094:	f009 f822 	bl	800a0dc <BTN_SWPress>

	for (; /*(__)*/;) {

		/* Display the device address. */
		if (xQueueReceive(DisplayAddr_qh, &BoardAddr, 0) == pdPASS) {
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <Display_Ti+0xa0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f107 010d 	add.w	r1, r7, #13
 80010a0:	2200      	movs	r2, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00b fb6e 	bl	800c784 <xQueueReceive>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <Display_Ti+0x4a>

			/* Displaying fixed address on the screen. */
			//TLC592x_Set_Address(&TlcLedScreen0, BoardAddr);

			/* Check address changing. */
			if (BoardAddr != PrevAddr) {
 80010ae:	7b7a      	ldrb	r2, [r7, #13]
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d003      	beq.n	80010be <Display_Ti+0x4a>
				PrevAddr = BoardAddr;
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	733b      	strb	r3, [r7, #12]
				isWriteDelayed = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
			}
		}

		/* Toggle the dot on the LED screen. */
		if (xSemaphoreTake(DotToggle_sh, 0) == pdPASS) {
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <Display_Ti+0xa4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00b fc3d 	bl	800c944 <xQueueSemaphoreTake>
			/* Toggle dot0 on the display. */

		}

		/* Clear display after timeout. */
		if (xSemaphoreTake(ClrScreen_sh, 0) == pdPASS) {
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <Display_Ti+0xa8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00b fc37 	bl	800c944 <xQueueSemaphoreTake>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d1dd      	bne.n	8001098 <Display_Ti+0x24>
			//TLC592x_Clr_Display(&TlcLedScreen0);

			/* EEPROM delayed write handler. */
			if (isWriteDelayed) {
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0da      	beq.n	8001098 <Display_Ti+0x24>
				if (!isFirstPowerUp || PrevAddr == 0) {
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <Display_Ti+0x7a>
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10f      	bne.n	800110e <Display_Ti+0x9a>
					isWriteDelayed = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
					HAL_I2C_Mem_Write(ExtMemI2C, EEP_DATA_ADDR_SHIFTED, UserData.MemAddr, I2C_MEMADD_SIZE_16BIT, &PrevAddr, 1, 10);
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <Display_Ti+0xac>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	893a      	ldrh	r2, [r7, #8]
 80010f8:	230a      	movs	r3, #10
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2310      	movs	r3, #16
 8001108:	21a0      	movs	r1, #160	; 0xa0
 800110a:	f004 fde7 	bl	8005cdc <HAL_I2C_Mem_Write>
				}
				isFirstPowerUp = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	73bb      	strb	r3, [r7, #14]
		if (xQueueReceive(DisplayAddr_qh, &BoardAddr, 0) == pdPASS) {
 8001112:	e7c1      	b.n	8001098 <Display_Ti+0x24>
 8001114:	20000248 	.word	0x20000248
 8001118:	20000230 	.word	0x20000230
 800111c:	2000022c 	.word	0x2000022c
 8001120:	20000018 	.word	0x20000018

08001124 <AddrBtn_Ti>:
}

/*
 * @brief Address button read.
 */
static void AddrBtn_Ti(void* const param) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af04      	add	r7, sp, #16
 800112a:	6078      	str	r0, [r7, #4]

	/* Device address and state (number of how many the button pressed.) */
	uint8_t BoardAddr = 0, PeekAddr = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73bb      	strb	r3, [r7, #14]
 8001130:	2300      	movs	r3, #0
 8001132:	737b      	strb	r3, [r7, #13]
	uint8_t state = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

	/* External memory data. */
	M24128_MEM_DATA_t UserData = {
 8001138:	2300      	movs	r3, #0
 800113a:	723b      	strb	r3, [r7, #8]
 800113c:	2300      	movs	r3, #0
 800113e:	727b      	strb	r3, [r7, #9]
		.BYTE_ADDR = DEV_ADDR_BYTE,
		.PAGE_ADDR = DEV_ADDR_PAGE
	};

	/* Reading saved device address. */
	HAL_I2C_Mem_Read(ExtMemI2C, EEP_DATA_ADDR_SHIFTED, UserData.MemAddr, I2C_MEMADD_SIZE_16BIT, &BoardAddr, 1, 10);
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <AddrBtn_Ti+0x128>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	893a      	ldrh	r2, [r7, #8]
 8001146:	230a      	movs	r3, #10
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f107 030e 	add.w	r3, r7, #14
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2310      	movs	r3, #16
 8001156:	21a0      	movs	r1, #160	; 0xa0
 8001158:	f004 feba 	bl	8005ed0 <HAL_I2C_Mem_Read>

	/* Address error check. */
	if (BoardAddr > MAX_MPCB_NUMBER) {
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d901      	bls.n	8001166 <AddrBtn_Ti+0x42>
		//xTimerChangePeriod(System_th, 50, 0);
		BoardAddr = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	73bb      	strb	r3, [r7, #14]
	}

	for (;/*__*/;) {

		xSemaphoreTake(BtnPressed_sh, portMAX_DELAY);
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <AddrBtn_Ti+0x12c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f04f 31ff 	mov.w	r1, #4294967295
 800116e:	4618      	mov	r0, r3
 8001170:	f00b fbe8 	bl	800c944 <xQueueSemaphoreTake>
		vTaskDelay(150);
 8001174:	2096      	movs	r0, #150	; 0x96
 8001176:	f00c f90b 	bl	800d390 <vTaskDelay>
		#ifndef NO_ADDR_BUTTON
		if (!HAL_GPIO_ReadPin(ADDR_SEL_GPIO_Port, ADDR_SEL_Pin) || xSemaphoreTake(SoftBtnPressed_sh, 0) == pdPASS) {
		#else
		if (xSemaphoreTake(SoftBtnPressed_sh, 0) == pdPASS) {
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <AddrBtn_Ti+0x130>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f00b fbdf 	bl	800c944 <xQueueSemaphoreTake>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d152      	bne.n	8001232 <AddrBtn_Ti+0x10e>
		#endif /* NO_ADDR_BUTTON */
			/* If timeout timer activated we'll give state of variable to zero. */
			if (xSemaphoreTake(BtnTimeout_sh, 0) == pdPASS) { state = 0; }
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <AddrBtn_Ti+0x134>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f00b fbd6 	bl	800c944 <xQueueSemaphoreTake>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <AddrBtn_Ti+0x7e>
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
			if (state == 1) { state = 2; }
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <AddrBtn_Ti+0x88>
 80011a8:	2302      	movs	r3, #2
 80011aa:	73fb      	strb	r3, [r7, #15]
			if (state != 2) { state = 1; }
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d001      	beq.n	80011b6 <AddrBtn_Ti+0x92>
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]

			/* Blocking the multiple address change. */
			if (xSemaphoreTake(ViewAddr_sh, 0) == pdPASS) {
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <AddrBtn_Ti+0x138>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00b fbc1 	bl	800c944 <xQueueSemaphoreTake>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <AddrBtn_Ti+0xa8>
				state = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
			}

			/* Is there a remote address request? */
			if (xQueuePeek(SetAddr_qh, &PeekAddr, 0) == pdPASS) {
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <AddrBtn_Ti+0x13c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f107 010d 	add.w	r1, r7, #13
 80011d4:	2200      	movs	r2, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00b fcc0 	bl	800cb5c <xQueuePeek>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <AddrBtn_Ti+0xc2>
				state = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	73fb      	strb	r3, [r7, #15]

			/**/
			#ifndef NO_ADDR_BUTTON
			do {
			#endif /* NO_ADDR_BUTTON */
				if (state == 2) {
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d117      	bne.n	800121c <AddrBtn_Ti+0xf8>
					/* Check hardware address change lock. */
					if (HAL_GPIO_ReadPin(PCB_ADDR_LOCK_GPIO_Port, PCB_ADDR_LOCK_Pin)) {
 80011ec:	2110      	movs	r1, #16
 80011ee:	481d      	ldr	r0, [pc, #116]	; (8001264 <AddrBtn_Ti+0x140>)
 80011f0:	f004 fbcc 	bl	800598c <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d010      	beq.n	800121c <AddrBtn_Ti+0xf8>
						BoardAddr++;
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3301      	adds	r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	73bb      	strb	r3, [r7, #14]
						/* Remote address change. */
						xQueueReceive(SetAddr_qh, &BoardAddr, 0);
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <AddrBtn_Ti+0x13c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f107 010e 	add.w	r1, r7, #14
 800120a:	2200      	movs	r2, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f00b fab9 	bl	800c784 <xQueueReceive>
						if (BoardAddr > MAX_MPCB_NUMBER) { BoardAddr = 1; }
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d901      	bls.n	800121c <AddrBtn_Ti+0xf8>
 8001218:	2301      	movs	r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
					}
				}
				vTaskDelay(200);
 800121c:	20c8      	movs	r0, #200	; 0xc8
 800121e:	f00c f8b7 	bl	800d390 <vTaskDelay>
				xQueueSendToBack(DisplayAddr_qh, &BoardAddr, 0);
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <AddrBtn_Ti+0x144>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f107 010e 	add.w	r1, r7, #14
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	f00b f883 	bl	800c338 <xQueueGenericSend>
			#ifndef NO_ADDR_BUTTON
			} while (!HAL_GPIO_ReadPin(ADDR_SEL_GPIO_Port, ADDR_SEL_Pin));
			#endif /* NO_ADDR_BUTTON */
		}
		xTimerStart(Screen_th, 0);
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <AddrBtn_Ti+0x148>)
 8001234:	681c      	ldr	r4, [r3, #0]
 8001236:	f00c f9d7 	bl	800d5e8 <xTaskGetTickCount>
 800123a:	4602      	mov	r2, r0
 800123c:	2300      	movs	r3, #0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	2101      	movs	r1, #1
 8001244:	4620      	mov	r0, r4
 8001246:	f00c ffa1 	bl	800e18c <xTimerGenericCommand>
		xSemaphoreTake(BtnPressed_sh, portMAX_DELAY);
 800124a:	e78c      	b.n	8001166 <AddrBtn_Ti+0x42>
 800124c:	20000018 	.word	0x20000018
 8001250:	20000234 	.word	0x20000234
 8001254:	2000023c 	.word	0x2000023c
 8001258:	20000238 	.word	0x20000238
 800125c:	20000228 	.word	0x20000228
 8001260:	20000244 	.word	0x20000244
 8001264:	40021000 	.word	0x40021000
 8001268:	20000248 	.word	0x20000248
 800126c:	2000025c 	.word	0x2000025c

08001270 <Beep_Ti>:


/*
	@brief Sound of MBS, three times beep.
*/
static void Beep_Ti(void* const param) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	for (;/*)_(*/;) {

		/* Beep break connection. */
		if (xSemaphoreTake(ConAborted_sh, 0) == pdPASS) {
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <Beep_Ti+0x9c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f00b fb60 	bl	800c944 <xQueueSemaphoreTake>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11a      	bne.n	80012c0 <Beep_Ti+0x50>
			for (uint8_t i = 3; i > 0; i--) {
 800128a:	2303      	movs	r3, #3
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e014      	b.n	80012ba <Beep_Ti+0x4a>
				HAL_TIM_PWM_Start(BeepTim, TIM_CHANNEL_1);
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <Beep_Ti+0xa0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f006 fb24 	bl	80078e4 <HAL_TIM_PWM_Start>
				vTaskDelay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f00c f877 	bl	800d390 <vTaskDelay>
				HAL_TIM_PWM_Stop(BeepTim, TIM_CHANNEL_1);
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <Beep_Ti+0xa0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 fbe3 	bl	8007a74 <HAL_TIM_PWM_Stop>
				vTaskDelay(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f00c f86e 	bl	800d390 <vTaskDelay>
			for (uint8_t i = 3; i > 0; i--) {
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e7      	bne.n	8001290 <Beep_Ti+0x20>
			}
		}

		/* Beep of successful connection. */
		if (xSemaphoreTake(ConSuccess_sh, 0) == pdPASS) {
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <Beep_Ti+0xa4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00b fb3c 	bl	800c944 <xQueueSemaphoreTake>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d1d2      	bne.n	8001278 <Beep_Ti+0x8>
			for (uint8_t i = 2; i > 0; i--) {
 80012d2:	2302      	movs	r3, #2
 80012d4:	73bb      	strb	r3, [r7, #14]
 80012d6:	e014      	b.n	8001302 <Beep_Ti+0x92>
				HAL_TIM_PWM_Start(BeepTim, TIM_CHANNEL_1);
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <Beep_Ti+0xa0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 fb00 	bl	80078e4 <HAL_TIM_PWM_Start>
				vTaskDelay(100);
 80012e4:	2064      	movs	r0, #100	; 0x64
 80012e6:	f00c f853 	bl	800d390 <vTaskDelay>
				HAL_TIM_PWM_Stop(BeepTim, TIM_CHANNEL_1);
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <Beep_Ti+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fbbf 	bl	8007a74 <HAL_TIM_PWM_Stop>
				vTaskDelay(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f00c f84a 	bl	800d390 <vTaskDelay>
			for (uint8_t i = 2; i > 0; i--) {
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	3b01      	subs	r3, #1
 8001300:	73bb      	strb	r3, [r7, #14]
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e7      	bne.n	80012d8 <Beep_Ti+0x68>
		if (xSemaphoreTake(ConAborted_sh, 0) == pdPASS) {
 8001308:	e7b6      	b.n	8001278 <Beep_Ti+0x8>
 800130a:	bf00      	nop
 800130c:	200006a8 	.word	0x200006a8
 8001310:	20000000 	.word	0x20000000
 8001314:	200006a4 	.word	0x200006a4

08001318 <ScreenTim_Callback>:

/*
	@brief Led timer callback.
*/
static void ScreenTim_Callback(TimerHandle_t xTimer)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(ClrScreen_sh);
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <ScreenTim_Callback+0x2c>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	2300      	movs	r3, #0
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	f00b f805 	bl	800c338 <xQueueGenericSend>
	xSemaphoreGive(BtnTimeout_sh);
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <ScreenTim_Callback+0x30>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	f00a fffe 	bl	800c338 <xQueueGenericSend>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000022c 	.word	0x2000022c
 8001348:	20000238 	.word	0x20000238

0800134c <SysTim_Callback>:

/*
 * @brief System timer callback.
 */
static void SysTim_Callback(TimerHandle_t xTimer) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

	/* Toggling dot on the LED screen. */
	xSemaphoreGive(DotToggle_sh);
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <SysTim_Callback+0x28>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	f00a ffeb 	bl	800c338 <xQueueGenericSend>

	/* Toggling the sys led on the board. */
	HAL_GPIO_TogglePin(SYS_LED_GPIO_Port, SYS_LED_Pin);
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <SysTim_Callback+0x2c>)
 8001368:	f004 fb41 	bl	80059ee <HAL_GPIO_TogglePin>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000230 	.word	0x20000230
 8001378:	40020c00 	.word	0x40020c00

0800137c <ConTimeout_Callback>:

/*
 * @brief Connection timeout timer callback.
 */
static void ConTimeout_Callback(TimerHandle_t xTimer) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(ConAborted_sh);
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <ConTimeout_Callback+0x20>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	2300      	movs	r3, #0
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	f00a ffd3 	bl	800c338 <xQueueGenericSend>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200006a8 	.word	0x200006a8

080013a0 <HAL_GPIO_EXTI_Callback>:
/*
	@brief  EXTI line detection callbacks.
	@param  GPIO_Pin: Specifies the pins connected EXTI line
	@retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_PIN_6 == GPIO_Pin) {
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d105      	bne.n	80013bc <HAL_GPIO_EXTI_Callback+0x1c>
		xSemaphoreGiveFromISR(BtnPressed_sh, NULL);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00b f957 	bl	800c66a <xQueueGiveFromISR>
	}
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000234 	.word	0x20000234

080013c8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_CAN1_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_CAN1_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_CAN1_Init+0x64>)
 80013d4:	2205      	movs	r2, #5
 80013d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_CAN1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_CAN1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_CAN1_Init+0x64>)
 80013e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_CAN1_Init+0x64>)
 80013ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_CAN1_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_CAN1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_CAN1_Init+0x64>)
 8001402:	2201      	movs	r2, #1
 8001404:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_CAN1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_CAN1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_CAN1_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_CAN1_Init+0x64>)
 800141a:	f001 fb4d 	bl	8002ab8 <HAL_CAN_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001424:	f000 fbca 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000264 	.word	0x20000264
 8001430:	40006400 	.word	0x40006400

08001434 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <HAL_CAN_MspInit+0xc4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d14b      	bne.n	80014ee <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_CAN_MspInit+0xc8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148e:	2303      	movs	r3, #3
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800149e:	2309      	movs	r3, #9
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4815      	ldr	r0, [pc, #84]	; (8001500 <HAL_CAN_MspInit+0xcc>)
 80014aa:	f004 f8c3 	bl	8005634 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	2013      	movs	r0, #19
 80014b4:	f002 fa26 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80014b8:	2013      	movs	r0, #19
 80014ba:	f002 fa3f 	bl	800393c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	2014      	movs	r0, #20
 80014c4:	f002 fa1e 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014c8:	2014      	movs	r0, #20
 80014ca:	f002 fa37 	bl	800393c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	2015      	movs	r0, #21
 80014d4:	f002 fa16 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014d8:	2015      	movs	r0, #21
 80014da:	f002 fa2f 	bl	800393c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	2016      	movs	r0, #22
 80014e4:	f002 fa0e 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80014e8:	2016      	movs	r0, #22
 80014ea:	f002 fa27 	bl	800393c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40006400 	.word	0x40006400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020c00 	.word	0x40020c00

08001504 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_CRC_Init+0x20>)
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <MX_CRC_Init+0x24>)
 800150c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_CRC_Init+0x20>)
 8001510:	f002 fa22 	bl	8003958 <HAL_CRC_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800151a:	f000 fb4f 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002c8 	.word	0x200002c8
 8001528:	40023000 	.word	0x40023000

0800152c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_CRC_MspInit+0x3c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10d      	bne.n	800155a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_CRC_MspInit+0x40>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_CRC_MspInit+0x40>)
 8001548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_CRC_MspInit+0x40>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023000 	.word	0x40023000
 800156c:	40023800 	.word	0x40023800

08001570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_DMA_Init+0x3c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <MX_DMA_Init+0x3c>)
 8001580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_DMA_Init+0x3c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2105      	movs	r1, #5
 8001596:	200c      	movs	r0, #12
 8001598:	f002 f9b4 	bl	8003904 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800159c:	200c      	movs	r0, #12
 800159e:	f002 f9cd 	bl	800393c <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_GPIO_Init>:
        * EXTI
     PC9   ------> RCC_MCO_2
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	4b84      	ldr	r3, [pc, #528]	; (80017dc <MX_GPIO_Init+0x22c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a83      	ldr	r2, [pc, #524]	; (80017dc <MX_GPIO_Init+0x22c>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b81      	ldr	r3, [pc, #516]	; (80017dc <MX_GPIO_Init+0x22c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	4b7d      	ldr	r3, [pc, #500]	; (80017dc <MX_GPIO_Init+0x22c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a7c      	ldr	r2, [pc, #496]	; (80017dc <MX_GPIO_Init+0x22c>)
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b7a      	ldr	r3, [pc, #488]	; (80017dc <MX_GPIO_Init+0x22c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b73      	ldr	r3, [pc, #460]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a6e      	ldr	r2, [pc, #440]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <MX_GPIO_Init+0x22c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b68      	ldr	r3, [pc, #416]	; (80017dc <MX_GPIO_Init+0x22c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a67      	ldr	r2, [pc, #412]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b65      	ldr	r3, [pc, #404]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b61      	ldr	r3, [pc, #388]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a60      	ldr	r2, [pc, #384]	; (80017dc <MX_GPIO_Init+0x22c>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b5a      	ldr	r3, [pc, #360]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a59      	ldr	r2, [pc, #356]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a52      	ldr	r2, [pc, #328]	; (80017dc <MX_GPIO_Init+0x22c>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b50      	ldr	r3, [pc, #320]	; (80017dc <MX_GPIO_Init+0x22c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOG, UART7_REDE_Pin|PUMP_OUT_CTRL_Pin|HV_PUMP_LOCK_Pin|RSVD3_Pin
 80016a6:	2200      	movs	r2, #0
 80016a8:	f641 6116 	movw	r1, #7702	; 0x1e16
 80016ac:	484c      	ldr	r0, [pc, #304]	; (80017e0 <MX_GPIO_Init+0x230>)
 80016ae:	f004 f985 	bl	80059bc <HAL_GPIO_WritePin>
	                          |RSVD1_Pin|RSVD0_Pin|CS_DAC0_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(ETH_nRST_GPIO_Port, ETH_nRST_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	484a      	ldr	r0, [pc, #296]	; (80017e4 <MX_GPIO_Init+0x234>)
 80016ba:	f004 f97f 	bl	80059bc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, USART3_REDE_Pin|SYS_LED_Pin|CS_ADC0_3_Pin|RST_ADC0_3_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f242 4103 	movw	r1, #9219	; 0x2403
 80016c4:	4848      	ldr	r0, [pc, #288]	; (80017e8 <MX_GPIO_Init+0x238>)
 80016c6:	f004 f979 	bl	80059bc <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PEPin PEPin */
	  GPIO_InitStruct.Pin = INSW1_Pin|INSW0_Pin;
 80016ca:	2318      	movs	r3, #24
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4841      	ldr	r0, [pc, #260]	; (80017e4 <MX_GPIO_Init+0x234>)
 80016de:	f003 ffa9 	bl	8005634 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
	                           PGPin PGPin PGPin */
	  GPIO_InitStruct.Pin = UART7_REDE_Pin|PUMP_OUT_CTRL_Pin|HV_PUMP_LOCK_Pin|RSVD3_Pin
 80016e2:	f641 6316 	movw	r3, #7702	; 0x1e16
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
	                          |RSVD1_Pin|RSVD0_Pin|CS_DAC0_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4839      	ldr	r0, [pc, #228]	; (80017e0 <MX_GPIO_Init+0x230>)
 80016fc:	f003 ff9a 	bl	8005634 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = ETH_nRST_Pin;
 8001700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(ETH_nRST_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4832      	ldr	r0, [pc, #200]	; (80017e4 <MX_GPIO_Init+0x234>)
 800171a:	f003 ff8b 	bl	8005634 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = USART3_REDE_Pin|SYS_LED_Pin|CS_ADC0_3_Pin|RST_ADC0_3_Pin;
 800171e:	f242 4303 	movw	r3, #9219	; 0x2403
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	482c      	ldr	r0, [pc, #176]	; (80017e8 <MX_GPIO_Init+0x238>)
 8001738:	f003 ff7c 	bl	8005634 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = HVP_CLIM_CMP_Pin;
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001740:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001746:	2301      	movs	r3, #1
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(HVP_CLIM_CMP_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	4823      	ldr	r0, [pc, #140]	; (80017e0 <MX_GPIO_Init+0x230>)
 8001752:	f003 ff6f 	bl	8005634 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	481e      	ldr	r0, [pc, #120]	; (80017ec <MX_GPIO_Init+0x23c>)
 8001774:	f003 ff5e 	bl	8005634 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
	  GPIO_InitStruct.Pin = ALARM_ADC0_Pin|ALARM_ADC1_Pin|ALARM_ADC2_Pin|ALARM_ADC3_Pin;
 8001778:	233c      	movs	r3, #60	; 0x3c
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4816      	ldr	r0, [pc, #88]	; (80017e8 <MX_GPIO_Init+0x238>)
 800178e:	f003 ff51 	bl	8005634 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2105      	movs	r1, #5
 8001796:	2008      	movs	r0, #8
 8001798:	f002 f8b4 	bl	8003904 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800179c:	2008      	movs	r0, #8
 800179e:	f002 f8cd 	bl	800393c <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2105      	movs	r1, #5
 80017a6:	2009      	movs	r0, #9
 80017a8:	f002 f8ac 	bl	8003904 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017ac:	2009      	movs	r0, #9
 80017ae:	f002 f8c5 	bl	800393c <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2105      	movs	r1, #5
 80017b6:	200a      	movs	r0, #10
 80017b8:	f002 f8a4 	bl	8003904 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017bc:	200a      	movs	r0, #10
 80017be:	f002 f8bd 	bl	800393c <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	2017      	movs	r0, #23
 80017c8:	f002 f89c 	bl	8003904 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017cc:	2017      	movs	r0, #23
 80017ce:	f002 f8b5 	bl	800393c <HAL_NVIC_EnableIRQ>

}
 80017d2:	bf00      	nop
 80017d4:	3738      	adds	r7, #56	; 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40021800 	.word	0x40021800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40020000 	.word	0x40020000

080017f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
//  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
//  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
//  hi2c1.Init.OwnAddress2 = 0;
//  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
//  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	  hi2c1.Instance = I2C1;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_I2C1_Init+0x74>)
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <MX_I2C1_Init+0x78>)
 80017f8:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_I2C1_Init+0x74>)
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <MX_I2C1_Init+0x7c>)
 80017fe:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_I2C1_Init+0x74>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_I2C1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_I2C1_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_I2C1_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_I2C1_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_I2C1_Init+0x74>)
 800182e:	f004 f911 	bl	8005a54 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 f9c0 	bl	8001bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800183c:	2100      	movs	r1, #0
 800183e:	4809      	ldr	r0, [pc, #36]	; (8001864 <MX_I2C1_Init+0x74>)
 8001840:	f005 f8c7 	bl	80069d2 <HAL_I2CEx_ConfigAnalogFilter>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800184a:	f000 f9b7 	bl	8001bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800184e:	2100      	movs	r1, #0
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_I2C1_Init+0x74>)
 8001852:	f005 f8fa 	bl	8006a4a <HAL_I2CEx_ConfigDigitalFilter>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800185c:	f000 f9ae 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200002d0 	.word	0x200002d0
 8001868:	40005400 	.word	0x40005400
 800186c:	000186a0 	.word	0x000186a0

08001870 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_I2C2_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <MX_I2C2_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_I2C2_Init+0x74>)
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <MX_I2C2_Init+0x7c>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_I2C2_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_I2C2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_I2C2_Init+0x74>)
 800188e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001892:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_I2C2_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_I2C2_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_I2C2_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_I2C2_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ac:	480d      	ldr	r0, [pc, #52]	; (80018e4 <MX_I2C2_Init+0x74>)
 80018ae:	f004 f8d1 	bl	8005a54 <HAL_I2C_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018b8:	f000 f980 	bl	8001bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <MX_I2C2_Init+0x74>)
 80018c0:	f005 f887 	bl	80069d2 <HAL_I2CEx_ConfigAnalogFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80018ca:	f000 f977 	bl	8001bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_I2C2_Init+0x74>)
 80018d2:	f005 f8ba 	bl	8006a4a <HAL_I2CEx_ConfigDigitalFilter>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80018dc:	f000 f96e 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000324 	.word	0x20000324
 80018e8:	40005800 	.word	0x40005800
 80018ec:	00061a80 	.word	0x00061a80

080018f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_I2C_MspInit+0xe8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12d      	bne.n	800196e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800192e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001934:	2312      	movs	r3, #18
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001940:	2304      	movs	r3, #4
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4825      	ldr	r0, [pc, #148]	; (80019e0 <HAL_I2C_MspInit+0xf0>)
 800194c:	f003 fe72 	bl	8005634 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800195a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800196c:	e030      	b.n	80019d0 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_I2C_MspInit+0xf4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12b      	bne.n	80019d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_I2C_MspInit+0xec>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_I2C_MspInit+0xec>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001994:	2303      	movs	r3, #3
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001998:	2312      	movs	r3, #18
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019a4:	2304      	movs	r3, #4
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	480e      	ldr	r0, [pc, #56]	; (80019e8 <HAL_I2C_MspInit+0xf8>)
 80019b0:	f003 fe40 	bl	8005634 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_I2C_MspInit+0xec>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_I2C_MspInit+0xec>)
 80019be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_I2C_MspInit+0xec>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3730      	adds	r7, #48	; 0x30
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40005400 	.word	0x40005400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40005800 	.word	0x40005800
 80019e8:	40021400 	.word	0x40021400

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f000 fffb 	bl	80029ec <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f859 	bl	8001aac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f7ff fdd9 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fe:	f7ff fdb7 	bl	8001570 <MX_DMA_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8001a02:	f000 fd7d 	bl	8002500 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001a06:	f7ff fef3 	bl	80017f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a0a:	f7ff ff31 	bl	8001870 <MX_I2C2_Init>
  MX_SPI6_Init();
 8001a0e:	f000 f97d 	bl	8001d0c <MX_SPI6_Init>
  MX_SPI3_Init();
 8001a12:	f000 f90f 	bl	8001c34 <MX_SPI3_Init>
  MX_UART7_Init();
 8001a16:	f000 fd49 	bl	80024ac <MX_UART7_Init>
  MX_TIM4_Init();
 8001a1a:	f000 fc75 	bl	8002308 <MX_TIM4_Init>
  MX_CRC_Init();
 8001a1e:	f7ff fd71 	bl	8001504 <MX_CRC_Init>
  MX_RNG_Init();
 8001a22:	f000 f8d1 	bl	8001bc8 <MX_RNG_Init>
  MX_CAN1_Init();
 8001a26:	f7ff fccf 	bl	80013c8 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001a2a:	f000 f939 	bl	8001ca0 <MX_SPI4_Init>

  /* Start up beep. */

  /* Relay debug test. */
#ifdef DEBUG_RELAY_TEST
  HAL_GPIO_WritePin(PUMP_OUT_CTRL_GPIO_Port, PUMP_OUT_CTRL_Pin, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2104      	movs	r1, #4
 8001a32:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <main+0xb8>)
 8001a34:	f003 ffc2 	bl	80059bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HV_PUMP_LOCK_GPIO_Port, HV_PUMP_LOCK_Pin, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	4819      	ldr	r0, [pc, #100]	; (8001aa4 <main+0xb8>)
 8001a3e:	f003 ffbd 	bl	80059bc <HAL_GPIO_WritePin>
#endif

  	for (uint8_t i = 3; i > 0; i--) {
 8001a42:	2303      	movs	r3, #3
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	e014      	b.n	8001a72 <main+0x86>
  		HAL_TIM_PWM_Start(BeepTim, TIM_CHANNEL_1);
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <main+0xbc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f005 ff48 	bl	80078e4 <HAL_TIM_PWM_Start>
  		HAL_Delay(150);
 8001a54:	2096      	movs	r0, #150	; 0x96
 8001a56:	f001 f80b 	bl	8002a70 <HAL_Delay>
  		HAL_TIM_PWM_Stop(BeepTim, TIM_CHANNEL_1);
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <main+0xbc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f006 f807 	bl	8007a74 <HAL_TIM_PWM_Stop>
  		HAL_Delay(150);
 8001a66:	2096      	movs	r0, #150	; 0x96
 8001a68:	f001 f802 	bl	8002a70 <HAL_Delay>
  	for (uint8_t i = 3; i > 0; i--) {
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e7      	bne.n	8001a48 <main+0x5c>
  	}

#ifdef DEBUG_RELAY_TEST
  HAL_GPIO_WritePin(PUMP_OUT_CTRL_GPIO_Port, PUMP_OUT_CTRL_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <main+0xb8>)
 8001a7e:	f003 ff9d 	bl	80059bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HV_PUMP_LOCK_GPIO_Port, HV_PUMP_LOCK_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2110      	movs	r1, #16
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <main+0xb8>)
 8001a88:	f003 ff98 	bl	80059bc <HAL_GPIO_WritePin>
#endif

  	/* Call init function for freertos objects (in freertos.c) */
  	SysTask_Init();
 8001a8c:	f7ff fa1a 	bl	8000ec4 <SysTask_Init>
  	DataExchUART_Init();
 8001a90:	f008 feb8 	bl	800a804 <DataExchUART_Init>
  	DataExchCAN_Init();
 8001a94:	f008 fb36 	bl	800a104 <DataExchCAN_Init>
  	EthernetTask_Init();
 8001a98:	f008 fe8c 	bl	800a7b4 <EthernetTask_Init>

  	/* Start scheduler */
  	osKernelStart();
 8001a9c:	f00a f87b 	bl	800bb96 <osKernelStart>

  	/* We should never get here as control is now taken by the scheduler */
  	while (1) {
 8001aa0:	e7fe      	b.n	8001aa0 <main+0xb4>
 8001aa2:	bf00      	nop
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	20000000 	.word	0x20000000

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	; 0x50
 8001ab0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	2230      	movs	r2, #48	; 0x30
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f019 f93c 	bl	801ad38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <SystemClock_Config+0xe4>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <SystemClock_Config+0xe4>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <SystemClock_Config+0xe4>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <SystemClock_Config+0xe8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <SystemClock_Config+0xe8>)
 8001af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <SystemClock_Config+0xe8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b12:	2302      	movs	r3, #2
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001b20:	23d8      	movs	r3, #216	; 0xd8
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	4618      	mov	r0, r3
 8001b32:	f005 f819 	bl	8006b68 <HAL_RCC_OscConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0x94>
	{
	Error_Handler();
 8001b3c:	f000 f83e 	bl	8001bbc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	*/
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b40:	f004 ffc2 	bl	8006ac8 <HAL_PWREx_EnableOverDrive>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SystemClock_Config+0xa2>
	{
	Error_Handler();
 8001b4a:	f000 f837 	bl	8001bbc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4e:	230f      	movs	r3, #15
 8001b50:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b52:	2302      	movs	r3, #2
 8001b54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b5e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 fa73 	bl	8007058 <HAL_RCC_ClockConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0xd0>
	{
	Error_Handler();
 8001b78:	f000 f820 	bl	8001bbc <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b82:	2000      	movs	r0, #0
 8001b84:	f005 fb4e 	bl	8007224 <HAL_RCC_MCOConfig>
}
 8001b88:	bf00      	nop
 8001b8a:	3750      	adds	r7, #80	; 0x50
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001baa:	f000 ff41 	bl	8002a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40001400 	.word	0x40001400

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_RNG_Init+0x20>)
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <MX_RNG_Init+0x24>)
 8001bd0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_RNG_Init+0x20>)
 8001bd4:	f005 fcba 	bl	800754c <HAL_RNG_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bde:	f7ff ffed 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000378 	.word	0x20000378
 8001bec:	50060800 	.word	0x50060800

08001bf0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_RNG_MspInit+0x3c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10d      	bne.n	8001c1e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RNG_MspInit+0x40>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RNG_MspInit+0x40>)
 8001c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c10:	6353      	str	r3, [r2, #52]	; 0x34
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RNG_MspInit+0x40>)
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	50060800 	.word	0x50060800
 8001c30:	40023800 	.word	0x40023800

08001c34 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi6;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c3a:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <MX_SPI3_Init+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c80:	220a      	movs	r2, #10
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_SPI3_Init+0x64>)
 8001c86:	f005 fc8b 	bl	80075a0 <HAL_SPI_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c90:	f7ff ff94 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000388 	.word	0x20000388
 8001c9c:	40003c00 	.word	0x40003c00

08001ca0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <MX_SPI4_Init+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cec:	220a      	movs	r2, #10
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_SPI4_Init+0x64>)
 8001cf2:	f005 fc55 	bl	80075a0 <HAL_SPI_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001cfc:	f7ff ff5e 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200003e0 	.word	0x200003e0
 8001d08:	40013400 	.word	0x40013400

08001d0c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d12:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <MX_SPI6_Init+0x6c>)
 8001d14:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d1c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_1LINE;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d24:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d5a:	220a      	movs	r2, #10
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_SPI6_Init+0x68>)
 8001d60:	f005 fc1e 	bl	80075a0 <HAL_SPI_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_SPI6_Init+0x62>
  {
    Error_Handler();
 8001d6a:	f7ff ff27 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000438 	.word	0x20000438
 8001d78:	40015400 	.word	0x40015400

08001d7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <HAL_SPI_MspInit+0x150>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12d      	bne.n	8001dfa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a4a      	ldr	r2, [pc, #296]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b48      	ldr	r3, [pc, #288]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001de8:	2306      	movs	r3, #6
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	4838      	ldr	r0, [pc, #224]	; (8001ed4 <HAL_SPI_MspInit+0x158>)
 8001df4:	f003 fc1e 	bl	8005634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001df8:	e064      	b.n	8001ec4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <HAL_SPI_MspInit+0x15c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d12d      	bne.n	8001e60 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e12:	6453      	str	r3, [r2, #68]	; 0x44
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001e3c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	4820      	ldr	r0, [pc, #128]	; (8001edc <HAL_SPI_MspInit+0x160>)
 8001e5a:	f003 fbeb 	bl	8005634 <HAL_GPIO_Init>
}
 8001e5e:	e031      	b.n	8001ec4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI6)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_SPI_MspInit+0x164>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d12c      	bne.n	8001ec4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_SPI_MspInit+0x154>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ea2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_SPI_MspInit+0x168>)
 8001ec0:	f003 fbb8 	bl	8005634 <HAL_GPIO_Init>
}
 8001ec4:	bf00      	nop
 8001ec6:	3738      	adds	r7, #56	; 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40003c00 	.word	0x40003c00
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40013400 	.word	0x40013400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40015400 	.word	0x40015400
 8001ee4:	40021800 	.word	0x40021800

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_MspInit+0x54>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_MspInit+0x54>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_MspInit+0x54>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_MspInit+0x54>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_MspInit+0x54>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_MspInit+0x54>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	210f      	movs	r1, #15
 8001f2a:	f06f 0001 	mvn.w	r0, #1
 8001f2e:	f001 fce9 	bl	8003904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_InitTick+0xe4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a32      	ldr	r2, [pc, #200]	; (8002024 <HAL_InitTick+0xe4>)
 8001f5a:	f043 0320 	orr.w	r3, r3, #32
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_InitTick+0xe4>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f6c:	f107 0210 	add.w	r2, r7, #16
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f005 fab6 	bl	80074e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f86:	f005 fa87 	bl	8007498 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	6378      	str	r0, [r7, #52]	; 0x34
 8001f8c:	e004      	b.n	8001f98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f8e:	f005 fa83 	bl	8007498 <HAL_RCC_GetPCLK1Freq>
 8001f92:	4603      	mov	r3, r0
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_InitTick+0xe8>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_InitTick+0xec>)
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_InitTick+0xf0>)
 8001faa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_InitTick+0xec>)
 8001fae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_InitTick+0xec>)
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_InitTick+0xec>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_InitTick+0xec>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_InitTick+0xec>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001fcc:	4817      	ldr	r0, [pc, #92]	; (800202c <HAL_InitTick+0xec>)
 8001fce:	f005 fb70 	bl	80076b2 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11b      	bne.n	8002018 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001fe0:	4812      	ldr	r0, [pc, #72]	; (800202c <HAL_InitTick+0xec>)
 8001fe2:	f005 fbb5 	bl	8007750 <HAL_TIM_Base_Start_IT>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d111      	bne.n	8002018 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ff4:	2037      	movs	r0, #55	; 0x37
 8001ff6:	f001 fca1 	bl	800393c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d808      	bhi.n	8002012 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002000:	2200      	movs	r2, #0
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	2037      	movs	r0, #55	; 0x37
 8002006:	f001 fc7d 	bl	8003904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_InitTick+0xf4>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e002      	b.n	8002018 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800201c:	4618      	mov	r0, r3
 800201e:	3738      	adds	r7, #56	; 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	431bde83 	.word	0x431bde83
 800202c:	20000490 	.word	0x20000490
 8002030:	40001400 	.word	0x40001400
 8002034:	20000008 	.word	0x20000008

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_ADC0_Pin);
 8002068:	2004      	movs	r0, #4
 800206a:	f003 fcdb 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}

08002072 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_ADC1_Pin);
 8002076:	2008      	movs	r0, #8
 8002078:	f003 fcd4 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_ADC2_Pin);
 8002084:	2010      	movs	r0, #16
 8002086:	f003 fccd 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}

0800208e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_ADC3_Pin);
 8002092:	2020      	movs	r0, #32
 8002094:	f003 fcc6 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HVP_CLIM_CMP_Pin);
 8002098:	2040      	movs	r0, #64	; 0x40
 800209a:	f003 fcc3 	bl	8005a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <DMA1_Stream1_IRQHandler+0x10>)
 80020aa:	f001 fe09 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000060c 	.word	0x2000060c

080020b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <USART3_IRQHandler+0x10>)
 80020be:	f006 fde7 	bl	8008c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000598 	.word	0x20000598

080020cc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <UART7_IRQHandler+0x10>)
 80020d2:	f006 fddd 	bl	8008c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000524 	.word	0x20000524

080020e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <CAN1_TX_IRQHandler+0x10>)
 80020e6:	f001 f90e 	bl	8003306 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000264 	.word	0x20000264

080020f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <CAN1_RX0_IRQHandler+0x10>)
 80020fa:	f001 f904 	bl	8003306 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000264 	.word	0x20000264

08002108 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <CAN1_RX1_IRQHandler+0x10>)
 800210e:	f001 f8fa 	bl	8003306 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000264 	.word	0x20000264

0800211c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <CAN1_SCE_IRQHandler+0x10>)
 8002122:	f001 f8f0 	bl	8003306 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000264 	.word	0x20000264

08002130 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <TIM7_IRQHandler+0x10>)
 8002136:	f005 fd0d 	bl	8007b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000490 	.word	0x20000490

08002144 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <ETH_IRQHandler+0x10>)
 800214a:	f002 fb9d 	bl	8004888 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200008a4 	.word	0x200008a4

08002158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_kill>:

int _kill(int pid, int sig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002172:	f018 fe33 	bl	801addc <__errno>
 8002176:	4603      	mov	r3, r0
 8002178:	2216      	movs	r2, #22
 800217a:	601a      	str	r2, [r3, #0]
  return -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_exit>:

void _exit (int status)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ffe7 	bl	8002168 <_kill>
  while (1) {}    /* Make sure we hang here */
 800219a:	e7fe      	b.n	800219a <_exit+0x12>

0800219c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
  }

  return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e009      	b.n	80021fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf1      	blt.n	80021e8 <_write+0x12>
  }
  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002236:	605a      	str	r2, [r3, #4]
  return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_isatty>:

int _isatty(int file)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f018 fd98 	bl	801addc <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20030000 	.word	0x20030000
 80022d8:	00000800 	.word	0x00000800
 80022dc:	200004d8 	.word	0x200004d8
 80022e0:	2000f458 	.word	0x2000f458

080022e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <SystemInit+0x20>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemInit+0x20>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	; 0x38
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800230e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231c:	f107 0320 	add.w	r3, r7, #32
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
 8002334:	615a      	str	r2, [r3, #20]
 8002336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <MX_TIM4_Init+0xe4>)
 800233a:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <MX_TIM4_Init+0xe8>)
 800233c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 180;
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <MX_TIM4_Init+0xe4>)
 8002340:	22b4      	movs	r2, #180	; 0xb4
 8002342:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <MX_TIM4_Init+0xe4>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 240;
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <MX_TIM4_Init+0xe4>)
 800234c:	22f0      	movs	r2, #240	; 0xf0
 800234e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <MX_TIM4_Init+0xe4>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b25      	ldr	r3, [pc, #148]	; (80023ec <MX_TIM4_Init+0xe4>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800235c:	4823      	ldr	r0, [pc, #140]	; (80023ec <MX_TIM4_Init+0xe4>)
 800235e:	f005 f9a8 	bl	80076b2 <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002368:	f7ff fc28 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002376:	4619      	mov	r1, r3
 8002378:	481c      	ldr	r0, [pc, #112]	; (80023ec <MX_TIM4_Init+0xe4>)
 800237a:	f005 fdb5 	bl	8007ee8 <HAL_TIM_ConfigClockSource>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002384:	f7ff fc1a 	bl	8001bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002388:	4818      	ldr	r0, [pc, #96]	; (80023ec <MX_TIM4_Init+0xe4>)
 800238a:	f005 fa51 	bl	8007830 <HAL_TIM_PWM_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002394:	f7ff fc12 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4619      	mov	r1, r3
 80023a6:	4811      	ldr	r0, [pc, #68]	; (80023ec <MX_TIM4_Init+0xe4>)
 80023a8:	f006 f99e 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80023b2:	f7ff fc03 	bl	8001bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b6:	2360      	movs	r3, #96	; 0x60
 80023b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 120;
 80023ba:	2378      	movs	r3, #120	; 0x78
 80023bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <MX_TIM4_Init+0xe4>)
 80023ce:	f005 fcc9 	bl	8007d64 <HAL_TIM_PWM_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80023d8:	f7ff fbf0 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <MX_TIM4_Init+0xe4>)
 80023de:	f000 f82b 	bl	8002438 <HAL_TIM_MspPostInit>

}
 80023e2:	bf00      	nop
 80023e4:	3738      	adds	r7, #56	; 0x38
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200004dc 	.word	0x200004dc
 80023f0:	40000800 	.word	0x40000800

080023f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_TIM_Base_MspInit+0x3c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10d      	bne.n	8002422 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_TIM_Base_MspInit+0x40>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_TIM_Base_MspInit+0x40>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_TIM_Base_MspInit+0x40>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40000800 	.word	0x40000800
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <HAL_TIM_MspPostInit+0x68>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11e      	bne.n	8002498 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_TIM_MspPostInit+0x70>)
 8002494:	f003 f8ce 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020c00 	.word	0x40020c00

080024ac <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <MX_UART7_Init+0x50>)
 80024b4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024bc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024d2:	220c      	movs	r2, #12
 80024d4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_UART7_Init+0x4c>)
 80024e4:	f006 f990 	bl	8008808 <HAL_UART_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80024ee:	f7ff fb65 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000524 	.word	0x20000524
 80024fc:	40007800 	.word	0x40007800

08002500 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_USART3_UART_Init+0x4c>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <MX_USART3_UART_Init+0x50>)
 8002508:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_USART3_UART_Init+0x4c>)
 800250c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002510:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_USART3_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_USART3_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_USART3_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_USART3_UART_Init+0x4c>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_USART3_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_USART3_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_USART3_UART_Init+0x4c>)
 8002538:	f006 f966 	bl	8008808 <HAL_UART_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002542:	f7ff fb3b 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000598 	.word	0x20000598
 8002550:	40004800 	.word	0x40004800

08002554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	; 0x30
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_UART_MspInit+0x168>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d135      	bne.n	80025e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 8002580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a49      	ldr	r2, [pc, #292]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 800259c:	f043 0310 	orr.w	r3, r3, #16
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = UART7_TX_Pin|UART7_RX_Pin;
 80025ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80025c0:	2308      	movs	r3, #8
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	4619      	mov	r1, r3
 80025ca:	483e      	ldr	r0, [pc, #248]	; (80026c4 <HAL_UART_MspInit+0x170>)
 80025cc:	f003 f832 	bl	8005634 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2105      	movs	r1, #5
 80025d4:	2052      	movs	r0, #82	; 0x52
 80025d6:	f001 f995 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80025da:	2052      	movs	r0, #82	; 0x52
 80025dc:	f001 f9ae 	bl	800393c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025e0:	e068      	b.n	80026b4 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART3)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_UART_MspInit+0x174>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d163      	bne.n	80026b4 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 80025f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fa:	6413      	str	r3, [r2, #64]	; 0x40
 80025fc:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 8002612:	f043 0308 	orr.w	r3, r3, #8
 8002616:	6313      	str	r3, [r2, #48]	; 0x30
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_UART_MspInit+0x16c>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8002624:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002636:	2307      	movs	r3, #7
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	4822      	ldr	r0, [pc, #136]	; (80026cc <HAL_UART_MspInit+0x178>)
 8002642:	f002 fff7 	bl	8005634 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_UART_MspInit+0x180>)
 800264a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 800264e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002652:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 8002662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002666:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 8002676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 8002684:	2200      	movs	r2, #0
 8002686:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 800268a:	f001 f981 	bl	8003990 <HAL_DMA_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8002694:	f7ff fa92 	bl	8001bbc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
 800269e:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <HAL_UART_MspInit+0x17c>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2105      	movs	r1, #5
 80026a8:	2027      	movs	r0, #39	; 0x27
 80026aa:	f001 f92b 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026ae:	2027      	movs	r0, #39	; 0x27
 80026b0:	f001 f944 	bl	800393c <HAL_NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40007800 	.word	0x40007800
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40004800 	.word	0x40004800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	2000060c 	.word	0x2000060c
 80026d4:	40026028 	.word	0x40026028

080026d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002710 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026de:	490e      	ldr	r1, [pc, #56]	; (8002718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026f4:	4c0b      	ldr	r4, [pc, #44]	; (8002724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002702:	f7ff fdef 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002706:	f018 fb6f 	bl	801ade8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270a:	f7ff f96f 	bl	80019ec <main>
  bx  lr    
 800270e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002710:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002718:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800271c:	08020210 	.word	0x08020210
  ldr r2, =_sbss
 8002720:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002724:	2000f458 	.word	0x2000f458

08002728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC_IRQHandler>

0800272a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <LAN8742_RegisterBusIO+0x28>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <LAN8742_RegisterBusIO+0x28>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <LAN8742_RegisterBusIO+0x28>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e014      	b.n	8002782 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d17c      	bne.n	80028a8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e01c      	b.n	8002802 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f107 0208 	add.w	r2, r7, #8
 80027d0:	2112      	movs	r1, #18
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	4798      	blx	r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da03      	bge.n	80027e4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80027dc:	f06f 0304 	mvn.w	r3, #4
 80027e0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80027e2:	e00b      	b.n	80027fc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d105      	bne.n	80027fc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
         break;
 80027fa:	e005      	b.n	8002808 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3301      	adds	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b1f      	cmp	r3, #31
 8002806:	d9df      	bls.n	80027c8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b1f      	cmp	r3, #31
 800280e:	d902      	bls.n	8002816 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002810:	f06f 0302 	mvn.w	r3, #2
 8002814:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d145      	bne.n	80028a8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6810      	ldr	r0, [r2, #0]
 8002824:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002828:	2100      	movs	r1, #0
 800282a:	4798      	blx	r3
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	db37      	blt.n	80028a2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6810      	ldr	r0, [r2, #0]
 800283a:	f107 0208 	add.w	r2, r7, #8
 800283e:	2100      	movs	r1, #0
 8002840:	4798      	blx	r3
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	db28      	blt.n	800289a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4798      	blx	r3
 800284e:	4603      	mov	r3, r0
 8002850:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002852:	e01c      	b.n	800288e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4798      	blx	r3
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002866:	d80e      	bhi.n	8002886 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6810      	ldr	r0, [r2, #0]
 8002870:	f107 0208 	add.w	r2, r7, #8
 8002874:	2100      	movs	r1, #0
 8002876:	4798      	blx	r3
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	da07      	bge.n	800288e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800287e:	f06f 0304 	mvn.w	r3, #4
 8002882:	613b      	str	r3, [r7, #16]
                 break;
 8002884:	e010      	b.n	80028a8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002886:	f06f 0301 	mvn.w	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
               break;
 800288c:	e00c      	b.n	80028a8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1dd      	bne.n	8002854 <LAN8742_Init+0xc6>
 8002898:	e006      	b.n	80028a8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800289a:	f06f 0304 	mvn.w	r3, #4
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	e002      	b.n	80028a8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80028a2:	f06f 0303 	mvn.w	r3, #3
 80028a6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d112      	bne.n	80028d4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	4798      	blx	r3
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80028b8:	bf00      	nop
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4798      	blx	r3
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028cc:	d9f5      	bls.n	80028ba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80028d4:	693b      	ldr	r3, [r7, #16]
 }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6810      	ldr	r0, [r2, #0]
 80028f2:	f107 020c 	add.w	r2, r7, #12
 80028f6:	2101      	movs	r1, #1
 80028f8:	4798      	blx	r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	da02      	bge.n	8002906 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002900:	f06f 0304 	mvn.w	r3, #4
 8002904:	e06e      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6810      	ldr	r0, [r2, #0]
 800290e:	f107 020c 	add.w	r2, r7, #12
 8002912:	2101      	movs	r1, #1
 8002914:	4798      	blx	r3
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	da02      	bge.n	8002922 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800291c:	f06f 0304 	mvn.w	r3, #4
 8002920:	e060      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800292c:	2301      	movs	r3, #1
 800292e:	e059      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6810      	ldr	r0, [r2, #0]
 8002938:	f107 020c 	add.w	r2, r7, #12
 800293c:	2100      	movs	r1, #0
 800293e:	4798      	blx	r3
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	da02      	bge.n	800294c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002946:	f06f 0304 	mvn.w	r3, #4
 800294a:	e04b      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11b      	bne.n	800298e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <LAN8742_GetLinkState+0x90>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800296a:	2302      	movs	r3, #2
 800296c:	e03a      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002978:	2303      	movs	r3, #3
 800297a:	e033      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002986:	2304      	movs	r3, #4
 8002988:	e02c      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800298a:	2305      	movs	r3, #5
 800298c:	e02a      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6810      	ldr	r0, [r2, #0]
 8002996:	f107 020c 	add.w	r2, r7, #12
 800299a:	211f      	movs	r1, #31
 800299c:	4798      	blx	r3
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da02      	bge.n	80029aa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80029a4:	f06f 0304 	mvn.w	r3, #4
 80029a8:	e01c      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80029b4:	2306      	movs	r3, #6
 80029b6:	e015      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 031c 	and.w	r3, r3, #28
 80029be:	2b18      	cmp	r3, #24
 80029c0:	d101      	bne.n	80029c6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80029c2:	2302      	movs	r3, #2
 80029c4:	e00e      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 031c 	and.w	r3, r3, #28
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d101      	bne.n	80029d4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e007      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 031c 	and.w	r3, r3, #28
 80029da:	2b14      	cmp	r3, #20
 80029dc:	d101      	bne.n	80029e2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80029de:	2304      	movs	r3, #4
 80029e0:	e000      	b.n	80029e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80029e2:	2305      	movs	r3, #5
    }				
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <HAL_Init+0x40>)
 80029f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_Init+0x40>)
 8002a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_Init+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_Init+0x40>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a14:	2003      	movs	r0, #3
 8002a16:	f000 ff6a 	bl	80038ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1a:	200f      	movs	r0, #15
 8002a1c:	f7ff fa90 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a20:	f7ff fa62 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	2000066c 	.word	0x2000066c

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	2000066c 	.word	0x2000066c

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000000c 	.word	0x2000000c

08002ab8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e11c      	b.n	8002d04 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d131      	bne.n	8002b3a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a8c      	ldr	r2, [pc, #560]	; (8002d0c <HAL_CAN_Init+0x254>)
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a8c      	ldr	r2, [pc, #560]	; (8002d10 <HAL_CAN_Init+0x258>)
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a8b      	ldr	r2, [pc, #556]	; (8002d14 <HAL_CAN_Init+0x25c>)
 8002ae6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a8b      	ldr	r2, [pc, #556]	; (8002d18 <HAL_CAN_Init+0x260>)
 8002aec:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a8a      	ldr	r2, [pc, #552]	; (8002d1c <HAL_CAN_Init+0x264>)
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <HAL_CAN_Init+0x268>)
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a89      	ldr	r2, [pc, #548]	; (8002d24 <HAL_CAN_Init+0x26c>)
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a89      	ldr	r2, [pc, #548]	; (8002d28 <HAL_CAN_Init+0x270>)
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a88      	ldr	r2, [pc, #544]	; (8002d2c <HAL_CAN_Init+0x274>)
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a88      	ldr	r2, [pc, #544]	; (8002d30 <HAL_CAN_Init+0x278>)
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a87      	ldr	r2, [pc, #540]	; (8002d34 <HAL_CAN_Init+0x27c>)
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a87      	ldr	r2, [pc, #540]	; (8002d38 <HAL_CAN_Init+0x280>)
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a86      	ldr	r2, [pc, #536]	; (8002d3c <HAL_CAN_Init+0x284>)
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a84      	ldr	r2, [pc, #528]	; (8002d40 <HAL_CAN_Init+0x288>)
 8002b30:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4a:	f7ff ff85 	bl	8002a58 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b50:	e012      	b.n	8002b78 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b52:	f7ff ff81 	bl	8002a58 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b0a      	cmp	r3, #10
 8002b5e:	d90b      	bls.n	8002b78 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2205      	movs	r2, #5
 8002b70:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0c5      	b.n	8002d04 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0e5      	beq.n	8002b52 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0202 	bic.w	r2, r2, #2
 8002b94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b96:	f7ff ff5f 	bl	8002a58 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b9c:	e012      	b.n	8002bc4 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b9e:	f7ff ff5b 	bl	8002a58 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b0a      	cmp	r3, #10
 8002baa:	d90b      	bls.n	8002bc4 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e09f      	b.n	8002d04 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e5      	bne.n	8002b9e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7e1b      	ldrb	r3, [r3, #24]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e007      	b.n	8002bfc <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7e5b      	ldrb	r3, [r3, #25]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d108      	bne.n	8002c16 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e9b      	ldrb	r3, [r3, #26]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e007      	b.n	8002c50 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0220 	bic.w	r2, r2, #32
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7edb      	ldrb	r3, [r3, #27]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d108      	bne.n	8002c6a <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0210 	bic.w	r2, r2, #16
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e007      	b.n	8002c7a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0210 	orr.w	r2, r2, #16
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7f1b      	ldrb	r3, [r3, #28]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0208 	orr.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e007      	b.n	8002ca4 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0208 	bic.w	r2, r2, #8
 8002ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7f5b      	ldrb	r3, [r3, #29]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d108      	bne.n	8002cbe <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0204 	orr.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0204 	bic.w	r2, r2, #4
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	ea42 0103 	orr.w	r1, r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08003709 	.word	0x08003709
 8002d10:	0800371d 	.word	0x0800371d
 8002d14:	08003731 	.word	0x08003731
 8002d18:	08003745 	.word	0x08003745
 8002d1c:	08003691 	.word	0x08003691
 8002d20:	080036a5 	.word	0x080036a5
 8002d24:	080036b9 	.word	0x080036b9
 8002d28:	080036cd 	.word	0x080036cd
 8002d2c:	080036e1 	.word	0x080036e1
 8002d30:	080036f5 	.word	0x080036f5
 8002d34:	08003759 	.word	0x08003759
 8002d38:	0800376d 	.word	0x0800376d
 8002d3c:	08003781 	.word	0x08003781
 8002d40:	08001435 	.word	0x08001435

08002d44 <HAL_CAN_RegisterCallback>:
  *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e094      	b.n	8002e96 <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d168      	bne.n	8002e4a <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	2b0e      	cmp	r3, #14
 8002d7c:	d85c      	bhi.n	8002e38 <HAL_CAN_RegisterCallback+0xf4>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_CAN_RegisterCallback+0x40>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002dc1 	.word	0x08002dc1
 8002d88:	08002dc9 	.word	0x08002dc9
 8002d8c:	08002dd1 	.word	0x08002dd1
 8002d90:	08002dd9 	.word	0x08002dd9
 8002d94:	08002de1 	.word	0x08002de1
 8002d98:	08002de9 	.word	0x08002de9
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df9 	.word	0x08002df9
 8002da4:	08002e01 	.word	0x08002e01
 8002da8:	08002e09 	.word	0x08002e09
 8002dac:	08002e11 	.word	0x08002e11
 8002db0:	08002e19 	.word	0x08002e19
 8002db4:	08002e21 	.word	0x08002e21
 8002db8:	08002e29 	.word	0x08002e29
 8002dbc:	08002e31 	.word	0x08002e31
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8002dc6:	e065      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8002dce:	e061      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8002dd6:	e05d      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8002dde:	e059      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8002de6:	e055      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8002dee:	e051      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8002df6:	e04d      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8002dfe:	e049      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002e06:	e045      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8002e0e:	e041      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002e16:	e03d      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002e1e:	e039      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002e26:	e035      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002e2e:	e031      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002e36:	e02d      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
        break;
 8002e48:	e024      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	2b0d      	cmp	r3, #13
 8002e5a:	d002      	beq.n	8002e62 <HAL_CAN_RegisterCallback+0x11e>
 8002e5c:	2b0e      	cmp	r3, #14
 8002e5e:	d004      	beq.n	8002e6a <HAL_CAN_RegisterCallback+0x126>
 8002e60:	e007      	b.n	8002e72 <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002e68:	e014      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002e70:	e010      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
        break;
 8002e82:	e007      	b.n	8002e94 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d12e      	bne.n	8002f16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed0:	f7ff fdc2 	bl	8002a58 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ed6:	e012      	b.n	8002efe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ed8:	f7ff fdbe 	bl	8002a58 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b0a      	cmp	r3, #10
 8002ee4:	d90b      	bls.n	8002efe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e012      	b.n	8002f24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e5      	bne.n	8002ed8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e006      	b.n	8002f24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d003      	beq.n	8002f58 <HAL_CAN_AddTxMessage+0x2c>
 8002f50:	7ffb      	ldrb	r3, [r7, #31]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 80b8 	bne.w	80030c8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a0 	beq.w	80030b8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	0e1b      	lsrs	r3, r3, #24
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d907      	bls.n	8002f98 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e09e      	b.n	80030d6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10d      	bne.n	8002fc6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	6809      	ldr	r1, [r1, #0]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	440b      	add	r3, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e00f      	b.n	8002fe6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3318      	adds	r3, #24
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	440b      	add	r3, r1
 8002fe4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	7d1b      	ldrb	r3, [r3, #20]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d111      	bne.n	8003026 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3318      	adds	r3, #24
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	6811      	ldr	r1, [r2, #0]
 8003016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3318      	adds	r3, #24
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	3304      	adds	r3, #4
 8003024:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3307      	adds	r3, #7
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	061a      	lsls	r2, r3, #24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3306      	adds	r3, #6
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3305      	adds	r3, #5
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	4313      	orrs	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	3204      	adds	r2, #4
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	4610      	mov	r0, r2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	ea43 0200 	orr.w	r2, r3, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	440b      	add	r3, r1
 8003058:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800305c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3303      	adds	r3, #3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	061a      	lsls	r2, r3, #24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3302      	adds	r3, #2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3301      	adds	r3, #1
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	4313      	orrs	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	4610      	mov	r0, r2
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	6811      	ldr	r1, [r2, #0]
 8003084:	ea43 0200 	orr.w	r2, r3, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	440b      	add	r3, r1
 800308e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003092:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3318      	adds	r3, #24
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4413      	add	r3, r2
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3318      	adds	r3, #24
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	440b      	add	r3, r1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e00e      	b.n	80030d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e006      	b.n	80030d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d003      	beq.n	8003106 <HAL_CAN_GetRxMessage+0x24>
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b02      	cmp	r3, #2
 8003102:	f040 80f3 	bne.w	80032ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0e7      	b.n	80032fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0d8      	b.n	80032fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	331b      	adds	r3, #27
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0204 	and.w	r2, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	331b      	adds	r3, #27
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0d5b      	lsrs	r3, r3, #21
 8003176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e00b      	b.n	8003198 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	331b      	adds	r3, #27
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	4413      	add	r3, r2
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	08db      	lsrs	r3, r3, #3
 8003190:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	331b      	adds	r3, #27
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	4413      	add	r3, r2
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0202 	and.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	331b      	adds	r3, #27
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	331b      	adds	r3, #27
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	331b      	adds	r3, #27
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	4413      	add	r3, r2
 8003216:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0a1a      	lsrs	r2, r3, #8
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0c1a      	lsrs	r2, r3, #16
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	3302      	adds	r3, #2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e1a      	lsrs	r2, r3, #24
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	3303      	adds	r3, #3
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	3304      	adds	r3, #4
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0a1a      	lsrs	r2, r3, #8
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3305      	adds	r3, #5
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0c1a      	lsrs	r2, r3, #16
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	3306      	adds	r3, #6
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e1a      	lsrs	r2, r3, #24
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	3307      	adds	r3, #7
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e007      	b.n	80032e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e006      	b.n	80032fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8083 	beq.w	8003454 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d025      	beq.n	80033a4 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	e017      	b.n	80033a4 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	e00d      	b.n	80033a4 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e003      	b.n	80033a4 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d026      	beq.n	80033fc <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
 80033ca:	e017      	b.n	80033fc <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	e00d      	b.n	80033fc <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	e003      	b.n	80033fc <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d026      	beq.n	8003454 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800340e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
 8003422:	e017      	b.n	8003454 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e00d      	b.n	8003454 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e003      	b.n	8003454 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2210      	movs	r2, #16
 80034de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00c      	beq.n	8003504 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2208      	movs	r2, #8
 80034fa:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2210      	movs	r2, #16
 800353e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2208      	movs	r2, #8
 8003562:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07b      	beq.n	800366e <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d072      	beq.n	8003666 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d043      	beq.n	8003666 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03e      	beq.n	8003666 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ee:	2b60      	cmp	r3, #96	; 0x60
 80035f0:	d02b      	beq.n	800364a <HAL_CAN_IRQHandler+0x344>
 80035f2:	2b60      	cmp	r3, #96	; 0x60
 80035f4:	d82e      	bhi.n	8003654 <HAL_CAN_IRQHandler+0x34e>
 80035f6:	2b50      	cmp	r3, #80	; 0x50
 80035f8:	d022      	beq.n	8003640 <HAL_CAN_IRQHandler+0x33a>
 80035fa:	2b50      	cmp	r3, #80	; 0x50
 80035fc:	d82a      	bhi.n	8003654 <HAL_CAN_IRQHandler+0x34e>
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d019      	beq.n	8003636 <HAL_CAN_IRQHandler+0x330>
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d826      	bhi.n	8003654 <HAL_CAN_IRQHandler+0x34e>
 8003606:	2b30      	cmp	r3, #48	; 0x30
 8003608:	d010      	beq.n	800362c <HAL_CAN_IRQHandler+0x326>
 800360a:	2b30      	cmp	r3, #48	; 0x30
 800360c:	d822      	bhi.n	8003654 <HAL_CAN_IRQHandler+0x34e>
 800360e:	2b10      	cmp	r3, #16
 8003610:	d002      	beq.n	8003618 <HAL_CAN_IRQHandler+0x312>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d005      	beq.n	8003622 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003616:	e01d      	b.n	8003654 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f043 0308 	orr.w	r3, r3, #8
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003620:	e019      	b.n	8003656 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800362a:	e014      	b.n	8003656 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f043 0320 	orr.w	r3, r3, #32
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003634:	e00f      	b.n	8003656 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800363e:	e00a      	b.n	8003656 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003648:	e005      	b.n	8003656 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003652:	e000      	b.n	8003656 <HAL_CAN_IRQHandler+0x350>
            break;
 8003654:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003664:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2204      	movs	r2, #4
 800366c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003688:	bf00      	nop
 800368a:	3728      	adds	r7, #40	; 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <__NVIC_GetPriorityGrouping+0x18>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0307 	and.w	r3, r3, #7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	db0b      	blt.n	8003822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <__NVIC_EnableIRQ+0x38>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2001      	movs	r0, #1
 800381a:	fa00 f202 	lsl.w	r2, r0, r2
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	; (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	; (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f1c3 0307 	rsb	r3, r3, #7
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf28      	it	cs
 80038a6:	2304      	movcs	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <NVIC_EncodePriority+0x30>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b03      	subs	r3, #3
 80038b6:	e000      	b.n	80038ba <NVIC_EncodePriority+0x32>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43d9      	mvns	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	4313      	orrs	r3, r2
         );
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff4c 	bl	8003794 <__NVIC_SetPriorityGrouping>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003916:	f7ff ff61 	bl	80037dc <__NVIC_GetPriorityGrouping>
 800391a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f7ff ffb1 	bl	8003888 <NVIC_EncodePriority>
 8003926:	4602      	mov	r2, r0
 8003928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff80 	bl	8003834 <__NVIC_SetPriority>
}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff54 	bl	80037f8 <__NVIC_EnableIRQ>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00e      	b.n	8003988 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	795b      	ldrb	r3, [r3, #5]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fdd6 	bl	800152c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff f85c 	bl	8002a58 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e099      	b.n	8003ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039cc:	e00f      	b.n	80039ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ce:	f7ff f843 	bl	8002a58 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d908      	bls.n	80039ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e078      	b.n	8003ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e8      	bne.n	80039ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_DMA_Init+0x158>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d107      	bne.n	8003a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4313      	orrs	r3, r2
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d117      	bne.n	8003ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb01 	bl	800409c <DMA_CheckFifoParam>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fab8 	bl	8004030 <DMA_CalcBaseAndBitshift>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	223f      	movs	r2, #63	; 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	f010803f 	.word	0xf010803f

08003aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_DMA_Start_IT+0x26>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e040      	b.n	8003b94 <HAL_DMA_Start_IT+0xa8>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d12f      	bne.n	8003b86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa4a 	bl	8003fd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	223f      	movs	r2, #63	; 0x3f
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0216 	orr.w	r2, r2, #22
 8003b5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e005      	b.n	8003b92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003baa:	f7fe ff55 	bl	8002a58 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d008      	beq.n	8003bce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e052      	b.n	8003c74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0216 	bic.w	r2, r2, #22
 8003bdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_DMA_Abort+0x62>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0208 	bic.w	r2, r2, #8
 8003c0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1e:	e013      	b.n	8003c48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c20:	f7fe ff1a 	bl	8002a58 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d90c      	bls.n	8003c48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e015      	b.n	8003c74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e4      	bne.n	8003c20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5a:	223f      	movs	r2, #63	; 0x3f
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00c      	b.n	8003cb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ccc:	4b8e      	ldr	r3, [pc, #568]	; (8003f08 <HAL_DMA_IRQHandler+0x248>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a8e      	ldr	r2, [pc, #568]	; (8003f0c <HAL_DMA_IRQHandler+0x24c>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2208      	movs	r2, #8
 8003cec:	409a      	lsls	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01a      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2208      	movs	r2, #8
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	2201      	movs	r2, #1
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2201      	movs	r2, #1
 8003d50:	409a      	lsls	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	2204      	movs	r2, #4
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d012      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2204      	movs	r2, #4
 8003d86:	409a      	lsls	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d043      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03c      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2210      	movs	r2, #16
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d024      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e01f      	b.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01b      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
 8003e00:	e016      	b.n	8003e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0208 	bic.w	r2, r2, #8
 8003e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	2220      	movs	r2, #32
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 808f 	beq.w	8003f60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8087 	beq.w	8003f60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2220      	movs	r2, #32
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d136      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0216 	bic.w	r2, r2, #22
 8003e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x1da>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d07e      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
        }
        return;
 8003ed6:	e079      	b.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d031      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
 8003f04:	e02c      	b.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
 8003f06:	bf00      	nop
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e01e      	b.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10f      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0210 	bic.w	r2, r2, #16
 8003f3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d032      	beq.n	8003fce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2205      	movs	r2, #5
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d307      	bcc.n	8003fa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f2      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x2cc>
 8003fa6:	e000      	b.n	8003faa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e000      	b.n	8003fce <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fcc:	bf00      	nop
    }
  }
}
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d108      	bne.n	8004014 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004012:	e007      	b.n	8004024 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	3b10      	subs	r3, #16
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <DMA_CalcBaseAndBitshift+0x64>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <DMA_CalcBaseAndBitshift+0x68>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d909      	bls.n	8004072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	659a      	str	r2, [r3, #88]	; 0x58
 8004070:	e007      	b.n	8004082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	aaaaaaab 	.word	0xaaaaaaab
 8004098:	0801fce4 	.word	0x0801fce4

0800409c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11f      	bne.n	80040f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d856      	bhi.n	800416a <DMA_CheckFifoParam+0xce>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <DMA_CheckFifoParam+0x28>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040e7 	.word	0x080040e7
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	0800416b 	.word	0x0800416b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d046      	beq.n	800416e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e043      	b.n	800416e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ee:	d140      	bne.n	8004172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e03d      	b.n	8004172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fe:	d121      	bne.n	8004144 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d837      	bhi.n	8004176 <DMA_CheckFifoParam+0xda>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <DMA_CheckFifoParam+0x70>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004123 	.word	0x08004123
 8004114:	0800411d 	.word	0x0800411d
 8004118:	08004135 	.word	0x08004135
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e030      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d025      	beq.n	800417a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004132:	e022      	b.n	800417a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413c:	d11f      	bne.n	800417e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004142:	e01c      	b.n	800417e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d903      	bls.n	8004152 <DMA_CheckFifoParam+0xb6>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d003      	beq.n	8004158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004150:	e018      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      break;
 8004156:	e015      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e00b      	b.n	8004182 <DMA_CheckFifoParam+0xe6>
      break;
 800416a:	bf00      	nop
 800416c:	e00a      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
 8004170:	e008      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
 8004174:	e006      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;   
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
    }
  } 
  
  return status; 
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06c      	b.n	8004280 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2223      	movs	r2, #35	; 0x23
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f007 f8d7 	bl	800b36c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_ETH_Init+0xf4>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4a30      	ldr	r2, [pc, #192]	; (8004288 <HAL_ETH_Init+0xf4>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	; 0x44
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_ETH_Init+0xf4>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80041da:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_ETH_Init+0xf8>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a2b      	ldr	r2, [pc, #172]	; (800428c <HAL_ETH_Init+0xf8>)
 80041e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <HAL_ETH_Init+0xf8>)
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4927      	ldr	r1, [pc, #156]	; (800428c <HAL_ETH_Init+0xf8>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <HAL_ETH_Init+0xf8>)
 80041f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800420e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004210:	f7fe fc22 	bl	8002a58 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004216:	e011      	b.n	800423c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004218:	f7fe fc1e 	bl	8002a58 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004226:	d909      	bls.n	800423c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	22e0      	movs	r2, #224	; 0xe0
 8004234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e021      	b.n	8004280 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e4      	bne.n	8004218 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 ff4a 	bl	80050e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fff1 	bl	800523c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f001 f847 	bl	80052ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	461a      	mov	r2, r3
 8004266:	2100      	movs	r1, #0
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 ffaf 	bl	80051cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2210      	movs	r2, #16
 800427a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	40013800 	.word	0x40013800

08004290 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d17f      	bne.n	80043a2 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2223      	movs	r2, #35	; 0x23
 80042a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80042e8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2204      	movs	r2, #4
 80042f0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f9f8 	bl	80046e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0208 	orr.w	r2, r2, #8
 8004306:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004310:	2001      	movs	r0, #1
 8004312:	f7fe fbad 	bl	8002a70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0204 	orr.w	r2, r2, #4
 800432c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004336:	2001      	movs	r0, #1
 8004338:	f7fe fb9a 	bl	8002a70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fd70 	bl	8004e2a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800435c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004360:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	f043 0302 	orr.w	r3, r3, #2
 8004374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004378:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800438c:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004390:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004394:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2223      	movs	r2, #35	; 0x23
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ba:	2b23      	cmp	r3, #35	; 0x23
 80043bc:	d170      	bne.n	80044a0 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2223      	movs	r2, #35	; 0x23
 80043c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80043d8:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80043dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043f8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f023 0302 	bic.w	r3, r3, #2
 800440c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004410:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0204 	bic.w	r2, r2, #4
 8004420:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800442a:	2001      	movs	r0, #1
 800442c:	f7fe fb20 	bl	8002a70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fcf6 	bl	8004e2a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0208 	bic.w	r2, r2, #8
 800444c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004456:	2001      	movs	r0, #1
 8004458:	f7fe fb0a 	bl	8002a70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e00e      	b.n	8004488 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	3212      	adds	r2, #18
 8004470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004474:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3301      	adds	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d9ed      	bls.n	800446a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2210      	movs	r2, #16
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
  }
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e045      	b.n	800455a <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d4:	2b23      	cmp	r3, #35	; 0x23
 80044d6:	d13f      	bne.n	8004558 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80044e0:	2201      	movs	r2, #1
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 ff6f 	bl	80053c8 <ETH_Prepare_Tx_Descriptors>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e02a      	b.n	800455a <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004504:	f3bf 8f4f 	dsb	sy
}
 8004508:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	2b03      	cmp	r3, #3
 800451a:	d904      	bls.n	8004526 <HAL_ETH_Transmit_IT+0x7c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	1f1a      	subs	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	461a      	mov	r2, r3
 8004542:	2304      	movs	r3, #4
 8004544:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b088      	sub	sp, #32
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f043 0201 	orr.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0a8      	b.n	80046e0 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	2b23      	cmp	r3, #35	; 0x23
 8004596:	d001      	beq.n	800459c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0a1      	b.n	80046e0 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	3212      	adds	r2, #18
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	f1c3 0304 	rsb	r3, r3, #4
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80045b8:	e06a      	b.n	8004690 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <HAL_ETH_ReadData+0x88>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d040      	beq.n	800466c <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00c      	beq.n	800462e <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800461e:	3b04      	subs	r3, #4
 8004620:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004646:	461a      	mov	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f006 ffa4 	bl	800b598 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2200      	movs	r2, #0
 800466a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3301      	adds	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d902      	bls.n	800467e <HAL_ETH_ReadData+0x11c>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3b04      	subs	r3, #4
 800467c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	3212      	adds	r2, #18
 8004684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004688:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3301      	adds	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004694:	2b00      	cmp	r3, #0
 8004696:	db06      	blt.n	80046a6 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	d202      	bcs.n	80046a6 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d089      	beq.n	80045ba <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f814 	bl	80046e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80046f4:	2301      	movs	r3, #1
 80046f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	3212      	adds	r2, #18
 8004704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004708:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004710:	e040      	b.n	8004794 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d112      	bne.n	8004740 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800471a:	f107 030c 	add.w	r3, r7, #12
 800471e:	4618      	mov	r0, r3
 8004720:	f006 ff0a 	bl	800b538 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	74fb      	strb	r3, [r7, #19]
 800472e:	e007      	b.n	8004740 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	461a      	mov	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d026      	beq.n	8004794 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <ETH_UpdateDescriptor+0xe4>)
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	e003      	b.n	800475e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800475c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800475e:	f3bf 8f5f 	dmb	sy
}
 8004762:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	3301      	adds	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d902      	bls.n	8004782 <ETH_UpdateDescriptor+0x9a>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3b04      	subs	r3, #4
 8004780:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	3212      	adds	r2, #18
 8004788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478c:	617b      	str	r3, [r7, #20]
      desccount--;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3b01      	subs	r3, #1
 8004792:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <ETH_UpdateDescriptor+0xb8>
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1b8      	bne.n	8004712 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d00c      	beq.n	80047c4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80047c4:	bf00      	nop
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	800045f4 	.word	0x800045f4

080047d0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3318      	adds	r3, #24
 80047dc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80047ee:	e03f      	b.n	8004870 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	3304      	adds	r3, #4
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3301      	adds	r3, #1
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004818:	7bbb      	ldrb	r3, [r7, #14]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d028      	beq.n	8004870 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	440b      	add	r3, r1
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db1b      	blt.n	800486c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3304      	adds	r3, #4
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	f006 fee9 	bl	800b618 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3304      	adds	r3, #4
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3301      	adds	r3, #1
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
 800486a:	e001      	b.n	8004870 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_ETH_ReleaseTxPacket+0xac>
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1b9      	bne.n	80047f0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d112      	bne.n	80048c8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d109      	bne.n	80048c8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048bc:	461a      	mov	r2, r3
 80048be:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <HAL_ETH_IRQHandler+0x178>)
 80048c0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f006 fe00 	bl	800b4c8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d113      	bne.n	8004902 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10a      	bne.n	8004902 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	461a      	mov	r2, r3
 80048f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80048fa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f006 fdf3 	bl	800b4e8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004914:	d14c      	bne.n	80049b0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004928:	d142      	bne.n	80049b0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f043 0208 	orr.w	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494c:	d11a      	bne.n	8004984 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	4b2a      	ldr	r3, [pc, #168]	; (8004a04 <HAL_ETH_IRQHandler+0x17c>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004978:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	22e0      	movs	r2, #224	; 0xe0
 800497e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004982:	e012      	b.n	80049aa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	f248 6380 	movw	r3, #34432	; 0x8680
 8004992:	4013      	ands	r3, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	461a      	mov	r2, r3
 80049a4:	f248 6380 	movw	r3, #34432	; 0x8680
 80049a8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f006 fdac 	bl	800b508 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d10e      	bne.n	80049dc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f81c 	bl	8004a0c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_ETH_IRQHandler+0x180>)
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_ETH_IRQHandler+0x180>)
 80049ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80049ee:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f815 	bl	8004a20 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	00010040 	.word	0x00010040
 8004a04:	007e2000 	.word	0x007e2000
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 031c 	and.w	r3, r3, #28
 8004a50:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	02db      	lsls	r3, r3, #11
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	019b      	lsls	r3, r3, #6
 8004a62:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0302 	bic.w	r3, r3, #2
 8004a72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004a84:	f7fd ffe8 	bl	8002a58 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a8a:	e00d      	b.n	8004aa8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004a8c:	f7fd ffe4 	bl	8002a58 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9a:	d301      	bcc.n	8004aa0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e010      	b.n	8004ac2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ec      	bne.n	8004a8c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 031c 	and.w	r3, r3, #28
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	02db      	lsls	r3, r3, #11
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	019b      	lsls	r3, r3, #6
 8004af8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b24:	f7fd ff98 	bl	8002a58 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b2a:	e00d      	b.n	8004b48 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004b2c:	f7fd ff94 	bl	8002a58 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3a:	d301      	bcc.n	8004b40 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e009      	b.n	8004b54 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ec      	bne.n	8004b2c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0d9      	b.n	8004d24 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e00b      	b.n	8004d5c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d105      	bne.n	8004d5a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f88f 	bl	8004e74 <ETH_SetMACConfig>

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 031c 	bic.w	r3, r3, #28
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004d7c:	f002 fb80 	bl	8007480 <HAL_RCC_GetHCLKFreq>
 8004d80:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <HAL_ETH_SetMDIOClockRange+0x98>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d908      	bls.n	8004d9c <HAL_ETH_SetMDIOClockRange+0x38>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d804      	bhi.n	8004d9c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f043 0308 	orr.w	r3, r3, #8
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e027      	b.n	8004dec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d908      	bls.n	8004db6 <HAL_ETH_SetMDIOClockRange+0x52>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d204      	bcs.n	8004db6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f043 030c 	orr.w	r3, r3, #12
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e01a      	b.n	8004dec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d303      	bcc.n	8004dc6 <HAL_ETH_SetMDIOClockRange+0x62>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d911      	bls.n	8004dea <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d908      	bls.n	8004de0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d804      	bhi.n	8004de0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e005      	b.n	8004dec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f043 0310 	orr.w	r3, r3, #16
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e000      	b.n	8004dec <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004dea:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	611a      	str	r2, [r3, #16]
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	01312cff 	.word	0x01312cff
 8004e00:	02160ebf 	.word	0x02160ebf
 8004e04:	03938700 	.word	0x03938700
 8004e08:	05f5e0ff 	.word	0x05f5e0ff
 8004e0c:	08f0d17f 	.word	0x08f0d17f

08004e10 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e4c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f7fd fe08 	bl	8002a70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e6a:	6193      	str	r3, [r2, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <ETH_SetMACConfig+0x15c>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	7c1b      	ldrb	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <ETH_SetMACConfig+0x28>
 8004e96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e9a:	e000      	b.n	8004e9e <ETH_SetMACConfig+0x2a>
 8004e9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	7c5b      	ldrb	r3, [r3, #17]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <ETH_SetMACConfig+0x38>
 8004ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004eaa:	e000      	b.n	8004eae <ETH_SetMACConfig+0x3a>
 8004eac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004eae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004eb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	7fdb      	ldrb	r3, [r3, #31]
 8004eba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004ebc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004ec2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	7f92      	ldrb	r2, [r2, #30]
 8004ec8:	2a00      	cmp	r2, #0
 8004eca:	d102      	bne.n	8004ed2 <ETH_SetMACConfig+0x5e>
 8004ecc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ed0:	e000      	b.n	8004ed4 <ETH_SetMACConfig+0x60>
 8004ed2:	2200      	movs	r2, #0
                        macconf->Speed |
 8004ed4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	7f1b      	ldrb	r3, [r3, #28]
 8004eda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004edc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ee2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	791b      	ldrb	r3, [r3, #4]
 8004ee8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004eea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d102      	bne.n	8004efc <ETH_SetMACConfig+0x88>
 8004ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004efa:	e000      	b.n	8004efe <ETH_SetMACConfig+0x8a>
 8004efc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004efe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	7bdb      	ldrb	r3, [r3, #15]
 8004f04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f16:	4313      	orrs	r3, r2
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f7fd fd9e 	bl	8002a70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	d101      	bne.n	8004f62 <ETH_SetMACConfig+0xee>
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	e000      	b.n	8004f64 <ETH_SetMACConfig+0xf0>
 8004f62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f64:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	d101      	bne.n	8004f7a <ETH_SetMACConfig+0x106>
 8004f76:	2208      	movs	r2, #8
 8004f78:	e000      	b.n	8004f7c <ETH_SetMACConfig+0x108>
 8004f7a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004f7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004f84:	2a01      	cmp	r2, #1
 8004f86:	d101      	bne.n	8004f8c <ETH_SetMACConfig+0x118>
 8004f88:	2204      	movs	r2, #4
 8004f8a:	e000      	b.n	8004f8e <ETH_SetMACConfig+0x11a>
 8004f8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004f96:	2a01      	cmp	r2, #1
 8004f98:	d101      	bne.n	8004f9e <ETH_SetMACConfig+0x12a>
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	e000      	b.n	8004fa0 <ETH_SetMACConfig+0x12c>
 8004f9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f7fd fd59 	bl	8002a70 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	ff20810f 	.word	0xff20810f

08004fd4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <ETH_SetDMAConfig+0x110>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	7b1b      	ldrb	r3, [r3, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <ETH_SetDMAConfig+0x2c>
 8004ffa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ffe:	e000      	b.n	8005002 <ETH_SetDMAConfig+0x2e>
 8005000:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	7b5b      	ldrb	r3, [r3, #13]
 8005006:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005008:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	7f52      	ldrb	r2, [r2, #29]
 800500e:	2a00      	cmp	r2, #0
 8005010:	d102      	bne.n	8005018 <ETH_SetDMAConfig+0x44>
 8005012:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005016:	e000      	b.n	800501a <ETH_SetDMAConfig+0x46>
 8005018:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800501a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	7b9b      	ldrb	r3, [r3, #14]
 8005020:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005022:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005028:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	7f1b      	ldrb	r3, [r3, #28]
 800502e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005030:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	7f9b      	ldrb	r3, [r3, #30]
 8005036:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005038:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800503e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005046:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005048:	4313      	orrs	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	461a      	mov	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800506a:	2001      	movs	r0, #1
 800506c:	f7fd fd00 	bl	8002a70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005078:	461a      	mov	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	791b      	ldrb	r3, [r3, #4]
 8005082:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005088:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800508e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005094:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800509c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800509e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80050a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80050ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7fd fcd1 	bl	8002a70 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d6:	461a      	mov	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	f8de3f23 	.word	0xf8de3f23

080050e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b0a6      	sub	sp, #152	; 0x98
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80050fc:	2300      	movs	r3, #0
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005124:	2300      	movs	r3, #0
 8005126:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800512e:	2300      	movs	r3, #0
 8005130:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800514a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005154:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800515c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fe86 	bl	8004e74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005168:	2301      	movs	r3, #1
 800516a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800516c:	2301      	movs	r3, #1
 800516e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005176:	2301      	movs	r3, #1
 8005178:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800518a:	2300      	movs	r3, #0
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005194:	2301      	movs	r3, #1
 8005196:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800519c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800519e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff08 	bl	8004fd4 <ETH_SetDMAConfig>
}
 80051c4:	bf00      	nop
 80051c6:	3798      	adds	r7, #152	; 0x98
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3305      	adds	r3, #5
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	3204      	adds	r2, #4
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <ETH_MACAddressConfig+0x68>)
 80051ee:	4413      	add	r3, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3303      	adds	r3, #3
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	061a      	lsls	r2, r3, #24
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3302      	adds	r3, #2
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	4313      	orrs	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <ETH_MACAddressConfig+0x6c>)
 800521e:	4413      	add	r3, r2
 8005220:	461a      	mov	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6013      	str	r3, [r2, #0]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40028040 	.word	0x40028040
 8005238:	40028044 	.word	0x40028044

0800523c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e03e      	b.n	80052c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	440b      	add	r3, r1
 800525a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2200      	movs	r2, #0
 8005272:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	3206      	adds	r2, #6
 800527c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d80c      	bhi.n	80052ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68d9      	ldr	r1, [r3, #12]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e004      	b.n	80052b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d9bd      	bls.n	800524a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e0:	611a      	str	r2, [r3, #16]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e046      	b.n	800538a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6919      	ldr	r1, [r3, #16]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	440b      	add	r3, r1
 800530c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005338:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005340:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	3212      	adds	r2, #18
 8005356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d80c      	bhi.n	800537a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6919      	ldr	r1, [r3, #16]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	461a      	mov	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e004      	b.n	8005384 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d9b5      	bls.n	80052fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ba:	60da      	str	r2, [r3, #12]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b08d      	sub	sp, #52	; 0x34
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3318      	adds	r3, #24
 80053d8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540a:	d007      	beq.n	800541c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	3304      	adds	r3, #4
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800541c:	2302      	movs	r3, #2
 800541e:	e103      	b.n	8005628 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	3301      	adds	r3, #1
 8005424:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005438:	f023 031f 	bic.w	r3, r3, #31
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	6852      	ldr	r2, [r2, #4]
 8005440:	431a      	orrs	r2, r3
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	431a      	orrs	r2, r3
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	431a      	orrs	r2, r3
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80054a6:	f3bf 8f5f 	dmb	sy
}
 80054aa:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80054b8:	e084      	b.n	80055c4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e005      	b.n	80054e6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	3301      	adds	r3, #1
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d902      	bls.n	80054f8 <ETH_Prepare_Tx_Descriptors+0x130>
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	3b04      	subs	r3, #4
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005500:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551a:	d007      	beq.n	800552c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	3304      	adds	r3, #4
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d029      	beq.n	8005580 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800553a:	2300      	movs	r3, #0
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 800553e:	e019      	b.n	8005574 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8005540:	f3bf 8f5f 	dmb	sy
}
 8005544:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	3301      	adds	r3, #1
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	2b03      	cmp	r3, #3
 800555c:	d902      	bls.n	8005564 <ETH_Prepare_Tx_Descriptors+0x19c>
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	3b04      	subs	r3, #4
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	3301      	adds	r3, #1
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	429a      	cmp	r2, r3
 800557a:	d3e1      	bcc.n	8005540 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	e053      	b.n	8005628 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	3301      	adds	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800559e:	f023 031f 	bic.w	r3, r3, #31
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	6852      	ldr	r2, [r2, #4]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80055b2:	f3bf 8f5f 	dmb	sy
}
 80055b6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f47f af76 	bne.w	80054ba <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d006      	beq.n	80055e2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e005      	b.n	80055ee <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fe:	6979      	ldr	r1, [r7, #20]
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	3304      	adds	r3, #4
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005610:	b672      	cpsid	i
}
 8005612:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	4413      	add	r3, r2
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005622:	b662      	cpsie	i
}
 8005624:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3734      	adds	r7, #52	; 0x34
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e177      	b.n	8005940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005650:	2201      	movs	r2, #1
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	429a      	cmp	r2, r3
 800566a:	f040 8166 	bne.w	800593a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d005      	beq.n	8005686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005682:	2b02      	cmp	r3, #2
 8005684:	d130      	bne.n	80056e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2203      	movs	r2, #3
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056bc:	2201      	movs	r2, #1
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 0201 	and.w	r2, r3, #1
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4313      	orrs	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d017      	beq.n	8005724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d123      	bne.n	8005778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	08da      	lsrs	r2, r3, #3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3208      	adds	r2, #8
 8005738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	220f      	movs	r2, #15
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	08da      	lsrs	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3208      	adds	r2, #8
 8005772:	69b9      	ldr	r1, [r7, #24]
 8005774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0203 	and.w	r2, r3, #3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80c0 	beq.w	800593a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b66      	ldr	r3, [pc, #408]	; (8005958 <HAL_GPIO_Init+0x324>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	4a65      	ldr	r2, [pc, #404]	; (8005958 <HAL_GPIO_Init+0x324>)
 80057c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ca:	4b63      	ldr	r3, [pc, #396]	; (8005958 <HAL_GPIO_Init+0x324>)
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d6:	4a61      	ldr	r2, [pc, #388]	; (800595c <HAL_GPIO_Init+0x328>)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3302      	adds	r3, #2
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a58      	ldr	r2, [pc, #352]	; (8005960 <HAL_GPIO_Init+0x32c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d037      	beq.n	8005872 <HAL_GPIO_Init+0x23e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a57      	ldr	r2, [pc, #348]	; (8005964 <HAL_GPIO_Init+0x330>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_GPIO_Init+0x23a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a56      	ldr	r2, [pc, #344]	; (8005968 <HAL_GPIO_Init+0x334>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d02b      	beq.n	800586a <HAL_GPIO_Init+0x236>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a55      	ldr	r2, [pc, #340]	; (800596c <HAL_GPIO_Init+0x338>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d025      	beq.n	8005866 <HAL_GPIO_Init+0x232>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a54      	ldr	r2, [pc, #336]	; (8005970 <HAL_GPIO_Init+0x33c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <HAL_GPIO_Init+0x22e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a53      	ldr	r2, [pc, #332]	; (8005974 <HAL_GPIO_Init+0x340>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d019      	beq.n	800585e <HAL_GPIO_Init+0x22a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a52      	ldr	r2, [pc, #328]	; (8005978 <HAL_GPIO_Init+0x344>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_GPIO_Init+0x226>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a51      	ldr	r2, [pc, #324]	; (800597c <HAL_GPIO_Init+0x348>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00d      	beq.n	8005856 <HAL_GPIO_Init+0x222>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a50      	ldr	r2, [pc, #320]	; (8005980 <HAL_GPIO_Init+0x34c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <HAL_GPIO_Init+0x21e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a4f      	ldr	r2, [pc, #316]	; (8005984 <HAL_GPIO_Init+0x350>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_GPIO_Init+0x21a>
 800584a:	2309      	movs	r3, #9
 800584c:	e012      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800584e:	230a      	movs	r3, #10
 8005850:	e010      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005852:	2308      	movs	r3, #8
 8005854:	e00e      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005856:	2307      	movs	r3, #7
 8005858:	e00c      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800585a:	2306      	movs	r3, #6
 800585c:	e00a      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800585e:	2305      	movs	r3, #5
 8005860:	e008      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005862:	2304      	movs	r3, #4
 8005864:	e006      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005866:	2303      	movs	r3, #3
 8005868:	e004      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800586a:	2302      	movs	r3, #2
 800586c:	e002      	b.n	8005874 <HAL_GPIO_Init+0x240>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_GPIO_Init+0x240>
 8005872:	2300      	movs	r3, #0
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	f002 0203 	and.w	r2, r2, #3
 800587a:	0092      	lsls	r2, r2, #2
 800587c:	4093      	lsls	r3, r2
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005884:	4935      	ldr	r1, [pc, #212]	; (800595c <HAL_GPIO_Init+0x328>)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	3302      	adds	r3, #2
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005892:	4b3d      	ldr	r3, [pc, #244]	; (8005988 <HAL_GPIO_Init+0x354>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058b6:	4a34      	ldr	r2, [pc, #208]	; (8005988 <HAL_GPIO_Init+0x354>)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058bc:	4b32      	ldr	r3, [pc, #200]	; (8005988 <HAL_GPIO_Init+0x354>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058e0:	4a29      	ldr	r2, [pc, #164]	; (8005988 <HAL_GPIO_Init+0x354>)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058e6:	4b28      	ldr	r3, [pc, #160]	; (8005988 <HAL_GPIO_Init+0x354>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4013      	ands	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800590a:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <HAL_GPIO_Init+0x354>)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <HAL_GPIO_Init+0x354>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <HAL_GPIO_Init+0x354>)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3301      	adds	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b0f      	cmp	r3, #15
 8005944:	f67f ae84 	bls.w	8005650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3724      	adds	r7, #36	; 0x24
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800
 800595c:	40013800 	.word	0x40013800
 8005960:	40020000 	.word	0x40020000
 8005964:	40020400 	.word	0x40020400
 8005968:	40020800 	.word	0x40020800
 800596c:	40020c00 	.word	0x40020c00
 8005970:	40021000 	.word	0x40021000
 8005974:	40021400 	.word	0x40021400
 8005978:	40021800 	.word	0x40021800
 800597c:	40021c00 	.word	0x40021c00
 8005980:	40022000 	.word	0x40022000
 8005984:	40022400 	.word	0x40022400
 8005988:	40013c00 	.word	0x40013c00

0800598c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e001      	b.n	80059ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
 80059c8:	4613      	mov	r3, r2
 80059ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059cc:	787b      	ldrb	r3, [r7, #1]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059d2:	887a      	ldrh	r2, [r7, #2]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059d8:	e003      	b.n	80059e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059da:	887b      	ldrh	r3, [r7, #2]
 80059dc:	041a      	lsls	r2, r3, #16
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	619a      	str	r2, [r3, #24]
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a00:	887a      	ldrh	r2, [r7, #2]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4013      	ands	r3, r2
 8005a06:	041a      	lsls	r2, r3, #16
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	43d9      	mvns	r1, r3
 8005a0c:	887b      	ldrh	r3, [r7, #2]
 8005a0e:	400b      	ands	r3, r1
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	619a      	str	r2, [r3, #24]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d006      	beq.n	8005a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a3c:	88fb      	ldrh	r3, [r7, #6]
 8005a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fb fcac 	bl	80013a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40013c00 	.word	0x40013c00

08005a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e12b      	b.n	8005cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb ff38 	bl	80018f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2224      	movs	r2, #36	; 0x24
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f001 fcee 	bl	8007498 <HAL_RCC_GetPCLK1Freq>
 8005abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4a81      	ldr	r2, [pc, #516]	; (8005cc8 <HAL_I2C_Init+0x274>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d807      	bhi.n	8005ad8 <HAL_I2C_Init+0x84>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a80      	ldr	r2, [pc, #512]	; (8005ccc <HAL_I2C_Init+0x278>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bf94      	ite	ls
 8005ad0:	2301      	movls	r3, #1
 8005ad2:	2300      	movhi	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e006      	b.n	8005ae6 <HAL_I2C_Init+0x92>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a7d      	ldr	r2, [pc, #500]	; (8005cd0 <HAL_I2C_Init+0x27c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bf94      	ite	ls
 8005ae0:	2301      	movls	r3, #1
 8005ae2:	2300      	movhi	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0e7      	b.n	8005cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a78      	ldr	r2, [pc, #480]	; (8005cd4 <HAL_I2C_Init+0x280>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	0c9b      	lsrs	r3, r3, #18
 8005af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a6a      	ldr	r2, [pc, #424]	; (8005cc8 <HAL_I2C_Init+0x274>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d802      	bhi.n	8005b28 <HAL_I2C_Init+0xd4>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3301      	adds	r3, #1
 8005b26:	e009      	b.n	8005b3c <HAL_I2C_Init+0xe8>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	4a69      	ldr	r2, [pc, #420]	; (8005cd8 <HAL_I2C_Init+0x284>)
 8005b34:	fba2 2303 	umull	r2, r3, r2, r3
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	495c      	ldr	r1, [pc, #368]	; (8005cc8 <HAL_I2C_Init+0x274>)
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d819      	bhi.n	8005b90 <HAL_I2C_Init+0x13c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1e59      	subs	r1, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b70:	400b      	ands	r3, r1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_I2C_Init+0x138>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1e59      	subs	r1, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b84:	3301      	adds	r3, #1
 8005b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8a:	e051      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e04f      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d111      	bne.n	8005bbc <HAL_I2C_Init+0x168>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	1e58      	subs	r0, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	440b      	add	r3, r1
 8005ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e012      	b.n	8005be2 <HAL_I2C_Init+0x18e>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1e58      	subs	r0, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	0099      	lsls	r1, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Init+0x196>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e022      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10e      	bne.n	8005c10 <HAL_I2C_Init+0x1bc>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1e58      	subs	r0, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	440b      	add	r3, r1
 8005c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c04:	3301      	adds	r3, #1
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	e00f      	b.n	8005c30 <HAL_I2C_Init+0x1dc>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1e58      	subs	r0, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	0099      	lsls	r1, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	6809      	ldr	r1, [r1, #0]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69da      	ldr	r2, [r3, #28]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6911      	ldr	r1, [r2, #16]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	000186a0 	.word	0x000186a0
 8005ccc:	001e847f 	.word	0x001e847f
 8005cd0:	003d08ff 	.word	0x003d08ff
 8005cd4:	431bde83 	.word	0x431bde83
 8005cd8:	10624dd3 	.word	0x10624dd3

08005cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	817b      	strh	r3, [r7, #10]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	813b      	strh	r3, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cf6:	f7fc feaf 	bl	8002a58 <HAL_GetTick>
 8005cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	f040 80d9 	bne.w	8005ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	2319      	movs	r3, #25
 8005d10:	2201      	movs	r2, #1
 8005d12:	496d      	ldr	r1, [pc, #436]	; (8005ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fc7f 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
 8005d22:	e0cc      	b.n	8005ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2C_Mem_Write+0x56>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0c5      	b.n	8005ebe <HAL_I2C_Mem_Write+0x1e2>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d007      	beq.n	8005d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2221      	movs	r2, #33	; 0x21
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a4d      	ldr	r2, [pc, #308]	; (8005ecc <HAL_I2C_Mem_Write+0x1f0>)
 8005d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d9a:	88f8      	ldrh	r0, [r7, #6]
 8005d9c:	893a      	ldrh	r2, [r7, #8]
 8005d9e:	8979      	ldrh	r1, [r7, #10]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4603      	mov	r3, r0
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fab6 	bl	800631c <I2C_RequestMemoryWrite>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d052      	beq.n	8005e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e081      	b.n	8005ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fd00 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d107      	bne.n	8005de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e06b      	b.n	8005ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d11b      	bne.n	8005e5c <HAL_I2C_Mem_Write+0x180>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d017      	beq.n	8005e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1aa      	bne.n	8005dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fcec 	bl	8006846 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d107      	bne.n	8005e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e016      	b.n	8005ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	00100002 	.word	0x00100002
 8005ecc:	ffff0000 	.word	0xffff0000

08005ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08c      	sub	sp, #48	; 0x30
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	817b      	strh	r3, [r7, #10]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	813b      	strh	r3, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eea:	f7fc fdb5 	bl	8002a58 <HAL_GetTick>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	f040 8208 	bne.w	800630e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	2319      	movs	r3, #25
 8005f04:	2201      	movs	r2, #1
 8005f06:	497b      	ldr	r1, [pc, #492]	; (80060f4 <HAL_I2C_Mem_Read+0x224>)
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fb85 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
 8005f16:	e1fb      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_I2C_Mem_Read+0x56>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e1f4      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d007      	beq.n	8005f4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2222      	movs	r2, #34	; 0x22
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2240      	movs	r2, #64	; 0x40
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a5b      	ldr	r2, [pc, #364]	; (80060f8 <HAL_I2C_Mem_Read+0x228>)
 8005f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f8e:	88f8      	ldrh	r0, [r7, #6]
 8005f90:	893a      	ldrh	r2, [r7, #8]
 8005f92:	8979      	ldrh	r1, [r7, #10]
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa52 	bl	8006448 <I2C_RequestMemoryRead>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e1b0      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d113      	bne.n	8005fde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	623b      	str	r3, [r7, #32]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e184      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d11b      	bne.n	800601e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e164      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006022:	2b02      	cmp	r3, #2
 8006024:	d11b      	bne.n	800605e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	e144      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006074:	e138      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	2b03      	cmp	r3, #3
 800607c:	f200 80f1 	bhi.w	8006262 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006084:	2b01      	cmp	r3, #1
 8006086:	d123      	bne.n	80060d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 fc1b 	bl	80068c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e139      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ce:	e10b      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d14e      	bne.n	8006176 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2200      	movs	r2, #0
 80060e0:	4906      	ldr	r1, [pc, #24]	; (80060fc <HAL_I2C_Mem_Read+0x22c>)
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fa98 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e10e      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
 80060f2:	bf00      	nop
 80060f4:	00100002 	.word	0x00100002
 80060f8:	ffff0000 	.word	0xffff0000
 80060fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800610e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006174:	e0b8      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	2200      	movs	r2, #0
 800617e:	4966      	ldr	r1, [pc, #408]	; (8006318 <HAL_I2C_Mem_Read+0x448>)
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 fa49 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0bf      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	2200      	movs	r2, #0
 80061da:	494f      	ldr	r1, [pc, #316]	; (8006318 <HAL_I2C_Mem_Read+0x448>)
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fa1b 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e091      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006260:	e042      	b.n	80062e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fb2e 	bl	80068c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e04c      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d118      	bne.n	80062e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f47f aec2 	bne.w	8006076 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e000      	b.n	8006310 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800630e:	2302      	movs	r3, #2
  }
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	; 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	00010004 	.word	0x00010004

0800631c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	4603      	mov	r3, r0
 800632c:	817b      	strh	r3, [r7, #10]
 800632e:	460b      	mov	r3, r1
 8006330:	813b      	strh	r3, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2200      	movs	r2, #0
 800634e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f960 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d103      	bne.n	8006376 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e05f      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	492d      	ldr	r1, [pc, #180]	; (8006444 <I2C_RequestMemoryWrite+0x128>)
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f998 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e04c      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	6a39      	ldr	r1, [r7, #32]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fa02 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d107      	bne.n	80063de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e02b      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d105      	bne.n	80063f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063e8:	893b      	ldrh	r3, [r7, #8]
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	611a      	str	r2, [r3, #16]
 80063f2:	e021      	b.n	8006438 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f9dc 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b04      	cmp	r3, #4
 8006418:	d107      	bne.n	800642a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e005      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800642e:	893b      	ldrh	r3, [r7, #8]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	00010002 	.word	0x00010002

08006448 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4603      	mov	r3, r0
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	460b      	mov	r3, r1
 800645c:	813b      	strh	r3, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006470:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	2200      	movs	r2, #0
 800648a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f8c2 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a8:	d103      	bne.n	80064b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e0aa      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064b6:	897b      	ldrh	r3, [r7, #10]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	4952      	ldr	r1, [pc, #328]	; (8006614 <I2C_RequestMemoryRead+0x1cc>)
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8fa 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e097      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	6a39      	ldr	r1, [r7, #32]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f964 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b04      	cmp	r3, #4
 8006508:	d107      	bne.n	800651a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e076      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d105      	bne.n	8006530 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006524:	893b      	ldrh	r3, [r7, #8]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]
 800652e:	e021      	b.n	8006574 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006530:	893b      	ldrh	r3, [r7, #8]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	b29b      	uxth	r3, r3
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	6a39      	ldr	r1, [r7, #32]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f93e 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b04      	cmp	r3, #4
 8006554:	d107      	bne.n	8006566 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e050      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800656a:	893b      	ldrh	r3, [r7, #8]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	6a39      	ldr	r1, [r7, #32]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f923 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b04      	cmp	r3, #4
 800658a:	d107      	bne.n	800659c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e035      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f82b 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d6:	d103      	bne.n	80065e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e013      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065e4:	897b      	ldrh	r3, [r7, #10]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	4906      	ldr	r1, [pc, #24]	; (8006614 <I2C_RequestMemoryRead+0x1cc>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f863 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	00010002 	.word	0x00010002

08006618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006628:	e025      	b.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d021      	beq.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fc fa11 	bl	8002a58 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e023      	b.n	80066be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10d      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	43da      	mvns	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4013      	ands	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	e00c      	b.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	43da      	mvns	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4013      	ands	r3, r2
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d0b6      	beq.n	800662a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066d4:	e051      	b.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e4:	d123      	bne.n	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e046      	b.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d021      	beq.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006736:	f7fc f98f 	bl	8002a58 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d116      	bne.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f043 0220 	orr.w	r2, r3, #32
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e020      	b.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10c      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	43da      	mvns	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e00b      	b.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	43da      	mvns	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4013      	ands	r3, r2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d18d      	bne.n	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067d0:	e02d      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f8ce 	bl	8006974 <I2C_IsAcknowledgeFailed>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e02d      	b.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d021      	beq.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ea:	f7fc f935 	bl	8002a58 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d116      	bne.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f043 0220 	orr.w	r2, r3, #32
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e007      	b.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b80      	cmp	r3, #128	; 0x80
 800683a:	d1ca      	bne.n	80067d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006852:	e02d      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f88d 	bl	8006974 <I2C_IsAcknowledgeFailed>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e02d      	b.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d021      	beq.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686c:	f7fc f8f4 	bl	8002a58 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	429a      	cmp	r2, r3
 800687a:	d302      	bcc.n	8006882 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d116      	bne.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e007      	b.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d1ca      	bne.n	8006854 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068d4:	e042      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d119      	bne.n	8006918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0210 	mvn.w	r2, #16
 80068ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e029      	b.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006918:	f7fc f89e 	bl	8002a58 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d116      	bne.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d1b5      	bne.n	80068d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698a:	d11b      	bne.n	80069c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006994:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f043 0204 	orr.w	r2, r3, #4
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d129      	bne.n	8006a3c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2224      	movs	r2, #36	; 0x24
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0201 	bic.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0210 	bic.w	r2, r2, #16
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e000      	b.n	8006a3e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
  }
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d12a      	bne.n	8006aba <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	; 0x24
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006a84:	89fb      	ldrh	r3, [r7, #14]
 8006a86:	f023 030f 	bic.w	r3, r3, #15
 8006a8a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	89fa      	ldrh	r2, [r7, #14]
 8006a9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4b20      	ldr	r3, [pc, #128]	; (8006b58 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <HAL_PWREx_EnableOverDrive+0x90>)
 8006adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006aee:	4b1b      	ldr	r3, [pc, #108]	; (8006b5c <HAL_PWREx_EnableOverDrive+0x94>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006af4:	f7fb ffb0 	bl	8002a58 <HAL_GetTick>
 8006af8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006afa:	e009      	b.n	8006b10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006afc:	f7fb ffac 	bl	8002a58 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b0a:	d901      	bls.n	8006b10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e01f      	b.n	8006b50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b10:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1c:	d1ee      	bne.n	8006afc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b1e:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b24:	f7fb ff98 	bl	8002a58 <HAL_GetTick>
 8006b28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b2a:	e009      	b.n	8006b40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b2c:	f7fb ff94 	bl	8002a58 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3a:	d901      	bls.n	8006b40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e007      	b.n	8006b50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4c:	d1ee      	bne.n	8006b2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	420e0040 	.word	0x420e0040
 8006b60:	40007000 	.word	0x40007000
 8006b64:	420e0044 	.word	0x420e0044

08006b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e267      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d075      	beq.n	8006c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b86:	4b88      	ldr	r3, [pc, #544]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 030c 	and.w	r3, r3, #12
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d00c      	beq.n	8006bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b92:	4b85      	ldr	r3, [pc, #532]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d112      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b9e:	4b82      	ldr	r3, [pc, #520]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006baa:	d10b      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bac:	4b7e      	ldr	r3, [pc, #504]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d05b      	beq.n	8006c70 <HAL_RCC_OscConfig+0x108>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d157      	bne.n	8006c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e242      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bcc:	d106      	bne.n	8006bdc <HAL_RCC_OscConfig+0x74>
 8006bce:	4b76      	ldr	r3, [pc, #472]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a75      	ldr	r2, [pc, #468]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e01d      	b.n	8006c18 <HAL_RCC_OscConfig+0xb0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x98>
 8006be6:	4b70      	ldr	r3, [pc, #448]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a6f      	ldr	r2, [pc, #444]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b6d      	ldr	r3, [pc, #436]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6c      	ldr	r2, [pc, #432]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e00b      	b.n	8006c18 <HAL_RCC_OscConfig+0xb0>
 8006c00:	4b69      	ldr	r3, [pc, #420]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a68      	ldr	r2, [pc, #416]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	4b66      	ldr	r3, [pc, #408]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a65      	ldr	r2, [pc, #404]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d013      	beq.n	8006c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c20:	f7fb ff1a 	bl	8002a58 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c28:	f7fb ff16 	bl	8002a58 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b64      	cmp	r3, #100	; 0x64
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e207      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3a:	4b5b      	ldr	r3, [pc, #364]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0f0      	beq.n	8006c28 <HAL_RCC_OscConfig+0xc0>
 8006c46:	e014      	b.n	8006c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c48:	f7fb ff06 	bl	8002a58 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fb ff02 	bl	8002a58 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	; 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e1f3      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c62:	4b51      	ldr	r3, [pc, #324]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f0      	bne.n	8006c50 <HAL_RCC_OscConfig+0xe8>
 8006c6e:	e000      	b.n	8006c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d063      	beq.n	8006d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c7e:	4b4a      	ldr	r3, [pc, #296]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8a:	4b47      	ldr	r3, [pc, #284]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d11c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c96:	4b44      	ldr	r3, [pc, #272]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d116      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca2:	4b41      	ldr	r3, [pc, #260]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_RCC_OscConfig+0x152>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d001      	beq.n	8006cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e1c7      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cba:	4b3b      	ldr	r3, [pc, #236]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4937      	ldr	r1, [pc, #220]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cce:	e03a      	b.n	8006d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cd8:	4b34      	ldr	r3, [pc, #208]	; (8006dac <HAL_RCC_OscConfig+0x244>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cde:	f7fb febb 	bl	8002a58 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ce6:	f7fb feb7 	bl	8002a58 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e1a8      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf8:	4b2b      	ldr	r3, [pc, #172]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f0      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d04:	4b28      	ldr	r3, [pc, #160]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4925      	ldr	r1, [pc, #148]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	600b      	str	r3, [r1, #0]
 8006d18:	e015      	b.n	8006d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCC_OscConfig+0x244>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fb fe9a 	bl	8002a58 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d28:	f7fb fe96 	bl	8002a58 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e187      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d036      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d016      	beq.n	8006d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_RCC_OscConfig+0x248>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fb fe7a 	bl	8002a58 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d68:	f7fb fe76 	bl	8002a58 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e167      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x200>
 8006d86:	e01b      	b.n	8006dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <HAL_RCC_OscConfig+0x248>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d8e:	f7fb fe63 	bl	8002a58 <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d94:	e00e      	b.n	8006db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d96:	f7fb fe5f 	bl	8002a58 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d907      	bls.n	8006db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e150      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
 8006da8:	40023800 	.word	0x40023800
 8006dac:	42470000 	.word	0x42470000
 8006db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db4:	4b88      	ldr	r3, [pc, #544]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1ea      	bne.n	8006d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8097 	beq.w	8006efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd2:	4b81      	ldr	r3, [pc, #516]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10f      	bne.n	8006dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	4b7d      	ldr	r3, [pc, #500]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	4a7c      	ldr	r2, [pc, #496]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dec:	6413      	str	r3, [r2, #64]	; 0x40
 8006dee:	4b7a      	ldr	r3, [pc, #488]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfe:	4b77      	ldr	r3, [pc, #476]	; (8006fdc <HAL_RCC_OscConfig+0x474>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d118      	bne.n	8006e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e0a:	4b74      	ldr	r3, [pc, #464]	; (8006fdc <HAL_RCC_OscConfig+0x474>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a73      	ldr	r2, [pc, #460]	; (8006fdc <HAL_RCC_OscConfig+0x474>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e16:	f7fb fe1f 	bl	8002a58 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1e:	f7fb fe1b 	bl	8002a58 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e10c      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e30:	4b6a      	ldr	r3, [pc, #424]	; (8006fdc <HAL_RCC_OscConfig+0x474>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d106      	bne.n	8006e52 <HAL_RCC_OscConfig+0x2ea>
 8006e44:	4b64      	ldr	r3, [pc, #400]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	4a63      	ldr	r2, [pc, #396]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e50:	e01c      	b.n	8006e8c <HAL_RCC_OscConfig+0x324>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0x30c>
 8006e5a:	4b5f      	ldr	r3, [pc, #380]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	4a5e      	ldr	r2, [pc, #376]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e60:	f043 0304 	orr.w	r3, r3, #4
 8006e64:	6713      	str	r3, [r2, #112]	; 0x70
 8006e66:	4b5c      	ldr	r3, [pc, #368]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a5b      	ldr	r2, [pc, #364]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	6713      	str	r3, [r2, #112]	; 0x70
 8006e72:	e00b      	b.n	8006e8c <HAL_RCC_OscConfig+0x324>
 8006e74:	4b58      	ldr	r3, [pc, #352]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	4a57      	ldr	r2, [pc, #348]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e80:	4b55      	ldr	r3, [pc, #340]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	4a54      	ldr	r2, [pc, #336]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006e86:	f023 0304 	bic.w	r3, r3, #4
 8006e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d015      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e94:	f7fb fde0 	bl	8002a58 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fb fddc 	bl	8002a58 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e0cb      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb2:	4b49      	ldr	r3, [pc, #292]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ee      	beq.n	8006e9c <HAL_RCC_OscConfig+0x334>
 8006ebe:	e014      	b.n	8006eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec0:	f7fb fdca 	bl	8002a58 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec8:	f7fb fdc6 	bl	8002a58 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e0b5      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ede:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1ee      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef0:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	4a38      	ldr	r2, [pc, #224]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80a1 	beq.w	8007048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f06:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 030c 	and.w	r3, r3, #12
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d05c      	beq.n	8006fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d141      	bne.n	8006f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1a:	4b31      	ldr	r3, [pc, #196]	; (8006fe0 <HAL_RCC_OscConfig+0x478>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f20:	f7fb fd9a 	bl	8002a58 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f28:	f7fb fd96 	bl	8002a58 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e087      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f3a:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	019b      	lsls	r3, r3, #6
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	061b      	lsls	r3, r3, #24
 8006f6a:	491b      	ldr	r1, [pc, #108]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f70:	4b1b      	ldr	r3, [pc, #108]	; (8006fe0 <HAL_RCC_OscConfig+0x478>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f76:	f7fb fd6f 	bl	8002a58 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f7e:	f7fb fd6b 	bl	8002a58 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e05c      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f90:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCC_OscConfig+0x416>
 8006f9c:	e054      	b.n	8007048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <HAL_RCC_OscConfig+0x478>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa4:	f7fb fd58 	bl	8002a58 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fac:	f7fb fd54 	bl	8002a58 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e045      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <HAL_RCC_OscConfig+0x470>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <HAL_RCC_OscConfig+0x444>
 8006fca:	e03d      	b.n	8007048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e038      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40007000 	.word	0x40007000
 8006fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <HAL_RCC_OscConfig+0x4ec>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d028      	beq.n	8007044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d121      	bne.n	8007044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700a:	429a      	cmp	r2, r3
 800700c:	d11a      	bne.n	8007044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007014:	4013      	ands	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800701a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800701c:	4293      	cmp	r3, r2
 800701e:	d111      	bne.n	8007044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	3b01      	subs	r3, #1
 800702e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007030:	429a      	cmp	r2, r3
 8007032:	d107      	bne.n	8007044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40023800 	.word	0x40023800

08007058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e0cc      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800706c:	4b68      	ldr	r3, [pc, #416]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d90c      	bls.n	8007094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b65      	ldr	r3, [pc, #404]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b63      	ldr	r3, [pc, #396]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0b8      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d020      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070ac:	4b59      	ldr	r3, [pc, #356]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4a58      	ldr	r2, [pc, #352]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070c4:	4b53      	ldr	r3, [pc, #332]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a52      	ldr	r2, [pc, #328]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d0:	4b50      	ldr	r3, [pc, #320]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	494d      	ldr	r1, [pc, #308]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d044      	beq.n	8007178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d107      	bne.n	8007106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070f6:	4b47      	ldr	r3, [pc, #284]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d119      	bne.n	8007136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e07f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d003      	beq.n	8007116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007112:	2b03      	cmp	r3, #3
 8007114:	d107      	bne.n	8007126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007116:	4b3f      	ldr	r3, [pc, #252]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e06f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007126:	4b3b      	ldr	r3, [pc, #236]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e067      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007136:	4b37      	ldr	r3, [pc, #220]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f023 0203 	bic.w	r2, r3, #3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4934      	ldr	r1, [pc, #208]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	4313      	orrs	r3, r2
 8007146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007148:	f7fb fc86 	bl	8002a58 <HAL_GetTick>
 800714c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	e00a      	b.n	8007166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007150:	f7fb fc82 	bl	8002a58 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	f241 3288 	movw	r2, #5000	; 0x1388
 800715e:	4293      	cmp	r3, r2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e04f      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007166:	4b2b      	ldr	r3, [pc, #172]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 020c 	and.w	r2, r3, #12
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	429a      	cmp	r2, r3
 8007176:	d1eb      	bne.n	8007150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d20c      	bcs.n	80071a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007186:	4b22      	ldr	r3, [pc, #136]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800718e:	4b20      	ldr	r3, [pc, #128]	; (8007210 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d001      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e032      	b.n	8007206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	4916      	ldr	r1, [pc, #88]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	490e      	ldr	r1, [pc, #56]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071de:	f000 f889 	bl	80072f4 <HAL_RCC_GetSysClockFreq>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	490a      	ldr	r1, [pc, #40]	; (8007218 <HAL_RCC_ClockConfig+0x1c0>)
 80071f0:	5ccb      	ldrb	r3, [r1, r3]
 80071f2:	fa22 f303 	lsr.w	r3, r2, r3
 80071f6:	4a09      	ldr	r2, [pc, #36]	; (800721c <HAL_RCC_ClockConfig+0x1c4>)
 80071f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCC_ClockConfig+0x1c8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fa fe9e 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40023c00 	.word	0x40023c00
 8007214:	40023800 	.word	0x40023800
 8007218:	0801fccc 	.word	0x0801fccc
 800721c:	20000004 	.word	0x20000004
 8007220:	20000008 	.word	0x20000008

08007224 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08c      	sub	sp, #48	; 0x30
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d129      	bne.n	800728a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6313      	str	r3, [r2, #48]	; 0x30
 8007246:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	61bb      	str	r3, [r7, #24]
 8007250:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007258:	2302      	movs	r3, #2
 800725a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800725c:	2303      	movs	r3, #3
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	2300      	movs	r3, #0
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007268:	f107 031c 	add.w	r3, r7, #28
 800726c:	4619      	mov	r1, r3
 800726e:	481f      	ldr	r0, [pc, #124]	; (80072ec <HAL_RCC_MCOConfig+0xc8>)
 8007270:	f7fe f9e0 	bl	8005634 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007274:	4b1c      	ldr	r3, [pc, #112]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	430b      	orrs	r3, r1
 8007282:	4919      	ldr	r1, [pc, #100]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 8007284:	4313      	orrs	r3, r2
 8007286:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007288:	e029      	b.n	80072de <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 8007294:	f043 0304 	orr.w	r3, r3, #4
 8007298:	6313      	str	r3, [r2, #48]	; 0x30
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80072a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ac:	2302      	movs	r3, #2
 80072ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b0:	2303      	movs	r3, #3
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80072b8:	2300      	movs	r3, #0
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80072bc:	f107 031c 	add.w	r3, r7, #28
 80072c0:	4619      	mov	r1, r3
 80072c2:	480b      	ldr	r0, [pc, #44]	; (80072f0 <HAL_RCC_MCOConfig+0xcc>)
 80072c4:	f7fe f9b6 	bl	8005634 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	00d9      	lsls	r1, r3, #3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	430b      	orrs	r3, r1
 80072d8:	4903      	ldr	r1, [pc, #12]	; (80072e8 <HAL_RCC_MCOConfig+0xc4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
}
 80072de:	bf00      	nop
 80072e0:	3730      	adds	r7, #48	; 0x30
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800
 80072ec:	40020000 	.word	0x40020000
 80072f0:	40020800 	.word	0x40020800

080072f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f8:	b090      	sub	sp, #64	; 0x40
 80072fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	2300      	movs	r3, #0
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007304:	2300      	movs	r3, #0
 8007306:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800730c:	4b59      	ldr	r3, [pc, #356]	; (8007474 <HAL_RCC_GetSysClockFreq+0x180>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b08      	cmp	r3, #8
 8007316:	d00d      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x40>
 8007318:	2b08      	cmp	r3, #8
 800731a:	f200 80a1 	bhi.w	8007460 <HAL_RCC_GetSysClockFreq+0x16c>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x34>
 8007322:	2b04      	cmp	r3, #4
 8007324:	d003      	beq.n	800732e <HAL_RCC_GetSysClockFreq+0x3a>
 8007326:	e09b      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007328:	4b53      	ldr	r3, [pc, #332]	; (8007478 <HAL_RCC_GetSysClockFreq+0x184>)
 800732a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800732c:	e09b      	b.n	8007466 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800732e:	4b53      	ldr	r3, [pc, #332]	; (800747c <HAL_RCC_GetSysClockFreq+0x188>)
 8007330:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007332:	e098      	b.n	8007466 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007334:	4b4f      	ldr	r3, [pc, #316]	; (8007474 <HAL_RCC_GetSysClockFreq+0x180>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800733e:	4b4d      	ldr	r3, [pc, #308]	; (8007474 <HAL_RCC_GetSysClockFreq+0x180>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d028      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734a:	4b4a      	ldr	r3, [pc, #296]	; (8007474 <HAL_RCC_GetSysClockFreq+0x180>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	099b      	lsrs	r3, r3, #6
 8007350:	2200      	movs	r2, #0
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	627a      	str	r2, [r7, #36]	; 0x24
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800735c:	2100      	movs	r1, #0
 800735e:	4b47      	ldr	r3, [pc, #284]	; (800747c <HAL_RCC_GetSysClockFreq+0x188>)
 8007360:	fb03 f201 	mul.w	r2, r3, r1
 8007364:	2300      	movs	r3, #0
 8007366:	fb00 f303 	mul.w	r3, r0, r3
 800736a:	4413      	add	r3, r2
 800736c:	4a43      	ldr	r2, [pc, #268]	; (800747c <HAL_RCC_GetSysClockFreq+0x188>)
 800736e:	fba0 1202 	umull	r1, r2, r0, r2
 8007372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007374:	460a      	mov	r2, r1
 8007376:	62ba      	str	r2, [r7, #40]	; 0x28
 8007378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737a:	4413      	add	r3, r2
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007380:	2200      	movs	r2, #0
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800738a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800738e:	f7f9 fc1b 	bl	8000bc8 <__aeabi_uldivmod>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4613      	mov	r3, r2
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739a:	e053      	b.n	8007444 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800739c:	4b35      	ldr	r3, [pc, #212]	; (8007474 <HAL_RCC_GetSysClockFreq+0x180>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	099b      	lsrs	r3, r3, #6
 80073a2:	2200      	movs	r2, #0
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	617a      	str	r2, [r7, #20]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073ae:	f04f 0b00 	mov.w	fp, #0
 80073b2:	4652      	mov	r2, sl
 80073b4:	465b      	mov	r3, fp
 80073b6:	f04f 0000 	mov.w	r0, #0
 80073ba:	f04f 0100 	mov.w	r1, #0
 80073be:	0159      	lsls	r1, r3, #5
 80073c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073c4:	0150      	lsls	r0, r2, #5
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	ebb2 080a 	subs.w	r8, r2, sl
 80073ce:	eb63 090b 	sbc.w	r9, r3, fp
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80073de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80073e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80073e6:	ebb2 0408 	subs.w	r4, r2, r8
 80073ea:	eb63 0509 	sbc.w	r5, r3, r9
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	00eb      	lsls	r3, r5, #3
 80073f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073fc:	00e2      	lsls	r2, r4, #3
 80073fe:	4614      	mov	r4, r2
 8007400:	461d      	mov	r5, r3
 8007402:	eb14 030a 	adds.w	r3, r4, sl
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	eb45 030b 	adc.w	r3, r5, fp
 800740c:	607b      	str	r3, [r7, #4]
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800741a:	4629      	mov	r1, r5
 800741c:	028b      	lsls	r3, r1, #10
 800741e:	4621      	mov	r1, r4
 8007420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007424:	4621      	mov	r1, r4
 8007426:	028a      	lsls	r2, r1, #10
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742e:	2200      	movs	r2, #0
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	60fa      	str	r2, [r7, #12]
 8007434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007438:	f7f9 fbc6 	bl	8000bc8 <__aeabi_uldivmod>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4613      	mov	r3, r2
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007444:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <HAL_RCC_GetSysClockFreq+0x180>)
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	3301      	adds	r3, #1
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	fbb2 f3f3 	udiv	r3, r2, r3
 800745c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800745e:	e002      	b.n	8007466 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_RCC_GetSysClockFreq+0x184>)
 8007462:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007468:	4618      	mov	r0, r3
 800746a:	3740      	adds	r7, #64	; 0x40
 800746c:	46bd      	mov	sp, r7
 800746e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007472:	bf00      	nop
 8007474:	40023800 	.word	0x40023800
 8007478:	00f42400 	.word	0x00f42400
 800747c:	017d7840 	.word	0x017d7840

08007480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007484:	4b03      	ldr	r3, [pc, #12]	; (8007494 <HAL_RCC_GetHCLKFreq+0x14>)
 8007486:	681b      	ldr	r3, [r3, #0]
}
 8007488:	4618      	mov	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000004 	.word	0x20000004

08007498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800749c:	f7ff fff0 	bl	8007480 <HAL_RCC_GetHCLKFreq>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	0a9b      	lsrs	r3, r3, #10
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	4903      	ldr	r1, [pc, #12]	; (80074bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ae:	5ccb      	ldrb	r3, [r1, r3]
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40023800 	.word	0x40023800
 80074bc:	0801fcdc 	.word	0x0801fcdc

080074c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80074c4:	f7ff ffdc 	bl	8007480 <HAL_RCC_GetHCLKFreq>
 80074c8:	4602      	mov	r2, r0
 80074ca:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	0b5b      	lsrs	r3, r3, #13
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	4903      	ldr	r1, [pc, #12]	; (80074e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074d6:	5ccb      	ldrb	r3, [r1, r3]
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074dc:	4618      	mov	r0, r3
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	40023800 	.word	0x40023800
 80074e4:	0801fcdc 	.word	0x0801fcdc

080074e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	220f      	movs	r2, #15
 80074f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074f8:	4b12      	ldr	r3, [pc, #72]	; (8007544 <HAL_RCC_GetClockConfig+0x5c>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0203 	and.w	r2, r3, #3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007504:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <HAL_RCC_GetClockConfig+0x5c>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007510:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <HAL_RCC_GetClockConfig+0x5c>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <HAL_RCC_GetClockConfig+0x5c>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	08db      	lsrs	r3, r3, #3
 8007522:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800752a:	4b07      	ldr	r3, [pc, #28]	; (8007548 <HAL_RCC_GetClockConfig+0x60>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 020f 	and.w	r2, r3, #15
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	601a      	str	r2, [r3, #0]
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40023800 	.word	0x40023800
 8007548:	40023c00 	.word	0x40023c00

0800754c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e01c      	b.n	8007598 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	795b      	ldrb	r3, [r3, #5]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d105      	bne.n	8007574 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa fb3e 	bl	8001bf0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0204 	orr.w	r2, r2, #4
 8007588:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e07b      	b.n	80076aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d108      	bne.n	80075cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c2:	d009      	beq.n	80075d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	61da      	str	r2, [r3, #28]
 80075ca:	e005      	b.n	80075d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fa fbc2 	bl	8001d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	ea42 0103 	orr.w	r1, r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	f003 0104 	and.w	r1, r3, #4
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f003 0210 	and.w	r2, r3, #16
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007698:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e041      	b.n	8007748 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fa fe8b 	bl	80023f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f000 fce9 	bl	80080c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d001      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e04e      	b.n	8007806 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a23      	ldr	r2, [pc, #140]	; (8007814 <HAL_TIM_Base_Start_IT+0xc4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d01d      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <HAL_TIM_Base_Start_IT+0xc8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_TIM_Base_Start_IT+0xcc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <HAL_TIM_Base_Start_IT+0xd0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_TIM_Base_Start_IT+0xd4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a19      	ldr	r2, [pc, #100]	; (8007828 <HAL_TIM_Base_Start_IT+0xd8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x80>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_TIM_Base_Start_IT+0xdc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d111      	bne.n	80077f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b06      	cmp	r3, #6
 80077e0:	d010      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0201 	orr.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f2:	e007      	b.n	8007804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	40010000 	.word	0x40010000
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40000c00 	.word	0x40000c00
 8007824:	40010400 	.word	0x40010400
 8007828:	40014000 	.word	0x40014000
 800782c:	40001800 	.word	0x40001800

08007830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e041      	b.n	80078c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f839 	bl	80078ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f000 fc2a 	bl	80080c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <HAL_TIM_PWM_Start+0x24>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e022      	b.n	800794e <HAL_TIM_PWM_Start+0x6a>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b04      	cmp	r3, #4
 800790c:	d109      	bne.n	8007922 <HAL_TIM_PWM_Start+0x3e>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b01      	cmp	r3, #1
 8007918:	bf14      	ite	ne
 800791a:	2301      	movne	r3, #1
 800791c:	2300      	moveq	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e015      	b.n	800794e <HAL_TIM_PWM_Start+0x6a>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d109      	bne.n	800793c <HAL_TIM_PWM_Start+0x58>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	e008      	b.n	800794e <HAL_TIM_PWM_Start+0x6a>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	bf14      	ite	ne
 8007948:	2301      	movne	r3, #1
 800794a:	2300      	moveq	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e07c      	b.n	8007a50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_TIM_PWM_Start+0x82>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007964:	e013      	b.n	800798e <HAL_TIM_PWM_Start+0xaa>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b04      	cmp	r3, #4
 800796a:	d104      	bne.n	8007976 <HAL_TIM_PWM_Start+0x92>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007974:	e00b      	b.n	800798e <HAL_TIM_PWM_Start+0xaa>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b08      	cmp	r3, #8
 800797a:	d104      	bne.n	8007986 <HAL_TIM_PWM_Start+0xa2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007984:	e003      	b.n	800798e <HAL_TIM_PWM_Start+0xaa>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2202      	movs	r2, #2
 800798a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2201      	movs	r2, #1
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fe80 	bl	800869c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2d      	ldr	r2, [pc, #180]	; (8007a58 <HAL_TIM_PWM_Start+0x174>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_TIM_PWM_Start+0xcc>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2c      	ldr	r2, [pc, #176]	; (8007a5c <HAL_TIM_PWM_Start+0x178>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d101      	bne.n	80079b4 <HAL_TIM_PWM_Start+0xd0>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <HAL_TIM_PWM_Start+0xd2>
 80079b4:	2300      	movs	r3, #0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <HAL_TIM_PWM_Start+0x174>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d022      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079dc:	d01d      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <HAL_TIM_PWM_Start+0x17c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d018      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <HAL_TIM_PWM_Start+0x180>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_TIM_PWM_Start+0x184>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00e      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a16      	ldr	r2, [pc, #88]	; (8007a5c <HAL_TIM_PWM_Start+0x178>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a18      	ldr	r2, [pc, #96]	; (8007a6c <HAL_TIM_PWM_Start+0x188>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x136>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <HAL_TIM_PWM_Start+0x18c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d111      	bne.n	8007a3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d010      	beq.n	8007a4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3c:	e007      	b.n	8007a4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0201 	orr.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40010400 	.word	0x40010400
 8007a60:	40000400 	.word	0x40000400
 8007a64:	40000800 	.word	0x40000800
 8007a68:	40000c00 	.word	0x40000c00
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40001800 	.word	0x40001800

08007a74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fe08 	bl	800869c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a2e      	ldr	r2, [pc, #184]	; (8007b4c <HAL_TIM_PWM_Stop+0xd8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d004      	beq.n	8007aa0 <HAL_TIM_PWM_Stop+0x2c>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a2d      	ldr	r2, [pc, #180]	; (8007b50 <HAL_TIM_PWM_Stop+0xdc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d101      	bne.n	8007aa4 <HAL_TIM_PWM_Stop+0x30>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e000      	b.n	8007aa6 <HAL_TIM_PWM_Stop+0x32>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d017      	beq.n	8007ada <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6a1a      	ldr	r2, [r3, #32]
 8007ab0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10f      	bne.n	8007ada <HAL_TIM_PWM_Stop+0x66>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6a1a      	ldr	r2, [r3, #32]
 8007ac0:	f240 4344 	movw	r3, #1092	; 0x444
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d107      	bne.n	8007ada <HAL_TIM_PWM_Stop+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6a1a      	ldr	r2, [r3, #32]
 8007ae0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10f      	bne.n	8007b0a <HAL_TIM_PWM_Stop+0x96>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6a1a      	ldr	r2, [r3, #32]
 8007af0:	f240 4344 	movw	r3, #1092	; 0x444
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d107      	bne.n	8007b0a <HAL_TIM_PWM_Stop+0x96>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0201 	bic.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <HAL_TIM_PWM_Stop+0xa6>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b18:	e013      	b.n	8007b42 <HAL_TIM_PWM_Stop+0xce>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d104      	bne.n	8007b2a <HAL_TIM_PWM_Stop+0xb6>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b28:	e00b      	b.n	8007b42 <HAL_TIM_PWM_Stop+0xce>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Stop+0xc6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b38:	e003      	b.n	8007b42 <HAL_TIM_PWM_Stop+0xce>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400

08007b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d122      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d11b      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0202 	mvn.w	r2, #2
 8007b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa77 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e005      	b.n	8007baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa69 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fa7a 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d122      	bne.n	8007c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d11b      	bne.n	8007c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0204 	mvn.w	r2, #4
 8007bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa4d 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e005      	b.n	8007bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa3f 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa50 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	d122      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d11b      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0208 	mvn.w	r2, #8
 8007c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa23 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007c44:	e005      	b.n	8007c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa15 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa26 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d122      	bne.n	8007cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d11b      	bne.n	8007cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0210 	mvn.w	r2, #16
 8007c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2208      	movs	r2, #8
 8007c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9f9 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007c98:	e005      	b.n	8007ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9eb 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f9fc 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d107      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0201 	mvn.w	r2, #1
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7f9 ff60 	bl	8001b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d10e      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf0:	2b80      	cmp	r3, #128	; 0x80
 8007cf2:	d107      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fd78 	bl	80087f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d10e      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	d107      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9c1 	bl	80080b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0320 	and.w	r3, r3, #32
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d10e      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d107      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0220 	mvn.w	r2, #32
 8007d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fd42 	bl	80087e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e0ae      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b0c      	cmp	r3, #12
 8007d8e:	f200 809f 	bhi.w	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007dcd 	.word	0x08007dcd
 8007d9c:	08007ed1 	.word	0x08007ed1
 8007da0:	08007ed1 	.word	0x08007ed1
 8007da4:	08007ed1 	.word	0x08007ed1
 8007da8:	08007e0d 	.word	0x08007e0d
 8007dac:	08007ed1 	.word	0x08007ed1
 8007db0:	08007ed1 	.word	0x08007ed1
 8007db4:	08007ed1 	.word	0x08007ed1
 8007db8:	08007e4f 	.word	0x08007e4f
 8007dbc:	08007ed1 	.word	0x08007ed1
 8007dc0:	08007ed1 	.word	0x08007ed1
 8007dc4:	08007ed1 	.word	0x08007ed1
 8007dc8:	08007e8f 	.word	0x08007e8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fa18 	bl	8008208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0208 	orr.w	r2, r2, #8
 8007de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0204 	bic.w	r2, r2, #4
 8007df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6999      	ldr	r1, [r3, #24]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	619a      	str	r2, [r3, #24]
      break;
 8007e0a:	e064      	b.n	8007ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fa68 	bl	80082e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6999      	ldr	r1, [r3, #24]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	021a      	lsls	r2, r3, #8
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	619a      	str	r2, [r3, #24]
      break;
 8007e4c:	e043      	b.n	8007ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fabd 	bl	80083d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f042 0208 	orr.w	r2, r2, #8
 8007e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0204 	bic.w	r2, r2, #4
 8007e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69d9      	ldr	r1, [r3, #28]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	61da      	str	r2, [r3, #28]
      break;
 8007e8c:	e023      	b.n	8007ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fb11 	bl	80084bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69d9      	ldr	r1, [r3, #28]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	021a      	lsls	r2, r3, #8
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	61da      	str	r2, [r3, #28]
      break;
 8007ece:	e002      	b.n	8007ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0b4      	b.n	800806e <HAL_TIM_ConfigClockSource+0x186>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3c:	d03e      	beq.n	8007fbc <HAL_TIM_ConfigClockSource+0xd4>
 8007f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f42:	f200 8087 	bhi.w	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4a:	f000 8086 	beq.w	800805a <HAL_TIM_ConfigClockSource+0x172>
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f52:	d87f      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f54:	2b70      	cmp	r3, #112	; 0x70
 8007f56:	d01a      	beq.n	8007f8e <HAL_TIM_ConfigClockSource+0xa6>
 8007f58:	2b70      	cmp	r3, #112	; 0x70
 8007f5a:	d87b      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f5c:	2b60      	cmp	r3, #96	; 0x60
 8007f5e:	d050      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x11a>
 8007f60:	2b60      	cmp	r3, #96	; 0x60
 8007f62:	d877      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f64:	2b50      	cmp	r3, #80	; 0x50
 8007f66:	d03c      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8007f68:	2b50      	cmp	r3, #80	; 0x50
 8007f6a:	d873      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d058      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x13a>
 8007f70:	2b40      	cmp	r3, #64	; 0x40
 8007f72:	d86f      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f74:	2b30      	cmp	r3, #48	; 0x30
 8007f76:	d064      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f78:	2b30      	cmp	r3, #48	; 0x30
 8007f7a:	d86b      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d060      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d867      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d05c      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d05a      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f8c:	e062      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6899      	ldr	r1, [r3, #8]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f000 fb5d 	bl	800865c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	609a      	str	r2, [r3, #8]
      break;
 8007fba:	e04f      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	6899      	ldr	r1, [r3, #8]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f000 fb46 	bl	800865c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fde:	609a      	str	r2, [r3, #8]
      break;
 8007fe0:	e03c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f000 faba 	bl	8008568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2150      	movs	r1, #80	; 0x50
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fb13 	bl	8008626 <TIM_ITRx_SetConfig>
      break;
 8008000:	e02c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6859      	ldr	r1, [r3, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	461a      	mov	r2, r3
 8008010:	f000 fad9 	bl	80085c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2160      	movs	r1, #96	; 0x60
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fb03 	bl	8008626 <TIM_ITRx_SetConfig>
      break;
 8008020:	e01c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6859      	ldr	r1, [r3, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	461a      	mov	r2, r3
 8008030:	f000 fa9a 	bl	8008568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2140      	movs	r1, #64	; 0x40
 800803a:	4618      	mov	r0, r3
 800803c:	f000 faf3 	bl	8008626 <TIM_ITRx_SetConfig>
      break;
 8008040:	e00c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f000 faea 	bl	8008626 <TIM_ITRx_SetConfig>
      break;
 8008052:	e003      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
      break;
 8008058:	e000      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800805a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a40      	ldr	r2, [pc, #256]	; (80081dc <TIM_Base_SetConfig+0x114>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e6:	d00f      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3d      	ldr	r2, [pc, #244]	; (80081e0 <TIM_Base_SetConfig+0x118>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00b      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a3c      	ldr	r2, [pc, #240]	; (80081e4 <TIM_Base_SetConfig+0x11c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d007      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a3b      	ldr	r2, [pc, #236]	; (80081e8 <TIM_Base_SetConfig+0x120>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a3a      	ldr	r2, [pc, #232]	; (80081ec <TIM_Base_SetConfig+0x124>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d108      	bne.n	800811a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2f      	ldr	r2, [pc, #188]	; (80081dc <TIM_Base_SetConfig+0x114>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d02b      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008128:	d027      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2c      	ldr	r2, [pc, #176]	; (80081e0 <TIM_Base_SetConfig+0x118>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d023      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2b      	ldr	r2, [pc, #172]	; (80081e4 <TIM_Base_SetConfig+0x11c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01f      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <TIM_Base_SetConfig+0x120>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01b      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a29      	ldr	r2, [pc, #164]	; (80081ec <TIM_Base_SetConfig+0x124>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d017      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a28      	ldr	r2, [pc, #160]	; (80081f0 <TIM_Base_SetConfig+0x128>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <TIM_Base_SetConfig+0x12c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00f      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a26      	ldr	r2, [pc, #152]	; (80081f8 <TIM_Base_SetConfig+0x130>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a25      	ldr	r2, [pc, #148]	; (80081fc <TIM_Base_SetConfig+0x134>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a24      	ldr	r2, [pc, #144]	; (8008200 <TIM_Base_SetConfig+0x138>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a23      	ldr	r2, [pc, #140]	; (8008204 <TIM_Base_SetConfig+0x13c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d108      	bne.n	800818c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <TIM_Base_SetConfig+0x114>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_Base_SetConfig+0xf8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a0c      	ldr	r2, [pc, #48]	; (80081ec <TIM_Base_SetConfig+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d103      	bne.n	80081c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	615a      	str	r2, [r3, #20]
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40010000 	.word	0x40010000
 80081e0:	40000400 	.word	0x40000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	40000c00 	.word	0x40000c00
 80081ec:	40010400 	.word	0x40010400
 80081f0:	40014000 	.word	0x40014000
 80081f4:	40014400 	.word	0x40014400
 80081f8:	40014800 	.word	0x40014800
 80081fc:	40001800 	.word	0x40001800
 8008200:	40001c00 	.word	0x40001c00
 8008204:	40002000 	.word	0x40002000

08008208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	f023 0201 	bic.w	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f023 0302 	bic.w	r3, r3, #2
 8008250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a20      	ldr	r2, [pc, #128]	; (80082e0 <TIM_OC1_SetConfig+0xd8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_OC1_SetConfig+0x64>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <TIM_OC1_SetConfig+0xdc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d10c      	bne.n	8008286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f023 0308 	bic.w	r3, r3, #8
 8008272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	4313      	orrs	r3, r2
 800827c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f023 0304 	bic.w	r3, r3, #4
 8008284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <TIM_OC1_SetConfig+0xd8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_OC1_SetConfig+0x8e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a14      	ldr	r2, [pc, #80]	; (80082e4 <TIM_OC1_SetConfig+0xdc>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d111      	bne.n	80082ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	621a      	str	r2, [r3, #32]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400

080082e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f023 0210 	bic.w	r2, r3, #16
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0320 	bic.w	r3, r3, #32
 8008332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a22      	ldr	r2, [pc, #136]	; (80083cc <TIM_OC2_SetConfig+0xe4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC2_SetConfig+0x68>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a21      	ldr	r2, [pc, #132]	; (80083d0 <TIM_OC2_SetConfig+0xe8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10d      	bne.n	800836c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a17      	ldr	r2, [pc, #92]	; (80083cc <TIM_OC2_SetConfig+0xe4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC2_SetConfig+0x94>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <TIM_OC2_SetConfig+0xe8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d113      	bne.n	80083a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800838a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	621a      	str	r2, [r3, #32]
}
 80083be:	bf00      	nop
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	40010000 	.word	0x40010000
 80083d0:	40010400 	.word	0x40010400

080083d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 0303 	bic.w	r3, r3, #3
 800840a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800841c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <TIM_OC3_SetConfig+0xe0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d003      	beq.n	800843a <TIM_OC3_SetConfig+0x66>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a20      	ldr	r2, [pc, #128]	; (80084b8 <TIM_OC3_SetConfig+0xe4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d10d      	bne.n	8008456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a16      	ldr	r2, [pc, #88]	; (80084b4 <TIM_OC3_SetConfig+0xe0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d003      	beq.n	8008466 <TIM_OC3_SetConfig+0x92>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <TIM_OC3_SetConfig+0xe4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d113      	bne.n	800848e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800846c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	621a      	str	r2, [r3, #32]
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	40010000 	.word	0x40010000
 80084b8:	40010400 	.word	0x40010400

080084bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	031b      	lsls	r3, r3, #12
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	4313      	orrs	r3, r2
 8008512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a12      	ldr	r2, [pc, #72]	; (8008560 <TIM_OC4_SetConfig+0xa4>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d003      	beq.n	8008524 <TIM_OC4_SetConfig+0x68>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a11      	ldr	r2, [pc, #68]	; (8008564 <TIM_OC4_SetConfig+0xa8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d109      	bne.n	8008538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	019b      	lsls	r3, r3, #6
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40010000 	.word	0x40010000
 8008564:	40010400 	.word	0x40010400

08008568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4313      	orrs	r3, r2
 800859c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f023 030a 	bic.w	r3, r3, #10
 80085a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	621a      	str	r2, [r3, #32]
}
 80085ba:	bf00      	nop
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b087      	sub	sp, #28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f023 0210 	bic.w	r2, r3, #16
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	031b      	lsls	r3, r3, #12
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	f043 0307 	orr.w	r3, r3, #7
 8008648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	609a      	str	r2, [r3, #8]
}
 8008650:	bf00      	nop
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	021a      	lsls	r2, r3, #8
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	431a      	orrs	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	4313      	orrs	r3, r2
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	4313      	orrs	r3, r2
 8008688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	609a      	str	r2, [r3, #8]
}
 8008690:	bf00      	nop
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2201      	movs	r2, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1a      	ldr	r2, [r3, #32]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	43db      	mvns	r3, r3
 80086be:	401a      	ands	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a1a      	ldr	r2, [r3, #32]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 031f 	and.w	r3, r3, #31
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	fa01 f303 	lsl.w	r3, r1, r3
 80086d4:	431a      	orrs	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
	...

080086e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e05a      	b.n	80087b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d022      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d01d      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d018      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1b      	ldr	r2, [pc, #108]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a18      	ldr	r2, [pc, #96]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a15      	ldr	r2, [pc, #84]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d10c      	bne.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	4313      	orrs	r3, r2
 800879a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	40000c00 	.word	0x40000c00
 80087d4:	40010400 	.word	0x40010400
 80087d8:	40014000 	.word	0x40014000
 80087dc:	40001800 	.word	0x40001800

080087e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e04a      	b.n	80088b0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d111      	bne.n	800884a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fd1c 	bl	800926c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <HAL_UART_Init+0xb0>)
 8008840:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2224      	movs	r2, #36	; 0x24
 800884e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008860:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 f90a 	bl	8009a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008876:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008886:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008896:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	08002555 	.word	0x08002555

080088bc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	460b      	mov	r3, r1
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d107      	bne.n	80088e4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	f043 0220 	orr.w	r2, r3, #32
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e08c      	b.n	80089fe <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_UART_RegisterCallback+0x36>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e085      	b.n	80089fe <HAL_UART_RegisterCallback+0x142>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b20      	cmp	r3, #32
 8008904:	d151      	bne.n	80089aa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	2b0c      	cmp	r3, #12
 800890a:	d845      	bhi.n	8008998 <HAL_UART_RegisterCallback+0xdc>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <HAL_UART_RegisterCallback+0x58>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008949 	.word	0x08008949
 8008918:	08008951 	.word	0x08008951
 800891c:	08008959 	.word	0x08008959
 8008920:	08008961 	.word	0x08008961
 8008924:	08008969 	.word	0x08008969
 8008928:	08008971 	.word	0x08008971
 800892c:	08008979 	.word	0x08008979
 8008930:	08008981 	.word	0x08008981
 8008934:	08008999 	.word	0x08008999
 8008938:	08008999 	.word	0x08008999
 800893c:	08008999 	.word	0x08008999
 8008940:	08008989 	.word	0x08008989
 8008944:	08008991 	.word	0x08008991
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800894e:	e051      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008956:	e04d      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800895e:	e049      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008966:	e045      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800896e:	e041      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008976:	e03d      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800897e:	e039      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008986:	e035      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800898e:	e031      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008996:	e02d      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	f043 0220 	orr.w	r2, r3, #32
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
        break;
 80089a8:	e024      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d116      	bne.n	80089e4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	2b0b      	cmp	r3, #11
 80089ba:	d002      	beq.n	80089c2 <HAL_UART_RegisterCallback+0x106>
 80089bc:	2b0c      	cmp	r3, #12
 80089be:	d004      	beq.n	80089ca <HAL_UART_RegisterCallback+0x10e>
 80089c0:	e007      	b.n	80089d2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80089c8:	e014      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80089d0:	e010      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f043 0220 	orr.w	r2, r3, #32
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
        break;
 80089e2:	e007      	b.n	80089f4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	f043 0220 	orr.w	r2, r3, #32
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop

08008a0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	d17c      	bne.n	8008b26 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <HAL_UART_Transmit+0x2c>
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e075      	b.n	8008b28 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d101      	bne.n	8008a4a <HAL_UART_Transmit+0x3e>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e06e      	b.n	8008b28 <HAL_UART_Transmit+0x11c>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2221      	movs	r2, #33	; 0x21
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a60:	f7f9 fffa 	bl	8002a58 <HAL_GetTick>
 8008a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	88fa      	ldrh	r2, [r7, #6]
 8008a70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a7a:	d108      	bne.n	8008a8e <HAL_UART_Transmit+0x82>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d104      	bne.n	8008a8e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	e003      	b.n	8008a96 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a9e:	e02a      	b.n	8008af6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2180      	movs	r1, #128	; 0x80
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fd13 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e036      	b.n	8008b28 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10b      	bne.n	8008ad8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ace:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	e007      	b.n	8008ae8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	3b01      	subs	r3, #1
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1cf      	bne.n	8008aa0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2200      	movs	r2, #0
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fce3 	bl	80094d6 <UART_WaitOnFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e006      	b.n	8008b28 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e000      	b.n	8008b28 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b26:	2302      	movs	r3, #2
  }
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d11d      	bne.n	8008b86 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UART_Receive_DMA+0x26>
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e016      	b.n	8008b88 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_UART_Receive_DMA+0x38>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e00f      	b.n	8008b88 <HAL_UART_Receive_DMA+0x58>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 fd19 	bl	80095b4 <UART_Start_Receive_DMA>
 8008b82:	4603      	mov	r3, r0
 8008b84:	e000      	b.n	8008b88 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008b86:	2302      	movs	r3, #2
  }
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b090      	sub	sp, #64	; 0x40
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba6:	2b80      	cmp	r3, #128	; 0x80
 8008ba8:	bf0c      	ite	eq
 8008baa:	2301      	moveq	r3, #1
 8008bac:	2300      	movne	r3, #0
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b21      	cmp	r3, #33	; 0x21
 8008bbc:	d128      	bne.n	8008c10 <HAL_UART_DMAStop+0x80>
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d025      	beq.n	8008c10 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008be4:	633a      	str	r2, [r7, #48]	; 0x30
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fa ffc9 	bl	8003b9c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fd70 	bl	80096f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b40      	cmp	r3, #64	; 0x40
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b22      	cmp	r3, #34	; 0x22
 8008c30:	d128      	bne.n	8008c84 <HAL_UART_DMAStop+0xf4>
 8008c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d025      	beq.n	8008c84 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c58:	61fa      	str	r2, [r7, #28]
 8008c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	69b9      	ldr	r1, [r7, #24]
 8008c5e:	69fa      	ldr	r2, [r7, #28]
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	617b      	str	r3, [r7, #20]
   return(result);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fa ff8f 	bl	8003b9c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fd5e 	bl	8009740 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3740      	adds	r7, #64	; 0x40
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b0ba      	sub	sp, #232	; 0xe8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10f      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d009      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x66>
 8008ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fe07 	bl	8009902 <UART_Receive_IT>
      return;
 8008cf4:	e25b      	b.n	80091ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 80e1 	beq.w	8008ec2 <HAL_UART_IRQHandler+0x232>
 8008d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d106      	bne.n	8008d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 80d4 	beq.w	8008ec2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_UART_IRQHandler+0xae>
 8008d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f043 0201 	orr.w	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <HAL_UART_IRQHandler+0xd2>
 8008d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f043 0202 	orr.w	r2, r3, #2
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00b      	beq.n	8008d86 <HAL_UART_IRQHandler+0xf6>
 8008d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	f043 0204 	orr.w	r2, r3, #4
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d011      	beq.n	8008db6 <HAL_UART_IRQHandler+0x126>
 8008d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d005      	beq.n	8008db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f043 0208 	orr.w	r2, r3, #8
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 81f2 	beq.w	80091a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc4:	f003 0320 	and.w	r3, r3, #32
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d008      	beq.n	8008dde <HAL_UART_IRQHandler+0x14e>
 8008dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fd92 	bl	8009902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <HAL_UART_IRQHandler+0x17a>
 8008e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d051      	beq.n	8008eae <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fc98 	bl	8009740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d142      	bne.n	8008ea4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3314      	adds	r3, #20
 8008e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3314      	adds	r3, #20
 8008e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1d9      	bne.n	8008e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d013      	beq.n	8008e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	4a7f      	ldr	r2, [pc, #508]	; (8009074 <HAL_UART_IRQHandler+0x3e4>)
 8008e78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fa fefc 	bl	8003c7c <HAL_DMA_Abort_IT>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d019      	beq.n	8008ebe <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e98:	e011      	b.n	8008ebe <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea2:	e00c      	b.n	8008ebe <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eac:	e007      	b.n	8008ebe <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008ebc:	e172      	b.n	80091a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ebe:	bf00      	nop
    return;
 8008ec0:	e170      	b.n	80091a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	f040 814c 	bne.w	8009164 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed0:	f003 0310 	and.w	r3, r3, #16
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 8145 	beq.w	8009164 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ede:	f003 0310 	and.w	r3, r3, #16
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 813e 	beq.w	8009164 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60bb      	str	r3, [r7, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	60bb      	str	r3, [r7, #8]
 8008efc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	f040 80b5 	bne.w	8009078 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8142 	beq.w	80091a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	f080 813b 	bcs.w	80091a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f44:	f000 8088 	beq.w	8009058 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	330c      	adds	r3, #12
 8008f70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1d9      	bne.n	8008f48 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3314      	adds	r3, #20
 8008f9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fa6:	f023 0301 	bic.w	r3, r3, #1
 8008faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008fb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e1      	bne.n	8008f94 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3314      	adds	r3, #20
 8008fd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3314      	adds	r3, #20
 8008ff0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ff4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ff6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ffa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e3      	bne.n	8008fd0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	330c      	adds	r3, #12
 800901c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009028:	f023 0310 	bic.w	r3, r3, #16
 800902c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800903a:	65ba      	str	r2, [r7, #88]	; 0x58
 800903c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e3      	bne.n	8009016 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	4618      	mov	r0, r3
 8009054:	f7fa fda2 	bl	8003b9c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009064:	b292      	uxth	r2, r2
 8009066:	1a8a      	subs	r2, r1, r2
 8009068:	b292      	uxth	r2, r2
 800906a:	4611      	mov	r1, r2
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009070:	e09a      	b.n	80091a8 <HAL_UART_IRQHandler+0x518>
 8009072:	bf00      	nop
 8009074:	08009807 	.word	0x08009807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009080:	b29b      	uxth	r3, r3
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 808c 	beq.w	80091ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 8087 	beq.w	80091ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	330c      	adds	r3, #12
 80090a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	330c      	adds	r3, #12
 80090be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80090c2:	647a      	str	r2, [r7, #68]	; 0x44
 80090c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e3      	bne.n	800909e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3314      	adds	r3, #20
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	623b      	str	r3, [r7, #32]
   return(result);
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3314      	adds	r3, #20
 80090f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090fa:	633a      	str	r2, [r7, #48]	; 0x30
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e3      	bne.n	80090d6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	60fb      	str	r3, [r7, #12]
   return(result);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 0310 	bic.w	r3, r3, #16
 8009132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	330c      	adds	r3, #12
 800913c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009140:	61fa      	str	r2, [r7, #28]
 8009142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	69b9      	ldr	r1, [r7, #24]
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	617b      	str	r3, [r7, #20]
   return(result);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e3      	bne.n	800911c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009158:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800915c:	4611      	mov	r1, r2
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009162:	e023      	b.n	80091ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <HAL_UART_IRQHandler+0x4f4>
 8009170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb57 	bl	8009830 <UART_Transmit_IT>
    return;
 8009182:	e014      	b.n	80091ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <HAL_UART_IRQHandler+0x51e>
 8009190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d008      	beq.n	80091ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fb97 	bl	80098d0 <UART_EndTransmit_IT>
    return;
 80091a2:	e004      	b.n	80091ae <HAL_UART_IRQHandler+0x51e>
    return;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <HAL_UART_IRQHandler+0x51e>
      return;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <HAL_UART_IRQHandler+0x51e>
      return;
 80091ac:	bf00      	nop
  }
}
 80091ae:	37e8      	adds	r7, #232	; 0xe8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a10      	ldr	r2, [pc, #64]	; (80092b8 <UART_InitCallbacksToDefault+0x4c>)
 8009278:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a0f      	ldr	r2, [pc, #60]	; (80092bc <UART_InitCallbacksToDefault+0x50>)
 800927e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a0f      	ldr	r2, [pc, #60]	; (80092c0 <UART_InitCallbacksToDefault+0x54>)
 8009284:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a0e      	ldr	r2, [pc, #56]	; (80092c4 <UART_InitCallbacksToDefault+0x58>)
 800928a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a0e      	ldr	r2, [pc, #56]	; (80092c8 <UART_InitCallbacksToDefault+0x5c>)
 8009290:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a0d      	ldr	r2, [pc, #52]	; (80092cc <UART_InitCallbacksToDefault+0x60>)
 8009296:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a0d      	ldr	r2, [pc, #52]	; (80092d0 <UART_InitCallbacksToDefault+0x64>)
 800929c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a0c      	ldr	r2, [pc, #48]	; (80092d4 <UART_InitCallbacksToDefault+0x68>)
 80092a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a0c      	ldr	r2, [pc, #48]	; (80092d8 <UART_InitCallbacksToDefault+0x6c>)
 80092a8:	669a      	str	r2, [r3, #104]	; 0x68

}
 80092aa:	bf00      	nop
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	080091c9 	.word	0x080091c9
 80092bc:	080091b5 	.word	0x080091b5
 80092c0:	080091f1 	.word	0x080091f1
 80092c4:	080091dd 	.word	0x080091dd
 80092c8:	08009205 	.word	0x08009205
 80092cc:	08009219 	.word	0x08009219
 80092d0:	0800922d 	.word	0x0800922d
 80092d4:	08009241 	.word	0x08009241
 80092d8:	08009255 	.word	0x08009255

080092dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b09c      	sub	sp, #112	; 0x70
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d172      	bne.n	80093de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80092f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fa:	2200      	movs	r2, #0
 80092fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	330c      	adds	r3, #12
 8009304:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800930e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009314:	66bb      	str	r3, [r7, #104]	; 0x68
 8009316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800931e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009320:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800932c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e5      	bne.n	80092fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3314      	adds	r3, #20
 8009338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	667b      	str	r3, [r7, #100]	; 0x64
 800934a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009352:	647a      	str	r2, [r7, #68]	; 0x44
 8009354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	623b      	str	r3, [r7, #32]
   return(result);
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937c:	663b      	str	r3, [r7, #96]	; 0x60
 800937e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3314      	adds	r3, #20
 8009384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009386:	633a      	str	r2, [r7, #48]	; 0x30
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800938c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800939a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d119      	bne.n	80093de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	330c      	adds	r3, #12
 80093b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	330c      	adds	r3, #12
 80093c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093ca:	61fa      	str	r2, [r7, #28]
 80093cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	69b9      	ldr	r1, [r7, #24]
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	617b      	str	r3, [r7, #20]
   return(result);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e5      	bne.n	80093aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d107      	bne.n	80093f6 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80093e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093ec:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80093ee:	4611      	mov	r1, r2
 80093f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093f2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093f4:	e003      	b.n	80093fe <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 80093f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093fc:	4798      	blx	r3
}
 80093fe:	bf00      	nop
 8009400:	3770      	adds	r7, #112	; 0x70
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	2b01      	cmp	r3, #1
 800941a:	d109      	bne.n	8009430 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009424:	0852      	lsrs	r2, r2, #1
 8009426:	b292      	uxth	r2, r2
 8009428:	4611      	mov	r1, r2
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800942e:	e003      	b.n	8009438 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	4798      	blx	r3
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009450:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	bf0c      	ite	eq
 8009460:	2301      	moveq	r3, #1
 8009462:	2300      	movne	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b21      	cmp	r3, #33	; 0x21
 8009472:	d108      	bne.n	8009486 <UART_DMAError+0x46>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	2200      	movs	r2, #0
 800947e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009480:	68b8      	ldr	r0, [r7, #8]
 8009482:	f000 f935 	bl	80096f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b40      	cmp	r3, #64	; 0x40
 8009492:	bf0c      	ite	eq
 8009494:	2301      	moveq	r3, #1
 8009496:	2300      	movne	r3, #0
 8009498:	b2db      	uxtb	r3, r3
 800949a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b22      	cmp	r3, #34	; 0x22
 80094a6:	d108      	bne.n	80094ba <UART_DMAError+0x7a>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d005      	beq.n	80094ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80094b4:	68b8      	ldr	r0, [r7, #8]
 80094b6:	f000 f943 	bl	8009740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	f043 0210 	orr.w	r2, r3, #16
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ca:	68b8      	ldr	r0, [r7, #8]
 80094cc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b090      	sub	sp, #64	; 0x40
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	603b      	str	r3, [r7, #0]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e6:	e050      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ee:	d04c      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <UART_WaitOnFlagUntilTimeout+0x30>
 80094f6:	f7f9 faaf 	bl	8002a58 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009502:	429a      	cmp	r2, r3
 8009504:	d241      	bcs.n	800958a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	330c      	adds	r3, #12
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	330c      	adds	r3, #12
 8009524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009526:	637a      	str	r2, [r7, #52]	; 0x34
 8009528:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800952c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e5      	bne.n	8009506 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3314      	adds	r3, #20
 8009540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	613b      	str	r3, [r7, #16]
   return(result);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	63bb      	str	r3, [r7, #56]	; 0x38
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3314      	adds	r3, #20
 8009558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800955a:	623a      	str	r2, [r7, #32]
 800955c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	69f9      	ldr	r1, [r7, #28]
 8009560:	6a3a      	ldr	r2, [r7, #32]
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	61bb      	str	r3, [r7, #24]
   return(result);
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e5      	bne.n	800953a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2220      	movs	r2, #32
 800957a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e00f      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d09f      	beq.n	80094e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3740      	adds	r7, #64	; 0x40
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b098      	sub	sp, #96	; 0x60
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	4613      	mov	r3, r2
 80095c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	88fa      	ldrh	r2, [r7, #6]
 80095cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2222      	movs	r2, #34	; 0x22
 80095d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	4a40      	ldr	r2, [pc, #256]	; (80096e4 <UART_Start_Receive_DMA+0x130>)
 80095e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e8:	4a3f      	ldr	r2, [pc, #252]	; (80096e8 <UART_Start_Receive_DMA+0x134>)
 80095ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	4a3e      	ldr	r2, [pc, #248]	; (80096ec <UART_Start_Receive_DMA+0x138>)
 80095f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	2200      	movs	r2, #0
 80095fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80095fc:	f107 0308 	add.w	r3, r7, #8
 8009600:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3304      	adds	r3, #4
 800960c:	4619      	mov	r1, r3
 800960e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	88fb      	ldrh	r3, [r7, #6]
 8009614:	f7fa fa6a 	bl	8003aec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d019      	beq.n	8009672 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	330c      	adds	r3, #12
 8009644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800964e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009654:	65bb      	str	r3, [r7, #88]	; 0x58
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	330c      	adds	r3, #12
 800965c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800965e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800966c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e5      	bne.n	800963e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3314      	adds	r3, #20
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	f043 0301 	orr.w	r3, r3, #1
 8009688:	657b      	str	r3, [r7, #84]	; 0x54
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3314      	adds	r3, #20
 8009690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009692:	63ba      	str	r2, [r7, #56]	; 0x38
 8009694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e5      	bne.n	8009672 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3314      	adds	r3, #20
 80096ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	617b      	str	r3, [r7, #20]
   return(result);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096bc:	653b      	str	r3, [r7, #80]	; 0x50
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3314      	adds	r3, #20
 80096c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096c6:	627a      	str	r2, [r7, #36]	; 0x24
 80096c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6a39      	ldr	r1, [r7, #32]
 80096cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e5      	bne.n	80096a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3760      	adds	r7, #96	; 0x60
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	080092dd 	.word	0x080092dd
 80096e8:	08009407 	.word	0x08009407
 80096ec:	08009441 	.word	0x08009441

080096f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b089      	sub	sp, #36	; 0x24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	330c      	adds	r3, #12
 80096fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	60bb      	str	r3, [r7, #8]
   return(result);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800970e:	61fb      	str	r3, [r7, #28]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	330c      	adds	r3, #12
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	61ba      	str	r2, [r7, #24]
 800971a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6979      	ldr	r1, [r7, #20]
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	613b      	str	r3, [r7, #16]
   return(result);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e5      	bne.n	80096f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2220      	movs	r2, #32
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009734:	bf00      	nop
 8009736:	3724      	adds	r7, #36	; 0x24
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009740:	b480      	push	{r7}
 8009742:	b095      	sub	sp, #84	; 0x54
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	330c      	adds	r3, #12
 800974e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800975e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	330c      	adds	r3, #12
 8009766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009768:	643a      	str	r2, [r7, #64]	; 0x40
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800976e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e5      	bne.n	8009748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3314      	adds	r3, #20
 8009782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	61fb      	str	r3, [r7, #28]
   return(result);
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f023 0301 	bic.w	r3, r3, #1
 8009792:	64bb      	str	r3, [r7, #72]	; 0x48
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3314      	adds	r3, #20
 800979a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800979c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800979e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e5      	bne.n	800977c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d119      	bne.n	80097ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	330c      	adds	r3, #12
 80097be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f023 0310 	bic.w	r3, r3, #16
 80097ce:	647b      	str	r3, [r7, #68]	; 0x44
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097d8:	61ba      	str	r2, [r7, #24]
 80097da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6979      	ldr	r1, [r7, #20]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	613b      	str	r3, [r7, #16]
   return(result);
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e5      	bne.n	80097b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80097fa:	bf00      	nop
 80097fc:	3754      	adds	r7, #84	; 0x54
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009828:	bf00      	nop
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b21      	cmp	r3, #33	; 0x21
 8009842:	d13e      	bne.n	80098c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800984c:	d114      	bne.n	8009878 <UART_Transmit_IT+0x48>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d110      	bne.n	8009878 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800986a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	1c9a      	adds	r2, r3, #2
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	621a      	str	r2, [r3, #32]
 8009876:	e008      	b.n	800988a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	1c59      	adds	r1, r3, #1
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6211      	str	r1, [r2, #32]
 8009882:	781a      	ldrb	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800988e:	b29b      	uxth	r3, r3
 8009890:	3b01      	subs	r3, #1
 8009892:	b29b      	uxth	r3, r3
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	4619      	mov	r1, r3
 8009898:	84d1      	strh	r1, [r2, #38]	; 0x26
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10f      	bne.n	80098be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e000      	b.n	80098c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80098c2:	2302      	movs	r3, #2
  }
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68da      	ldr	r2, [r3, #12]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b08c      	sub	sp, #48	; 0x30
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b22      	cmp	r3, #34	; 0x22
 8009914:	f040 80ad 	bne.w	8009a72 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009920:	d117      	bne.n	8009952 <UART_Receive_IT+0x50>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d113      	bne.n	8009952 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009940:	b29a      	uxth	r2, r3
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	1c9a      	adds	r2, r3, #2
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	629a      	str	r2, [r3, #40]	; 0x28
 8009950:	e026      	b.n	80099a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009964:	d007      	beq.n	8009976 <UART_Receive_IT+0x74>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <UART_Receive_IT+0x82>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	b2da      	uxtb	r2, r3
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	e008      	b.n	8009996 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009990:	b2da      	uxtb	r2, r3
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	4619      	mov	r1, r3
 80099ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d15c      	bne.n	8009a6e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0220 	bic.w	r2, r2, #32
 80099c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695a      	ldr	r2, [r3, #20]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0201 	bic.w	r2, r2, #1
 80099e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d136      	bne.n	8009a62 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	330c      	adds	r3, #12
 8009a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	613b      	str	r3, [r7, #16]
   return(result);
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f023 0310 	bic.w	r3, r3, #16
 8009a10:	627b      	str	r3, [r7, #36]	; 0x24
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	330c      	adds	r3, #12
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	623a      	str	r2, [r7, #32]
 8009a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	69f9      	ldr	r1, [r7, #28]
 8009a20:	6a3a      	ldr	r2, [r7, #32]
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e5      	bne.n	80099fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0310 	and.w	r3, r3, #16
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d10a      	bne.n	8009a52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	4798      	blx	r3
 8009a60:	e003      	b.n	8009a6a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e002      	b.n	8009a74 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e000      	b.n	8009a74 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009a72:	2302      	movs	r3, #2
  }
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3730      	adds	r7, #48	; 0x30
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a80:	b0c0      	sub	sp, #256	; 0x100
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a98:	68d9      	ldr	r1, [r3, #12]
 8009a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	ea40 0301 	orr.w	r3, r0, r1
 8009aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ad4:	f021 010c 	bic.w	r1, r1, #12
 8009ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af6:	6999      	ldr	r1, [r3, #24]
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	ea40 0301 	orr.w	r3, r0, r1
 8009b02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4b8f      	ldr	r3, [pc, #572]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d005      	beq.n	8009b1c <UART_SetConfig+0xa0>
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4b8d      	ldr	r3, [pc, #564]	; (8009d4c <UART_SetConfig+0x2d0>)
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d104      	bne.n	8009b26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b1c:	f7fd fcd0 	bl	80074c0 <HAL_RCC_GetPCLK2Freq>
 8009b20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009b24:	e003      	b.n	8009b2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b26:	f7fd fcb7 	bl	8007498 <HAL_RCC_GetPCLK1Freq>
 8009b2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b38:	f040 810c 	bne.w	8009d54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009b4e:	4622      	mov	r2, r4
 8009b50:	462b      	mov	r3, r5
 8009b52:	1891      	adds	r1, r2, r2
 8009b54:	65b9      	str	r1, [r7, #88]	; 0x58
 8009b56:	415b      	adcs	r3, r3
 8009b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009b5e:	4621      	mov	r1, r4
 8009b60:	eb12 0801 	adds.w	r8, r2, r1
 8009b64:	4629      	mov	r1, r5
 8009b66:	eb43 0901 	adc.w	r9, r3, r1
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	f04f 0300 	mov.w	r3, #0
 8009b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b7e:	4690      	mov	r8, r2
 8009b80:	4699      	mov	r9, r3
 8009b82:	4623      	mov	r3, r4
 8009b84:	eb18 0303 	adds.w	r3, r8, r3
 8009b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	eb49 0303 	adc.w	r3, r9, r3
 8009b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ba2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009baa:	460b      	mov	r3, r1
 8009bac:	18db      	adds	r3, r3, r3
 8009bae:	653b      	str	r3, [r7, #80]	; 0x50
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	eb42 0303 	adc.w	r3, r2, r3
 8009bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8009bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009bbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009bc0:	f7f7 f802 	bl	8000bc8 <__aeabi_uldivmod>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4b61      	ldr	r3, [pc, #388]	; (8009d50 <UART_SetConfig+0x2d4>)
 8009bca:	fba3 2302 	umull	r2, r3, r3, r2
 8009bce:	095b      	lsrs	r3, r3, #5
 8009bd0:	011c      	lsls	r4, r3, #4
 8009bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009be0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	1891      	adds	r1, r2, r2
 8009bea:	64b9      	str	r1, [r7, #72]	; 0x48
 8009bec:	415b      	adcs	r3, r3
 8009bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009bf4:	4641      	mov	r1, r8
 8009bf6:	eb12 0a01 	adds.w	sl, r2, r1
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	eb43 0b01 	adc.w	fp, r3, r1
 8009c00:	f04f 0200 	mov.w	r2, #0
 8009c04:	f04f 0300 	mov.w	r3, #0
 8009c08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c14:	4692      	mov	sl, r2
 8009c16:	469b      	mov	fp, r3
 8009c18:	4643      	mov	r3, r8
 8009c1a:	eb1a 0303 	adds.w	r3, sl, r3
 8009c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c22:	464b      	mov	r3, r9
 8009c24:	eb4b 0303 	adc.w	r3, fp, r3
 8009c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009c3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c40:	460b      	mov	r3, r1
 8009c42:	18db      	adds	r3, r3, r3
 8009c44:	643b      	str	r3, [r7, #64]	; 0x40
 8009c46:	4613      	mov	r3, r2
 8009c48:	eb42 0303 	adc.w	r3, r2, r3
 8009c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009c4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c56:	f7f6 ffb7 	bl	8000bc8 <__aeabi_uldivmod>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4b3b      	ldr	r3, [pc, #236]	; (8009d50 <UART_SetConfig+0x2d4>)
 8009c62:	fba3 2301 	umull	r2, r3, r3, r1
 8009c66:	095b      	lsrs	r3, r3, #5
 8009c68:	2264      	movs	r2, #100	; 0x64
 8009c6a:	fb02 f303 	mul.w	r3, r2, r3
 8009c6e:	1acb      	subs	r3, r1, r3
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c76:	4b36      	ldr	r3, [pc, #216]	; (8009d50 <UART_SetConfig+0x2d4>)
 8009c78:	fba3 2302 	umull	r2, r3, r3, r2
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c84:	441c      	add	r4, r3
 8009c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c98:	4642      	mov	r2, r8
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	1891      	adds	r1, r2, r2
 8009c9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ca0:	415b      	adcs	r3, r3
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ca8:	4641      	mov	r1, r8
 8009caa:	1851      	adds	r1, r2, r1
 8009cac:	6339      	str	r1, [r7, #48]	; 0x30
 8009cae:	4649      	mov	r1, r9
 8009cb0:	414b      	adcs	r3, r1
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	f04f 0300 	mov.w	r3, #0
 8009cbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	00cb      	lsls	r3, r1, #3
 8009cc4:	4651      	mov	r1, sl
 8009cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cca:	4651      	mov	r1, sl
 8009ccc:	00ca      	lsls	r2, r1, #3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cdc:	464b      	mov	r3, r9
 8009cde:	460a      	mov	r2, r1
 8009ce0:	eb42 0303 	adc.w	r3, r2, r3
 8009ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	18db      	adds	r3, r3, r3
 8009d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d02:	4613      	mov	r3, r2
 8009d04:	eb42 0303 	adc.w	r3, r2, r3
 8009d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d12:	f7f6 ff59 	bl	8000bc8 <__aeabi_uldivmod>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <UART_SetConfig+0x2d4>)
 8009d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d20:	095b      	lsrs	r3, r3, #5
 8009d22:	2164      	movs	r1, #100	; 0x64
 8009d24:	fb01 f303 	mul.w	r3, r1, r3
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	3332      	adds	r3, #50	; 0x32
 8009d2e:	4a08      	ldr	r2, [pc, #32]	; (8009d50 <UART_SetConfig+0x2d4>)
 8009d30:	fba2 2303 	umull	r2, r3, r2, r3
 8009d34:	095b      	lsrs	r3, r3, #5
 8009d36:	f003 0207 	and.w	r2, r3, #7
 8009d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4422      	add	r2, r4
 8009d42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d44:	e106      	b.n	8009f54 <UART_SetConfig+0x4d8>
 8009d46:	bf00      	nop
 8009d48:	40011000 	.word	0x40011000
 8009d4c:	40011400 	.word	0x40011400
 8009d50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009d66:	4642      	mov	r2, r8
 8009d68:	464b      	mov	r3, r9
 8009d6a:	1891      	adds	r1, r2, r2
 8009d6c:	6239      	str	r1, [r7, #32]
 8009d6e:	415b      	adcs	r3, r3
 8009d70:	627b      	str	r3, [r7, #36]	; 0x24
 8009d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d76:	4641      	mov	r1, r8
 8009d78:	1854      	adds	r4, r2, r1
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	eb43 0501 	adc.w	r5, r3, r1
 8009d80:	f04f 0200 	mov.w	r2, #0
 8009d84:	f04f 0300 	mov.w	r3, #0
 8009d88:	00eb      	lsls	r3, r5, #3
 8009d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d8e:	00e2      	lsls	r2, r4, #3
 8009d90:	4614      	mov	r4, r2
 8009d92:	461d      	mov	r5, r3
 8009d94:	4643      	mov	r3, r8
 8009d96:	18e3      	adds	r3, r4, r3
 8009d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	eb45 0303 	adc.w	r3, r5, r3
 8009da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009db2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009db6:	f04f 0200 	mov.w	r2, #0
 8009dba:	f04f 0300 	mov.w	r3, #0
 8009dbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	008b      	lsls	r3, r1, #2
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dcc:	4621      	mov	r1, r4
 8009dce:	008a      	lsls	r2, r1, #2
 8009dd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009dd4:	f7f6 fef8 	bl	8000bc8 <__aeabi_uldivmod>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4b60      	ldr	r3, [pc, #384]	; (8009f60 <UART_SetConfig+0x4e4>)
 8009dde:	fba3 2302 	umull	r2, r3, r3, r2
 8009de2:	095b      	lsrs	r3, r3, #5
 8009de4:	011c      	lsls	r4, r3, #4
 8009de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009df0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009df4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009df8:	4642      	mov	r2, r8
 8009dfa:	464b      	mov	r3, r9
 8009dfc:	1891      	adds	r1, r2, r2
 8009dfe:	61b9      	str	r1, [r7, #24]
 8009e00:	415b      	adcs	r3, r3
 8009e02:	61fb      	str	r3, [r7, #28]
 8009e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e08:	4641      	mov	r1, r8
 8009e0a:	1851      	adds	r1, r2, r1
 8009e0c:	6139      	str	r1, [r7, #16]
 8009e0e:	4649      	mov	r1, r9
 8009e10:	414b      	adcs	r3, r1
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e20:	4659      	mov	r1, fp
 8009e22:	00cb      	lsls	r3, r1, #3
 8009e24:	4651      	mov	r1, sl
 8009e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e2a:	4651      	mov	r1, sl
 8009e2c:	00ca      	lsls	r2, r1, #3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4619      	mov	r1, r3
 8009e32:	4603      	mov	r3, r0
 8009e34:	4642      	mov	r2, r8
 8009e36:	189b      	adds	r3, r3, r2
 8009e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	460a      	mov	r2, r1
 8009e40:	eb42 0303 	adc.w	r3, r2, r3
 8009e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009e60:	4649      	mov	r1, r9
 8009e62:	008b      	lsls	r3, r1, #2
 8009e64:	4641      	mov	r1, r8
 8009e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	008a      	lsls	r2, r1, #2
 8009e6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e72:	f7f6 fea9 	bl	8000bc8 <__aeabi_uldivmod>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4b38      	ldr	r3, [pc, #224]	; (8009f60 <UART_SetConfig+0x4e4>)
 8009e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009e82:	095b      	lsrs	r3, r3, #5
 8009e84:	2264      	movs	r2, #100	; 0x64
 8009e86:	fb02 f303 	mul.w	r3, r2, r3
 8009e8a:	1acb      	subs	r3, r1, r3
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	3332      	adds	r3, #50	; 0x32
 8009e90:	4a33      	ldr	r2, [pc, #204]	; (8009f60 <UART_SetConfig+0x4e4>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e9c:	441c      	add	r4, r3
 8009e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	673b      	str	r3, [r7, #112]	; 0x70
 8009ea6:	677a      	str	r2, [r7, #116]	; 0x74
 8009ea8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009eac:	4642      	mov	r2, r8
 8009eae:	464b      	mov	r3, r9
 8009eb0:	1891      	adds	r1, r2, r2
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	415b      	adcs	r3, r3
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ebc:	4641      	mov	r1, r8
 8009ebe:	1851      	adds	r1, r2, r1
 8009ec0:	6039      	str	r1, [r7, #0]
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	414b      	adcs	r3, r1
 8009ec6:	607b      	str	r3, [r7, #4]
 8009ec8:	f04f 0200 	mov.w	r2, #0
 8009ecc:	f04f 0300 	mov.w	r3, #0
 8009ed0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ed4:	4659      	mov	r1, fp
 8009ed6:	00cb      	lsls	r3, r1, #3
 8009ed8:	4651      	mov	r1, sl
 8009eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ede:	4651      	mov	r1, sl
 8009ee0:	00ca      	lsls	r2, r1, #3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4642      	mov	r2, r8
 8009eea:	189b      	adds	r3, r3, r2
 8009eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eee:	464b      	mov	r3, r9
 8009ef0:	460a      	mov	r2, r1
 8009ef2:	eb42 0303 	adc.w	r3, r2, r3
 8009ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	663b      	str	r3, [r7, #96]	; 0x60
 8009f02:	667a      	str	r2, [r7, #100]	; 0x64
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	f04f 0300 	mov.w	r3, #0
 8009f0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009f10:	4649      	mov	r1, r9
 8009f12:	008b      	lsls	r3, r1, #2
 8009f14:	4641      	mov	r1, r8
 8009f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f1a:	4641      	mov	r1, r8
 8009f1c:	008a      	lsls	r2, r1, #2
 8009f1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009f22:	f7f6 fe51 	bl	8000bc8 <__aeabi_uldivmod>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	; (8009f60 <UART_SetConfig+0x4e4>)
 8009f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f30:	095b      	lsrs	r3, r3, #5
 8009f32:	2164      	movs	r1, #100	; 0x64
 8009f34:	fb01 f303 	mul.w	r3, r1, r3
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	3332      	adds	r3, #50	; 0x32
 8009f3e:	4a08      	ldr	r2, [pc, #32]	; (8009f60 <UART_SetConfig+0x4e4>)
 8009f40:	fba2 2303 	umull	r2, r3, r2, r3
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	f003 020f 	and.w	r2, r3, #15
 8009f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4422      	add	r2, r4
 8009f52:	609a      	str	r2, [r3, #8]
}
 8009f54:	bf00      	nop
 8009f56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f60:	51eb851f 	.word	0x51eb851f

08009f64 <Hard_CRC32ETH>:
	@brief Hardware CRC calculation.
	@param *_buffer: pointer for the data buffer.
	@param _length: length of the buffer.
*/
uint32_t Hard_CRC32ETH(uint8_t *_buffer, uint8_t _length)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
	//RCC->AHBENR |= RCC_AHBENR_CRCEN;
	CRC->CR = CRC_CR_RESET;
 8009f70:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <Hard_CRC32ETH+0x50>)
 8009f72:	2201      	movs	r2, #1
 8009f74:	609a      	str	r2, [r3, #8]
	for (uint8_t i = 0; i < _length; i++)
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
 8009f7a:	e00e      	b.n	8009f9a <Hard_CRC32ETH+0x36>
	{
		CRC->DR = (uint32_t)(*_buffer);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	781a      	ldrb	r2, [r3, #0]
 8009f80:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <Hard_CRC32ETH+0x50>)
 8009f82:	601a      	str	r2, [r3, #0]
		_buffer++;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3301      	adds	r3, #1
 8009f88:	607b      	str	r3, [r7, #4]
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP();
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
	for (uint8_t i = 0; i < _length; i++)
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	3301      	adds	r3, #1
 8009f98:	73fb      	strb	r3, [r7, #15]
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d3ec      	bcc.n	8009f7c <Hard_CRC32ETH+0x18>
	}
	return CRC->DR;
 8009fa2:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <Hard_CRC32ETH+0x50>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40023000 	.word	0x40023000

08009fb8 <DEV_RWGenEepAll>:
/*
 * @brief Read all generators' data from external memory on the board.
 *
 * @param ReadWrite : 0 to write, 1 to read.
 */
void DEV_RWGenEepAll(uint8_t ReadWrite) {
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	71fb      	strb	r3, [r7, #7]

	UserData.BYTE_ADDR = GEN_DATA_BYTE;
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <DEV_RWGenEepAll+0x24>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
	UserData.PAGE_ADDR = GEN_DATA_PAGE;
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <DEV_RWGenEepAll+0x24>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	705a      	strb	r2, [r3, #1]
	if (!ReadWrite) {
	/*  */
	}
}
 8009fce:	bf00      	nop
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	20000010 	.word	0x20000010

08009fe0 <DEV_GetType>:

/*
 * @brief Getter for DEV_TypeList_t struct.
 */
DEV_List_t* DEV_GetType(void) {
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0

	static DEV_List_t DevList = { 0 };
	return &DevList;
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <DEV_GetType+0x10>)
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20000670 	.word	0x20000670

08009ff4 <DEV_WriteDevType>:

/*
 * @brief Device available list.
 */
void DEV_WriteDevType(uint8_t dev_channel, uint32_t dev_type, uint8_t dev_subtype) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	71fb      	strb	r3, [r7, #7]
 800a000:	4613      	mov	r3, r2
 800a002:	71bb      	strb	r3, [r7, #6]

	if ((dev_channel) <= MAX_UPCB_NUMBER) {
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	2b06      	cmp	r3, #6
 800a008:	d80f      	bhi.n	800a02a <DEV_WriteDevType+0x36>
		DEV_GetType()->DevType[dev_channel - 1] = dev_type;
 800a00a:	f7ff ffe9 	bl	8009fe0 <DEV_GetType>
 800a00e:	4601      	mov	r1, r0
 800a010:	79fb      	ldrb	r3, [r7, #7]
 800a012:	3b01      	subs	r3, #1
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		DEV_GetType()->DevSubType[dev_channel - 1] = dev_subtype;
 800a01a:	f7ff ffe1 	bl	8009fe0 <DEV_GetType>
 800a01e:	4602      	mov	r2, r0
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	3b01      	subs	r3, #1
 800a024:	4413      	add	r3, r2
 800a026:	79ba      	ldrb	r2, [r7, #6]
 800a028:	761a      	strb	r2, [r3, #24]
	}
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <DEV_NameDecode>:
}

/*
 * @brief Device name decoder.
 **/
void DEV_NameDecode(uint8_t State, uint32_t DevType, uint8_t DevSubtype, DEV_CharBuff_t* CharBuff) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607b      	str	r3, [r7, #4]
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]
 800a042:	4613      	mov	r3, r2
 800a044:	73bb      	strb	r3, [r7, #14]

	/* State decoding to char. */
	switch (State) {
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <DEV_NameDecode+0x1e>
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d006      	beq.n	800a05e <DEV_NameDecode+0x2a>
 800a050:	e00b      	b.n	800a06a <DEV_NameDecode+0x36>
		case DEV_OFF:
			sprintf(&CharBuff->state[0], "OFF");
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	491b      	ldr	r1, [pc, #108]	; (800a0c4 <DEV_NameDecode+0x90>)
 800a056:	4618      	mov	r0, r3
 800a058:	f010 fd4c 	bl	801aaf4 <siprintf>
			break;
 800a05c:	e00b      	b.n	800a076 <DEV_NameDecode+0x42>
		case DEV_ON:
			sprintf(&CharBuff->state[0], "ON");
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4919      	ldr	r1, [pc, #100]	; (800a0c8 <DEV_NameDecode+0x94>)
 800a062:	4618      	mov	r0, r3
 800a064:	f010 fd46 	bl	801aaf4 <siprintf>
			break;
 800a068:	e005      	b.n	800a076 <DEV_NameDecode+0x42>
		default:
			sprintf(&CharBuff->state[0], "N.A.");
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4917      	ldr	r1, [pc, #92]	; (800a0cc <DEV_NameDecode+0x98>)
 800a06e:	4618      	mov	r0, r3
 800a070:	f010 fd40 	bl	801aaf4 <siprintf>
			break;
 800a074:	bf00      	nop
	}

	/* Select the right type of addressed device. */
	switch (DevType) {
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <DEV_NameDecode+0x9c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d106      	bne.n	800a08c <DEV_NameDecode+0x58>
		case DEV:
			sprintf(&CharBuff->dev_id[0], "DEV");
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3305      	adds	r3, #5
 800a082:	4914      	ldr	r1, [pc, #80]	; (800a0d4 <DEV_NameDecode+0xa0>)
 800a084:	4618      	mov	r0, r3
 800a086:	f010 fd35 	bl	801aaf4 <siprintf>
			break;
 800a08a:	e006      	b.n	800a09a <DEV_NameDecode+0x66>
		default:
			sprintf(&CharBuff->dev_id[0], "N.A.");
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3305      	adds	r3, #5
 800a090:	490e      	ldr	r1, [pc, #56]	; (800a0cc <DEV_NameDecode+0x98>)
 800a092:	4618      	mov	r0, r3
 800a094:	f010 fd2e 	bl	801aaf4 <siprintf>
			break;
 800a098:	bf00      	nop
	}

	/* Subtype decoding to char. */
	switch (DevSubtype) {
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <DEV_NameDecode+0x7a>
		case SGU0:
			sprintf(&CharBuff->dev_subid[0], "SGU0");
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3310      	adds	r3, #16
 800a0a4:	490c      	ldr	r1, [pc, #48]	; (800a0d8 <DEV_NameDecode+0xa4>)
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f010 fd24 	bl	801aaf4 <siprintf>
			break;
 800a0ac:	e006      	b.n	800a0bc <DEV_NameDecode+0x88>
		default:
			sprintf(&CharBuff->dev_subid[0], "N.A.");
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3310      	adds	r3, #16
 800a0b2:	4906      	ldr	r1, [pc, #24]	; (800a0cc <DEV_NameDecode+0x98>)
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f010 fd1d 	bl	801aaf4 <siprintf>
			break;
 800a0ba:	bf00      	nop
	}
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	0801ce24 	.word	0x0801ce24
 800a0c8:	0801ce28 	.word	0x0801ce28
 800a0cc:	0801ce2c 	.word	0x0801ce2c
 800a0d0:	f0762bb3 	.word	0xf0762bb3
 800a0d4:	0801ce34 	.word	0x0801ce34
 800a0d8:	0801ce38 	.word	0x0801ce38

0800a0dc <BTN_SWPress>:
}

/*
 * @brief Software button trigger.
 */
void BTN_SWPress(void) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0

	/* Giving the semaphore. */
	xSemaphoreGive(SoftBtnPressed_sh);
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <BTN_SWPress+0x20>)
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	f002 f925 	bl	800c338 <xQueueGenericSend>
	/* Software triggered external interrupt input. It's like press a button on the pin 10. */
	EXTI->SWIER = EXTI_SWIER_SWIER10;
 800a0ee:	4b04      	ldr	r3, [pc, #16]	; (800a100 <BTN_SWPress+0x24>)
 800a0f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0f4:	611a      	str	r2, [r3, #16]
}
 800a0f6:	bf00      	nop
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	2000023c 	.word	0x2000023c
 800a100:	40013c00 	.word	0x40013c00

0800a104 <DataExchCAN_Init>:
static void CANRxFifo1Callback(struct __CAN_HandleTypeDef* hcan);

/*
 * @brief Init data and command exchange tasks.
*/
void DataExchCAN_Init(void) {
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af02      	add	r7, sp, #8

	/* Callback's register functions. */
	HAL_CAN_RegisterCallback(CmdInOutCAN, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, CANRxFifo0Callback);
 800a10a:	4b20      	ldr	r3, [pc, #128]	; (800a18c <DataExchCAN_Init+0x88>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a20      	ldr	r2, [pc, #128]	; (800a190 <DataExchCAN_Init+0x8c>)
 800a110:	2106      	movs	r1, #6
 800a112:	4618      	mov	r0, r3
 800a114:	f7f8 fe16 	bl	8002d44 <HAL_CAN_RegisterCallback>
	HAL_CAN_RegisterCallback(CmdInOutCAN, HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID, CANRxFifo1Callback);
 800a118:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <DataExchCAN_Init+0x88>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <DataExchCAN_Init+0x90>)
 800a11e:	2108      	movs	r1, #8
 800a120:	4618      	mov	r0, r3
 800a122:	f7f8 fe0f 	bl	8002d44 <HAL_CAN_RegisterCallback>

	/* Init CAN. */
	CAN_Config(CmdInOutCAN);
 800a126:	4b19      	ldr	r3, [pc, #100]	; (800a18c <DataExchCAN_Init+0x88>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 fa62 	bl	800a5f4 <CAN_Config>
	CAN_ConfigBanks(CmdInOutCAN, 0);
 800a130:	4b16      	ldr	r3, [pc, #88]	; (800a18c <DataExchCAN_Init+0x88>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2100      	movs	r1, #0
 800a136:	4618      	mov	r0, r3
 800a138:	f000 faba 	bl	800a6b0 <CAN_ConfigBanks>
	HAL_CAN_Start(CmdInOutCAN);
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <DataExchCAN_Init+0x88>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f7f8 feaf 	bl	8002ea4 <HAL_CAN_Start>

	/* Creating semaphores. */
	CAN_msh = xSemaphoreCreateMutex();
 800a146:	2001      	movs	r0, #1
 800a148:	f002 f8dd 	bl	800c306 <xQueueCreateMutex>
 800a14c:	4603      	mov	r3, r0
 800a14e:	4a12      	ldr	r2, [pc, #72]	; (800a198 <DataExchCAN_Init+0x94>)
 800a150:	6013      	str	r3, [r2, #0]

	/* Creating queues. */
	CanDataRx_qh = xQueueCreate(20, sizeof(CAN_RxQueueData_t));
 800a152:	2200      	movs	r2, #0
 800a154:	210e      	movs	r1, #14
 800a156:	2014      	movs	r0, #20
 800a158:	f002 f866 	bl	800c228 <xQueueGenericCreate>
 800a15c:	4603      	mov	r3, r0
 800a15e:	4a0f      	ldr	r2, [pc, #60]	; (800a19c <DataExchCAN_Init+0x98>)
 800a160:	6013      	str	r3, [r2, #0]
	CanDataTx_qh = xQueueCreate(20, sizeof(CAN_TxQueueData_t));
 800a162:	2200      	movs	r2, #0
 800a164:	2112      	movs	r1, #18
 800a166:	2014      	movs	r0, #20
 800a168:	f002 f85e 	bl	800c228 <xQueueGenericCreate>
 800a16c:	4603      	mov	r3, r0
 800a16e:	4a0c      	ldr	r2, [pc, #48]	; (800a1a0 <DataExchCAN_Init+0x9c>)
 800a170:	6013      	str	r3, [r2, #0]

	/* Creating timers. */
	/* Creating tasks. */
	xTaskCreate(CmdCANTxRx_Ti, "CmdCAN", 196, NULL, osPriorityNormal, &CmdCANTxRx_th);
 800a172:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <DataExchCAN_Init+0xa0>)
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	2300      	movs	r3, #0
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	2300      	movs	r3, #0
 800a17c:	22c4      	movs	r2, #196	; 0xc4
 800a17e:	490a      	ldr	r1, [pc, #40]	; (800a1a8 <DataExchCAN_Init+0xa4>)
 800a180:	480a      	ldr	r0, [pc, #40]	; (800a1ac <DataExchCAN_Init+0xa8>)
 800a182:	f002 ffd3 	bl	800d12c <xTaskCreate>
}
 800a186:	bf00      	nop
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000014 	.word	0x20000014
 800a190:	0800a73d 	.word	0x0800a73d
 800a194:	0800a779 	.word	0x0800a779
 800a198:	20000690 	.word	0x20000690
 800a19c:	20000694 	.word	0x20000694
 800a1a0:	20000698 	.word	0x20000698
 800a1a4:	2000069c 	.word	0x2000069c
 800a1a8:	0801ce48 	.word	0x0801ce48
 800a1ac:	0800a1b1 	.word	0x0800a1b1

0800a1b0 <CmdCANTxRx_Ti>:

/*
 * @brief CAN command task handler.
 */
static void CmdCANTxRx_Ti(void* const param) {
 800a1b0:	b5b0      	push	{r4, r5, r7, lr}
 800a1b2:	b0c6      	sub	sp, #280	; 0x118
 800a1b4:	af04      	add	r7, sp, #16
 800a1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1be:	6018      	str	r0, [r3, #0]

	/* Variables. */
	uint8_t isValueErr = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	char char_buff[150];
	LedChData_t Leds = { 0 };
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	/* Temporary text message. */
	DEV_CharBuff_t tmp_char;

	/* Data structs for CAN communication. */
	CAN_DevId_t DevId = { 0 };
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	CAN_TxQueueData_t CAN_TxData = { 0 };
 800a1d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	605a      	str	r2, [r3, #4]
 800a1dc:	609a      	str	r2, [r3, #8]
 800a1de:	60da      	str	r2, [r3, #12]
 800a1e0:	821a      	strh	r2, [r3, #16]
	CAN_RxQueueData_t CAN_RxData = { 0 };
 800a1e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	605a      	str	r2, [r3, #4]
 800a1ec:	609a      	str	r2, [r3, #8]
 800a1ee:	819a      	strh	r2, [r3, #12]

	CAN_TxHeaderTypeDef CanTxHeader = {
 800a1f0:	4b95      	ldr	r3, [pc, #596]	; (800a448 <CmdCANTxRx_Ti+0x298>)
 800a1f2:	f107 0410 	add.w	r4, r7, #16
 800a1f6:	461d      	mov	r5, r3
 800a1f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a200:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Mailbox number. */
	uint32_t TxMailboxId;

	for (;/*_*/;) {

		if (xQueueReceive(CanDataTx_qh, &CAN_TxData, 0) == pdPASS) {
 800a204:	4b91      	ldr	r3, [pc, #580]	; (800a44c <CmdCANTxRx_Ti+0x29c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a20c:	2200      	movs	r2, #0
 800a20e:	4618      	mov	r0, r3
 800a210:	f002 fab8 	bl	800c784 <xQueueReceive>
 800a214:	4603      	mov	r3, r0
 800a216:	2b01      	cmp	r3, #1
 800a218:	f040 8175 	bne.w	800a506 <CmdCANTxRx_Ti+0x356>

			if ((CAN_TxData.SPrefixCode == TYPE_UNDEFINED && CAN_TxData.Address < MIN_CAN_ADDR + UCS1_CMD_BASE_OFFSET - 1) || (CAN_TxData.Address > MAX_CAN_ADDR + UCS1_CMD_BASE_OFFSET - 1)) {
 800a21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21e:	2bff      	cmp	r3, #255	; 0xff
 800a220:	d103      	bne.n	800a22a <CmdCANTxRx_Ti+0x7a>
 800a222:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a226:	2b04      	cmp	r3, #4
 800a228:	d903      	bls.n	800a232 <CmdCANTxRx_Ti+0x82>
 800a22a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a22e:	2b0a      	cmp	r3, #10
 800a230:	d90f      	bls.n	800a252 <CmdCANTxRx_Ti+0xa2>
				UART_SendMessage((uint8_t*)& char_buff, sprintf(char_buff, "Number of channel error. It has to be from %d to %d.\r\n", MIN_CAN_ADDR, MAX_CAN_ADDR));
 800a232:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a236:	2306      	movs	r3, #6
 800a238:	2201      	movs	r2, #1
 800a23a:	4985      	ldr	r1, [pc, #532]	; (800a450 <CmdCANTxRx_Ti+0x2a0>)
 800a23c:	f010 fc5a 	bl	801aaf4 <siprintf>
 800a240:	4603      	mov	r3, r0
 800a242:	b29a      	uxth	r2, r3
 800a244:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 fe42 	bl	800aed4 <UART_SendMessage>
 800a250:	e159      	b.n	800a506 <CmdCANTxRx_Ti+0x356>
			} else {

				/* SGU parameters check. */
				if ((CAN_TxData.CmdCode == BCS_SETAmplitude) || (CAN_TxData.CmdCode == UCS_SETAmplitude)) {
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	4a7f      	ldr	r2, [pc, #508]	; (800a454 <CmdCANTxRx_Ti+0x2a4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <CmdCANTxRx_Ti+0xb2>
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	4a7e      	ldr	r2, [pc, #504]	; (800a458 <CmdCANTxRx_Ti+0x2a8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d126      	bne.n	800a2b0 <CmdCANTxRx_Ti+0x100>
					if ((CAN_TxData.Phase < DEV_MIN_AMPL) || (CAN_TxData.Phase > DEV_MAX_AMPL)) {
 800a262:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a272:	d40a      	bmi.n	800a28a <CmdCANTxRx_Ti+0xda>
 800a274:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 800a278:	eddf 7a78 	vldr	s15, [pc, #480]	; 800a45c <CmdCANTxRx_Ti+0x2ac>
 800a27c:	ee07 3a10 	vmov	s14, r3
 800a280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a288:	dd12      	ble.n	800a2b0 <CmdCANTxRx_Ti+0x100>
						isValueErr = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
						UART_SendMessage((uint8_t*)& char_buff, sprintf(char_buff, "Amplitude value error. It has to be from %d to %d.\r\n", DEV_MIN_AMPL, DEV_MAX_AMPL));
 800a290:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a298:	2200      	movs	r2, #0
 800a29a:	4971      	ldr	r1, [pc, #452]	; (800a460 <CmdCANTxRx_Ti+0x2b0>)
 800a29c:	f010 fc2a 	bl	801aaf4 <siprintf>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 fe12 	bl	800aed4 <UART_SendMessage>
					}
				}

				if ((CAN_TxData.CmdCode == BCS_SETFrequency) || (CAN_TxData.CmdCode == UCS_SETFrequency)) {
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	4a6c      	ldr	r2, [pc, #432]	; (800a464 <CmdCANTxRx_Ti+0x2b4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d003      	beq.n	800a2c0 <CmdCANTxRx_Ti+0x110>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	4a6b      	ldr	r2, [pc, #428]	; (800a468 <CmdCANTxRx_Ti+0x2b8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d127      	bne.n	800a310 <CmdCANTxRx_Ti+0x160>
					if ((CAN_TxData.Phase < DEV_MIN_FREQ) || (CAN_TxData.Phase > DEV_MAX_FREQ)) {
 800a2c0:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 800a2c4:	eddf 7a69 	vldr	s15, [pc, #420]	; 800a46c <CmdCANTxRx_Ti+0x2bc>
 800a2c8:	ee07 3a10 	vmov	s14, r3
 800a2cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d4:	d40a      	bmi.n	800a2ec <CmdCANTxRx_Ti+0x13c>
 800a2d6:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 800a2da:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a470 <CmdCANTxRx_Ti+0x2c0>
 800a2de:	ee07 3a10 	vmov	s14, r3
 800a2e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ea:	dd11      	ble.n	800a310 <CmdCANTxRx_Ti+0x160>
						isValueErr = 1;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
						UART_SendMessage((uint8_t*)& char_buff, sprintf(char_buff, "Frequency value error. It has to be from %d to %d.\r\n", DEV_MIN_FREQ, DEV_MAX_FREQ));
 800a2f2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a2f6:	4b5f      	ldr	r3, [pc, #380]	; (800a474 <CmdCANTxRx_Ti+0x2c4>)
 800a2f8:	4a5f      	ldr	r2, [pc, #380]	; (800a478 <CmdCANTxRx_Ti+0x2c8>)
 800a2fa:	4960      	ldr	r1, [pc, #384]	; (800a47c <CmdCANTxRx_Ti+0x2cc>)
 800a2fc:	f010 fbfa 	bl	801aaf4 <siprintf>
 800a300:	4603      	mov	r3, r0
 800a302:	b29a      	uxth	r2, r3
 800a304:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fde2 	bl	800aed4 <UART_SendMessage>
					}
				}

				if ((CAN_TxData.CmdCode == BCS_SETPhase) || (CAN_TxData.CmdCode == UCS_SETPhase)) {
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	4a5b      	ldr	r2, [pc, #364]	; (800a480 <CmdCANTxRx_Ti+0x2d0>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d003      	beq.n	800a320 <CmdCANTxRx_Ti+0x170>
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	4a5a      	ldr	r2, [pc, #360]	; (800a484 <CmdCANTxRx_Ti+0x2d4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d126      	bne.n	800a36e <CmdCANTxRx_Ti+0x1be>
					if ((CAN_TxData.Phase < DEV_MIN_PHASE) || (CAN_TxData.Phase > DEV_MAX_PHASE)) {
 800a320:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 800a324:	ee07 3a90 	vmov	s15, r3
 800a328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a330:	d40a      	bmi.n	800a348 <CmdCANTxRx_Ti+0x198>
 800a332:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 800a336:	eddf 7a54 	vldr	s15, [pc, #336]	; 800a488 <CmdCANTxRx_Ti+0x2d8>
 800a33a:	ee07 3a10 	vmov	s14, r3
 800a33e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a346:	dd12      	ble.n	800a36e <CmdCANTxRx_Ti+0x1be>
						isValueErr = 1;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
						UART_SendMessage((uint8_t*)& char_buff, sprintf(char_buff, "Phase value error. It has to be from %d to %d.\r\n", DEV_MIN_PHASE, DEV_MAX_PHASE));
 800a34e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a352:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a356:	2200      	movs	r2, #0
 800a358:	494c      	ldr	r1, [pc, #304]	; (800a48c <CmdCANTxRx_Ti+0x2dc>)
 800a35a:	f010 fbcb 	bl	801aaf4 <siprintf>
 800a35e:	4603      	mov	r3, r0
 800a360:	b29a      	uxth	r2, r3
 800a362:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 fdb3 	bl	800aed4 <UART_SendMessage>
				}

				/* Another device parameter check. */

				/* Answering to devices. */
				if (!isValueErr /*& (CAN_TxData.DevType == HVU)*/) {
 800a36e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800a372:	2b00      	cmp	r3, #0
 800a374:	f040 80c4 	bne.w	800a500 <CmdCANTxRx_Ti+0x350>

					/* Answers' selector. */
					switch (CAN_TxData.CmdCode) {
 800a378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37a:	4a45      	ldr	r2, [pc, #276]	; (800a490 <CmdCANTxRx_Ti+0x2e0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d018      	beq.n	800a3b2 <CmdCANTxRx_Ti+0x202>
 800a380:	4a43      	ldr	r2, [pc, #268]	; (800a490 <CmdCANTxRx_Ti+0x2e0>)
 800a382:	4293      	cmp	r3, r2
 800a384:	f200 8092 	bhi.w	800a4ac <CmdCANTxRx_Ti+0x2fc>
 800a388:	4a32      	ldr	r2, [pc, #200]	; (800a454 <CmdCANTxRx_Ti+0x2a4>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d03e      	beq.n	800a40c <CmdCANTxRx_Ti+0x25c>
 800a38e:	4a31      	ldr	r2, [pc, #196]	; (800a454 <CmdCANTxRx_Ti+0x2a4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	f200 808b 	bhi.w	800a4ac <CmdCANTxRx_Ti+0x2fc>
 800a396:	4a3a      	ldr	r2, [pc, #232]	; (800a480 <CmdCANTxRx_Ti+0x2d0>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d028      	beq.n	800a3ee <CmdCANTxRx_Ti+0x23e>
 800a39c:	4a38      	ldr	r2, [pc, #224]	; (800a480 <CmdCANTxRx_Ti+0x2d0>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	f200 8084 	bhi.w	800a4ac <CmdCANTxRx_Ti+0x2fc>
 800a3a4:	4a3b      	ldr	r2, [pc, #236]	; (800a494 <CmdCANTxRx_Ti+0x2e4>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d012      	beq.n	800a3d0 <CmdCANTxRx_Ti+0x220>
 800a3aa:	4a2e      	ldr	r2, [pc, #184]	; (800a464 <CmdCANTxRx_Ti+0x2b4>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d03c      	beq.n	800a42a <CmdCANTxRx_Ti+0x27a>
							break;
						case BCS_SETFrequency:
							UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "BCS_SETFrequency is OK.\r\n"));
							break;
						default:
							break;
 800a3b0:	e07c      	b.n	800a4ac <CmdCANTxRx_Ti+0x2fc>
							UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "UCS_EnDisDevice is OK.\r\n"));
 800a3b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a3b6:	4938      	ldr	r1, [pc, #224]	; (800a498 <CmdCANTxRx_Ti+0x2e8>)
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f010 fb9b 	bl	801aaf4 <siprintf>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fd83 	bl	800aed4 <UART_SendMessage>
							break;
 800a3ce:	e06e      	b.n	800a4ae <CmdCANTxRx_Ti+0x2fe>
							UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "UCS_SetChannels is OK.\r\n"));
 800a3d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a3d4:	4931      	ldr	r1, [pc, #196]	; (800a49c <CmdCANTxRx_Ti+0x2ec>)
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f010 fb8c 	bl	801aaf4 <siprintf>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fd74 	bl	800aed4 <UART_SendMessage>
							break;
 800a3ec:	e05f      	b.n	800a4ae <CmdCANTxRx_Ti+0x2fe>
							UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "BCS_SETPhase is OK.\r\n"));
 800a3ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a3f2:	492b      	ldr	r1, [pc, #172]	; (800a4a0 <CmdCANTxRx_Ti+0x2f0>)
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f010 fb7d 	bl	801aaf4 <siprintf>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a402:	4611      	mov	r1, r2
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fd65 	bl	800aed4 <UART_SendMessage>
							break;
 800a40a:	e050      	b.n	800a4ae <CmdCANTxRx_Ti+0x2fe>
							UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "BCS_SETAmplitude is OK.\r\n"));
 800a40c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a410:	4924      	ldr	r1, [pc, #144]	; (800a4a4 <CmdCANTxRx_Ti+0x2f4>)
 800a412:	4618      	mov	r0, r3
 800a414:	f010 fb6e 	bl	801aaf4 <siprintf>
 800a418:	4603      	mov	r3, r0
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fd56 	bl	800aed4 <UART_SendMessage>
							break;
 800a428:	e041      	b.n	800a4ae <CmdCANTxRx_Ti+0x2fe>
							UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "BCS_SETFrequency is OK.\r\n"));
 800a42a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a42e:	491e      	ldr	r1, [pc, #120]	; (800a4a8 <CmdCANTxRx_Ti+0x2f8>)
 800a430:	4618      	mov	r0, r3
 800a432:	f010 fb5f 	bl	801aaf4 <siprintf>
 800a436:	4603      	mov	r3, r0
 800a438:	b29a      	uxth	r2, r3
 800a43a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fd47 	bl	800aed4 <UART_SendMessage>
							break;
 800a446:	e032      	b.n	800a4ae <CmdCANTxRx_Ti+0x2fe>
 800a448:	0801d018 	.word	0x0801d018
 800a44c:	20000698 	.word	0x20000698
 800a450:	0801ce50 	.word	0x0801ce50
 800a454:	cf5ef7e6 	.word	0xcf5ef7e6
 800a458:	2a976ce5 	.word	0x2a976ce5
 800a45c:	44800000 	.word	0x44800000
 800a460:	0801ce88 	.word	0x0801ce88
 800a464:	67b537cd 	.word	0x67b537cd
 800a468:	827cacce 	.word	0x827cacce
 800a46c:	49742400 	.word	0x49742400
 800a470:	4d6e6b28 	.word	0x4d6e6b28
 800a474:	0ee6b280 	.word	0x0ee6b280
 800a478:	000f4240 	.word	0x000f4240
 800a47c:	0801cec0 	.word	0x0801cec0
 800a480:	b3973b77 	.word	0xb3973b77
 800a484:	fff6a1ce 	.word	0xfff6a1ce
 800a488:	43b40000 	.word	0x43b40000
 800a48c:	0801cef8 	.word	0x0801cef8
 800a490:	f019b7af 	.word	0xf019b7af
 800a494:	609b34ad 	.word	0x609b34ad
 800a498:	0801cf2c 	.word	0x0801cf2c
 800a49c:	0801cf48 	.word	0x0801cf48
 800a4a0:	0801cf64 	.word	0x0801cf64
 800a4a4:	0801cf7c 	.word	0x0801cf7c
 800a4a8:	0801cf98 	.word	0x0801cf98
							break;
 800a4ac:	bf00      	nop
					}

					DevId.ID_ADDRESS = CAN_TxData.Address;
 800a4ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a4bc:	f362 130a 	bfi	r3, r2, #4, #7
 800a4c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					DevId.ID_TODO = CAN_TxData.Command;
 800a4c4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a4d2:	f362 0303 	bfi	r3, r2, #0, #4
 800a4d6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
					CanTxHeader.StdId = DevId.Identifier;
 800a4da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a4de:	613b      	str	r3, [r7, #16]
					/* Operational pause to send message thru the CAN. */
					HAL_Delay(50);
 800a4e0:	2032      	movs	r0, #50	; 0x32
 800a4e2:	f7f8 fac5 	bl	8002a70 <HAL_Delay>
					HAL_CAN_AddTxMessage(CmdInOutCAN, &CanTxHeader, CAN_TxData.DevTypeParts, &TxMailboxId);
 800a4e6:	4b3f      	ldr	r3, [pc, #252]	; (800a5e4 <CmdCANTxRx_Ti+0x434>)
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	f107 040c 	add.w	r4, r7, #12
 800a4ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a4f2:	f103 020a 	add.w	r2, r3, #10
 800a4f6:	f107 0110 	add.w	r1, r7, #16
 800a4fa:	4623      	mov	r3, r4
 800a4fc:	f7f8 fd16 	bl	8002f2c <HAL_CAN_AddTxMessage>
				}
				isValueErr = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			}
		}

		if (xQueueReceive(CanDataRx_qh, &CAN_RxData, 0) == pdPASS) {
 800a506:	4b38      	ldr	r3, [pc, #224]	; (800a5e8 <CmdCANTxRx_Ti+0x438>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a50e:	2200      	movs	r2, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f002 f937 	bl	800c784 <xQueueReceive>
 800a516:	4603      	mov	r3, r0
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f47f ae73 	bne.w	800a204 <CmdCANTxRx_Ti+0x54>

			/* Update the list of available devices. */
			DEV_WriteDevType(CAN_RxData.CHANNEL, CAN_RxData.Type, CAN_RxData.SUBTYPE);
 800a51e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a522:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a526:	b2db      	uxtb	r3, r3
 800a528:	4618      	mov	r0, r3
 800a52a:	f8d7 102a 	ldr.w	r1, [r7, #42]	; 0x2a
 800a52e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a532:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	f7ff fd5b 	bl	8009ff4 <DEV_WriteDevType>
			/* Update LED channels. */
			Leds.Channel = CAN_RxData.CHANNEL;
 800a53e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a542:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a546:	b2db      	uxtb	r3, r3
 800a548:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			Leds.State = CAN_RxData.STATE;
 800a54c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a550:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			xQueueSendToBack(ChLed_qh, &Leds, 0);
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <CmdCANTxRx_Ti+0x43c>)
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800a562:	2300      	movs	r3, #0
 800a564:	2200      	movs	r2, #0
 800a566:	f001 fee7 	bl	800c338 <xQueueGenericSend>

			/* State, type and subtype decoding to char. */
			DEV_NameDecode(CAN_RxData.STATE, CAN_RxData.Type, CAN_RxData.SUBTYPE, &tmp_char);
 800a56a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a56e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	4618      	mov	r0, r3
 800a576:	f8d7 102a 	ldr.w	r1, [r7, #42]	; 0x2a
 800a57a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a57e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a582:	b2db      	uxtb	r3, r3
 800a584:	461a      	mov	r2, r3
 800a586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a58a:	f7ff fd53 	bl	800a034 <DEV_NameDecode>

			if ((CAN_RxData.Identifier & 0x000F) == UCS_GET_STATE) {
 800a58e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	2b08      	cmp	r3, #8
 800a596:	d122      	bne.n	800a5de <CmdCANTxRx_Ti+0x42e>
					"    Address = %d\r\n"
					"    Type = %s\r\n"
					"    Subtype = %s\r\n"
					"    State = %s\r\n"
					"    Parameter = %d\r\n",
					CAN_RxData.CHANNEL, tmp_char.dev_id, tmp_char.dev_subid, tmp_char.state, CAN_RxData.GenParam));
 800a598:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a59c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a5a0:	b2db      	uxtb	r3, r3
					sprintf(char_buff,
 800a5a2:	461c      	mov	r4, r3
					CAN_RxData.CHANNEL, tmp_char.dev_id, tmp_char.dev_subid, tmp_char.state, CAN_RxData.GenParam));
 800a5a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
					sprintf(char_buff,
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a5ae:	1d5a      	adds	r2, r3, #5
 800a5b0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800a5b4:	9102      	str	r1, [sp, #8]
 800a5b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a5c0:	3310      	adds	r3, #16
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	4909      	ldr	r1, [pc, #36]	; (800a5f0 <CmdCANTxRx_Ti+0x440>)
 800a5ca:	f010 fa93 	bl	801aaf4 <siprintf>
 800a5ce:	4603      	mov	r3, r0
				UART_SendMessage((uint8_t*)& char_buff,
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 fc7b 	bl	800aed4 <UART_SendMessage>
			}
			__NOP();
 800a5de:	bf00      	nop
		if (xQueueReceive(CanDataTx_qh, &CAN_TxData, 0) == pdPASS) {
 800a5e0:	e610      	b.n	800a204 <CmdCANTxRx_Ti+0x54>
 800a5e2:	bf00      	nop
 800a5e4:	20000014 	.word	0x20000014
 800a5e8:	20000694 	.word	0x20000694
 800a5ec:	20000240 	.word	0x20000240
 800a5f0:	0801cfb4 	.word	0x0801cfb4

0800a5f4 <CAN_Config>:
 *
 * @param hcan : pointer to a CAN_HandleTypeDef structure that contains
 *        the configuration information for the specified CAN.
 *
 **/
static void CAN_Config(CAN_HandleTypeDef* hcan) {
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	/* Activate initialization mode. */
	hcan->Instance->FMR |= CAN_FMR_FINIT;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0201 	orr.w	r2, r2, #1
 800a60c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200


	/* These bits are not matter if the MCU has only one CAN interface. Default value is 14. */
	hcan->Instance->FMR |= 14 << CAN_FMR_CAN2SB_Pos;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f442 6260 	orr.w	r2, r2, #3584	; 0xe00
 800a620:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	/* Enable mask mode for all banks. By defalt is identifier mask mode. */
	hcan->Instance->FM1R = 0;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2200      	movs	r2, #0
 800a62a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	/* Filter scale is 16 bit value. By default the banks are 16 bit scale configuration. */
	hcan->Instance->FS1R = 0;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	/* FIFO assignemt. Bank zero and fourteen prefer are FIFO0, all remaining banks are in the FIFO1. */
	hcan->Instance->FFA1R = (CAN_FFA1R_FFA & ~CAN_FFA1R_FFA0 /*| CAN_FFA1R_FFA14*/);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a1b      	ldr	r2, [pc, #108]	; (800a6ac <CAN_Config+0xb8>)
 800a63e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	/* Activate specific filterbanks. */
	hcan->Instance->FA1R |= CAN_FA1R_FACT0 | CAN_FA1R_FACT14;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	/* Can interrupt configuration. */
	hcan->Instance->IER = CAN_IER_TMEIE | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 | CAN_IER_ERRIE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f248 0213 	movw	r2, #32787	; 0x8013
 800a662:	615a      	str	r2, [r3, #20]
	/* Set-up identifiers. It does't matter here because its particular settings will set above. */
	hcan->Instance->sFilterRegister[0].FR1 = 0x00000000;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	hcan->Instance->sFilterRegister[0].FR2 = 0x00000000;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hcan->Instance->sFilterRegister[14].FR1 = 0x00000000;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	hcan->Instance->sFilterRegister[14].FR2 = 0x00000000;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

	/* Deactivate initialization mode. */
	hcan->Instance->FMR &= ~CAN_FMR_FINIT;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f022 0201 	bic.w	r2, r2, #1
 800a69c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	0ffffffe 	.word	0x0ffffffe

0800a6b0 <CAN_ConfigBanks>:
 *        the configuration information for the specified CAN.
 * @param bank : Specifies the filter bank which will be initialized. This parameter must be a number between Min_Data = 0
 *        and Max_Data = 27.
 *
 **/
static void CAN_ConfigBanks(CAN_HandleTypeDef *hcan, const uint8_t bank) {
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
	CAN_FilterBankRegOrg16_t CanRegOrg16;

	/* Activate initialization mode. */
	hcan->Instance->FMR |= CAN_FMR_FINIT;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f042 0201 	orr.w	r2, r2, #1
 800a6cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Set-up identifiers. The device receive all messages. */
	CanRegOrg16.IDE = 0;
 800a6d0:	7b3b      	ldrb	r3, [r7, #12]
 800a6d2:	f36f 03c3 	bfc	r3, #3, #1
 800a6d6:	733b      	strb	r3, [r7, #12]
	CanRegOrg16.RTR = 0;
 800a6d8:	7b3b      	ldrb	r3, [r7, #12]
 800a6da:	f36f 1304 	bfc	r3, #4, #1
 800a6de:	733b      	strb	r3, [r7, #12]
	CanRegOrg16.EXID18_16 = 0;
 800a6e0:	7b3b      	ldrb	r3, [r7, #12]
 800a6e2:	f36f 0302 	bfc	r3, #0, #3
 800a6e6:	733b      	strb	r3, [r7, #12]
	CanRegOrg16.STID31_21 = 0;
 800a6e8:	89bb      	ldrh	r3, [r7, #12]
 800a6ea:	f36f 134f 	bfc	r3, #5, #11
 800a6ee:	81bb      	strh	r3, [r7, #12]
	hcan->Instance->sFilterRegister[bank].FR1 = (uint32_t)CanRegOrg16.FilterBankReg;
 800a6f0:	89b9      	ldrh	r1, [r7, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	3248      	adds	r2, #72	; 0x48
 800a6fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	//CanRegOrg16.STID31_21 = 0;
	hcan->Instance->sFilterRegister[bank].FR1 |= (uint32_t)CanRegOrg16.FilterBankReg << 16U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	78fa      	ldrb	r2, [r7, #3]
 800a704:	3248      	adds	r2, #72	; 0x48
 800a706:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800a70a:	89bb      	ldrh	r3, [r7, #12]
 800a70c:	0419      	lsls	r1, r3, #16
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	4301      	orrs	r1, r0
 800a716:	3248      	adds	r2, #72	; 0x48
 800a718:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	/* Deactivate initialization mode. */
	hcan->Instance->FMR &= ~CAN_FMR_FINIT;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a730:	bf00      	nop
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <CANRxFifo0Callback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  *
  */
static void CANRxFifo0Callback(struct __CAN_HandleTypeDef* hcan)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08e      	sub	sp, #56	; 0x38
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
	CAN_RxQueueData_t rx_data;
	CAN_RxHeaderTypeDef CanRxHeader;


	/* Reads the data from CAN mail box. */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, rx_data.Data);
 800a744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a748:	3302      	adds	r3, #2
 800a74a:	f107 020c 	add.w	r2, r7, #12
 800a74e:	2100      	movs	r1, #0
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7f8 fcc6 	bl	80030e2 <HAL_CAN_GetRxMessage>
	/* Sends read data to the queue. */
	rx_data.Identifier = CanRxHeader.StdId;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	853b      	strh	r3, [r7, #40]	; 0x28
	xQueueSendToBackFromISR(CanDataRx_qh, (uint8_t*)& rx_data.Identifier, NULL);
 800a75c:	4b05      	ldr	r3, [pc, #20]	; (800a774 <CANRxFifo0Callback+0x38>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	f001 fee4 	bl	800c534 <xQueueGenericSendFromISR>
}
 800a76c:	bf00      	nop
 800a76e:	3738      	adds	r7, #56	; 0x38
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20000694 	.word	0x20000694

0800a778 <CANRxFifo1Callback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  *
  */
static void CANRxFifo1Callback(struct __CAN_HandleTypeDef* hcan)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08e      	sub	sp, #56	; 0x38
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	CAN_RxQueueData_t rx_data;
	CAN_RxHeaderTypeDef CanRxHeader;

	/* Reads the data from CAN mail box. */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CanRxHeader, rx_data.Data);
 800a780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a784:	3302      	adds	r3, #2
 800a786:	f107 020c 	add.w	r2, r7, #12
 800a78a:	2101      	movs	r1, #1
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7f8 fca8 	bl	80030e2 <HAL_CAN_GetRxMessage>
	/* Sends read data to the queue. */
	rx_data.Identifier = CanRxHeader.StdId;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	b29b      	uxth	r3, r3
 800a796:	853b      	strh	r3, [r7, #40]	; 0x28
	xQueueSendToBackFromISR(CanDataRx_qh, (uint8_t*)& rx_data.Identifier, NULL);
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <CANRxFifo1Callback+0x38>)
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f001 fec6 	bl	800c534 <xQueueGenericSendFromISR>
}
 800a7a8:	bf00      	nop
 800a7aa:	3738      	adds	r7, #56	; 0x38
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000694 	.word	0x20000694

0800a7b4 <EthernetTask_Init>:
/* Timer handles. */
/* Private function prototypes. */
static void Ethernet_Ti(void* const argument);

/*  */
void EthernetTask_Init(void) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af02      	add	r7, sp, #8
	/* Callback's register functions. */
	/* Creating semaphores. */
	/* Creating queues. */
	/* Creating timers. */
	/* Creating tasks. */
	xTaskCreate(Ethernet_Ti, "Eth_Task", configMINIMAL_STACK_SIZE * 2, NULL, osPriorityNormal, &Ethernet_th);
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <EthernetTask_Init+0x24>)
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <EthernetTask_Init+0x28>)
 800a7ca:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <EthernetTask_Init+0x2c>)
 800a7cc:	f002 fcae 	bl	800d12c <xTaskCreate>

}
 800a7d0:	bf00      	nop
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200006a0 	.word	0x200006a0
 800a7dc:	0801d030 	.word	0x0801d030
 800a7e0:	0800a7e5 	.word	0x0800a7e5

0800a7e4 <Ethernet_Ti>:

/*
 * @brie Init ethernet interface.f
 */
static void Ethernet_Ti(void* const argument) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

	/* init code for LWIP */
	vTaskDelay(1000);
 800a7ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7f0:	f002 fdce 	bl	800d390 <vTaskDelay>
	MX_LWIP_Init();
 800a7f4:	f000 fbb6 	bl	800af64 <MX_LWIP_Init>

	for(;;) {
		vTaskDelay(1000);
 800a7f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7fc:	f002 fdc8 	bl	800d390 <vTaskDelay>
 800a800:	e7fa      	b.n	800a7f8 <Ethernet_Ti+0x14>
	...

0800a804 <DataExchUART_Init>:


/*
 * @brief Init UART data and command exchange tasks.
 */
void DataExchUART_Init(void) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af02      	add	r7, sp, #8

	/* Callback's register functions. */
	HAL_UART_RegisterCallback(CmdInOutUART, HAL_UART_RX_COMPLETE_CB_ID, UART_RxFullCallback);
 800a80a:	4b2e      	ldr	r3, [pc, #184]	; (800a8c4 <DataExchUART_Init+0xc0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a2e      	ldr	r2, [pc, #184]	; (800a8c8 <DataExchUART_Init+0xc4>)
 800a810:	2103      	movs	r1, #3
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe f852 	bl	80088bc <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(CmdInOutUART, HAL_UART_TX_COMPLETE_CB_ID, UART_TxFullCallback);
 800a818:	4b2a      	ldr	r3, [pc, #168]	; (800a8c4 <DataExchUART_Init+0xc0>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2b      	ldr	r2, [pc, #172]	; (800a8cc <DataExchUART_Init+0xc8>)
 800a81e:	2101      	movs	r1, #1
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe f84b 	bl	80088bc <HAL_UART_RegisterCallback>

	/* Creating semaphores. */
	UART3DMA_EndOfTx_sh = xSemaphoreCreateBinary();
 800a826:	2203      	movs	r2, #3
 800a828:	2100      	movs	r1, #0
 800a82a:	2001      	movs	r0, #1
 800a82c:	f001 fcfc 	bl	800c228 <xQueueGenericCreate>
 800a830:	4603      	mov	r3, r0
 800a832:	4a27      	ldr	r2, [pc, #156]	; (800a8d0 <DataExchUART_Init+0xcc>)
 800a834:	6013      	str	r3, [r2, #0]
	UART3DMA_RxBuffFull_sh = xSemaphoreCreateBinary();
 800a836:	2203      	movs	r2, #3
 800a838:	2100      	movs	r1, #0
 800a83a:	2001      	movs	r0, #1
 800a83c:	f001 fcf4 	bl	800c228 <xQueueGenericCreate>
 800a840:	4603      	mov	r3, r0
 800a842:	4a24      	ldr	r2, [pc, #144]	; (800a8d4 <DataExchUART_Init+0xd0>)
 800a844:	6013      	str	r3, [r2, #0]
	UART3_msh = xSemaphoreCreateMutex();
 800a846:	2001      	movs	r0, #1
 800a848:	f001 fd5d 	bl	800c306 <xQueueCreateMutex>
 800a84c:	4603      	mov	r3, r0
 800a84e:	4a22      	ldr	r2, [pc, #136]	; (800a8d8 <DataExchUART_Init+0xd4>)
 800a850:	6013      	str	r3, [r2, #0]

	ConSuccess_sh = xSemaphoreCreateBinary();
 800a852:	2203      	movs	r2, #3
 800a854:	2100      	movs	r1, #0
 800a856:	2001      	movs	r0, #1
 800a858:	f001 fce6 	bl	800c228 <xQueueGenericCreate>
 800a85c:	4603      	mov	r3, r0
 800a85e:	4a1f      	ldr	r2, [pc, #124]	; (800a8dc <DataExchUART_Init+0xd8>)
 800a860:	6013      	str	r3, [r2, #0]
	ConAborted_sh = xSemaphoreCreateBinary();
 800a862:	2203      	movs	r2, #3
 800a864:	2100      	movs	r1, #0
 800a866:	2001      	movs	r0, #1
 800a868:	f001 fcde 	bl	800c228 <xQueueGenericCreate>
 800a86c:	4603      	mov	r3, r0
 800a86e:	4a1c      	ldr	r2, [pc, #112]	; (800a8e0 <DataExchUART_Init+0xdc>)
 800a870:	6013      	str	r3, [r2, #0]
	ConTimeout_sh = xSemaphoreCreateBinary();
 800a872:	2203      	movs	r2, #3
 800a874:	2100      	movs	r1, #0
 800a876:	2001      	movs	r0, #1
 800a878:	f001 fcd6 	bl	800c228 <xQueueGenericCreate>
 800a87c:	4603      	mov	r3, r0
 800a87e:	4a19      	ldr	r2, [pc, #100]	; (800a8e4 <DataExchUART_Init+0xe0>)
 800a880:	6013      	str	r3, [r2, #0]

	/* Creating queues. */
	CmdRxPool_qh = xQueueCreate(25, sizeof(CmdCode_t));
 800a882:	2200      	movs	r2, #0
 800a884:	212c      	movs	r1, #44	; 0x2c
 800a886:	2019      	movs	r0, #25
 800a888:	f001 fcce 	bl	800c228 <xQueueGenericCreate>
 800a88c:	4603      	mov	r3, r0
 800a88e:	4a16      	ldr	r2, [pc, #88]	; (800a8e8 <DataExchUART_Init+0xe4>)
 800a890:	6013      	str	r3, [r2, #0]


	/* Creating timers. */
	/* Creating tasks. */
	xTaskCreate(SysCmdMgmt_Ti, "CmdMgmt", 256, NULL, osPriorityNormal, &SysCmdMgmt_th);
 800a892:	4b16      	ldr	r3, [pc, #88]	; (800a8ec <DataExchUART_Init+0xe8>)
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	2300      	movs	r3, #0
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	2300      	movs	r3, #0
 800a89c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8a0:	4913      	ldr	r1, [pc, #76]	; (800a8f0 <DataExchUART_Init+0xec>)
 800a8a2:	4814      	ldr	r0, [pc, #80]	; (800a8f4 <DataExchUART_Init+0xf0>)
 800a8a4:	f002 fc42 	bl	800d12c <xTaskCreate>
	xTaskCreate(CmdParse_Ti, "CmdParse", 256, NULL, osPriorityNormal, &CmdParse_th);
 800a8a8:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <DataExchUART_Init+0xf4>)
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8b6:	4911      	ldr	r1, [pc, #68]	; (800a8fc <DataExchUART_Init+0xf8>)
 800a8b8:	4811      	ldr	r0, [pc, #68]	; (800a900 <DataExchUART_Init+0xfc>)
 800a8ba:	f002 fc37 	bl	800d12c <xTaskCreate>
}
 800a8be:	bf00      	nop
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	2000001c 	.word	0x2000001c
 800a8c8:	0800af1d 	.word	0x0800af1d
 800a8cc:	0800af41 	.word	0x0800af41
 800a8d0:	200006b0 	.word	0x200006b0
 800a8d4:	200006b4 	.word	0x200006b4
 800a8d8:	200006b8 	.word	0x200006b8
 800a8dc:	200006a4 	.word	0x200006a4
 800a8e0:	200006a8 	.word	0x200006a8
 800a8e4:	200006ac 	.word	0x200006ac
 800a8e8:	200006bc 	.word	0x200006bc
 800a8ec:	200006c0 	.word	0x200006c0
 800a8f0:	0801d03c 	.word	0x0801d03c
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	200006c4 	.word	0x200006c4
 800a8fc:	0801d044 	.word	0x0801d044
 800a900:	0800ab1d 	.word	0x0800ab1d

0800a904 <SysCmdMgmt_Ti>:

/*
	@brief
*/
static void SysCmdMgmt_Ti(void* const param) {
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b0bd      	sub	sp, #244	; 0xf4
 800a908:	af02      	add	r7, sp, #8
 800a90a:	6078      	str	r0, [r7, #4]

	/* Private variables. */
	uint8_t BoardAddr = 63;
 800a90c:	233f      	movs	r3, #63	; 0x3f
 800a90e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	uint8_t isConnActive = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	char char_buff[150];

	/* Data structs. */
	DEV_Data_t DevParams = { 0 };
 800a918:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a91c:	2200      	movs	r2, #0
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	605a      	str	r2, [r3, #4]
 800a922:	609a      	str	r2, [r3, #8]
 800a924:	60da      	str	r2, [r3, #12]
 800a926:	611a      	str	r2, [r3, #16]
	CmdCode_t CmdCode = { 0 };
 800a928:	f107 0310 	add.w	r3, r7, #16
 800a92c:	222c      	movs	r2, #44	; 0x2c
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f010 fa01 	bl	801ad38 <memset>

	/* External memory data. */
	M24128_MEM_DATA_t UserData = {
 800a936:	2300      	movs	r3, #0
 800a938:	733b      	strb	r3, [r7, #12]
 800a93a:	2300      	movs	r3, #0
 800a93c:	737b      	strb	r3, [r7, #13]
	//HAL_Delay(150);


	for (;/*_*/;) {

		if (xQueueReceive(CmdRxPool_qh, &CmdCode, 0) == pdPASS) {
 800a93e:	4b67      	ldr	r3, [pc, #412]	; (800aadc <SysCmdMgmt_Ti+0x1d8>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f107 0110 	add.w	r1, r7, #16
 800a946:	2200      	movs	r2, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f001 ff1b 	bl	800c784 <xQueueReceive>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b01      	cmp	r3, #1
 800a952:	d1f4      	bne.n	800a93e <SysCmdMgmt_Ti+0x3a>
			/* Deactivate the command's selector. */
			if (xSemaphoreTake(ConTimeout_sh, 0) == pdPASS) {
 800a954:	4b62      	ldr	r3, [pc, #392]	; (800aae0 <SysCmdMgmt_Ti+0x1dc>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fff2 	bl	800c944 <xQueueSemaphoreTake>
 800a960:	4603      	mov	r3, r0
 800a962:	2b01      	cmp	r3, #1
 800a964:	d102      	bne.n	800a96c <SysCmdMgmt_Ti+0x68>
				isConnActive = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			}

			/* Is there a connection command? */
			if (CmdCode.CommandCode == MCS_ConnectTo) {
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	4a5d      	ldr	r2, [pc, #372]	; (800aae4 <SysCmdMgmt_Ti+0x1e0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d139      	bne.n	800a9e8 <SysCmdMgmt_Ti+0xe4>

				/* Reading saved device address. */
				//HAL_I2C_Mem_Read(ExtMemI2C, EEP_DATA_ADDR_SHIFTED, UserData.MemAddr, I2C_MEMADD_SIZE_16BIT, &BoardAddr,	1, 10);
				/* Force the board address to zero. */
				BoardAddr = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6

				/* Getting the received address. */
				DevParams.ConnAddr = atoi(CmdCode.CmdParams);
 800a97a:	f107 0310 	add.w	r3, r7, #16
 800a97e:	330c      	adds	r3, #12
 800a980:	4618      	mov	r0, r3
 800a982:	f00f faaf 	bl	8019ee4 <atoi>
 800a986:	4603      	mov	r3, r0
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

				if (DevParams.ConnAddr == BoardAddr) {
 800a98e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a992:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 800a996:	429a      	cmp	r2, r3
 800a998:	d126      	bne.n	800a9e8 <SysCmdMgmt_Ti+0xe4>
					isConnActive = 1;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
					xTimerStart(ConTimeout_th, 0);
 800a9a0:	4b51      	ldr	r3, [pc, #324]	; (800aae8 <SysCmdMgmt_Ti+0x1e4>)
 800a9a2:	681c      	ldr	r4, [r3, #0]
 800a9a4:	f002 fe20 	bl	800d5e8 <xTaskGetTickCount>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f003 fbea 	bl	800e18c <xTimerGenericCommand>
					UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "RFG_ConnectTo %d is OK.\r\n", DevParams.ConnAddr));
 800a9b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a9c2:	494a      	ldr	r1, [pc, #296]	; (800aaec <SysCmdMgmt_Ti+0x1e8>)
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f010 f895 	bl	801aaf4 <siprintf>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 fa7d 	bl	800aed4 <UART_SendMessage>
					xSemaphoreGive(ConSuccess_sh);
 800a9da:	4b45      	ldr	r3, [pc, #276]	; (800aaf0 <SysCmdMgmt_Ti+0x1ec>)
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	f001 fca8 	bl	800c338 <xQueueGenericSend>
				}
			}


			/* Command code selector. */
			if (isConnActive) {
 800a9e8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0a6      	beq.n	800a93e <SysCmdMgmt_Ti+0x3a>
				/* To exclude non control parameters send no code. */

				switch (CmdCode.FPrefixCode) {
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	4a40      	ldr	r2, [pc, #256]	; (800aaf4 <SysCmdMgmt_Ti+0x1f0>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d1a2      	bne.n	800a93e <SysCmdMgmt_Ti+0x3a>
				/* Generator units command set. */

				/* Motherboard's command set. */
				case MCS:
					switch (CmdCode.CommandCode) {
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	4a3f      	ldr	r2, [pc, #252]	; (800aaf8 <SysCmdMgmt_Ti+0x1f4>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d053      	beq.n	800aaa8 <SysCmdMgmt_Ti+0x1a4>
 800aa00:	4a3d      	ldr	r2, [pc, #244]	; (800aaf8 <SysCmdMgmt_Ti+0x1f4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d867      	bhi.n	800aad6 <SysCmdMgmt_Ti+0x1d2>
 800aa06:	4a3d      	ldr	r2, [pc, #244]	; (800aafc <SysCmdMgmt_Ti+0x1f8>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d03e      	beq.n	800aa8a <SysCmdMgmt_Ti+0x186>
 800aa0c:	4a3b      	ldr	r2, [pc, #236]	; (800aafc <SysCmdMgmt_Ti+0x1f8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d861      	bhi.n	800aad6 <SysCmdMgmt_Ti+0x1d2>
 800aa12:	4a3b      	ldr	r2, [pc, #236]	; (800ab00 <SysCmdMgmt_Ti+0x1fc>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d003      	beq.n	800aa20 <SysCmdMgmt_Ti+0x11c>
 800aa18:	4a3a      	ldr	r2, [pc, #232]	; (800ab04 <SysCmdMgmt_Ti+0x200>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d00f      	beq.n	800aa3e <SysCmdMgmt_Ti+0x13a>
																				   DevParams.ConnAddr,
																				   DevParams.OutState));
						__NOP();
						break;
					default:
						break;
 800aa1e:	e05a      	b.n	800aad6 <SysCmdMgmt_Ti+0x1d2>
						UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "FreeRTOS Kernel V10.3.1.\r\nFirmware 01.27.24\r\nHardware V0.1\r\n"));
 800aa20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aa24:	4938      	ldr	r1, [pc, #224]	; (800ab08 <SysCmdMgmt_Ti+0x204>)
 800aa26:	4618      	mov	r0, r3
 800aa28:	f010 f864 	bl	801aaf4 <siprintf>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fa4c 	bl	800aed4 <UART_SendMessage>
						break;
 800aa3c:	e04c      	b.n	800aad8 <SysCmdMgmt_Ti+0x1d4>
						DevParams.ConnAddr = atoi(CmdCode.CmdParams);
 800aa3e:	f107 0310 	add.w	r3, r7, #16
 800aa42:	330c      	adds	r3, #12
 800aa44:	4618      	mov	r0, r3
 800aa46:	f00f fa4d 	bl	8019ee4 <atoi>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						xQueueSendToBack(SetAddr_qh, &DevParams.ConnAddr, 0);
 800aa52:	4b2e      	ldr	r3, [pc, #184]	; (800ab0c <SysCmdMgmt_Ti+0x208>)
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f001 fc6b 	bl	800c338 <xQueueGenericSend>
						BTN_SWPress();
 800aa62:	f7ff fb3b 	bl	800a0dc <BTN_SWPress>
						UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "Address is %d now.\r\n", DevParams.ConnAddr));
 800aa66:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aa70:	4927      	ldr	r1, [pc, #156]	; (800ab10 <SysCmdMgmt_Ti+0x20c>)
 800aa72:	4618      	mov	r0, r3
 800aa74:	f010 f83e 	bl	801aaf4 <siprintf>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aa80:	4611      	mov	r1, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 fa26 	bl	800aed4 <UART_SendMessage>
						break;
 800aa88:	e026      	b.n	800aad8 <SysCmdMgmt_Ti+0x1d4>
						UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff, "RFG_SetParams is OK.\r\n"));
 800aa8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aa8e:	4921      	ldr	r1, [pc, #132]	; (800ab14 <SysCmdMgmt_Ti+0x210>)
 800aa90:	4618      	mov	r0, r3
 800aa92:	f010 f82f 	bl	801aaf4 <siprintf>
 800aa96:	4603      	mov	r3, r0
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fa17 	bl	800aed4 <UART_SendMessage>
						break;
 800aaa6:	e017      	b.n	800aad8 <SysCmdMgmt_Ti+0x1d4>
						DEV_RWGenEepAll(EEP_READ_FROM);
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f7ff fa85 	bl	8009fb8 <DEV_RWGenEepAll>
																				   DevParams.ConnAddr,
 800aaae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
						UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff,  "Conn addr %d\r\n"
 800aab2:	461a      	mov	r2, r3
																				   DevParams.OutState));
 800aab4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
						UART_SendMessage((uint8_t*)&char_buff, sprintf(char_buff,  "Conn addr %d\r\n"
 800aab8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800aabc:	4916      	ldr	r1, [pc, #88]	; (800ab18 <SysCmdMgmt_Ti+0x214>)
 800aabe:	f010 f819 	bl	801aaf4 <siprintf>
 800aac2:	4603      	mov	r3, r0
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aaca:	4611      	mov	r1, r2
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fa01 	bl	800aed4 <UART_SendMessage>
						__NOP();
 800aad2:	bf00      	nop
						break;
 800aad4:	e000      	b.n	800aad8 <SysCmdMgmt_Ti+0x1d4>
						break;
 800aad6:	bf00      	nop
					}
					break;
 800aad8:	bf00      	nop
		if (xQueueReceive(CmdRxPool_qh, &CmdCode, 0) == pdPASS) {
 800aada:	e730      	b.n	800a93e <SysCmdMgmt_Ti+0x3a>
 800aadc:	200006bc 	.word	0x200006bc
 800aae0:	200006ac 	.word	0x200006ac
 800aae4:	d9f2d9f7 	.word	0xd9f2d9f7
 800aae8:	20000260 	.word	0x20000260
 800aaec:	0801d050 	.word	0x0801d050
 800aaf0:	200006a4 	.word	0x200006a4
 800aaf4:	79823b50 	.word	0x79823b50
 800aaf8:	fdcc0d08 	.word	0xfdcc0d08
 800aafc:	c2cd4d28 	.word	0xc2cd4d28
 800ab00:	6135e130 	.word	0x6135e130
 800ab04:	aa582f78 	.word	0xaa582f78
 800ab08:	0801d06c 	.word	0x0801d06c
 800ab0c:	20000244 	.word	0x20000244
 800ab10:	0801d0ac 	.word	0x0801d0ac
 800ab14:	0801d0c4 	.word	0x0801d0c4
 800ab18:	0801d0dc 	.word	0x0801d0dc

0800ab1c <CmdParse_Ti>:
}

/*
 * @brief This function receive and process incoming command.
 */
static void CmdParse_Ti(void* const param) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08e      	sub	sp, #56	; 0x38
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]

	/* Private data structs. */
	CmdCode_t CmdCode = { 0 };
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	222c      	movs	r2, #44	; 0x2c
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f010 f903 	bl	801ad38 <memset>

	/* Take the semaphore once it's created. */
	xSemaphoreTake(UART3DMA_RxBuffFull_sh, 0);
 800ab32:	4b9e      	ldr	r3, [pc, #632]	; (800adac <CmdParse_Ti+0x290>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 ff03 	bl	800c944 <xQueueSemaphoreTake>

	/* Initializing UART rx counter. */
	UartTxRxData.isBuffBoundaryOver = 0;
 800ab3e:	4b9c      	ldr	r3, [pc, #624]	; (800adb0 <CmdParse_Ti+0x294>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	70da      	strb	r2, [r3, #3]
	//UartTxRxData.cReadIndexBuff0 = sizeof(UartTxRxData.RxDataBuff);

	/* Start uart data receiving. The DMA RX channel must be in the CIRCULAR mode! */
	HAL_UART_Receive_DMA(CmdInOutUART, &UartTxRxData.RxDataBuff[0], sizeof(UartTxRxData.RxDataBuff));
 800ab44:	4b9b      	ldr	r3, [pc, #620]	; (800adb4 <CmdParse_Ti+0x298>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab4c:	499a      	ldr	r1, [pc, #616]	; (800adb8 <CmdParse_Ti+0x29c>)
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd ffee 	bl	8008b30 <HAL_UART_Receive_DMA>

	for (;/*__*/;) {

		if (xSemaphoreTake(UART3DMA_RxBuffFull_sh, 0) == pdPASS) {
 800ab54:	4b95      	ldr	r3, [pc, #596]	; (800adac <CmdParse_Ti+0x290>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 fef2 	bl	800c944 <xQueueSemaphoreTake>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d102      	bne.n	800ab6c <CmdParse_Ti+0x50>
			UartTxRxData.isBuffBoundaryOver = 1;
 800ab66:	4b92      	ldr	r3, [pc, #584]	; (800adb0 <CmdParse_Ti+0x294>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	70da      	strb	r2, [r3, #3]
		}

		/* Normal state for a read. */
		if (UartTxRxData.cReadIndexBuff0 < (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR) ||
 800ab6c:	4b90      	ldr	r3, [pc, #576]	; (800adb0 <CmdParse_Ti+0x294>)
 800ab6e:	895b      	ldrh	r3, [r3, #10]
 800ab70:	461a      	mov	r2, r3
 800ab72:	4b92      	ldr	r3, [pc, #584]	; (800adbc <CmdParse_Ti+0x2a0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d30d      	bcc.n	800ab9c <CmdParse_Ti+0x80>
			((UartTxRxData.cReadIndexBuff0 > (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR)) && UartTxRxData.isBuffBoundaryOver)) {	//! added () to first logic and && 01.31.23
 800ab80:	4b8b      	ldr	r3, [pc, #556]	; (800adb0 <CmdParse_Ti+0x294>)
 800ab82:	895b      	ldrh	r3, [r3, #10]
 800ab84:	461a      	mov	r2, r3
 800ab86:	4b8d      	ldr	r3, [pc, #564]	; (800adbc <CmdParse_Ti+0x2a0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
		if (UartTxRxData.cReadIndexBuff0 < (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR) ||
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d9df      	bls.n	800ab54 <CmdParse_Ti+0x38>
			((UartTxRxData.cReadIndexBuff0 > (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR)) && UartTxRxData.isBuffBoundaryOver)) {	//! added () to first logic and && 01.31.23
 800ab94:	4b86      	ldr	r3, [pc, #536]	; (800adb0 <CmdParse_Ti+0x294>)
 800ab96:	78db      	ldrb	r3, [r3, #3]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0db      	beq.n	800ab54 <CmdParse_Ti+0x38>

			/* Delay for waiting a whole message. */
			HAL_Delay(10);
 800ab9c:	200a      	movs	r0, #10
 800ab9e:	f7f7 ff67 	bl	8002a70 <HAL_Delay>

			if (xSemaphoreTake(UART3DMA_RxBuffFull_sh, 0) == pdPASS) {
 800aba2:	4b82      	ldr	r3, [pc, #520]	; (800adac <CmdParse_Ti+0x290>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 fecb 	bl	800c944 <xQueueSemaphoreTake>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d102      	bne.n	800abba <CmdParse_Ti+0x9e>
				UartTxRxData.isBuffBoundaryOver = 1;
 800abb4:	4b7e      	ldr	r3, [pc, #504]	; (800adb0 <CmdParse_Ti+0x294>)
 800abb6:	2201      	movs	r2, #1
 800abb8:	70da      	strb	r2, [r3, #3]
			}

			/* If corruption data state is occurred. */
			if (UartTxRxData.isBuffBoundaryOver && (UartTxRxData.cReadIndexBuff0 <= (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR))) {
 800abba:	4b7d      	ldr	r3, [pc, #500]	; (800adb0 <CmdParse_Ti+0x294>)
 800abbc:	78db      	ldrb	r3, [r3, #3]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 811c 	beq.w	800adfc <CmdParse_Ti+0x2e0>
 800abc4:	4b7a      	ldr	r3, [pc, #488]	; (800adb0 <CmdParse_Ti+0x294>)
 800abc6:	895b      	ldrh	r3, [r3, #10]
 800abc8:	461a      	mov	r2, r3
 800abca:	4b7c      	ldr	r3, [pc, #496]	; (800adbc <CmdParse_Ti+0x2a0>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800abd4:	429a      	cmp	r2, r3
 800abd6:	f200 8111 	bhi.w	800adfc <CmdParse_Ti+0x2e0>
				/* 11.26.23. */
				if (!hdma_usart3_rx.Instance->NDTR) {
 800abda:	4b78      	ldr	r3, [pc, #480]	; (800adbc <CmdParse_Ti+0x2a0>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f040 8113 	bne.w	800ae0c <CmdParse_Ti+0x2f0>
					CmdParse_Error(&UartTxRxData);
 800abe6:	4872      	ldr	r0, [pc, #456]	; (800adb0 <CmdParse_Ti+0x294>)
 800abe8:	f000 f916 	bl	800ae18 <CmdParse_Error>
				if (!hdma_usart3_rx.Instance->NDTR) {
 800abec:	e10e      	b.n	800ae0c <CmdParse_Ti+0x2f0>
			/* Read the command to the temporary buffer before processing it. */
			else {
				while (!UartTxRxData.isSeqReadCmpl) {

					/* Flush temporary buffer. */
					for (uint8_t i = 0; i < sizeof(UartTxRxData.TmpCmdBuff); i++) {
 800abee:	2300      	movs	r3, #0
 800abf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800abf4:	e00a      	b.n	800ac0c <CmdParse_Ti+0xf0>
						UartTxRxData.TmpCmdBuff[i] = 0;
 800abf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abfa:	4a6d      	ldr	r2, [pc, #436]	; (800adb0 <CmdParse_Ti+0x294>)
 800abfc:	4413      	add	r3, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	739a      	strb	r2, [r3, #14]
					for (uint8_t i = 0; i < sizeof(UartTxRxData.TmpCmdBuff); i++) {
 800ac02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac06:	3301      	adds	r3, #1
 800ac08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ac0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac10:	2b31      	cmp	r3, #49	; 0x31
 800ac12:	d9f0      	bls.n	800abf6 <CmdParse_Ti+0xda>
					}

					while (UartTxRxData.TmpCmdBuff[UartTxRxData.cReadLimitCnt - 1] != '\r') {
 800ac14:	e049      	b.n	800acaa <CmdParse_Ti+0x18e>

						/* Reading incoming symbols to the buffer. */
						UartTxRxData.TmpCmdBuff[UartTxRxData.cReadLimitCnt] = UartTxRxData.RxDataBuff[UartTxRxData.cReadIndexBuff0];
 800ac16:	4b66      	ldr	r3, [pc, #408]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac18:	895b      	ldrh	r3, [r3, #10]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4b64      	ldr	r3, [pc, #400]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac1e:	7a5b      	ldrb	r3, [r3, #9]
 800ac20:	4619      	mov	r1, r3
 800ac22:	4b63      	ldr	r3, [pc, #396]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac24:	4413      	add	r3, r2
 800ac26:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ac2a:	4b61      	ldr	r3, [pc, #388]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac2c:	440b      	add	r3, r1
 800ac2e:	739a      	strb	r2, [r3, #14]
						UartTxRxData.cReadIndexBuff0++;
 800ac30:	4b5f      	ldr	r3, [pc, #380]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac32:	895b      	ldrh	r3, [r3, #10]
 800ac34:	3301      	adds	r3, #1
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	4b5d      	ldr	r3, [pc, #372]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac3a:	815a      	strh	r2, [r3, #10]
						UartTxRxData.cReadLimitCnt++;
 800ac3c:	4b5c      	ldr	r3, [pc, #368]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac3e:	7a5b      	ldrb	r3, [r3, #9]
 800ac40:	3301      	adds	r3, #1
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	4b5a      	ldr	r3, [pc, #360]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac46:	725a      	strb	r2, [r3, #9]

						/* Have you read enough bytes? */
						if (UartTxRxData.cReadIndexBuff0 == (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR)) {
 800ac48:	4b59      	ldr	r3, [pc, #356]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac4a:	895b      	ldrh	r3, [r3, #10]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b5b      	ldr	r3, [pc, #364]	; (800adbc <CmdParse_Ti+0x2a0>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d102      	bne.n	800ac62 <CmdParse_Ti+0x146>
							UartTxRxData.isSeqReadCmpl = 1;
 800ac5c:	4b54      	ldr	r3, [pc, #336]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac5e:	2201      	movs	r2, #1
 800ac60:	701a      	strb	r2, [r3, #0]
						}

						/* Command length fault. Not realized yet. */
						if (UartTxRxData.cReadLimitCnt > MAX_CMD_LENGTH) {
 800ac62:	4b53      	ldr	r3, [pc, #332]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac64:	7a5b      	ldrb	r3, [r3, #9]
 800ac66:	2b32      	cmp	r3, #50	; 0x32
 800ac68:	d903      	bls.n	800ac72 <CmdParse_Ti+0x156>
							UartTxRxData.isCmdLengthFault = 1;
 800ac6a:	4b51      	ldr	r3, [pc, #324]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	709a      	strb	r2, [r3, #2]
							break;
 800ac70:	e023      	b.n	800acba <CmdParse_Ti+0x19e>
						//	UartTxRxData.isDelayedRead = 1;
						//	break;
						//}

						/* Check UART_RX_BUFF_SIZE for max value. */
						if (UartTxRxData.cReadIndexBuff0 == UART_RX_BUFF_SIZE) {
 800ac72:	4b4f      	ldr	r3, [pc, #316]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac74:	895b      	ldrh	r3, [r3, #10]
 800ac76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ac7a:	d116      	bne.n	800acaa <CmdParse_Ti+0x18e>
							if (UartTxRxData.isBuffBoundaryOver) {
 800ac7c:	4b4c      	ldr	r3, [pc, #304]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac7e:	78db      	ldrb	r3, [r3, #3]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d012      	beq.n	800acaa <CmdParse_Ti+0x18e>
								UartTxRxData.cReadIndexBuff0 = 0;
 800ac84:	4b4a      	ldr	r3, [pc, #296]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	815a      	strh	r2, [r3, #10]
								UartTxRxData.isBuffBoundaryOver = 0;
 800ac8a:	4b49      	ldr	r3, [pc, #292]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	70da      	strb	r2, [r3, #3]
								/* Have you read enough bytes? */
								if (UartTxRxData.cReadIndexBuff0 == (sizeof(UartTxRxData.RxDataBuff) - hdma_usart3_rx.Instance->NDTR)) {
 800ac90:	4b47      	ldr	r3, [pc, #284]	; (800adb0 <CmdParse_Ti+0x294>)
 800ac92:	895b      	ldrh	r3, [r3, #10]
 800ac94:	461a      	mov	r2, r3
 800ac96:	4b49      	ldr	r3, [pc, #292]	; (800adbc <CmdParse_Ti+0x2a0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d102      	bne.n	800acaa <CmdParse_Ti+0x18e>
									UartTxRxData.isSeqReadCmpl = 1;
 800aca4:	4b42      	ldr	r3, [pc, #264]	; (800adb0 <CmdParse_Ti+0x294>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	701a      	strb	r2, [r3, #0]
					while (UartTxRxData.TmpCmdBuff[UartTxRxData.cReadLimitCnt - 1] != '\r') {
 800acaa:	4b41      	ldr	r3, [pc, #260]	; (800adb0 <CmdParse_Ti+0x294>)
 800acac:	7a5b      	ldrb	r3, [r3, #9]
 800acae:	3b01      	subs	r3, #1
 800acb0:	4a3f      	ldr	r2, [pc, #252]	; (800adb0 <CmdParse_Ti+0x294>)
 800acb2:	4413      	add	r3, r2
 800acb4:	7b9b      	ldrb	r3, [r3, #14]
 800acb6:	2b0d      	cmp	r3, #13
 800acb8:	d1ad      	bne.n	800ac16 <CmdParse_Ti+0xfa>
						}
					}


					/* Processing the read command. */
					if (!UartTxRxData.isCmdLengthFault) {
 800acba:	4b3d      	ldr	r3, [pc, #244]	; (800adb0 <CmdParse_Ti+0x294>)
 800acbc:	789b      	ldrb	r3, [r3, #2]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f040 8096 	bne.w	800adf0 <CmdParse_Ti+0x2d4>

						/*  */
						UartTxRxData.cReadLimitCnt = 0;
 800acc4:	4b3a      	ldr	r3, [pc, #232]	; (800adb0 <CmdParse_Ti+0x294>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	725a      	strb	r2, [r3, #9]

						/* Getting first prefix code. */
						CmdCode.FPrefixCode = Hard_CRC32ETH(&UartTxRxData.TmpCmdBuff[FPREFIX_OFFSET], CmdParse_SymbCnt(&UartTxRxData, '_', 0));
 800acca:	2200      	movs	r2, #0
 800accc:	215f      	movs	r1, #95	; 0x5f
 800acce:	4838      	ldr	r0, [pc, #224]	; (800adb0 <CmdParse_Ti+0x294>)
 800acd0:	f000 f8d8 	bl	800ae84 <CmdParse_SymbCnt>
 800acd4:	4603      	mov	r3, r0
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	4619      	mov	r1, r3
 800acda:	4839      	ldr	r0, [pc, #228]	; (800adc0 <CmdParse_Ti+0x2a4>)
 800acdc:	f7ff f942 	bl	8009f64 <Hard_CRC32ETH>
 800ace0:	4603      	mov	r3, r0
 800ace2:	60bb      	str	r3, [r7, #8]

						/* Is this motherboard or general command? */
						if (CmdCode.FPrefixCode == MCS) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4a37      	ldr	r2, [pc, #220]	; (800adc4 <CmdParse_Ti+0x2a8>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d16d      	bne.n	800adc8 <CmdParse_Ti+0x2ac>

							UartTxRxData.SymbParamCnt = CMD_PARAM_OFFSET;
 800acec:	4b30      	ldr	r3, [pc, #192]	; (800adb0 <CmdParse_Ti+0x294>)
 800acee:	2202      	movs	r2, #2
 800acf0:	71da      	strb	r2, [r3, #7]

							/* Counting the symbols of command. */
							UartTxRxData.SymbCmdCnt = CmdParse_SymbCnt(&UartTxRxData, ' ', 0);
 800acf2:	2200      	movs	r2, #0
 800acf4:	2120      	movs	r1, #32
 800acf6:	482e      	ldr	r0, [pc, #184]	; (800adb0 <CmdParse_Ti+0x294>)
 800acf8:	f000 f8c4 	bl	800ae84 <CmdParse_SymbCnt>
 800acfc:	4603      	mov	r3, r0
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	4b2b      	ldr	r3, [pc, #172]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad02:	719a      	strb	r2, [r3, #6]
							if (!UartTxRxData.SymbCmdCnt) {
 800ad04:	4b2a      	ldr	r3, [pc, #168]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad06:	799b      	ldrb	r3, [r3, #6]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10b      	bne.n	800ad24 <CmdParse_Ti+0x208>
								UartTxRxData.SymbParamCnt = 0;
 800ad0c:	4b28      	ldr	r3, [pc, #160]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	71da      	strb	r2, [r3, #7]
								UartTxRxData.SymbCmdCnt = CmdParse_SymbCnt(&UartTxRxData, '\r', 0);
 800ad12:	2200      	movs	r2, #0
 800ad14:	210d      	movs	r1, #13
 800ad16:	4826      	ldr	r0, [pc, #152]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad18:	f000 f8b4 	bl	800ae84 <CmdParse_SymbCnt>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	4b23      	ldr	r3, [pc, #140]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad22:	719a      	strb	r2, [r3, #6]
							}

							/* Getting the command code. */
							if (UartTxRxData.SymbCmdCnt) {
 800ad24:	4b22      	ldr	r3, [pc, #136]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad26:	799b      	ldrb	r3, [r3, #6]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d007      	beq.n	800ad3c <CmdParse_Ti+0x220>
								CmdCode.CommandCode = Hard_CRC32ETH(&UartTxRxData.TmpCmdBuff[FPREFIX_OFFSET], UartTxRxData.SymbCmdCnt);
 800ad2c:	4b20      	ldr	r3, [pc, #128]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad2e:	799b      	ldrb	r3, [r3, #6]
 800ad30:	4619      	mov	r1, r3
 800ad32:	4823      	ldr	r0, [pc, #140]	; (800adc0 <CmdParse_Ti+0x2a4>)
 800ad34:	f7ff f916 	bl	8009f64 <Hard_CRC32ETH>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	613b      	str	r3, [r7, #16]
							}

							/* Getting the symbols of parameter. */
							if (UartTxRxData.SymbParamCnt) {
 800ad3c:	4b1c      	ldr	r3, [pc, #112]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad3e:	79db      	ldrb	r3, [r3, #7]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d043      	beq.n	800adcc <CmdParse_Ti+0x2b0>
								UartTxRxData.SymbParamCnt = CmdParse_SymbCnt(&UartTxRxData, '\r', UartTxRxData.SymbCmdCnt + CMD_PARAM_OFFSET - 1);
 800ad44:	4b1a      	ldr	r3, [pc, #104]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad46:	799b      	ldrb	r3, [r3, #6]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	210d      	movs	r1, #13
 800ad50:	4817      	ldr	r0, [pc, #92]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad52:	f000 f897 	bl	800ae84 <CmdParse_SymbCnt>
 800ad56:	4603      	mov	r3, r0
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad5c:	71da      	strb	r2, [r3, #7]
								for (uint8_t i = 0; i < UartTxRxData.SymbParamCnt; i++) {
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ad64:	e014      	b.n	800ad90 <CmdParse_Ti+0x274>
									CmdCode.CmdParams[i] = UartTxRxData.TmpCmdBuff[UartTxRxData.SymbCmdCnt + i + CMD_PARAM_OFFSET - 1];
 800ad66:	4b12      	ldr	r3, [pc, #72]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad68:	799b      	ldrb	r3, [r3, #6]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ad70:	4413      	add	r3, r2
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ad78:	490d      	ldr	r1, [pc, #52]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad7a:	440a      	add	r2, r1
 800ad7c:	7b92      	ldrb	r2, [r2, #14]
 800ad7e:	3338      	adds	r3, #56	; 0x38
 800ad80:	443b      	add	r3, r7
 800ad82:	f803 2c24 	strb.w	r2, [r3, #-36]
								for (uint8_t i = 0; i < UartTxRxData.SymbParamCnt; i++) {
 800ad86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad92:	79db      	ldrb	r3, [r3, #7]
 800ad94:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d3e4      	bcc.n	800ad66 <CmdParse_Ti+0x24a>
								}
								/* !!!!!!! Deleted ++UartTxRxData.SymbParamCnt. */
								CmdCode.CmdParams[UartTxRxData.SymbParamCnt] = '\0';
 800ad9c:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <CmdParse_Ti+0x294>)
 800ad9e:	79db      	ldrb	r3, [r3, #7]
 800ada0:	3338      	adds	r3, #56	; 0x38
 800ada2:	443b      	add	r3, r7
 800ada4:	2200      	movs	r2, #0
 800ada6:	f803 2c24 	strb.w	r2, [r3, #-36]
 800adaa:	e00f      	b.n	800adcc <CmdParse_Ti+0x2b0>
 800adac:	200006b4 	.word	0x200006b4
 800adb0:	200006c8 	.word	0x200006c8
 800adb4:	2000001c 	.word	0x2000001c
 800adb8:	20000708 	.word	0x20000708
 800adbc:	2000060c 	.word	0x2000060c
 800adc0:	200006d6 	.word	0x200006d6
 800adc4:	79823b50 	.word	0x79823b50
							}
						}
						else {
							CmdCode.FPrefixCode = NO_CODE_RECEIVED;
 800adc8:	2300      	movs	r3, #0
 800adca:	60bb      	str	r3, [r7, #8]
						}

						if (CmdCode.FPrefixCode != NO_CODE_RECEIVED) {
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d014      	beq.n	800adfc <CmdParse_Ti+0x2e0>
							/* Push the date to queue, counting amount of complete correct sequences, resetting counters if necessary. */
							UartTxRxData.CmdSeqCnt++;
 800add2:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <CmdParse_Ti+0x2f4>)
 800add4:	889b      	ldrh	r3, [r3, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	b29a      	uxth	r2, r3
 800adda:	4b0d      	ldr	r3, [pc, #52]	; (800ae10 <CmdParse_Ti+0x2f4>)
 800addc:	809a      	strh	r2, [r3, #4]
							xQueueSendToBack(CmdRxPool_qh, &CmdCode, 0);
 800adde:	4b0d      	ldr	r3, [pc, #52]	; (800ae14 <CmdParse_Ti+0x2f8>)
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	f107 0108 	add.w	r1, r7, #8
 800ade6:	2300      	movs	r3, #0
 800ade8:	2200      	movs	r2, #0
 800adea:	f001 faa5 	bl	800c338 <xQueueGenericSend>
 800adee:	e005      	b.n	800adfc <CmdParse_Ti+0x2e0>
						}
					}
					/* Call command length fault handler. */
					else {
						UartTxRxData.isCmdLengthFault = 0;
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <CmdParse_Ti+0x2f4>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	709a      	strb	r2, [r3, #2]
						CmdParse_Error(&UartTxRxData);
 800adf6:	4806      	ldr	r0, [pc, #24]	; (800ae10 <CmdParse_Ti+0x2f4>)
 800adf8:	f000 f80e 	bl	800ae18 <CmdParse_Error>
				while (!UartTxRxData.isSeqReadCmpl) {
 800adfc:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <CmdParse_Ti+0x2f4>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f43f aef4 	beq.w	800abee <CmdParse_Ti+0xd2>
					}
				}
				UartTxRxData.isSeqReadCmpl = 0;
 800ae06:	4b02      	ldr	r3, [pc, #8]	; (800ae10 <CmdParse_Ti+0x2f4>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(UART3DMA_RxBuffFull_sh, 0) == pdPASS) {
 800ae0c:	e6a2      	b.n	800ab54 <CmdParse_Ti+0x38>
 800ae0e:	bf00      	nop
 800ae10:	200006c8 	.word	0x200006c8
 800ae14:	200006bc 	.word	0x200006bc

0800ae18 <CmdParse_Error>:
/*
 * @brief Command fault or buffer overrun handler.
 *
 * @param param: UART data struct to RX/TX data.
*/
static void CmdParse_Error(UartTxRxData_t *param) {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

	HAL_UART_DMAStop(CmdInOutUART);
 800ae20:	4b15      	ldr	r3, [pc, #84]	; (800ae78 <CmdParse_Error+0x60>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fd feb3 	bl	8008b90 <HAL_UART_DMAStop>
	//HAL_Delay(100);
	param->isBuffBoundaryOver = 0;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	70da      	strb	r2, [r3, #3]
	param->isSeqReadCmpl = 0;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	701a      	strb	r2, [r3, #0]
	param->CmdSeqCnt = 0;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	809a      	strh	r2, [r3, #4]
	param->cReadLimitCnt = 0;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	725a      	strb	r2, [r3, #9]
	param->cReadIndexBuff0 = 0;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	815a      	strh	r2, [r3, #10]
	param->isSeqReadCmpl = 1;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	701a      	strb	r2, [r3, #0]
	hdma_usart3_rx.Instance->NDTR = sizeof(param->RxDataBuff);
 800ae4e:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <CmdParse_Error+0x64>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae56:	605a      	str	r2, [r3, #4]
	HAL_Delay(1000);
 800ae58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae5c:	f7f7 fe08 	bl	8002a70 <HAL_Delay>
	HAL_UART_Receive_DMA(CmdInOutUART, &UartTxRxData.RxDataBuff[0], sizeof(UartTxRxData.RxDataBuff));
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <CmdParse_Error+0x60>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae68:	4905      	ldr	r1, [pc, #20]	; (800ae80 <CmdParse_Error+0x68>)
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd fe60 	bl	8008b30 <HAL_UART_Receive_DMA>

}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	2000001c 	.word	0x2000001c
 800ae7c:	2000060c 	.word	0x2000060c
 800ae80:	20000708 	.word	0x20000708

0800ae84 <CmdParse_SymbCnt>:
	@param param: UART data struct to RX/TX data.
	@param key_symbol: this symbol is a stop position when you are looking for. Counter doesn't
	count it.
	@param start_pos: It is just a position offset.
*/
static int16_t CmdParse_SymbCnt(UartTxRxData_t* param, char key_symbol, uint8_t start_pos) {
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
 800ae90:	4613      	mov	r3, r2
 800ae92:	70bb      	strb	r3, [r7, #2]

	uint16_t SymbCnt = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	81fb      	strh	r3, [r7, #14]

	while (param->TmpCmdBuff[start_pos + SymbCnt] != key_symbol) {
 800ae98:	e00a      	b.n	800aeb0 <CmdParse_SymbCnt+0x2c>
		SymbCnt++;
 800ae9a:	89fb      	ldrh	r3, [r7, #14]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	81fb      	strh	r3, [r7, #14]
		if (SymbCnt == (sizeof(param->TmpCmdBuff) - start_pos)) {
 800aea0:	89fa      	ldrh	r2, [r7, #14]
 800aea2:	78bb      	ldrb	r3, [r7, #2]
 800aea4:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d101      	bne.n	800aeb0 <CmdParse_SymbCnt+0x2c>
			return 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e00a      	b.n	800aec6 <CmdParse_SymbCnt+0x42>
	while (param->TmpCmdBuff[start_pos + SymbCnt] != key_symbol) {
 800aeb0:	78ba      	ldrb	r2, [r7, #2]
 800aeb2:	89fb      	ldrh	r3, [r7, #14]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	4413      	add	r3, r2
 800aeba:	7b9b      	ldrb	r3, [r3, #14]
 800aebc:	78fa      	ldrb	r2, [r7, #3]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d1eb      	bne.n	800ae9a <CmdParse_SymbCnt+0x16>
		}
	}

	return SymbCnt;
 800aec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <UART_SendMessage>:
}

/*
	@brief Send a simple message over UART.
*/
void UART_SendMessage(uint8_t* data, uint16_t amount) {
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	807b      	strh	r3, [r7, #2]

	xSemaphoreTake(UART3_msh, portMAX_DELAY);
 800aee0:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <UART_SendMessage+0x40>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f04f 31ff 	mov.w	r1, #4294967295
 800aee8:	4618      	mov	r0, r3
 800aeea:	f001 fd2b 	bl	800c944 <xQueueSemaphoreTake>
	HAL_UART_Transmit(CmdInOutUART, data, amount, 25);
 800aeee:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <UART_SendMessage+0x44>)
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	887a      	ldrh	r2, [r7, #2]
 800aef4:	2319      	movs	r3, #25
 800aef6:	6879      	ldr	r1, [r7, #4]
 800aef8:	f7fd fd88 	bl	8008a0c <HAL_UART_Transmit>
	xSemaphoreGive(UART3_msh);
 800aefc:	4b05      	ldr	r3, [pc, #20]	; (800af14 <UART_SendMessage+0x40>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	2300      	movs	r3, #0
 800af02:	2200      	movs	r2, #0
 800af04:	2100      	movs	r1, #0
 800af06:	f001 fa17 	bl	800c338 <xQueueGenericSend>
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200006b8 	.word	0x200006b8
 800af18:	2000001c 	.word	0x2000001c

0800af1c <UART_RxFullCallback>:
/*
	@brief UART callback of RX transfer.
	@param  _huart : service struct of UART.
	@retval None
 */
static void UART_RxFullCallback(UART_HandleTypeDef* huart) {
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	/* Stream two handler (RX USART data). */
	__NOP();
 800af24:	bf00      	nop
	xSemaphoreGiveFromISR(UART3DMA_RxBuffFull_sh, NULL);
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <UART_RxFullCallback+0x20>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 fb9c 	bl	800c66a <xQueueGiveFromISR>
};
 800af32:	bf00      	nop
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	200006b4 	.word	0x200006b4

0800af40 <UART_TxFullCallback>:
/*
	@brief UART callback of TX transfer.
	@param  _huart : service struct of UART.
	@retval None
 */
static void UART_TxFullCallback(UART_HandleTypeDef* huart) {
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	/* Stream two handler (TX USART data). */
	__NOP();
 800af48:	bf00      	nop
	xSemaphoreGiveFromISR(UART3DMA_EndOfTx_sh, NULL);
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <UART_TxFullCallback+0x20>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f001 fb8a 	bl	800c66a <xQueueGiveFromISR>
};
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	200006b0 	.word	0x200006b0

0800af64 <MX_LWIP_Init>:


/**
  * @brief LwIP initialization function
  */
void MX_LWIP_Init(void) {
 800af64:	b5b0      	push	{r4, r5, r7, lr}
 800af66:	b08a      	sub	sp, #40	; 0x28
 800af68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800af6a:	4b95      	ldr	r3, [pc, #596]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800af6c:	22c0      	movs	r2, #192	; 0xc0
 800af6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800af70:	4b93      	ldr	r3, [pc, #588]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800af72:	22a8      	movs	r2, #168	; 0xa8
 800af74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 88;
 800af76:	4b92      	ldr	r3, [pc, #584]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800af78:	2258      	movs	r2, #88	; 0x58
 800af7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800af7c:	4b90      	ldr	r3, [pc, #576]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800af7e:	2264      	movs	r2, #100	; 0x64
 800af80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800af82:	4b90      	ldr	r3, [pc, #576]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800af84:	22ff      	movs	r2, #255	; 0xff
 800af86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800af88:	4b8e      	ldr	r3, [pc, #568]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800af8a:	22ff      	movs	r2, #255	; 0xff
 800af8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800af8e:	4b8d      	ldr	r3, [pc, #564]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800af90:	22ff      	movs	r2, #255	; 0xff
 800af92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800af94:	4b8b      	ldr	r3, [pc, #556]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800af96:	2200      	movs	r2, #0
 800af98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800af9a:	4b8b      	ldr	r3, [pc, #556]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800af9c:	22c0      	movs	r2, #192	; 0xc0
 800af9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800afa0:	4b89      	ldr	r3, [pc, #548]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800afa2:	22a8      	movs	r2, #168	; 0xa8
 800afa4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 88;
 800afa6:	4b88      	ldr	r3, [pc, #544]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800afa8:	2258      	movs	r2, #88	; 0x58
 800afaa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800afac:	4b86      	ldr	r3, [pc, #536]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800afae:	2201      	movs	r2, #1
 800afb0:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800afb2:	2100      	movs	r1, #0
 800afb4:	2000      	movs	r0, #0
 800afb6:	f004 f959 	bl	800f26c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800afba:	4b81      	ldr	r3, [pc, #516]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	061a      	lsls	r2, r3, #24
 800afc0:	4b7f      	ldr	r3, [pc, #508]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	041b      	lsls	r3, r3, #16
 800afc6:	431a      	orrs	r2, r3
 800afc8:	4b7d      	ldr	r3, [pc, #500]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afca:	789b      	ldrb	r3, [r3, #2]
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	4313      	orrs	r3, r2
 800afd0:	4a7b      	ldr	r2, [pc, #492]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afd2:	78d2      	ldrb	r2, [r2, #3]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	061a      	lsls	r2, r3, #24
 800afd8:	4b79      	ldr	r3, [pc, #484]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	0619      	lsls	r1, r3, #24
 800afde:	4b78      	ldr	r3, [pc, #480]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afe0:	785b      	ldrb	r3, [r3, #1]
 800afe2:	041b      	lsls	r3, r3, #16
 800afe4:	4319      	orrs	r1, r3
 800afe6:	4b76      	ldr	r3, [pc, #472]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800afe8:	789b      	ldrb	r3, [r3, #2]
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	430b      	orrs	r3, r1
 800afee:	4974      	ldr	r1, [pc, #464]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800aff0:	78c9      	ldrb	r1, [r1, #3]
 800aff2:	430b      	orrs	r3, r1
 800aff4:	021b      	lsls	r3, r3, #8
 800aff6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800affa:	431a      	orrs	r2, r3
 800affc:	4b70      	ldr	r3, [pc, #448]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	0619      	lsls	r1, r3, #24
 800b002:	4b6f      	ldr	r3, [pc, #444]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	041b      	lsls	r3, r3, #16
 800b008:	4319      	orrs	r1, r3
 800b00a:	4b6d      	ldr	r3, [pc, #436]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b00c:	789b      	ldrb	r3, [r3, #2]
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	430b      	orrs	r3, r1
 800b012:	496b      	ldr	r1, [pc, #428]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b014:	78c9      	ldrb	r1, [r1, #3]
 800b016:	430b      	orrs	r3, r1
 800b018:	0a1b      	lsrs	r3, r3, #8
 800b01a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b01e:	431a      	orrs	r2, r3
 800b020:	4b67      	ldr	r3, [pc, #412]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	0619      	lsls	r1, r3, #24
 800b026:	4b66      	ldr	r3, [pc, #408]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	4319      	orrs	r1, r3
 800b02e:	4b64      	ldr	r3, [pc, #400]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b030:	789b      	ldrb	r3, [r3, #2]
 800b032:	021b      	lsls	r3, r3, #8
 800b034:	430b      	orrs	r3, r1
 800b036:	4962      	ldr	r1, [pc, #392]	; (800b1c0 <MX_LWIP_Init+0x25c>)
 800b038:	78c9      	ldrb	r1, [r1, #3]
 800b03a:	430b      	orrs	r3, r1
 800b03c:	0e1b      	lsrs	r3, r3, #24
 800b03e:	4313      	orrs	r3, r2
 800b040:	4a62      	ldr	r2, [pc, #392]	; (800b1cc <MX_LWIP_Init+0x268>)
 800b042:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b044:	4b5f      	ldr	r3, [pc, #380]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	061a      	lsls	r2, r3, #24
 800b04a:	4b5e      	ldr	r3, [pc, #376]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b04c:	785b      	ldrb	r3, [r3, #1]
 800b04e:	041b      	lsls	r3, r3, #16
 800b050:	431a      	orrs	r2, r3
 800b052:	4b5c      	ldr	r3, [pc, #368]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b054:	789b      	ldrb	r3, [r3, #2]
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	4313      	orrs	r3, r2
 800b05a:	4a5a      	ldr	r2, [pc, #360]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b05c:	78d2      	ldrb	r2, [r2, #3]
 800b05e:	4313      	orrs	r3, r2
 800b060:	061a      	lsls	r2, r3, #24
 800b062:	4b58      	ldr	r3, [pc, #352]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	0619      	lsls	r1, r3, #24
 800b068:	4b56      	ldr	r3, [pc, #344]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	041b      	lsls	r3, r3, #16
 800b06e:	4319      	orrs	r1, r3
 800b070:	4b54      	ldr	r3, [pc, #336]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b072:	789b      	ldrb	r3, [r3, #2]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	430b      	orrs	r3, r1
 800b078:	4952      	ldr	r1, [pc, #328]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b07a:	78c9      	ldrb	r1, [r1, #3]
 800b07c:	430b      	orrs	r3, r1
 800b07e:	021b      	lsls	r3, r3, #8
 800b080:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b084:	431a      	orrs	r2, r3
 800b086:	4b4f      	ldr	r3, [pc, #316]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	0619      	lsls	r1, r3, #24
 800b08c:	4b4d      	ldr	r3, [pc, #308]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b08e:	785b      	ldrb	r3, [r3, #1]
 800b090:	041b      	lsls	r3, r3, #16
 800b092:	4319      	orrs	r1, r3
 800b094:	4b4b      	ldr	r3, [pc, #300]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b096:	789b      	ldrb	r3, [r3, #2]
 800b098:	021b      	lsls	r3, r3, #8
 800b09a:	430b      	orrs	r3, r1
 800b09c:	4949      	ldr	r1, [pc, #292]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b09e:	78c9      	ldrb	r1, [r1, #3]
 800b0a0:	430b      	orrs	r3, r1
 800b0a2:	0a1b      	lsrs	r3, r3, #8
 800b0a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	4b46      	ldr	r3, [pc, #280]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	0619      	lsls	r1, r3, #24
 800b0b0:	4b44      	ldr	r3, [pc, #272]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b0b2:	785b      	ldrb	r3, [r3, #1]
 800b0b4:	041b      	lsls	r3, r3, #16
 800b0b6:	4319      	orrs	r1, r3
 800b0b8:	4b42      	ldr	r3, [pc, #264]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b0ba:	789b      	ldrb	r3, [r3, #2]
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	4940      	ldr	r1, [pc, #256]	; (800b1c4 <MX_LWIP_Init+0x260>)
 800b0c2:	78c9      	ldrb	r1, [r1, #3]
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	0e1b      	lsrs	r3, r3, #24
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	4a41      	ldr	r2, [pc, #260]	; (800b1d0 <MX_LWIP_Init+0x26c>)
 800b0cc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b0ce:	4b3e      	ldr	r3, [pc, #248]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	061a      	lsls	r2, r3, #24
 800b0d4:	4b3c      	ldr	r3, [pc, #240]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0d6:	785b      	ldrb	r3, [r3, #1]
 800b0d8:	041b      	lsls	r3, r3, #16
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	4b3a      	ldr	r3, [pc, #232]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0de:	789b      	ldrb	r3, [r3, #2]
 800b0e0:	021b      	lsls	r3, r3, #8
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	4a38      	ldr	r2, [pc, #224]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0e6:	78d2      	ldrb	r2, [r2, #3]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	061a      	lsls	r2, r3, #24
 800b0ec:	4b36      	ldr	r3, [pc, #216]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	0619      	lsls	r1, r3, #24
 800b0f2:	4b35      	ldr	r3, [pc, #212]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0f4:	785b      	ldrb	r3, [r3, #1]
 800b0f6:	041b      	lsls	r3, r3, #16
 800b0f8:	4319      	orrs	r1, r3
 800b0fa:	4b33      	ldr	r3, [pc, #204]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b0fc:	789b      	ldrb	r3, [r3, #2]
 800b0fe:	021b      	lsls	r3, r3, #8
 800b100:	430b      	orrs	r3, r1
 800b102:	4931      	ldr	r1, [pc, #196]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b104:	78c9      	ldrb	r1, [r1, #3]
 800b106:	430b      	orrs	r3, r1
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b10e:	431a      	orrs	r2, r3
 800b110:	4b2d      	ldr	r3, [pc, #180]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	0619      	lsls	r1, r3, #24
 800b116:	4b2c      	ldr	r3, [pc, #176]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b118:	785b      	ldrb	r3, [r3, #1]
 800b11a:	041b      	lsls	r3, r3, #16
 800b11c:	4319      	orrs	r1, r3
 800b11e:	4b2a      	ldr	r3, [pc, #168]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b120:	789b      	ldrb	r3, [r3, #2]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	430b      	orrs	r3, r1
 800b126:	4928      	ldr	r1, [pc, #160]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b128:	78c9      	ldrb	r1, [r1, #3]
 800b12a:	430b      	orrs	r3, r1
 800b12c:	0a1b      	lsrs	r3, r3, #8
 800b12e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b132:	431a      	orrs	r2, r3
 800b134:	4b24      	ldr	r3, [pc, #144]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	0619      	lsls	r1, r3, #24
 800b13a:	4b23      	ldr	r3, [pc, #140]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b13c:	785b      	ldrb	r3, [r3, #1]
 800b13e:	041b      	lsls	r3, r3, #16
 800b140:	4319      	orrs	r1, r3
 800b142:	4b21      	ldr	r3, [pc, #132]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b144:	789b      	ldrb	r3, [r3, #2]
 800b146:	021b      	lsls	r3, r3, #8
 800b148:	430b      	orrs	r3, r1
 800b14a:	491f      	ldr	r1, [pc, #124]	; (800b1c8 <MX_LWIP_Init+0x264>)
 800b14c:	78c9      	ldrb	r1, [r1, #3]
 800b14e:	430b      	orrs	r3, r1
 800b150:	0e1b      	lsrs	r3, r3, #24
 800b152:	4313      	orrs	r3, r2
 800b154:	4a1f      	ldr	r2, [pc, #124]	; (800b1d4 <MX_LWIP_Init+0x270>)
 800b156:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b158:	4b1f      	ldr	r3, [pc, #124]	; (800b1d8 <MX_LWIP_Init+0x274>)
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	4b1f      	ldr	r3, [pc, #124]	; (800b1dc <MX_LWIP_Init+0x278>)
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	2300      	movs	r3, #0
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	4b1b      	ldr	r3, [pc, #108]	; (800b1d4 <MX_LWIP_Init+0x270>)
 800b166:	4a1a      	ldr	r2, [pc, #104]	; (800b1d0 <MX_LWIP_Init+0x26c>)
 800b168:	4918      	ldr	r1, [pc, #96]	; (800b1cc <MX_LWIP_Init+0x268>)
 800b16a:	481d      	ldr	r0, [pc, #116]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b16c:	f005 f912 	bl	8010394 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b170:	481b      	ldr	r0, [pc, #108]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b172:	f005 facd 	bl	8010710 <netif_set_default>

  if (netif_is_link_up(&gnetif))  {
 800b176:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b178:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b17c:	089b      	lsrs	r3, r3, #2
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <MX_LWIP_Init+0x22c>
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b188:	4815      	ldr	r0, [pc, #84]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b18a:	f005 fad1 	bl	8010730 <netif_set_up>
 800b18e:	e002      	b.n	800b196 <MX_LWIP_Init+0x232>
  } else {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b190:	4813      	ldr	r0, [pc, #76]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b192:	f005 fb41 	bl	8010818 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b196:	4913      	ldr	r1, [pc, #76]	; (800b1e4 <MX_LWIP_Init+0x280>)
 800b198:	4811      	ldr	r0, [pc, #68]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b19a:	f005 fbdb 	bl	8010954 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *4);
 800b19e:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <MX_LWIP_Init+0x284>)
 800b1a0:	1d3c      	adds	r4, r7, #4
 800b1a2:	461d      	mov	r5, r3
 800b1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 800b1ac:	1d3b      	adds	r3, r7, #4
 800b1ae:	490c      	ldr	r1, [pc, #48]	; (800b1e0 <MX_LWIP_Init+0x27c>)
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fd07 	bl	800bbc4 <osThreadCreate>
}
 800b1b6:	bf00      	nop
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	200009d0 	.word	0x200009d0
 800b1c4:	200009d4 	.word	0x200009d4
 800b1c8:	200009d8 	.word	0x200009d8
 800b1cc:	200009c4 	.word	0x200009c4
 800b1d0:	200009c8 	.word	0x200009c8
 800b1d4:	200009cc 	.word	0x200009cc
 800b1d8:	0800f1a9 	.word	0x0800f1a9
 800b1dc:	0800b651 	.word	0x0800b651
 800b1e0:	2000098c 	.word	0x2000098c
 800b1e4:	0800b63d 	.word	0x0800b63d
 800b1e8:	0801d104 	.word	0x0801d104

0800b1ec <ethernetif_input>:
 * interface. Then the type of the received packet is determined and
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument) {
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b1fc:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <ethernetif_input+0x50>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f04f 31ff 	mov.w	r1, #4294967295
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fda9 	bl	800bd5c <osSemaphoreWait>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1f5      	bne.n	800b1fc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b210:	68b8      	ldr	r0, [r7, #8]
 800b212:	f000 fb9b 	bl	800b94c <low_level_input>
 800b216:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	4798      	blx	r3
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f005 ff3e 	bl	80110b0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1ea      	bne.n	800b210 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b23a:	e7df      	b.n	800b1fc <ethernetif_input+0x10>
 800b23c:	20000898 	.word	0x20000898

0800b240 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

static void ethernet_link_thread(void const * argument) {
 800b240:	b580      	push	{r7, lr}
 800b242:	b0a0      	sub	sp, #128	; 0x80
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]

  ETH_MACConfigTypeDef MACConf = {0};
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	2264      	movs	r2, #100	; 0x64
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f00f fd71 	bl	801ad38 <memset>
  int32_t PHYLinkState = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b25e:	2300      	movs	r3, #0
 800b260:	67bb      	str	r3, [r7, #120]	; 0x78
 800b262:	2300      	movs	r3, #0
 800b264:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	66fb      	str	r3, [r7, #108]	; 0x6c

  for(;;)
  {
	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b26a:	483e      	ldr	r0, [pc, #248]	; (800b364 <ethernet_link_thread+0x124>)
 800b26c:	f7f7 fb37 	bl	80028de <LAN8742_GetLinkState>
 800b270:	6738      	str	r0, [r7, #112]	; 0x70

	  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN)) {
 800b272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b278:	089b      	lsrs	r3, r3, #2
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d010      	beq.n	800b2a6 <ethernet_link_thread+0x66>
 800b284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b286:	2b01      	cmp	r3, #1
 800b288:	dc0d      	bgt.n	800b2a6 <ethernet_link_thread+0x66>
		vTaskDelay(1000);
 800b28a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b28e:	f002 f87f 	bl	800d390 <vTaskDelay>
		HAL_ETH_Stop_IT(&heth);
 800b292:	4835      	ldr	r0, [pc, #212]	; (800b368 <ethernet_link_thread+0x128>)
 800b294:	f7f9 f88a 	bl	80043ac <HAL_ETH_Stop_IT>
		netif_set_down(netif);
 800b298:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b29a:	f005 fabd 	bl	8010818 <netif_set_down>
		netif_set_link_down(netif);
 800b29e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2a0:	f005 fb28 	bl	80108f4 <netif_set_link_down>
 800b2a4:	e059      	b.n	800b35a <ethernet_link_thread+0x11a>
	  } else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN)) {
 800b2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d152      	bne.n	800b35a <ethernet_link_thread+0x11a>
 800b2b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	dd4f      	ble.n	800b35a <ethernet_link_thread+0x11a>
			switch (PHYLinkState)
 800b2ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2bc:	3b02      	subs	r3, #2
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d82a      	bhi.n	800b318 <ethernet_link_thread+0xd8>
 800b2c2:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <ethernet_link_thread+0x88>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b2eb 	.word	0x0800b2eb
 800b2d0:	0800b2fb 	.word	0x0800b2fb
 800b2d4:	0800b30b 	.word	0x0800b30b
				{
				case LAN8742_STATUS_100MBITS_FULLDUPLEX:
				duplex = ETH_FULLDUPLEX_MODE;
 800b2d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2dc:	677b      	str	r3, [r7, #116]	; 0x74
				speed = ETH_SPEED_100M;
 800b2de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2e2:	67bb      	str	r3, [r7, #120]	; 0x78
				linkchanged = 1;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	67fb      	str	r3, [r7, #124]	; 0x7c
				break;
 800b2e8:	e017      	b.n	800b31a <ethernet_link_thread+0xda>
				case LAN8742_STATUS_100MBITS_HALFDUPLEX:
				duplex = ETH_HALFDUPLEX_MODE;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	677b      	str	r3, [r7, #116]	; 0x74
				speed = ETH_SPEED_100M;
 800b2ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2f2:	67bb      	str	r3, [r7, #120]	; 0x78
				linkchanged = 1;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	67fb      	str	r3, [r7, #124]	; 0x7c
				break;
 800b2f8:	e00f      	b.n	800b31a <ethernet_link_thread+0xda>
				case LAN8742_STATUS_10MBITS_FULLDUPLEX:
				duplex = ETH_FULLDUPLEX_MODE;
 800b2fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2fe:	677b      	str	r3, [r7, #116]	; 0x74
				speed = ETH_SPEED_10M;
 800b300:	2300      	movs	r3, #0
 800b302:	67bb      	str	r3, [r7, #120]	; 0x78
				linkchanged = 1;
 800b304:	2301      	movs	r3, #1
 800b306:	67fb      	str	r3, [r7, #124]	; 0x7c
				break;
 800b308:	e007      	b.n	800b31a <ethernet_link_thread+0xda>
				case LAN8742_STATUS_10MBITS_HALFDUPLEX:
				duplex = ETH_HALFDUPLEX_MODE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	677b      	str	r3, [r7, #116]	; 0x74
				speed = ETH_SPEED_10M;
 800b30e:	2300      	movs	r3, #0
 800b310:	67bb      	str	r3, [r7, #120]	; 0x78
				linkchanged = 1;
 800b312:	2301      	movs	r3, #1
 800b314:	67fb      	str	r3, [r7, #124]	; 0x7c
				break;
 800b316:	e000      	b.n	800b31a <ethernet_link_thread+0xda>
				default:
				break;
 800b318:	bf00      	nop
				}

		if(linkchanged) {
 800b31a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d01c      	beq.n	800b35a <ethernet_link_thread+0x11a>
		  /* Get MAC Config MAC */
		  vTaskDelay(1000);
 800b320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b324:	f002 f834 	bl	800d390 <vTaskDelay>
		  HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b328:	f107 0308 	add.w	r3, r7, #8
 800b32c:	4619      	mov	r1, r3
 800b32e:	480e      	ldr	r0, [pc, #56]	; (800b368 <ethernet_link_thread+0x128>)
 800b330:	f7f9 fc14 	bl	8004b5c <HAL_ETH_GetMACConfig>
		  MACConf.DuplexMode = duplex;
 800b334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b336:	623b      	str	r3, [r7, #32]
		  MACConf.Speed = speed;
 800b338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b33a:	61fb      	str	r3, [r7, #28]
		  HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b33c:	f107 0308 	add.w	r3, r7, #8
 800b340:	4619      	mov	r1, r3
 800b342:	4809      	ldr	r0, [pc, #36]	; (800b368 <ethernet_link_thread+0x128>)
 800b344:	f7f9 fcf4 	bl	8004d30 <HAL_ETH_SetMACConfig>
		  HAL_ETH_Start_IT(&heth);
 800b348:	4807      	ldr	r0, [pc, #28]	; (800b368 <ethernet_link_thread+0x128>)
 800b34a:	f7f8 ffa1 	bl	8004290 <HAL_ETH_Start_IT>
		  netif_set_up(netif);
 800b34e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b350:	f005 f9ee 	bl	8010730 <netif_set_up>
		  netif_set_link_up(netif);
 800b354:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b356:	f005 fa99 	bl	801088c <netif_set_link_up>
		}
  }
    osDelay(100);
 800b35a:	2064      	movs	r0, #100	; 0x64
 800b35c:	f000 fc59 	bl	800bc12 <osDelay>
	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b360:	e783      	b.n	800b26a <ethernet_link_thread+0x2a>
 800b362:	bf00      	nop
 800b364:	200054a4 	.word	0x200054a4
 800b368:	200008a4 	.word	0x200008a4

0800b36c <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08e      	sub	sp, #56	; 0x38
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	609a      	str	r2, [r3, #8]
 800b380:	60da      	str	r2, [r3, #12]
 800b382:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)   {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a4a      	ldr	r2, [pc, #296]	; (800b4b4 <HAL_ETH_MspInit+0x148>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	f040 808d 	bne.w	800b4aa <HAL_ETH_MspInit+0x13e>
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b390:	2300      	movs	r3, #0
 800b392:	623b      	str	r3, [r7, #32]
 800b394:	4b48      	ldr	r3, [pc, #288]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b398:	4a47      	ldr	r2, [pc, #284]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b39a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b39e:	6313      	str	r3, [r2, #48]	; 0x30
 800b3a0:	4b45      	ldr	r3, [pc, #276]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3a8:	623b      	str	r3, [r7, #32]
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	61fb      	str	r3, [r7, #28]
 800b3b0:	4b41      	ldr	r3, [pc, #260]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	4a40      	ldr	r2, [pc, #256]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3ba:	6313      	str	r3, [r2, #48]	; 0x30
 800b3bc:	4b3e      	ldr	r3, [pc, #248]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3c4:	61fb      	str	r3, [r7, #28]
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	61bb      	str	r3, [r7, #24]
 800b3cc:	4b3a      	ldr	r3, [pc, #232]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d0:	4a39      	ldr	r2, [pc, #228]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b3d8:	4b37      	ldr	r3, [pc, #220]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	617b      	str	r3, [r7, #20]
 800b3e8:	4b33      	ldr	r3, [pc, #204]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ec:	4a32      	ldr	r2, [pc, #200]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3ee:	f043 0304 	orr.w	r3, r3, #4
 800b3f2:	6313      	str	r3, [r2, #48]	; 0x30
 800b3f4:	4b30      	ldr	r3, [pc, #192]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b400:	2300      	movs	r3, #0
 800b402:	613b      	str	r3, [r7, #16]
 800b404:	4b2c      	ldr	r3, [pc, #176]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b408:	4a2b      	ldr	r2, [pc, #172]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b40a:	f043 0301 	orr.w	r3, r3, #1
 800b40e:	6313      	str	r3, [r2, #48]	; 0x30
 800b410:	4b29      	ldr	r3, [pc, #164]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	f003 0301 	and.w	r3, r3, #1
 800b418:	613b      	str	r3, [r7, #16]
 800b41a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b41c:	2300      	movs	r3, #0
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	4b25      	ldr	r3, [pc, #148]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b424:	4a24      	ldr	r2, [pc, #144]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b426:	f043 0302 	orr.w	r3, r3, #2
 800b42a:	6313      	str	r3, [r2, #48]	; 0x30
 800b42c:	4b22      	ldr	r3, [pc, #136]	; (800b4b8 <HAL_ETH_MspInit+0x14c>)
 800b42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b430:	f003 0302 	and.w	r3, r3, #2
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b438:	2332      	movs	r3, #50	; 0x32
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43c:	2302      	movs	r3, #2
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b440:	2300      	movs	r3, #0
 800b442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b444:	2303      	movs	r3, #3
 800b446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b448:	230b      	movs	r3, #11
 800b44a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b450:	4619      	mov	r1, r3
 800b452:	481a      	ldr	r0, [pc, #104]	; (800b4bc <HAL_ETH_MspInit+0x150>)
 800b454:	f7fa f8ee 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b458:	2386      	movs	r3, #134	; 0x86
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b45c:	2302      	movs	r3, #2
 800b45e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b460:	2300      	movs	r3, #0
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b464:	2303      	movs	r3, #3
 800b466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b468:	230b      	movs	r3, #11
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b46c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b470:	4619      	mov	r1, r3
 800b472:	4813      	ldr	r0, [pc, #76]	; (800b4c0 <HAL_ETH_MspInit+0x154>)
 800b474:	f7fa f8de 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 800b478:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47e:	2302      	movs	r3, #2
 800b480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b482:	2300      	movs	r3, #0
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b486:	2303      	movs	r3, #3
 800b488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b48a:	230b      	movs	r3, #11
 800b48c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b492:	4619      	mov	r1, r3
 800b494:	480b      	ldr	r0, [pc, #44]	; (800b4c4 <HAL_ETH_MspInit+0x158>)
 800b496:	f7fa f8cd 	bl	8005634 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b49a:	2200      	movs	r2, #0
 800b49c:	2105      	movs	r1, #5
 800b49e:	203d      	movs	r0, #61	; 0x3d
 800b4a0:	f7f8 fa30 	bl	8003904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b4a4:	203d      	movs	r0, #61	; 0x3d
 800b4a6:	f7f8 fa49 	bl	800393c <HAL_NVIC_EnableIRQ>
  }
}
 800b4aa:	bf00      	nop
 800b4ac:	3738      	adds	r7, #56	; 0x38
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40028000 	.word	0x40028000
 800b4b8:	40023800 	.word	0x40023800
 800b4bc:	40020800 	.word	0x40020800
 800b4c0:	40020000 	.word	0x40020000
 800b4c4:	40020400 	.word	0x40020400

0800b4c8 <HAL_ETH_RxCpltCallback>:
/**
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b4d0:	4b04      	ldr	r3, [pc, #16]	; (800b4e4 <HAL_ETH_RxCpltCallback+0x1c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fc8f 	bl	800bdf8 <osSemaphoreRelease>
}
 800b4da:	bf00      	nop
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20000898 	.word	0x20000898

0800b4e8 <HAL_ETH_TxCpltCallback>:
/**
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth) {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <HAL_ETH_TxCpltCallback+0x1c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fc7f 	bl	800bdf8 <osSemaphoreRelease>
}
 800b4fa:	bf00      	nop
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	2000089c 	.word	0x2000089c

0800b508 <HAL_ETH_ErrorCallback>:
/**
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7f9 fc7d 	bl	8004e10 <HAL_ETH_GetDMAError>
 800b516:	4603      	mov	r3, r0
 800b518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b51c:	2b80      	cmp	r3, #128	; 0x80
 800b51e:	d104      	bne.n	800b52a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b520:	4b04      	ldr	r3, [pc, #16]	; (800b534 <HAL_ETH_ErrorCallback+0x2c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fc67 	bl	800bdf8 <osSemaphoreRelease>
  }
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20000898 	.word	0x20000898

0800b538 <HAL_ETH_RxAllocateCallback>:

/*
 * @brief
 */
void HAL_ETH_RxAllocateCallback(uint8_t **buff) {
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	6078      	str	r0, [r7, #4]

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b540:	4812      	ldr	r0, [pc, #72]	; (800b58c <HAL_ETH_RxAllocateCallback+0x54>)
 800b542:	f004 fe5d 	bl	8010200 <memp_malloc_pool>
 800b546:	60f8      	str	r0, [r7, #12]

  if (p) {
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d014      	beq.n	800b578 <HAL_ETH_RxAllocateCallback+0x40>
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f103 0220 	add.w	r2, r3, #32
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <HAL_ETH_RxAllocateCallback+0x58>)
 800b55c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b566:	9201      	str	r2, [sp, #4]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2241      	movs	r2, #65	; 0x41
 800b56e:	2100      	movs	r1, #0
 800b570:	2000      	movs	r0, #0
 800b572:	f005 fbe3 	bl	8010d3c <pbuf_alloced_custom>
  } else {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 800b576:	e005      	b.n	800b584 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b578:	4b06      	ldr	r3, [pc, #24]	; (800b594 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	0801fcec 	.word	0x0801fcec
 800b590:	0800b6ad 	.word	0x0800b6ad
 800b594:	200008a0 	.word	0x200008a0

0800b598 <HAL_ETH_RxLinkCallback>:

/*
 * @brief
 */
void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length) {
 800b598:	b480      	push	{r7}
 800b59a:	b089      	sub	sp, #36	; 0x24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	807b      	strh	r3, [r7, #2]

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3b20      	subs	r3, #32
 800b5b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	887a      	ldrh	r2, [r7, #2]
 800b5c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart) {
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d103      	bne.n	800b5da <HAL_ETH_RxLinkCallback+0x42>
    /* The first buffer of the packet. */
    *ppStart = p;
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	69fa      	ldr	r2, [r7, #28]
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	e003      	b.n	800b5e2 <HAL_ETH_RxLinkCallback+0x4a>
  } else {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	69fa      	ldr	r2, [r7, #28]
 800b5e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next) {
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	61fb      	str	r3, [r7, #28]
 800b5ee:	e009      	b.n	800b604 <HAL_ETH_RxLinkCallback+0x6c>
    p->tot_len += Length;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	891a      	ldrh	r2, [r3, #8]
 800b5f4:	887b      	ldrh	r3, [r7, #2]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next) {
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	61fb      	str	r3, [r7, #28]
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f2      	bne.n	800b5f0 <HAL_ETH_RxLinkCallback+0x58>
  }
}
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	3724      	adds	r7, #36	; 0x24
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_ETH_TxFreeCallback>:

 /*
  * @brief
  */
void HAL_ETH_TxFreeCallback(uint32_t * buff) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]

  pbuf_free((struct pbuf *)buff);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f005 fd45 	bl	80110b0 <pbuf_free>
}
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <sys_now>:
* @brief  Returns the current time in milliseconds
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void) {
 800b62e:	b580      	push	{r7, lr}
 800b630:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b632:	f7f7 fa11 	bl	8002a58 <HAL_GetTick>
 800b636:	4603      	mov	r3, r0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <ethernet_link_status_updated>:
/**
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif) {
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  }
  /* netif is down */
  else {

  }
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <ethernetif_init>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
static err_t ethernetif_init(struct netif *netif) {
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <ethernetif_init+0x1c>
 800b65e:	4b0e      	ldr	r3, [pc, #56]	; (800b698 <ethernetif_init+0x48>)
 800b660:	f240 12eb 	movw	r2, #491	; 0x1eb
 800b664:	490d      	ldr	r1, [pc, #52]	; (800b69c <ethernetif_init+0x4c>)
 800b666:	480e      	ldr	r0, [pc, #56]	; (800b6a0 <ethernetif_init+0x50>)
 800b668:	f00f fa32 	bl	801aad0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2273      	movs	r2, #115	; 0x73
 800b670:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2274      	movs	r2, #116	; 0x74
 800b678:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a09      	ldr	r2, [pc, #36]	; (800b6a4 <ethernetif_init+0x54>)
 800b680:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a08      	ldr	r2, [pc, #32]	; (800b6a8 <ethernetif_init+0x58>)
 800b686:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f82f 	bl	800b6ec <low_level_init>

  return ERR_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	0801d118 	.word	0x0801d118
 800b69c:	0801d12c 	.word	0x0801d12c
 800b6a0:	0801d13c 	.word	0x0801d13c
 800b6a4:	08017fe1 	.word	0x08017fe1
 800b6a8:	0800b981 	.word	0x0800b981

0800b6ac <pbuf_free_custom>:
/**
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
static void pbuf_free_custom(struct pbuf *p) {
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b6b8:	68f9      	ldr	r1, [r7, #12]
 800b6ba:	4809      	ldr	r0, [pc, #36]	; (800b6e0 <pbuf_free_custom+0x34>)
 800b6bc:	f004 fe14 	bl	80102e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b6c0:	4b08      	ldr	r3, [pc, #32]	; (800b6e4 <pbuf_free_custom+0x38>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d107      	bne.n	800b6d8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b6c8:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <pbuf_free_custom+0x38>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <pbuf_free_custom+0x3c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fb90 	bl	800bdf8 <osSemaphoreRelease>
  }
}
 800b6d8:	bf00      	nop
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	0801fcec 	.word	0x0801fcec
 800b6e4:	200008a0 	.word	0x200008a0
 800b6e8:	20000898 	.word	0x20000898

0800b6ec <low_level_init>:
 * Called from ethernetif_init().
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
 800b6ec:	b5b0      	push	{r4, r5, r7, lr}
 800b6ee:	b0a6      	sub	sp, #152	; 0x98
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t duplex, speed = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int32_t PHYLinkState = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  ETH_MACConfigTypeDef MACConf = {0};
 800b706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b70a:	2264      	movs	r2, #100	; 0x64
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f00f fb12 	bl	801ad38 <memset>

  /* Start ETH HAL Init */
  uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b714:	4b82      	ldr	r3, [pc, #520]	; (800b920 <low_level_init+0x234>)
 800b716:	4a83      	ldr	r2, [pc, #524]	; (800b924 <low_level_init+0x238>)
 800b718:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b71a:	2300      	movs	r3, #0
 800b71c:	773b      	strb	r3, [r7, #28]
  MACAddr[1] = 0x80;
 800b71e:	2380      	movs	r3, #128	; 0x80
 800b720:	777b      	strb	r3, [r7, #29]
  MACAddr[2] = 0xE1;
 800b722:	23e1      	movs	r3, #225	; 0xe1
 800b724:	77bb      	strb	r3, [r7, #30]
  MACAddr[3] = 0x00;
 800b726:	2300      	movs	r3, #0
 800b728:	77fb      	strb	r3, [r7, #31]
  MACAddr[4] = 0x00;
 800b72a:	2300      	movs	r3, #0
 800b72c:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[5] = 0x00;
 800b730:	2300      	movs	r3, #0
 800b732:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  heth.Init.MACAddr = &MACAddr[0];
 800b736:	4a7a      	ldr	r2, [pc, #488]	; (800b920 <low_level_init+0x234>)
 800b738:	f107 031c 	add.w	r3, r7, #28
 800b73c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b73e:	4b78      	ldr	r3, [pc, #480]	; (800b920 <low_level_init+0x234>)
 800b740:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b744:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b746:	4b76      	ldr	r3, [pc, #472]	; (800b920 <low_level_init+0x234>)
 800b748:	4a77      	ldr	r2, [pc, #476]	; (800b928 <low_level_init+0x23c>)
 800b74a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b74c:	4b74      	ldr	r3, [pc, #464]	; (800b920 <low_level_init+0x234>)
 800b74e:	4a77      	ldr	r2, [pc, #476]	; (800b92c <low_level_init+0x240>)
 800b750:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b752:	4b73      	ldr	r3, [pc, #460]	; (800b920 <low_level_init+0x234>)
 800b754:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b758:	615a      	str	r2, [r3, #20]

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b75a:	4871      	ldr	r0, [pc, #452]	; (800b920 <low_level_init+0x234>)
 800b75c:	f7f8 fd1a 	bl	8004194 <HAL_ETH_Init>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b766:	2238      	movs	r2, #56	; 0x38
 800b768:	2100      	movs	r1, #0
 800b76a:	4871      	ldr	r0, [pc, #452]	; (800b930 <low_level_init+0x244>)
 800b76c:	f00f fae4 	bl	801ad38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b770:	4b6f      	ldr	r3, [pc, #444]	; (800b930 <low_level_init+0x244>)
 800b772:	2221      	movs	r2, #33	; 0x21
 800b774:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b776:	4b6e      	ldr	r3, [pc, #440]	; (800b930 <low_level_init+0x244>)
 800b778:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b77c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b77e:	4b6c      	ldr	r3, [pc, #432]	; (800b930 <low_level_init+0x244>)
 800b780:	2200      	movs	r2, #0
 800b782:	611a      	str	r2, [r3, #16]
  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b784:	486b      	ldr	r0, [pc, #428]	; (800b934 <low_level_init+0x248>)
 800b786:	f004 fcbf 	bl	8010108 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2206      	movs	r2, #6
 800b78e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b792:	4b63      	ldr	r3, [pc, #396]	; (800b920 <low_level_init+0x234>)
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	781a      	ldrb	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b79e:	4b60      	ldr	r3, [pc, #384]	; (800b920 <low_level_init+0x234>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	785a      	ldrb	r2, [r3, #1]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b7aa:	4b5d      	ldr	r3, [pc, #372]	; (800b920 <low_level_init+0x234>)
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	789a      	ldrb	r2, [r3, #2]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b7b6:	4b5a      	ldr	r3, [pc, #360]	; (800b920 <low_level_init+0x234>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	78da      	ldrb	r2, [r3, #3]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b7c2:	4b57      	ldr	r3, [pc, #348]	; (800b920 <low_level_init+0x234>)
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	791a      	ldrb	r2, [r3, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b7ce:	4b54      	ldr	r3, [pc, #336]	; (800b920 <low_level_init+0x234>)
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	795a      	ldrb	r2, [r3, #5]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b7e0:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7e8:	f043 030a 	orr.w	r3, r3, #10
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800b7f4:	2203      	movs	r2, #3
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	f000 fd15 	bl	800c228 <xQueueGenericCreate>
 800b7fe:	4603      	mov	r3, r0
 800b800:	4a4d      	ldr	r2, [pc, #308]	; (800b938 <low_level_init+0x24c>)
 800b802:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800b804:	2203      	movs	r2, #3
 800b806:	2100      	movs	r1, #0
 800b808:	2001      	movs	r0, #1
 800b80a:	f000 fd0d 	bl	800c228 <xQueueGenericCreate>
 800b80e:	4603      	mov	r3, r0
 800b810:	4a4a      	ldr	r2, [pc, #296]	; (800b93c <low_level_init+0x250>)
 800b812:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b814:	4b4a      	ldr	r3, [pc, #296]	; (800b940 <low_level_init+0x254>)
 800b816:	f107 0408 	add.w	r4, r7, #8
 800b81a:	461d      	mov	r5, r3
 800b81c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 800b824:	f107 0308 	add.w	r3, r7, #8
 800b828:	6879      	ldr	r1, [r7, #4]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 f9ca 	bl	800bbc4 <osThreadCreate>

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b830:	4944      	ldr	r1, [pc, #272]	; (800b944 <low_level_init+0x258>)
 800b832:	4845      	ldr	r0, [pc, #276]	; (800b948 <low_level_init+0x25c>)
 800b834:	f7f6 ff79 	bl	800272a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b838:	4843      	ldr	r0, [pc, #268]	; (800b948 <low_level_init+0x25c>)
 800b83a:	f7f6 ffa8 	bl	800278e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b83e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b842:	2b00      	cmp	r3, #0
 800b844:	d165      	bne.n	800b912 <low_level_init+0x226>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b846:	4840      	ldr	r0, [pc, #256]	; (800b948 <low_level_init+0x25c>)
 800b848:	f7f7 f849 	bl	80028de <LAN8742_GetLinkState>
 800b84c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b854:	2b01      	cmp	r3, #1
 800b856:	dc06      	bgt.n	800b866 <low_level_init+0x17a>
    {
      netif_set_link_down(netif);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f005 f84b 	bl	80108f4 <netif_set_link_down>
      netif_set_down(netif);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f004 ffda 	bl	8010818 <netif_set_down>
  else
  {
    Error_Handler();
  }
#endif /* LWIP_ARP || LWIP_ETHERNET */
}
 800b864:	e057      	b.n	800b916 <low_level_init+0x22a>
      switch (PHYLinkState)
 800b866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b86a:	3b02      	subs	r3, #2
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d82b      	bhi.n	800b8c8 <low_level_init+0x1dc>
 800b870:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <low_level_init+0x18c>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b89b 	.word	0x0800b89b
 800b880:	0800b8ab 	.word	0x0800b8ab
 800b884:	0800b8bb 	.word	0x0800b8bb
        duplex = ETH_FULLDUPLEX_MODE;
 800b888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b88c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        speed = ETH_SPEED_100M;
 800b890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800b898:	e01f      	b.n	800b8da <low_level_init+0x1ee>
        duplex = ETH_HALFDUPLEX_MODE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        speed = ETH_SPEED_100M;
 800b8a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800b8a8:	e017      	b.n	800b8da <low_level_init+0x1ee>
        duplex = ETH_FULLDUPLEX_MODE;
 800b8aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        speed = ETH_SPEED_10M;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800b8b8:	e00f      	b.n	800b8da <low_level_init+0x1ee>
        duplex = ETH_HALFDUPLEX_MODE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        speed = ETH_SPEED_10M;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800b8c6:	e008      	b.n	800b8da <low_level_init+0x1ee>
        duplex = ETH_FULLDUPLEX_MODE;
 800b8c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        speed = ETH_SPEED_100M;
 800b8d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800b8d8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b8da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8de:	4619      	mov	r1, r3
 800b8e0:	480f      	ldr	r0, [pc, #60]	; (800b920 <low_level_init+0x234>)
 800b8e2:	f7f9 f93b 	bl	8004b5c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b8e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    MACConf.Speed = speed;
 800b8ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8f0:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b8f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	4809      	ldr	r0, [pc, #36]	; (800b920 <low_level_init+0x234>)
 800b8fa:	f7f9 fa19 	bl	8004d30 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b8fe:	4808      	ldr	r0, [pc, #32]	; (800b920 <low_level_init+0x234>)
 800b900:	f7f8 fcc6 	bl	8004290 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f004 ff13 	bl	8010730 <netif_set_up>
    netif_set_link_up(netif);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f004 ffbe 	bl	801088c <netif_set_link_up>
}
 800b910:	e001      	b.n	800b916 <low_level_init+0x22a>
    Error_Handler();
 800b912:	f7f6 f953 	bl	8001bbc <Error_Handler>
}
 800b916:	bf00      	nop
 800b918:	3798      	adds	r7, #152	; 0x98
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bdb0      	pop	{r4, r5, r7, pc}
 800b91e:	bf00      	nop
 800b920:	200008a4 	.word	0x200008a4
 800b924:	40028000 	.word	0x40028000
 800b928:	20000a7c 	.word	0x20000a7c
 800b92c:	200009dc 	.word	0x200009dc
 800b930:	20000954 	.word	0x20000954
 800b934:	0801fcec 	.word	0x0801fcec
 800b938:	20000898 	.word	0x20000898
 800b93c:	2000089c 	.word	0x2000089c
 800b940:	0801d16c 	.word	0x0801d16c
 800b944:	20000020 	.word	0x20000020
 800b948:	200054a4 	.word	0x200054a4

0800b94c <low_level_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif) {
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b958:	4b07      	ldr	r3, [pc, #28]	; (800b978 <low_level_input+0x2c>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d105      	bne.n	800b96c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b960:	f107 030c 	add.w	r3, r7, #12
 800b964:	4619      	mov	r1, r3
 800b966:	4805      	ldr	r0, [pc, #20]	; (800b97c <low_level_input+0x30>)
 800b968:	f7f8 fdfb 	bl	8004562 <HAL_ETH_ReadData>
  }

  return p;
 800b96c:	68fb      	ldr	r3, [r7, #12]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	200008a0 	.word	0x200008a0
 800b97c:	200008a4 	.word	0x200008a4

0800b980 <low_level_output>:
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b092      	sub	sp, #72	; 0x48
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b98e:	2300      	movs	r3, #0
 800b990:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b998:	f107 030c 	add.w	r3, r7, #12
 800b99c:	2230      	movs	r2, #48	; 0x30
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f00f f9c9 	bl	801ad38 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b9a6:	f107 030c 	add.w	r3, r7, #12
 800b9aa:	2230      	movs	r2, #48	; 0x30
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f00f f9c2 	bl	801ad38 <memset>

  for(q = p; q != NULL; q = q->next)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b8:	e045      	b.n	800ba46 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d902      	bls.n	800b9c6 <low_level_output+0x46>
      return ERR_IF;
 800b9c0:	f06f 030b 	mvn.w	r3, #11
 800b9c4:	e065      	b.n	800ba92 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800b9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c8:	6859      	ldr	r1, [r3, #4]
 800b9ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	4413      	add	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	3348      	adds	r3, #72	; 0x48
 800b9d6:	443b      	add	r3, r7
 800b9d8:	3b3c      	subs	r3, #60	; 0x3c
 800b9da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9de:	895b      	ldrh	r3, [r3, #10]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	3348      	adds	r3, #72	; 0x48
 800b9ee:	443b      	add	r3, r7
 800b9f0:	3b38      	subs	r3, #56	; 0x38
 800b9f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d011      	beq.n	800ba1e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	f107 000c 	add.w	r0, r7, #12
 800ba02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba04:	460b      	mov	r3, r1
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	440b      	add	r3, r1
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	18c1      	adds	r1, r0, r3
 800ba0e:	4613      	mov	r3, r2
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	3348      	adds	r3, #72	; 0x48
 800ba18:	443b      	add	r3, r7
 800ba1a:	3b34      	subs	r3, #52	; 0x34
 800ba1c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ba1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d109      	bne.n	800ba3a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ba26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba28:	4613      	mov	r3, r2
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	3348      	adds	r3, #72	; 0x48
 800ba32:	443b      	add	r3, r7
 800ba34:	3b34      	subs	r3, #52	; 0x34
 800ba36:	2200      	movs	r2, #0
 800ba38:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ba3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800ba40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	643b      	str	r3, [r7, #64]	; 0x40
 800ba46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1b6      	bne.n	800b9ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	891b      	ldrh	r3, [r3, #8]
 800ba50:	461a      	mov	r2, r3
 800ba52:	4b12      	ldr	r3, [pc, #72]	; (800ba9c <low_level_output+0x11c>)
 800ba54:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ba56:	4a11      	ldr	r2, [pc, #68]	; (800ba9c <low_level_output+0x11c>)
 800ba58:	f107 030c 	add.w	r3, r7, #12
 800ba5c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ba5e:	4a0f      	ldr	r2, [pc, #60]	; (800ba9c <low_level_output+0x11c>)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800ba64:	6838      	ldr	r0, [r7, #0]
 800ba66:	f005 fbc9 	bl	80111fc <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800ba6a:	490c      	ldr	r1, [pc, #48]	; (800ba9c <low_level_output+0x11c>)
 800ba6c:	480c      	ldr	r0, [pc, #48]	; (800baa0 <low_level_output+0x120>)
 800ba6e:	f7f8 fd1c 	bl	80044aa <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800ba72:	bf00      	nop
 800ba74:	4b0b      	ldr	r3, [pc, #44]	; (800baa4 <low_level_output+0x124>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f04f 31ff 	mov.w	r1, #4294967295
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f96d 	bl	800bd5c <osSemaphoreWait>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f5      	bne.n	800ba74 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800ba88:	4805      	ldr	r0, [pc, #20]	; (800baa0 <low_level_output+0x120>)
 800ba8a:	f7f8 fea1 	bl	80047d0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800ba8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3748      	adds	r7, #72	; 0x48
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000954 	.word	0x20000954
 800baa0:	200008a4 	.word	0x200008a4
 800baa4:	2000089c 	.word	0x2000089c

0800baa8 <ETH_PHY_IO_Init>:
/**
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void) {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800baac:	4802      	ldr	r0, [pc, #8]	; (800bab8 <ETH_PHY_IO_Init+0x10>)
 800baae:	f7f9 f959 	bl	8004d64 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	200008a4 	.word	0x200008a4

0800babc <ETH_PHY_IO_DeInit>:
/**
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit(void) {
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  return 0;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <ETH_PHY_IO_ReadReg>:
  * @param  DevAddr: PHY port address
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK) {
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	68f9      	ldr	r1, [r7, #12]
 800bade:	4807      	ldr	r0, [pc, #28]	; (800bafc <ETH_PHY_IO_ReadReg+0x30>)
 800bae0:	f7f8 ffa8 	bl	8004a34 <HAL_ETH_ReadPHYRegister>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <ETH_PHY_IO_ReadReg+0x24>
    return -1;
 800baea:	f04f 33ff 	mov.w	r3, #4294967295
 800baee:	e000      	b.n	800baf2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	200008a4 	.word	0x200008a4

0800bb00 <ETH_PHY_IO_WriteReg>:
  * @param  DevAddr: PHY port address
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal) {
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	68f9      	ldr	r1, [r7, #12]
 800bb12:	4807      	ldr	r0, [pc, #28]	; (800bb30 <ETH_PHY_IO_WriteReg+0x30>)
 800bb14:	f7f8 ffd9 	bl	8004aca <HAL_ETH_WritePHYRegister>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <ETH_PHY_IO_WriteReg+0x24>
    return -1;
 800bb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb22:	e000      	b.n	800bb26 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	200008a4 	.word	0x200008a4

0800bb34 <ETH_PHY_IO_GetTick>:

/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void) {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bb38:	f7f6 ff8e 	bl	8002a58 <HAL_GetTick>
 800bb3c:	4603      	mov	r3, r0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	4603      	mov	r3, r0
 800bb4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bb50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb54:	2b84      	cmp	r3, #132	; 0x84
 800bb56:	d005      	beq.n	800bb64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bb58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	3303      	adds	r3, #3
 800bb62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb64:	68fb      	ldr	r3, [r7, #12]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb78:	f3ef 8305 	mrs	r3, IPSR
 800bb7c:	607b      	str	r3, [r7, #4]
  return(result);
 800bb7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bf14      	ite	ne
 800bb84:	2301      	movne	r3, #1
 800bb86:	2300      	moveq	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb9a:	f001 fc2d 	bl	800d3f8 <vTaskStartScheduler>
  
  return osOK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bba8:	f7ff ffe3 	bl	800bb72 <inHandlerMode>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bbb2:	f001 fd29 	bl	800d608 <xTaskGetTickCountFromISR>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	e002      	b.n	800bbc0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bbba:	f001 fd15 	bl	800d5e8 <xTaskGetTickCount>
 800bbbe:	4603      	mov	r3, r0
  }
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685c      	ldr	r4, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbda:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7ff ffad 	bl	800bb42 <makeFreeRtosPriority>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	f107 030c 	add.w	r3, r7, #12
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	9200      	str	r2, [sp, #0]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	4632      	mov	r2, r6
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f001 fa97 	bl	800d12c <xTaskCreate>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d001      	beq.n	800bc08 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e000      	b.n	800bc0a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800bc08:	68fb      	ldr	r3, [r7, #12]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b084      	sub	sp, #16
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <osDelay+0x16>
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	e000      	b.n	800bc2a <osDelay+0x18>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f001 fbb0 	bl	800d390 <vTaskDelay>
  
  return osOK;
 800bc30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800bc42:	2001      	movs	r0, #1
 800bc44:	f000 fb5f 	bl	800c306 <xQueueCreateMutex>
 800bc48:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <osMutexWait+0x18>
    return osErrorParameter;
 800bc68:	2380      	movs	r3, #128	; 0x80
 800bc6a:	e03a      	b.n	800bce2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc76:	d103      	bne.n	800bc80 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bc78:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	e009      	b.n	800bc94 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d006      	beq.n	800bc94 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <osMutexWait+0x40>
      ticks = 1;
 800bc90:	2301      	movs	r3, #1
 800bc92:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bc94:	f7ff ff6d 	bl	800bb72 <inHandlerMode>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d017      	beq.n	800bcce <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bc9e:	f107 0308 	add.w	r3, r7, #8
 800bca2:	461a      	mov	r2, r3
 800bca4:	2100      	movs	r1, #0
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 f83a 	bl	800cd20 <xQueueReceiveFromISR>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d001      	beq.n	800bcb6 <osMutexWait+0x62>
      return osErrorOS;
 800bcb2:	23ff      	movs	r3, #255	; 0xff
 800bcb4:	e015      	b.n	800bce2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d011      	beq.n	800bce0 <osMutexWait+0x8c>
 800bcbc:	4b0b      	ldr	r3, [pc, #44]	; (800bcec <osMutexWait+0x98>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	e008      	b.n	800bce0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fe37 	bl	800c944 <xQueueSemaphoreTake>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d001      	beq.n	800bce0 <osMutexWait+0x8c>
    return osErrorOS;
 800bcdc:	23ff      	movs	r3, #255	; 0xff
 800bcde:	e000      	b.n	800bce2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	e000ed04 	.word	0xe000ed04

0800bcf0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bd00:	f7ff ff37 	bl	800bb72 <inHandlerMode>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d016      	beq.n	800bd38 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd0a:	f107 0308 	add.w	r3, r7, #8
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fcaa 	bl	800c66a <xQueueGiveFromISR>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d001      	beq.n	800bd20 <osMutexRelease+0x30>
      return osErrorOS;
 800bd1c:	23ff      	movs	r3, #255	; 0xff
 800bd1e:	e017      	b.n	800bd50 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d013      	beq.n	800bd4e <osMutexRelease+0x5e>
 800bd26:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <osMutexRelease+0x68>)
 800bd28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	e00a      	b.n	800bd4e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fafa 	bl	800c338 <xQueueGenericSend>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d001      	beq.n	800bd4e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800bd4a:	23ff      	movs	r3, #255	; 0xff
 800bd4c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd66:	2300      	movs	r3, #0
 800bd68:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bd70:	2380      	movs	r3, #128	; 0x80
 800bd72:	e03a      	b.n	800bdea <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7e:	d103      	bne.n	800bd88 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bd80:	f04f 33ff 	mov.w	r3, #4294967295
 800bd84:	60fb      	str	r3, [r7, #12]
 800bd86:	e009      	b.n	800bd9c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d006      	beq.n	800bd9c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <osSemaphoreWait+0x40>
      ticks = 1;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bd9c:	f7ff fee9 	bl	800bb72 <inHandlerMode>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d017      	beq.n	800bdd6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bda6:	f107 0308 	add.w	r3, r7, #8
 800bdaa:	461a      	mov	r2, r3
 800bdac:	2100      	movs	r1, #0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 ffb6 	bl	800cd20 <xQueueReceiveFromISR>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d001      	beq.n	800bdbe <osSemaphoreWait+0x62>
      return osErrorOS;
 800bdba:	23ff      	movs	r3, #255	; 0xff
 800bdbc:	e015      	b.n	800bdea <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d011      	beq.n	800bde8 <osSemaphoreWait+0x8c>
 800bdc4:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <osSemaphoreWait+0x98>)
 800bdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	e008      	b.n	800bde8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fdb3 	bl	800c944 <xQueueSemaphoreTake>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d001      	beq.n	800bde8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bde4:	23ff      	movs	r3, #255	; 0xff
 800bde6:	e000      	b.n	800bdea <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	e000ed04 	.word	0xe000ed04

0800bdf8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be04:	2300      	movs	r3, #0
 800be06:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800be08:	f7ff feb3 	bl	800bb72 <inHandlerMode>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d016      	beq.n	800be40 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800be12:	f107 0308 	add.w	r3, r7, #8
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fc26 	bl	800c66a <xQueueGiveFromISR>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b01      	cmp	r3, #1
 800be22:	d001      	beq.n	800be28 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800be24:	23ff      	movs	r3, #255	; 0xff
 800be26:	e017      	b.n	800be58 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d013      	beq.n	800be56 <osSemaphoreRelease+0x5e>
 800be2e:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <osSemaphoreRelease+0x68>)
 800be30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	e00a      	b.n	800be56 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800be40:	2300      	movs	r3, #0
 800be42:	2200      	movs	r2, #0
 800be44:	2100      	movs	r1, #0
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fa76 	bl	800c338 <xQueueGenericSend>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d001      	beq.n	800be56 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800be52:	23ff      	movs	r3, #255	; 0xff
 800be54:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800be56:	68fb      	ldr	r3, [r7, #12]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	4619      	mov	r1, r3
 800be7a:	f000 f9d5 	bl	800c228 <xQueueGenericCreate>
 800be7e:	4603      	mov	r3, r0
#endif
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800be94:	2300      	movs	r3, #0
 800be96:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <osMessagePut+0x1e>
    ticks = 1;
 800bea2:	2301      	movs	r3, #1
 800bea4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bea6:	f7ff fe64 	bl	800bb72 <inHandlerMode>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d018      	beq.n	800bee2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800beb0:	f107 0210 	add.w	r2, r7, #16
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	2300      	movs	r3, #0
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 fb3a 	bl	800c534 <xQueueGenericSendFromISR>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d001      	beq.n	800beca <osMessagePut+0x42>
      return osErrorOS;
 800bec6:	23ff      	movs	r3, #255	; 0xff
 800bec8:	e018      	b.n	800befc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d014      	beq.n	800befa <osMessagePut+0x72>
 800bed0:	4b0c      	ldr	r3, [pc, #48]	; (800bf04 <osMessagePut+0x7c>)
 800bed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	e00b      	b.n	800befa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bee2:	f107 0108 	add.w	r1, r7, #8
 800bee6:	2300      	movs	r3, #0
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 fa24 	bl	800c338 <xQueueGenericSend>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d001      	beq.n	800befa <osMessagePut+0x72>
      return osErrorOS;
 800bef6:	23ff      	movs	r3, #255	; 0xff
 800bef8:	e000      	b.n	800befc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	e000ed04 	.word	0xe000ed04

0800bf08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b08b      	sub	sp, #44	; 0x2c
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bf22:	2380      	movs	r3, #128	; 0x80
 800bf24:	617b      	str	r3, [r7, #20]
    return event;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	461c      	mov	r4, r3
 800bf2a:	f107 0314 	add.w	r3, r7, #20
 800bf2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf36:	e054      	b.n	800bfe2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf46:	d103      	bne.n	800bf50 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bf48:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf4e:	e009      	b.n	800bf64 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d006      	beq.n	800bf64 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <osMessageGet+0x5c>
      ticks = 1;
 800bf60:	2301      	movs	r3, #1
 800bf62:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bf64:	f7ff fe05 	bl	800bb72 <inHandlerMode>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d01c      	beq.n	800bfa8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bf6e:	f107 0220 	add.w	r2, r7, #32
 800bf72:	f107 0314 	add.w	r3, r7, #20
 800bf76:	3304      	adds	r3, #4
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68b8      	ldr	r0, [r7, #8]
 800bf7c:	f000 fed0 	bl	800cd20 <xQueueReceiveFromISR>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d102      	bne.n	800bf8c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bf86:	2310      	movs	r3, #16
 800bf88:	617b      	str	r3, [r7, #20]
 800bf8a:	e001      	b.n	800bf90 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d01d      	beq.n	800bfd2 <osMessageGet+0xca>
 800bf96:	4b15      	ldr	r3, [pc, #84]	; (800bfec <osMessageGet+0xe4>)
 800bf98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	e014      	b.n	800bfd2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bfa8:	f107 0314 	add.w	r3, r7, #20
 800bfac:	3304      	adds	r3, #4
 800bfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	68b8      	ldr	r0, [r7, #8]
 800bfb4:	f000 fbe6 	bl	800c784 <xQueueReceive>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d102      	bne.n	800bfc4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bfbe:	2310      	movs	r3, #16
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e006      	b.n	800bfd2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <osMessageGet+0xc6>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e000      	b.n	800bfd0 <osMessageGet+0xc8>
 800bfce:	2340      	movs	r3, #64	; 0x40
 800bfd0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	f107 0314 	add.w	r3, r7, #20
 800bfda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	372c      	adds	r7, #44	; 0x2c
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd90      	pop	{r4, r7, pc}
 800bfea:	bf00      	nop
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f103 0208 	add.w	r2, r3, #8
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f04f 32ff 	mov.w	r2, #4294967295
 800c008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f103 0208 	add.w	r2, r3, #8
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 0208 	add.w	r2, r3, #8
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c03e:	bf00      	nop
 800c040:	370c      	adds	r7, #12
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c04a:	b480      	push	{r7}
 800c04c:	b085      	sub	sp, #20
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
}
 800c086:	bf00      	nop
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr

0800c092 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c092:	b480      	push	{r7}
 800c094:	b085      	sub	sp, #20
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a8:	d103      	bne.n	800c0b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	e00c      	b.n	800c0cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3308      	adds	r3, #8
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	e002      	b.n	800c0c0 <vListInsert+0x2e>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d2f6      	bcs.n	800c0ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	685a      	ldr	r2, [r3, #4]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	601a      	str	r2, [r3, #0]
}
 800c0f8:	bf00      	nop
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6892      	ldr	r2, [r2, #8]
 800c11a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	6852      	ldr	r2, [r2, #4]
 800c124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d103      	bne.n	800c138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689a      	ldr	r2, [r3, #8]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	1e5a      	subs	r2, r3, #1
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10a      	bne.n	800c182 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c17e:	bf00      	nop
 800c180:	e7fe      	b.n	800c180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c182:	f002 fc0f 	bl	800e9a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c192:	fb01 f303 	mul.w	r3, r1, r3
 800c196:	441a      	add	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	68f9      	ldr	r1, [r7, #12]
 800c1b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1b8:	fb01 f303 	mul.w	r3, r1, r3
 800c1bc:	441a      	add	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	22ff      	movs	r2, #255	; 0xff
 800c1c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	22ff      	movs	r2, #255	; 0xff
 800c1ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d114      	bne.n	800c202 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d01a      	beq.n	800c216 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3310      	adds	r3, #16
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f001 fb85 	bl	800d8f4 <xTaskRemoveFromEventList>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d012      	beq.n	800c216 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1f0:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <xQueueGenericReset+0xcc>)
 800c1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	e009      	b.n	800c216 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3310      	adds	r3, #16
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fef2 	bl	800bff0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3324      	adds	r3, #36	; 0x24
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff feed 	bl	800bff0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c216:	f002 fbf5 	bl	800ea04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c21a:	2301      	movs	r3, #1
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	e000ed04 	.word	0xe000ed04

0800c228 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	; 0x28
 800c22c:	af02      	add	r7, sp, #8
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	4613      	mov	r3, r2
 800c234:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10a      	bne.n	800c252 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	613b      	str	r3, [r7, #16]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	fb02 f303 	mul.w	r3, r2, r3
 800c25a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	3348      	adds	r3, #72	; 0x48
 800c260:	4618      	mov	r0, r3
 800c262:	f002 fcc1 	bl	800ebe8 <pvPortMalloc>
 800c266:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00d      	beq.n	800c28a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	3348      	adds	r3, #72	; 0x48
 800c276:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c278:	79fa      	ldrb	r2, [r7, #7]
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	4613      	mov	r3, r2
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f805 	bl	800c294 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c28a:	69bb      	ldr	r3, [r7, #24]
	}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3720      	adds	r7, #32
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d103      	bne.n	800c2b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	601a      	str	r2, [r3, #0]
 800c2ae:	e002      	b.n	800c2b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	69b8      	ldr	r0, [r7, #24]
 800c2c6:	f7ff ff47 	bl	800c158 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2ca:	bf00      	nop
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00e      	beq.n	800c2fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f81d 	bl	800c338 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c306:	b580      	push	{r7, lr}
 800c308:	b086      	sub	sp, #24
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	4603      	mov	r3, r0
 800c30e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c310:	2301      	movs	r3, #1
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	2300      	movs	r3, #0
 800c316:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c318:	79fb      	ldrb	r3, [r7, #7]
 800c31a:	461a      	mov	r2, r3
 800c31c:	6939      	ldr	r1, [r7, #16]
 800c31e:	6978      	ldr	r0, [r7, #20]
 800c320:	f7ff ff82 	bl	800c228 <xQueueGenericCreate>
 800c324:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f7ff ffd3 	bl	800c2d2 <prvInitialiseMutex>

		return xNewQueue;
 800c32c:	68fb      	ldr	r3, [r7, #12]
	}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08e      	sub	sp, #56	; 0x38
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c346:	2300      	movs	r3, #0
 800c348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10a      	bne.n	800c36a <xQueueGenericSend+0x32>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d103      	bne.n	800c378 <xQueueGenericSend+0x40>
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <xQueueGenericSend+0x44>
 800c378:	2301      	movs	r3, #1
 800c37a:	e000      	b.n	800c37e <xQueueGenericSend+0x46>
 800c37c:	2300      	movs	r3, #0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <xQueueGenericSend+0x60>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d103      	bne.n	800c3a6 <xQueueGenericSend+0x6e>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <xQueueGenericSend+0x72>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xQueueGenericSend+0x74>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10a      	bne.n	800c3c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	623b      	str	r3, [r7, #32]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3c6:	f001 fc31 	bl	800dc2c <xTaskGetSchedulerState>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <xQueueGenericSend+0x9e>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <xQueueGenericSend+0xa2>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <xQueueGenericSend+0xa4>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	61fb      	str	r3, [r7, #28]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3f6:	f002 fad5 	bl	800e9a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c402:	429a      	cmp	r2, r3
 800c404:	d302      	bcc.n	800c40c <xQueueGenericSend+0xd4>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d129      	bne.n	800c460 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c412:	f000 fd1d 	bl	800ce50 <prvCopyDataToQueue>
 800c416:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d010      	beq.n	800c442 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	3324      	adds	r3, #36	; 0x24
 800c424:	4618      	mov	r0, r3
 800c426:	f001 fa65 	bl	800d8f4 <xTaskRemoveFromEventList>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d013      	beq.n	800c458 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c430:	4b3f      	ldr	r3, [pc, #252]	; (800c530 <xQueueGenericSend+0x1f8>)
 800c432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	e00a      	b.n	800c458 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c444:	2b00      	cmp	r3, #0
 800c446:	d007      	beq.n	800c458 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c448:	4b39      	ldr	r3, [pc, #228]	; (800c530 <xQueueGenericSend+0x1f8>)
 800c44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44e:	601a      	str	r2, [r3, #0]
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c458:	f002 fad4 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e063      	b.n	800c528 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d103      	bne.n	800c46e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c466:	f002 facd 	bl	800ea04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	e05c      	b.n	800c528 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	2b00      	cmp	r3, #0
 800c472:	d106      	bne.n	800c482 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c474:	f107 0314 	add.w	r3, r7, #20
 800c478:	4618      	mov	r0, r3
 800c47a:	f001 fa9d 	bl	800d9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c47e:	2301      	movs	r3, #1
 800c480:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c482:	f002 fabf 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c486:	f001 f805 	bl	800d494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c48a:	f002 fa8b 	bl	800e9a4 <vPortEnterCritical>
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c494:	b25b      	sxtb	r3, r3
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49a:	d103      	bne.n	800c4a4 <xQueueGenericSend+0x16c>
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4aa:	b25b      	sxtb	r3, r3
 800c4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b0:	d103      	bne.n	800c4ba <xQueueGenericSend+0x182>
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ba:	f002 faa3 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4be:	1d3a      	adds	r2, r7, #4
 800c4c0:	f107 0314 	add.w	r3, r7, #20
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 fa8c 	bl	800d9e4 <xTaskCheckForTimeOut>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d124      	bne.n	800c51c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c4d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4d4:	f000 fdb4 	bl	800d040 <prvIsQueueFull>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d018      	beq.n	800c510 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	3310      	adds	r3, #16
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 f9b4 	bl	800d854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ee:	f000 fd3f 	bl	800cf70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4f2:	f000 ffdd 	bl	800d4b0 <xTaskResumeAll>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f47f af7c 	bne.w	800c3f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c4fe:	4b0c      	ldr	r3, [pc, #48]	; (800c530 <xQueueGenericSend+0x1f8>)
 800c500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	e772      	b.n	800c3f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c512:	f000 fd2d 	bl	800cf70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c516:	f000 ffcb 	bl	800d4b0 <xTaskResumeAll>
 800c51a:	e76c      	b.n	800c3f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c51c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c51e:	f000 fd27 	bl	800cf70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c522:	f000 ffc5 	bl	800d4b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3738      	adds	r7, #56	; 0x38
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b090      	sub	sp, #64	; 0x40
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10a      	bne.n	800c562 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c55e:	bf00      	nop
 800c560:	e7fe      	b.n	800c560 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d103      	bne.n	800c570 <xQueueGenericSendFromISR+0x3c>
 800c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <xQueueGenericSendFromISR+0x40>
 800c570:	2301      	movs	r3, #1
 800c572:	e000      	b.n	800c576 <xQueueGenericSendFromISR+0x42>
 800c574:	2300      	movs	r3, #0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10a      	bne.n	800c590 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c58c:	bf00      	nop
 800c58e:	e7fe      	b.n	800c58e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b02      	cmp	r3, #2
 800c594:	d103      	bne.n	800c59e <xQueueGenericSendFromISR+0x6a>
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d101      	bne.n	800c5a2 <xQueueGenericSendFromISR+0x6e>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e000      	b.n	800c5a4 <xQueueGenericSendFromISR+0x70>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	623b      	str	r3, [r7, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5be:	f002 fad3 	bl	800eb68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c5c2:	f3ef 8211 	mrs	r2, BASEPRI
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	61fa      	str	r2, [r7, #28]
 800c5d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d302      	bcc.n	800c5f0 <xQueueGenericSendFromISR+0xbc>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d12f      	bne.n	800c650 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	68b9      	ldr	r1, [r7, #8]
 800c604:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c606:	f000 fc23 	bl	800ce50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c60a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c612:	d112      	bne.n	800c63a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d016      	beq.n	800c64a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	3324      	adds	r3, #36	; 0x24
 800c620:	4618      	mov	r0, r3
 800c622:	f001 f967 	bl	800d8f4 <xTaskRemoveFromEventList>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00e      	beq.n	800c64a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00b      	beq.n	800c64a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	e007      	b.n	800c64a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c63a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c63e:	3301      	adds	r3, #1
 800c640:	b2db      	uxtb	r3, r3
 800c642:	b25a      	sxtb	r2, r3
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c64a:	2301      	movs	r3, #1
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c64e:	e001      	b.n	800c654 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c650:	2300      	movs	r3, #0
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c656:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c65e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c662:	4618      	mov	r0, r3
 800c664:	3740      	adds	r7, #64	; 0x40
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b08e      	sub	sp, #56	; 0x38
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10a      	bne.n	800c694 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	623b      	str	r3, [r7, #32]
}
 800c690:	bf00      	nop
 800c692:	e7fe      	b.n	800c692 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00a      	beq.n	800c6b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	61fb      	str	r3, [r7, #28]
}
 800c6ae:	bf00      	nop
 800c6b0:	e7fe      	b.n	800c6b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d103      	bne.n	800c6c2 <xQueueGiveFromISR+0x58>
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <xQueueGiveFromISR+0x5c>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e000      	b.n	800c6c8 <xQueueGiveFromISR+0x5e>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10a      	bne.n	800c6e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	61bb      	str	r3, [r7, #24]
}
 800c6de:	bf00      	nop
 800c6e0:	e7fe      	b.n	800c6e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6e2:	f002 fa41 	bl	800eb68 <vPortValidateInterruptPriority>
	__asm volatile
 800c6e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	617a      	str	r2, [r7, #20]
 800c6fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c6fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c706:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c70e:	429a      	cmp	r2, r3
 800c710:	d22b      	bcs.n	800c76a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72c:	d112      	bne.n	800c754 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c732:	2b00      	cmp	r3, #0
 800c734:	d016      	beq.n	800c764 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	3324      	adds	r3, #36	; 0x24
 800c73a:	4618      	mov	r0, r3
 800c73c:	f001 f8da 	bl	800d8f4 <xTaskRemoveFromEventList>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00e      	beq.n	800c764 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00b      	beq.n	800c764 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2201      	movs	r2, #1
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	e007      	b.n	800c764 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c758:	3301      	adds	r3, #1
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	b25a      	sxtb	r2, r3
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c764:	2301      	movs	r3, #1
 800c766:	637b      	str	r3, [r7, #52]	; 0x34
 800c768:	e001      	b.n	800c76e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	637b      	str	r3, [r7, #52]	; 0x34
 800c76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c770:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f383 8811 	msr	BASEPRI, r3
}
 800c778:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3738      	adds	r7, #56	; 0x38
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b08c      	sub	sp, #48	; 0x30
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c790:	2300      	movs	r3, #0
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10a      	bne.n	800c7b4 <xQueueReceive+0x30>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	623b      	str	r3, [r7, #32]
}
 800c7b0:	bf00      	nop
 800c7b2:	e7fe      	b.n	800c7b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d103      	bne.n	800c7c2 <xQueueReceive+0x3e>
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d101      	bne.n	800c7c6 <xQueueReceive+0x42>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e000      	b.n	800c7c8 <xQueueReceive+0x44>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10a      	bne.n	800c7e2 <xQueueReceive+0x5e>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	61fb      	str	r3, [r7, #28]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7e2:	f001 fa23 	bl	800dc2c <xTaskGetSchedulerState>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <xQueueReceive+0x6e>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d101      	bne.n	800c7f6 <xQueueReceive+0x72>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e000      	b.n	800c7f8 <xQueueReceive+0x74>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <xQueueReceive+0x8e>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	61bb      	str	r3, [r7, #24]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c812:	f002 f8c7 	bl	800e9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d01f      	beq.n	800c862 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c822:	68b9      	ldr	r1, [r7, #8]
 800c824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c826:	f000 fb7d 	bl	800cf24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	1e5a      	subs	r2, r3, #1
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00f      	beq.n	800c85a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	3310      	adds	r3, #16
 800c83e:	4618      	mov	r0, r3
 800c840:	f001 f858 	bl	800d8f4 <xTaskRemoveFromEventList>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c84a:	4b3d      	ldr	r3, [pc, #244]	; (800c940 <xQueueReceive+0x1bc>)
 800c84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c85a:	f002 f8d3 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800c85e:	2301      	movs	r3, #1
 800c860:	e069      	b.n	800c936 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d103      	bne.n	800c870 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c868:	f002 f8cc 	bl	800ea04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c86c:	2300      	movs	r3, #0
 800c86e:	e062      	b.n	800c936 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c876:	f107 0310 	add.w	r3, r7, #16
 800c87a:	4618      	mov	r0, r3
 800c87c:	f001 f89c 	bl	800d9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c880:	2301      	movs	r3, #1
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c884:	f002 f8be 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c888:	f000 fe04 	bl	800d494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c88c:	f002 f88a 	bl	800e9a4 <vPortEnterCritical>
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c896:	b25b      	sxtb	r3, r3
 800c898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c89c:	d103      	bne.n	800c8a6 <xQueueReceive+0x122>
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b2:	d103      	bne.n	800c8bc <xQueueReceive+0x138>
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8bc:	f002 f8a2 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8c0:	1d3a      	adds	r2, r7, #4
 800c8c2:	f107 0310 	add.w	r3, r7, #16
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f001 f88b 	bl	800d9e4 <xTaskCheckForTimeOut>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d123      	bne.n	800c91c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d6:	f000 fb9d 	bl	800d014 <prvIsQueueEmpty>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d017      	beq.n	800c910 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	3324      	adds	r3, #36	; 0x24
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 ffb3 	bl	800d854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f0:	f000 fb3e 	bl	800cf70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8f4:	f000 fddc 	bl	800d4b0 <xTaskResumeAll>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d189      	bne.n	800c812 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c8fe:	4b10      	ldr	r3, [pc, #64]	; (800c940 <xQueueReceive+0x1bc>)
 800c900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	e780      	b.n	800c812 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c912:	f000 fb2d 	bl	800cf70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c916:	f000 fdcb 	bl	800d4b0 <xTaskResumeAll>
 800c91a:	e77a      	b.n	800c812 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c91e:	f000 fb27 	bl	800cf70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c922:	f000 fdc5 	bl	800d4b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c928:	f000 fb74 	bl	800d014 <prvIsQueueEmpty>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f43f af6f 	beq.w	800c812 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c936:	4618      	mov	r0, r3
 800c938:	3730      	adds	r7, #48	; 0x30
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	e000ed04 	.word	0xe000ed04

0800c944 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08e      	sub	sp, #56	; 0x38
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c94e:	2300      	movs	r3, #0
 800c950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c956:	2300      	movs	r3, #0
 800c958:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	623b      	str	r3, [r7, #32]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	61fb      	str	r3, [r7, #28]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c994:	f001 f94a 	bl	800dc2c <xTaskGetSchedulerState>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d102      	bne.n	800c9a4 <xQueueSemaphoreTake+0x60>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <xQueueSemaphoreTake+0x64>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e000      	b.n	800c9aa <xQueueSemaphoreTake+0x66>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	61bb      	str	r3, [r7, #24]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9c4:	f001 ffee 	bl	800e9a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d024      	beq.n	800ca1e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	1e5a      	subs	r2, r3, #1
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d104      	bne.n	800c9ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c9e4:	f001 faca 	bl	800df7c <pvTaskIncrementMutexHeldCount>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00f      	beq.n	800ca16 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	3310      	adds	r3, #16
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 ff7a 	bl	800d8f4 <xTaskRemoveFromEventList>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d007      	beq.n	800ca16 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca06:	4b54      	ldr	r3, [pc, #336]	; (800cb58 <xQueueSemaphoreTake+0x214>)
 800ca08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca16:	f001 fff5 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e097      	b.n	800cb4e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d111      	bne.n	800ca48 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00a      	beq.n	800ca40 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	617b      	str	r3, [r7, #20]
}
 800ca3c:	bf00      	nop
 800ca3e:	e7fe      	b.n	800ca3e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca40:	f001 ffe0 	bl	800ea04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca44:	2300      	movs	r3, #0
 800ca46:	e082      	b.n	800cb4e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d106      	bne.n	800ca5c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca4e:	f107 030c 	add.w	r3, r7, #12
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 ffb0 	bl	800d9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca5c:	f001 ffd2 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca60:	f000 fd18 	bl	800d494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca64:	f001 ff9e 	bl	800e9a4 <vPortEnterCritical>
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca6e:	b25b      	sxtb	r3, r3
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca74:	d103      	bne.n	800ca7e <xQueueSemaphoreTake+0x13a>
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca84:	b25b      	sxtb	r3, r3
 800ca86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8a:	d103      	bne.n	800ca94 <xQueueSemaphoreTake+0x150>
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca94:	f001 ffb6 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca98:	463a      	mov	r2, r7
 800ca9a:	f107 030c 	add.w	r3, r7, #12
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 ff9f 	bl	800d9e4 <xTaskCheckForTimeOut>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d132      	bne.n	800cb12 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caae:	f000 fab1 	bl	800d014 <prvIsQueueEmpty>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d026      	beq.n	800cb06 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d109      	bne.n	800cad4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cac0:	f001 ff70 	bl	800e9a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 f8cd 	bl	800dc68 <xTaskPriorityInherit>
 800cace:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cad0:	f001 ff98 	bl	800ea04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	3324      	adds	r3, #36	; 0x24
 800cad8:	683a      	ldr	r2, [r7, #0]
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 feb9 	bl	800d854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cae4:	f000 fa44 	bl	800cf70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cae8:	f000 fce2 	bl	800d4b0 <xTaskResumeAll>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f47f af68 	bne.w	800c9c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800caf4:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <xQueueSemaphoreTake+0x214>)
 800caf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	e75e      	b.n	800c9c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cb06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb08:	f000 fa32 	bl	800cf70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb0c:	f000 fcd0 	bl	800d4b0 <xTaskResumeAll>
 800cb10:	e758      	b.n	800c9c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cb12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb14:	f000 fa2c 	bl	800cf70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb18:	f000 fcca 	bl	800d4b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb1e:	f000 fa79 	bl	800d014 <prvIsQueueEmpty>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f43f af4d 	beq.w	800c9c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00d      	beq.n	800cb4c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cb30:	f001 ff38 	bl	800e9a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb36:	f000 f973 	bl	800ce20 <prvGetDisinheritPriorityAfterTimeout>
 800cb3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb42:	4618      	mov	r0, r3
 800cb44:	f001 f98c 	bl	800de60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cb48:	f001 ff5c 	bl	800ea04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3738      	adds	r7, #56	; 0x38
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08e      	sub	sp, #56	; 0x38
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10a      	bne.n	800cb8c <xQueuePeek+0x30>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d103      	bne.n	800cb9a <xQueuePeek+0x3e>
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <xQueuePeek+0x42>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e000      	b.n	800cba0 <xQueuePeek+0x44>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d10a      	bne.n	800cbba <xQueuePeek+0x5e>
	__asm volatile
 800cba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	623b      	str	r3, [r7, #32]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbba:	f001 f837 	bl	800dc2c <xTaskGetSchedulerState>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d102      	bne.n	800cbca <xQueuePeek+0x6e>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <xQueuePeek+0x72>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e000      	b.n	800cbd0 <xQueuePeek+0x74>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <xQueuePeek+0x8e>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	61fb      	str	r3, [r7, #28]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbea:	f001 fedb 	bl	800e9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d021      	beq.n	800cc3e <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc04:	f000 f98e 	bl	800cf24 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc0c:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00f      	beq.n	800cc36 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	3324      	adds	r3, #36	; 0x24
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fe6a 	bl	800d8f4 <xTaskRemoveFromEventList>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d007      	beq.n	800cc36 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc26:	4b3d      	ldr	r3, [pc, #244]	; (800cd1c <xQueuePeek+0x1c0>)
 800cc28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc36:	f001 fee5 	bl	800ea04 <vPortExitCritical>
				return pdPASS;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e069      	b.n	800cd12 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d103      	bne.n	800cc4c <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc44:	f001 fede 	bl	800ea04 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e062      	b.n	800cd12 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc52:	f107 0314 	add.w	r3, r7, #20
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 feae 	bl	800d9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc60:	f001 fed0 	bl	800ea04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc64:	f000 fc16 	bl	800d494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc68:	f001 fe9c 	bl	800e9a4 <vPortEnterCritical>
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc78:	d103      	bne.n	800cc82 <xQueuePeek+0x126>
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc88:	b25b      	sxtb	r3, r3
 800cc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8e:	d103      	bne.n	800cc98 <xQueuePeek+0x13c>
 800cc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc98:	f001 feb4 	bl	800ea04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc9c:	1d3a      	adds	r2, r7, #4
 800cc9e:	f107 0314 	add.w	r3, r7, #20
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fe9d 	bl	800d9e4 <xTaskCheckForTimeOut>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d123      	bne.n	800ccf8 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccb2:	f000 f9af 	bl	800d014 <prvIsQueueEmpty>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d017      	beq.n	800ccec <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	3324      	adds	r3, #36	; 0x24
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 fdc5 	bl	800d854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cccc:	f000 f950 	bl	800cf70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccd0:	f000 fbee 	bl	800d4b0 <xTaskResumeAll>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d187      	bne.n	800cbea <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 800ccda:	4b10      	ldr	r3, [pc, #64]	; (800cd1c <xQueuePeek+0x1c0>)
 800ccdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	e77e      	b.n	800cbea <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800ccec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccee:	f000 f93f 	bl	800cf70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccf2:	f000 fbdd 	bl	800d4b0 <xTaskResumeAll>
 800ccf6:	e778      	b.n	800cbea <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800ccf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccfa:	f000 f939 	bl	800cf70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccfe:	f000 fbd7 	bl	800d4b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd04:	f000 f986 	bl	800d014 <prvIsQueueEmpty>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f43f af6d 	beq.w	800cbea <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3738      	adds	r7, #56	; 0x38
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	e000ed04 	.word	0xe000ed04

0800cd20 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08e      	sub	sp, #56	; 0x38
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10a      	bne.n	800cd4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	623b      	str	r3, [r7, #32]
}
 800cd48:	bf00      	nop
 800cd4a:	e7fe      	b.n	800cd4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d103      	bne.n	800cd5a <xQueueReceiveFromISR+0x3a>
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <xQueueReceiveFromISR+0x3e>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e000      	b.n	800cd60 <xQueueReceiveFromISR+0x40>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10a      	bne.n	800cd7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	61fb      	str	r3, [r7, #28]
}
 800cd76:	bf00      	nop
 800cd78:	e7fe      	b.n	800cd78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd7a:	f001 fef5 	bl	800eb68 <vPortValidateInterruptPriority>
	__asm volatile
 800cd7e:	f3ef 8211 	mrs	r2, BASEPRI
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	61ba      	str	r2, [r7, #24]
 800cd94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d02f      	beq.n	800ce06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdb0:	68b9      	ldr	r1, [r7, #8]
 800cdb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb4:	f000 f8b6 	bl	800cf24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdba:	1e5a      	subs	r2, r3, #1
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cdc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc8:	d112      	bne.n	800cdf0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d016      	beq.n	800ce00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 fd8c 	bl	800d8f4 <xTaskRemoveFromEventList>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00e      	beq.n	800ce00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00b      	beq.n	800ce00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	e007      	b.n	800ce00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	b25a      	sxtb	r2, r3
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce00:	2301      	movs	r3, #1
 800ce02:	637b      	str	r3, [r7, #52]	; 0x34
 800ce04:	e001      	b.n	800ce0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	637b      	str	r3, [r7, #52]	; 0x34
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f383 8811 	msr	BASEPRI, r3
}
 800ce14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3738      	adds	r7, #56	; 0x38
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d006      	beq.n	800ce3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f1c3 0307 	rsb	r3, r3, #7
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	e001      	b.n	800ce42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce42:	68fb      	ldr	r3, [r7, #12]
	}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10d      	bne.n	800ce8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d14d      	bne.n	800cf12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 ff6a 	bl	800dd54 <xTaskPriorityDisinherit>
 800ce80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	609a      	str	r2, [r3, #8]
 800ce88:	e043      	b.n	800cf12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d119      	bne.n	800cec4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6858      	ldr	r0, [r3, #4]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce98:	461a      	mov	r2, r3
 800ce9a:	68b9      	ldr	r1, [r7, #8]
 800ce9c:	f00d ffcb 	bl	801ae36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea8:	441a      	add	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d32b      	bcc.n	800cf12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	605a      	str	r2, [r3, #4]
 800cec2:	e026      	b.n	800cf12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	68d8      	ldr	r0, [r3, #12]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cecc:	461a      	mov	r2, r3
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	f00d ffb1 	bl	801ae36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	68da      	ldr	r2, [r3, #12]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cedc:	425b      	negs	r3, r3
 800cede:	441a      	add	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	68da      	ldr	r2, [r3, #12]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d207      	bcs.n	800cf00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef8:	425b      	negs	r3, r3
 800cefa:	441a      	add	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d105      	bne.n	800cf12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	1c5a      	adds	r2, r3, #1
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf1a:	697b      	ldr	r3, [r7, #20]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d018      	beq.n	800cf68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68da      	ldr	r2, [r3, #12]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	441a      	add	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d303      	bcc.n	800cf58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68d9      	ldr	r1, [r3, #12]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf60:	461a      	mov	r2, r3
 800cf62:	6838      	ldr	r0, [r7, #0]
 800cf64:	f00d ff67 	bl	801ae36 <memcpy>
	}
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf78:	f001 fd14 	bl	800e9a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf84:	e011      	b.n	800cfaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d012      	beq.n	800cfb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3324      	adds	r3, #36	; 0x24
 800cf92:	4618      	mov	r0, r3
 800cf94:	f000 fcae 	bl	800d8f4 <xTaskRemoveFromEventList>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d001      	beq.n	800cfa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf9e:	f000 fd83 	bl	800daa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	dce9      	bgt.n	800cf86 <prvUnlockQueue+0x16>
 800cfb2:	e000      	b.n	800cfb6 <prvUnlockQueue+0x46>
					break;
 800cfb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	22ff      	movs	r2, #255	; 0xff
 800cfba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfbe:	f001 fd21 	bl	800ea04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfc2:	f001 fcef 	bl	800e9a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfce:	e011      	b.n	800cff4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d012      	beq.n	800cffe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3310      	adds	r3, #16
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 fc89 	bl	800d8f4 <xTaskRemoveFromEventList>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cfe8:	f000 fd5e 	bl	800daa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cfec:	7bbb      	ldrb	r3, [r7, #14]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	dce9      	bgt.n	800cfd0 <prvUnlockQueue+0x60>
 800cffc:	e000      	b.n	800d000 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cffe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	22ff      	movs	r2, #255	; 0xff
 800d004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d008:	f001 fcfc 	bl	800ea04 <vPortExitCritical>
}
 800d00c:	bf00      	nop
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d01c:	f001 fcc2 	bl	800e9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d024:	2b00      	cmp	r3, #0
 800d026:	d102      	bne.n	800d02e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d028:	2301      	movs	r3, #1
 800d02a:	60fb      	str	r3, [r7, #12]
 800d02c:	e001      	b.n	800d032 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d02e:	2300      	movs	r3, #0
 800d030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d032:	f001 fce7 	bl	800ea04 <vPortExitCritical>

	return xReturn;
 800d036:	68fb      	ldr	r3, [r7, #12]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d048:	f001 fcac 	bl	800e9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d054:	429a      	cmp	r2, r3
 800d056:	d102      	bne.n	800d05e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d058:	2301      	movs	r3, #1
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e001      	b.n	800d062 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d062:	f001 fccf 	bl	800ea04 <vPortExitCritical>

	return xReturn;
 800d066:	68fb      	ldr	r3, [r7, #12]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d07a:	2300      	movs	r3, #0
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	e014      	b.n	800d0aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d080:	4a0f      	ldr	r2, [pc, #60]	; (800d0c0 <vQueueAddToRegistry+0x50>)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10b      	bne.n	800d0a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d08c:	490c      	ldr	r1, [pc, #48]	; (800d0c0 <vQueueAddToRegistry+0x50>)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	683a      	ldr	r2, [r7, #0]
 800d092:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d096:	4a0a      	ldr	r2, [pc, #40]	; (800d0c0 <vQueueAddToRegistry+0x50>)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	4413      	add	r3, r2
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0a2:	e006      	b.n	800d0b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b07      	cmp	r3, #7
 800d0ae:	d9e7      	bls.n	800d080 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	3714      	adds	r7, #20
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	200054c4 	.word	0x200054c4

0800d0c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d0d4:	f001 fc66 	bl	800e9a4 <vPortEnterCritical>
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0de:	b25b      	sxtb	r3, r3
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e4:	d103      	bne.n	800d0ee <vQueueWaitForMessageRestricted+0x2a>
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0f4:	b25b      	sxtb	r3, r3
 800d0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fa:	d103      	bne.n	800d104 <vQueueWaitForMessageRestricted+0x40>
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d104:	f001 fc7e 	bl	800ea04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	68b9      	ldr	r1, [r7, #8]
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 fbbf 	bl	800d89c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d11e:	6978      	ldr	r0, [r7, #20]
 800d120:	f7ff ff26 	bl	800cf70 <prvUnlockQueue>
	}
 800d124:	bf00      	nop
 800d126:	3718      	adds	r7, #24
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b08c      	sub	sp, #48	; 0x30
 800d130:	af04      	add	r7, sp, #16
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	603b      	str	r3, [r7, #0]
 800d138:	4613      	mov	r3, r2
 800d13a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d13c:	88fb      	ldrh	r3, [r7, #6]
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4618      	mov	r0, r3
 800d142:	f001 fd51 	bl	800ebe8 <pvPortMalloc>
 800d146:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00e      	beq.n	800d16c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d14e:	2054      	movs	r0, #84	; 0x54
 800d150:	f001 fd4a 	bl	800ebe8 <pvPortMalloc>
 800d154:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d003      	beq.n	800d164 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	631a      	str	r2, [r3, #48]	; 0x30
 800d162:	e005      	b.n	800d170 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d164:	6978      	ldr	r0, [r7, #20]
 800d166:	f001 fe0b 	bl	800ed80 <vPortFree>
 800d16a:	e001      	b.n	800d170 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d16c:	2300      	movs	r3, #0
 800d16e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d013      	beq.n	800d19e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d176:	88fa      	ldrh	r2, [r7, #6]
 800d178:	2300      	movs	r3, #0
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	9302      	str	r3, [sp, #8]
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	68b9      	ldr	r1, [r7, #8]
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 f80e 	bl	800d1ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d192:	69f8      	ldr	r0, [r7, #28]
 800d194:	f000 f892 	bl	800d2bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d198:	2301      	movs	r3, #1
 800d19a:	61bb      	str	r3, [r7, #24]
 800d19c:	e002      	b.n	800d1a4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d19e:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1a4:	69bb      	ldr	r3, [r7, #24]
	}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b088      	sub	sp, #32
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	f023 0307 	bic.w	r3, r3, #7
 800d1d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	f003 0307 	and.w	r3, r3, #7
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00a      	beq.n	800d1f6 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	617b      	str	r3, [r7, #20]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01f      	beq.n	800d23c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	61fb      	str	r3, [r7, #28]
 800d200:	e012      	b.n	800d228 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	4413      	add	r3, r2
 800d208:	7819      	ldrb	r1, [r3, #0]
 800d20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	4413      	add	r3, r2
 800d210:	3334      	adds	r3, #52	; 0x34
 800d212:	460a      	mov	r2, r1
 800d214:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	4413      	add	r3, r2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d006      	beq.n	800d230 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	3301      	adds	r3, #1
 800d226:	61fb      	str	r3, [r7, #28]
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	2b0f      	cmp	r3, #15
 800d22c:	d9e9      	bls.n	800d202 <prvInitialiseNewTask+0x54>
 800d22e:	e000      	b.n	800d232 <prvInitialiseNewTask+0x84>
			{
				break;
 800d230:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	2200      	movs	r2, #0
 800d236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d23a:	e003      	b.n	800d244 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	2b06      	cmp	r3, #6
 800d248:	d901      	bls.n	800d24e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d24a:	2306      	movs	r3, #6
 800d24c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d252:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d258:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	2200      	movs	r2, #0
 800d25e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d262:	3304      	adds	r3, #4
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe fee3 	bl	800c030 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	3318      	adds	r3, #24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fede 	bl	800c030 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d278:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	f1c3 0207 	rsb	r2, r3, #7
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d288:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	2200      	movs	r2, #0
 800d28e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d298:	683a      	ldr	r2, [r7, #0]
 800d29a:	68f9      	ldr	r1, [r7, #12]
 800d29c:	69b8      	ldr	r0, [r7, #24]
 800d29e:	f001 fa55 	bl	800e74c <pxPortInitialiseStack>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d002      	beq.n	800d2b4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2b4:	bf00      	nop
 800d2b6:	3720      	adds	r7, #32
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d2c4:	f001 fb6e 	bl	800e9a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d2c8:	4b2a      	ldr	r3, [pc, #168]	; (800d374 <prvAddNewTaskToReadyList+0xb8>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a29      	ldr	r2, [pc, #164]	; (800d374 <prvAddNewTaskToReadyList+0xb8>)
 800d2d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d2d2:	4b29      	ldr	r3, [pc, #164]	; (800d378 <prvAddNewTaskToReadyList+0xbc>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d109      	bne.n	800d2ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d2da:	4a27      	ldr	r2, [pc, #156]	; (800d378 <prvAddNewTaskToReadyList+0xbc>)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2e0:	4b24      	ldr	r3, [pc, #144]	; (800d374 <prvAddNewTaskToReadyList+0xb8>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d110      	bne.n	800d30a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d2e8:	f000 fc02 	bl	800daf0 <prvInitialiseTaskLists>
 800d2ec:	e00d      	b.n	800d30a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d2ee:	4b23      	ldr	r3, [pc, #140]	; (800d37c <prvAddNewTaskToReadyList+0xc0>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d109      	bne.n	800d30a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2f6:	4b20      	ldr	r3, [pc, #128]	; (800d378 <prvAddNewTaskToReadyList+0xbc>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	429a      	cmp	r2, r3
 800d302:	d802      	bhi.n	800d30a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d304:	4a1c      	ldr	r2, [pc, #112]	; (800d378 <prvAddNewTaskToReadyList+0xbc>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d30a:	4b1d      	ldr	r3, [pc, #116]	; (800d380 <prvAddNewTaskToReadyList+0xc4>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	3301      	adds	r3, #1
 800d310:	4a1b      	ldr	r2, [pc, #108]	; (800d380 <prvAddNewTaskToReadyList+0xc4>)
 800d312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	2201      	movs	r2, #1
 800d31a:	409a      	lsls	r2, r3
 800d31c:	4b19      	ldr	r3, [pc, #100]	; (800d384 <prvAddNewTaskToReadyList+0xc8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4313      	orrs	r3, r2
 800d322:	4a18      	ldr	r2, [pc, #96]	; (800d384 <prvAddNewTaskToReadyList+0xc8>)
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32a:	4613      	mov	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4a15      	ldr	r2, [pc, #84]	; (800d388 <prvAddNewTaskToReadyList+0xcc>)
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	3304      	adds	r3, #4
 800d33a:	4619      	mov	r1, r3
 800d33c:	4610      	mov	r0, r2
 800d33e:	f7fe fe84 	bl	800c04a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d342:	f001 fb5f 	bl	800ea04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d346:	4b0d      	ldr	r3, [pc, #52]	; (800d37c <prvAddNewTaskToReadyList+0xc0>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00e      	beq.n	800d36c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d34e:	4b0a      	ldr	r3, [pc, #40]	; (800d378 <prvAddNewTaskToReadyList+0xbc>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	429a      	cmp	r2, r3
 800d35a:	d207      	bcs.n	800d36c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d35c:	4b0b      	ldr	r3, [pc, #44]	; (800d38c <prvAddNewTaskToReadyList+0xd0>)
 800d35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20005604 	.word	0x20005604
 800d378:	20005504 	.word	0x20005504
 800d37c:	20005610 	.word	0x20005610
 800d380:	20005620 	.word	0x20005620
 800d384:	2000560c 	.word	0x2000560c
 800d388:	20005508 	.word	0x20005508
 800d38c:	e000ed04 	.word	0xe000ed04

0800d390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d398:	2300      	movs	r3, #0
 800d39a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d017      	beq.n	800d3d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3a2:	4b13      	ldr	r3, [pc, #76]	; (800d3f0 <vTaskDelay+0x60>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00a      	beq.n	800d3c0 <vTaskDelay+0x30>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	60bb      	str	r3, [r7, #8]
}
 800d3bc:	bf00      	nop
 800d3be:	e7fe      	b.n	800d3be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d3c0:	f000 f868 	bl	800d494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fdec 	bl	800dfa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d3cc:	f000 f870 	bl	800d4b0 <xTaskResumeAll>
 800d3d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d107      	bne.n	800d3e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d3d8:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <vTaskDelay+0x64>)
 800d3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3e8:	bf00      	nop
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	2000562c 	.word	0x2000562c
 800d3f4:	e000ed04 	.word	0xe000ed04

0800d3f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800d3fe:	4b1f      	ldr	r3, [pc, #124]	; (800d47c <vTaskStartScheduler+0x84>)
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	2300      	movs	r3, #0
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	2300      	movs	r3, #0
 800d408:	2280      	movs	r2, #128	; 0x80
 800d40a:	491d      	ldr	r1, [pc, #116]	; (800d480 <vTaskStartScheduler+0x88>)
 800d40c:	481d      	ldr	r0, [pc, #116]	; (800d484 <vTaskStartScheduler+0x8c>)
 800d40e:	f7ff fe8d 	bl	800d12c <xTaskCreate>
 800d412:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d102      	bne.n	800d420 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800d41a:	f000 fe29 	bl	800e070 <xTimerCreateTimerTask>
 800d41e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d116      	bne.n	800d454 <vTaskStartScheduler+0x5c>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	60bb      	str	r3, [r7, #8]
}
 800d438:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <vTaskStartScheduler+0x90>)
 800d43c:	f04f 32ff 	mov.w	r2, #4294967295
 800d440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d442:	4b12      	ldr	r3, [pc, #72]	; (800d48c <vTaskStartScheduler+0x94>)
 800d444:	2201      	movs	r2, #1
 800d446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d448:	4b11      	ldr	r3, [pc, #68]	; (800d490 <vTaskStartScheduler+0x98>)
 800d44a:	2200      	movs	r2, #0
 800d44c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d44e:	f001 fa07 	bl	800e860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d452:	e00e      	b.n	800d472 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45a:	d10a      	bne.n	800d472 <vTaskStartScheduler+0x7a>
	__asm volatile
 800d45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	607b      	str	r3, [r7, #4]
}
 800d46e:	bf00      	nop
 800d470:	e7fe      	b.n	800d470 <vTaskStartScheduler+0x78>
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20005628 	.word	0x20005628
 800d480:	0801d180 	.word	0x0801d180
 800d484:	0800dac1 	.word	0x0800dac1
 800d488:	20005624 	.word	0x20005624
 800d48c:	20005610 	.word	0x20005610
 800d490:	20005608 	.word	0x20005608

0800d494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d494:	b480      	push	{r7}
 800d496:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d498:	4b04      	ldr	r3, [pc, #16]	; (800d4ac <vTaskSuspendAll+0x18>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3301      	adds	r3, #1
 800d49e:	4a03      	ldr	r2, [pc, #12]	; (800d4ac <vTaskSuspendAll+0x18>)
 800d4a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d4a2:	bf00      	nop
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	2000562c 	.word	0x2000562c

0800d4b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4be:	4b41      	ldr	r3, [pc, #260]	; (800d5c4 <xTaskResumeAll+0x114>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <xTaskResumeAll+0x2c>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	603b      	str	r3, [r7, #0]
}
 800d4d8:	bf00      	nop
 800d4da:	e7fe      	b.n	800d4da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4dc:	f001 fa62 	bl	800e9a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4e0:	4b38      	ldr	r3, [pc, #224]	; (800d5c4 <xTaskResumeAll+0x114>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4a37      	ldr	r2, [pc, #220]	; (800d5c4 <xTaskResumeAll+0x114>)
 800d4e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ea:	4b36      	ldr	r3, [pc, #216]	; (800d5c4 <xTaskResumeAll+0x114>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d161      	bne.n	800d5b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4f2:	4b35      	ldr	r3, [pc, #212]	; (800d5c8 <xTaskResumeAll+0x118>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d05d      	beq.n	800d5b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4fa:	e02e      	b.n	800d55a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4fc:	4b33      	ldr	r3, [pc, #204]	; (800d5cc <xTaskResumeAll+0x11c>)
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3318      	adds	r3, #24
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fe fdfb 	bl	800c104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3304      	adds	r3, #4
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fdf6 	bl	800c104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	2201      	movs	r2, #1
 800d51e:	409a      	lsls	r2, r3
 800d520:	4b2b      	ldr	r3, [pc, #172]	; (800d5d0 <xTaskResumeAll+0x120>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4313      	orrs	r3, r2
 800d526:	4a2a      	ldr	r2, [pc, #168]	; (800d5d0 <xTaskResumeAll+0x120>)
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52e:	4613      	mov	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4a27      	ldr	r2, [pc, #156]	; (800d5d4 <xTaskResumeAll+0x124>)
 800d538:	441a      	add	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3304      	adds	r3, #4
 800d53e:	4619      	mov	r1, r3
 800d540:	4610      	mov	r0, r2
 800d542:	f7fe fd82 	bl	800c04a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54a:	4b23      	ldr	r3, [pc, #140]	; (800d5d8 <xTaskResumeAll+0x128>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	429a      	cmp	r2, r3
 800d552:	d302      	bcc.n	800d55a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d554:	4b21      	ldr	r3, [pc, #132]	; (800d5dc <xTaskResumeAll+0x12c>)
 800d556:	2201      	movs	r2, #1
 800d558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d55a:	4b1c      	ldr	r3, [pc, #112]	; (800d5cc <xTaskResumeAll+0x11c>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1cc      	bne.n	800d4fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d568:	f000 fb40 	bl	800dbec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d56c:	4b1c      	ldr	r3, [pc, #112]	; (800d5e0 <xTaskResumeAll+0x130>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d010      	beq.n	800d59a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d578:	f000 f858 	bl	800d62c <xTaskIncrementTick>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d582:	4b16      	ldr	r3, [pc, #88]	; (800d5dc <xTaskResumeAll+0x12c>)
 800d584:	2201      	movs	r2, #1
 800d586:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1f1      	bne.n	800d578 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d594:	4b12      	ldr	r3, [pc, #72]	; (800d5e0 <xTaskResumeAll+0x130>)
 800d596:	2200      	movs	r2, #0
 800d598:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d59a:	4b10      	ldr	r3, [pc, #64]	; (800d5dc <xTaskResumeAll+0x12c>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d009      	beq.n	800d5b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5a6:	4b0f      	ldr	r3, [pc, #60]	; (800d5e4 <xTaskResumeAll+0x134>)
 800d5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5b6:	f001 fa25 	bl	800ea04 <vPortExitCritical>

	return xAlreadyYielded;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	2000562c 	.word	0x2000562c
 800d5c8:	20005604 	.word	0x20005604
 800d5cc:	200055c4 	.word	0x200055c4
 800d5d0:	2000560c 	.word	0x2000560c
 800d5d4:	20005508 	.word	0x20005508
 800d5d8:	20005504 	.word	0x20005504
 800d5dc:	20005618 	.word	0x20005618
 800d5e0:	20005614 	.word	0x20005614
 800d5e4:	e000ed04 	.word	0xe000ed04

0800d5e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d5ee:	4b05      	ldr	r3, [pc, #20]	; (800d604 <xTaskGetTickCount+0x1c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d5f4:	687b      	ldr	r3, [r7, #4]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	370c      	adds	r7, #12
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	20005608 	.word	0x20005608

0800d608 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d60e:	f001 faab 	bl	800eb68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d612:	2300      	movs	r3, #0
 800d614:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d616:	4b04      	ldr	r3, [pc, #16]	; (800d628 <xTaskGetTickCountFromISR+0x20>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d61c:	683b      	ldr	r3, [r7, #0]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	20005608 	.word	0x20005608

0800d62c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d632:	2300      	movs	r3, #0
 800d634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d636:	4b4e      	ldr	r3, [pc, #312]	; (800d770 <xTaskIncrementTick+0x144>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f040 808e 	bne.w	800d75c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d640:	4b4c      	ldr	r3, [pc, #304]	; (800d774 <xTaskIncrementTick+0x148>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3301      	adds	r3, #1
 800d646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d648:	4a4a      	ldr	r2, [pc, #296]	; (800d774 <xTaskIncrementTick+0x148>)
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d120      	bne.n	800d696 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d654:	4b48      	ldr	r3, [pc, #288]	; (800d778 <xTaskIncrementTick+0x14c>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <xTaskIncrementTick+0x48>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	603b      	str	r3, [r7, #0]
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <xTaskIncrementTick+0x46>
 800d674:	4b40      	ldr	r3, [pc, #256]	; (800d778 <xTaskIncrementTick+0x14c>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	4b40      	ldr	r3, [pc, #256]	; (800d77c <xTaskIncrementTick+0x150>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a3e      	ldr	r2, [pc, #248]	; (800d778 <xTaskIncrementTick+0x14c>)
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	4a3e      	ldr	r2, [pc, #248]	; (800d77c <xTaskIncrementTick+0x150>)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	4b3d      	ldr	r3, [pc, #244]	; (800d780 <xTaskIncrementTick+0x154>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3301      	adds	r3, #1
 800d68e:	4a3c      	ldr	r2, [pc, #240]	; (800d780 <xTaskIncrementTick+0x154>)
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	f000 faab 	bl	800dbec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d696:	4b3b      	ldr	r3, [pc, #236]	; (800d784 <xTaskIncrementTick+0x158>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	693a      	ldr	r2, [r7, #16]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d348      	bcc.n	800d732 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6a0:	4b35      	ldr	r3, [pc, #212]	; (800d778 <xTaskIncrementTick+0x14c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d104      	bne.n	800d6b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6aa:	4b36      	ldr	r3, [pc, #216]	; (800d784 <xTaskIncrementTick+0x158>)
 800d6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b0:	601a      	str	r2, [r3, #0]
					break;
 800d6b2:	e03e      	b.n	800d732 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b4:	4b30      	ldr	r3, [pc, #192]	; (800d778 <xTaskIncrementTick+0x14c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d203      	bcs.n	800d6d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6cc:	4a2d      	ldr	r2, [pc, #180]	; (800d784 <xTaskIncrementTick+0x158>)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6d2:	e02e      	b.n	800d732 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe fd13 	bl	800c104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d004      	beq.n	800d6f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	3318      	adds	r3, #24
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fd0a 	bl	800c104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	409a      	lsls	r2, r3
 800d6f8:	4b23      	ldr	r3, [pc, #140]	; (800d788 <xTaskIncrementTick+0x15c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	4a22      	ldr	r2, [pc, #136]	; (800d788 <xTaskIncrementTick+0x15c>)
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4a1f      	ldr	r2, [pc, #124]	; (800d78c <xTaskIncrementTick+0x160>)
 800d710:	441a      	add	r2, r3
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	3304      	adds	r3, #4
 800d716:	4619      	mov	r1, r3
 800d718:	4610      	mov	r0, r2
 800d71a:	f7fe fc96 	bl	800c04a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d722:	4b1b      	ldr	r3, [pc, #108]	; (800d790 <xTaskIncrementTick+0x164>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	429a      	cmp	r2, r3
 800d72a:	d3b9      	bcc.n	800d6a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d730:	e7b6      	b.n	800d6a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d732:	4b17      	ldr	r3, [pc, #92]	; (800d790 <xTaskIncrementTick+0x164>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d738:	4914      	ldr	r1, [pc, #80]	; (800d78c <xTaskIncrementTick+0x160>)
 800d73a:	4613      	mov	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	440b      	add	r3, r1
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d901      	bls.n	800d74e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d74a:	2301      	movs	r3, #1
 800d74c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d74e:	4b11      	ldr	r3, [pc, #68]	; (800d794 <xTaskIncrementTick+0x168>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d007      	beq.n	800d766 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d756:	2301      	movs	r3, #1
 800d758:	617b      	str	r3, [r7, #20]
 800d75a:	e004      	b.n	800d766 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d75c:	4b0e      	ldr	r3, [pc, #56]	; (800d798 <xTaskIncrementTick+0x16c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3301      	adds	r3, #1
 800d762:	4a0d      	ldr	r2, [pc, #52]	; (800d798 <xTaskIncrementTick+0x16c>)
 800d764:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d766:	697b      	ldr	r3, [r7, #20]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3718      	adds	r7, #24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	2000562c 	.word	0x2000562c
 800d774:	20005608 	.word	0x20005608
 800d778:	200055bc 	.word	0x200055bc
 800d77c:	200055c0 	.word	0x200055c0
 800d780:	2000561c 	.word	0x2000561c
 800d784:	20005624 	.word	0x20005624
 800d788:	2000560c 	.word	0x2000560c
 800d78c:	20005508 	.word	0x20005508
 800d790:	20005504 	.word	0x20005504
 800d794:	20005618 	.word	0x20005618
 800d798:	20005614 	.word	0x20005614

0800d79c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	b087      	sub	sp, #28
 800d7a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7a2:	4b27      	ldr	r3, [pc, #156]	; (800d840 <vTaskSwitchContext+0xa4>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d003      	beq.n	800d7b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7aa:	4b26      	ldr	r3, [pc, #152]	; (800d844 <vTaskSwitchContext+0xa8>)
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7b0:	e03f      	b.n	800d832 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d7b2:	4b24      	ldr	r3, [pc, #144]	; (800d844 <vTaskSwitchContext+0xa8>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b8:	4b23      	ldr	r3, [pc, #140]	; (800d848 <vTaskSwitchContext+0xac>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	fab3 f383 	clz	r3, r3
 800d7c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d7c6:	7afb      	ldrb	r3, [r7, #11]
 800d7c8:	f1c3 031f 	rsb	r3, r3, #31
 800d7cc:	617b      	str	r3, [r7, #20]
 800d7ce:	491f      	ldr	r1, [pc, #124]	; (800d84c <vTaskSwitchContext+0xb0>)
 800d7d0:	697a      	ldr	r2, [r7, #20]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	440b      	add	r3, r1
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10a      	bne.n	800d7f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	607b      	str	r3, [r7, #4]
}
 800d7f4:	bf00      	nop
 800d7f6:	e7fe      	b.n	800d7f6 <vTaskSwitchContext+0x5a>
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4a12      	ldr	r2, [pc, #72]	; (800d84c <vTaskSwitchContext+0xb0>)
 800d804:	4413      	add	r3, r2
 800d806:	613b      	str	r3, [r7, #16]
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	685a      	ldr	r2, [r3, #4]
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	605a      	str	r2, [r3, #4]
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	3308      	adds	r3, #8
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d104      	bne.n	800d828 <vTaskSwitchContext+0x8c>
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	605a      	str	r2, [r3, #4]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	4a08      	ldr	r2, [pc, #32]	; (800d850 <vTaskSwitchContext+0xb4>)
 800d830:	6013      	str	r3, [r2, #0]
}
 800d832:	bf00      	nop
 800d834:	371c      	adds	r7, #28
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	2000562c 	.word	0x2000562c
 800d844:	20005618 	.word	0x20005618
 800d848:	2000560c 	.word	0x2000560c
 800d84c:	20005508 	.word	0x20005508
 800d850:	20005504 	.word	0x20005504

0800d854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	60fb      	str	r3, [r7, #12]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d87a:	4b07      	ldr	r3, [pc, #28]	; (800d898 <vTaskPlaceOnEventList+0x44>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3318      	adds	r3, #24
 800d880:	4619      	mov	r1, r3
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7fe fc05 	bl	800c092 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d888:	2101      	movs	r1, #1
 800d88a:	6838      	ldr	r0, [r7, #0]
 800d88c:	f000 fb8a 	bl	800dfa4 <prvAddCurrentTaskToDelayedList>
}
 800d890:	bf00      	nop
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20005504 	.word	0x20005504

0800d89c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10a      	bne.n	800d8c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	617b      	str	r3, [r7, #20]
}
 800d8c0:	bf00      	nop
 800d8c2:	e7fe      	b.n	800d8c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8c4:	4b0a      	ldr	r3, [pc, #40]	; (800d8f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3318      	adds	r3, #24
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f7fe fbbc 	bl	800c04a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	68b8      	ldr	r0, [r7, #8]
 800d8e2:	f000 fb5f 	bl	800dfa4 <prvAddCurrentTaskToDelayedList>
	}
 800d8e6:	bf00      	nop
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20005504 	.word	0x20005504

0800d8f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10a      	bne.n	800d920 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	60fb      	str	r3, [r7, #12]
}
 800d91c:	bf00      	nop
 800d91e:	e7fe      	b.n	800d91e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	3318      	adds	r3, #24
 800d924:	4618      	mov	r0, r3
 800d926:	f7fe fbed 	bl	800c104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d92a:	4b1d      	ldr	r3, [pc, #116]	; (800d9a0 <xTaskRemoveFromEventList+0xac>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d11c      	bne.n	800d96c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	3304      	adds	r3, #4
 800d936:	4618      	mov	r0, r3
 800d938:	f7fe fbe4 	bl	800c104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d940:	2201      	movs	r2, #1
 800d942:	409a      	lsls	r2, r3
 800d944:	4b17      	ldr	r3, [pc, #92]	; (800d9a4 <xTaskRemoveFromEventList+0xb0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4313      	orrs	r3, r2
 800d94a:	4a16      	ldr	r2, [pc, #88]	; (800d9a4 <xTaskRemoveFromEventList+0xb0>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d952:	4613      	mov	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4a13      	ldr	r2, [pc, #76]	; (800d9a8 <xTaskRemoveFromEventList+0xb4>)
 800d95c:	441a      	add	r2, r3
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	3304      	adds	r3, #4
 800d962:	4619      	mov	r1, r3
 800d964:	4610      	mov	r0, r2
 800d966:	f7fe fb70 	bl	800c04a <vListInsertEnd>
 800d96a:	e005      	b.n	800d978 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	3318      	adds	r3, #24
 800d970:	4619      	mov	r1, r3
 800d972:	480e      	ldr	r0, [pc, #56]	; (800d9ac <xTaskRemoveFromEventList+0xb8>)
 800d974:	f7fe fb69 	bl	800c04a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d97c:	4b0c      	ldr	r3, [pc, #48]	; (800d9b0 <xTaskRemoveFromEventList+0xbc>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d982:	429a      	cmp	r2, r3
 800d984:	d905      	bls.n	800d992 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d986:	2301      	movs	r3, #1
 800d988:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d98a:	4b0a      	ldr	r3, [pc, #40]	; (800d9b4 <xTaskRemoveFromEventList+0xc0>)
 800d98c:	2201      	movs	r2, #1
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	e001      	b.n	800d996 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d992:	2300      	movs	r3, #0
 800d994:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d996:	697b      	ldr	r3, [r7, #20]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	2000562c 	.word	0x2000562c
 800d9a4:	2000560c 	.word	0x2000560c
 800d9a8:	20005508 	.word	0x20005508
 800d9ac:	200055c4 	.word	0x200055c4
 800d9b0:	20005504 	.word	0x20005504
 800d9b4:	20005618 	.word	0x20005618

0800d9b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9c0:	4b06      	ldr	r3, [pc, #24]	; (800d9dc <vTaskInternalSetTimeOutState+0x24>)
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9c8:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <vTaskInternalSetTimeOutState+0x28>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	605a      	str	r2, [r3, #4]
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	2000561c 	.word	0x2000561c
 800d9e0:	20005608 	.word	0x20005608

0800d9e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	613b      	str	r3, [r7, #16]
}
 800da06:	bf00      	nop
 800da08:	e7fe      	b.n	800da08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10a      	bne.n	800da26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	60fb      	str	r3, [r7, #12]
}
 800da22:	bf00      	nop
 800da24:	e7fe      	b.n	800da24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800da26:	f000 ffbd 	bl	800e9a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da2a:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <xTaskCheckForTimeOut+0xbc>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	69ba      	ldr	r2, [r7, #24]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da42:	d102      	bne.n	800da4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da44:	2300      	movs	r3, #0
 800da46:	61fb      	str	r3, [r7, #28]
 800da48:	e023      	b.n	800da92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	4b15      	ldr	r3, [pc, #84]	; (800daa4 <xTaskCheckForTimeOut+0xc0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	429a      	cmp	r2, r3
 800da54:	d007      	beq.n	800da66 <xTaskCheckForTimeOut+0x82>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d302      	bcc.n	800da66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da60:	2301      	movs	r3, #1
 800da62:	61fb      	str	r3, [r7, #28]
 800da64:	e015      	b.n	800da92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d20b      	bcs.n	800da88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	1ad2      	subs	r2, r2, r3
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff ff9b 	bl	800d9b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da82:	2300      	movs	r3, #0
 800da84:	61fb      	str	r3, [r7, #28]
 800da86:	e004      	b.n	800da92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da8e:	2301      	movs	r3, #1
 800da90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da92:	f000 ffb7 	bl	800ea04 <vPortExitCritical>

	return xReturn;
 800da96:	69fb      	ldr	r3, [r7, #28]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3720      	adds	r7, #32
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20005608 	.word	0x20005608
 800daa4:	2000561c 	.word	0x2000561c

0800daa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800daac:	4b03      	ldr	r3, [pc, #12]	; (800dabc <vTaskMissedYield+0x14>)
 800daae:	2201      	movs	r2, #1
 800dab0:	601a      	str	r2, [r3, #0]
}
 800dab2:	bf00      	nop
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	20005618 	.word	0x20005618

0800dac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dac8:	f000 f852 	bl	800db70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dacc:	4b06      	ldr	r3, [pc, #24]	; (800dae8 <prvIdleTask+0x28>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d9f9      	bls.n	800dac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <prvIdleTask+0x2c>)
 800dad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dae4:	e7f0      	b.n	800dac8 <prvIdleTask+0x8>
 800dae6:	bf00      	nop
 800dae8:	20005508 	.word	0x20005508
 800daec:	e000ed04 	.word	0xe000ed04

0800daf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800daf6:	2300      	movs	r3, #0
 800daf8:	607b      	str	r3, [r7, #4]
 800dafa:	e00c      	b.n	800db16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	4613      	mov	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4a12      	ldr	r2, [pc, #72]	; (800db50 <prvInitialiseTaskLists+0x60>)
 800db08:	4413      	add	r3, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fa70 	bl	800bff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	3301      	adds	r3, #1
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b06      	cmp	r3, #6
 800db1a:	d9ef      	bls.n	800dafc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db1c:	480d      	ldr	r0, [pc, #52]	; (800db54 <prvInitialiseTaskLists+0x64>)
 800db1e:	f7fe fa67 	bl	800bff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db22:	480d      	ldr	r0, [pc, #52]	; (800db58 <prvInitialiseTaskLists+0x68>)
 800db24:	f7fe fa64 	bl	800bff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db28:	480c      	ldr	r0, [pc, #48]	; (800db5c <prvInitialiseTaskLists+0x6c>)
 800db2a:	f7fe fa61 	bl	800bff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db2e:	480c      	ldr	r0, [pc, #48]	; (800db60 <prvInitialiseTaskLists+0x70>)
 800db30:	f7fe fa5e 	bl	800bff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db34:	480b      	ldr	r0, [pc, #44]	; (800db64 <prvInitialiseTaskLists+0x74>)
 800db36:	f7fe fa5b 	bl	800bff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db3a:	4b0b      	ldr	r3, [pc, #44]	; (800db68 <prvInitialiseTaskLists+0x78>)
 800db3c:	4a05      	ldr	r2, [pc, #20]	; (800db54 <prvInitialiseTaskLists+0x64>)
 800db3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db40:	4b0a      	ldr	r3, [pc, #40]	; (800db6c <prvInitialiseTaskLists+0x7c>)
 800db42:	4a05      	ldr	r2, [pc, #20]	; (800db58 <prvInitialiseTaskLists+0x68>)
 800db44:	601a      	str	r2, [r3, #0]
}
 800db46:	bf00      	nop
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20005508 	.word	0x20005508
 800db54:	20005594 	.word	0x20005594
 800db58:	200055a8 	.word	0x200055a8
 800db5c:	200055c4 	.word	0x200055c4
 800db60:	200055d8 	.word	0x200055d8
 800db64:	200055f0 	.word	0x200055f0
 800db68:	200055bc 	.word	0x200055bc
 800db6c:	200055c0 	.word	0x200055c0

0800db70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db76:	e019      	b.n	800dbac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db78:	f000 ff14 	bl	800e9a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db7c:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <prvCheckTasksWaitingTermination+0x50>)
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	3304      	adds	r3, #4
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fe fabb 	bl	800c104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db8e:	4b0d      	ldr	r3, [pc, #52]	; (800dbc4 <prvCheckTasksWaitingTermination+0x54>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3b01      	subs	r3, #1
 800db94:	4a0b      	ldr	r2, [pc, #44]	; (800dbc4 <prvCheckTasksWaitingTermination+0x54>)
 800db96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db98:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <prvCheckTasksWaitingTermination+0x58>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	4a0a      	ldr	r2, [pc, #40]	; (800dbc8 <prvCheckTasksWaitingTermination+0x58>)
 800dba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dba2:	f000 ff2f 	bl	800ea04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f810 	bl	800dbcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbac:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <prvCheckTasksWaitingTermination+0x58>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1e1      	bne.n	800db78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbb4:	bf00      	nop
 800dbb6:	bf00      	nop
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	200055d8 	.word	0x200055d8
 800dbc4:	20005604 	.word	0x20005604
 800dbc8:	200055ec 	.word	0x200055ec

0800dbcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f001 f8d1 	bl	800ed80 <vPortFree>
			vPortFree( pxTCB );
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f001 f8ce 	bl	800ed80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbe4:	bf00      	nop
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbf2:	4b0c      	ldr	r3, [pc, #48]	; (800dc24 <prvResetNextTaskUnblockTime+0x38>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d104      	bne.n	800dc06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <prvResetNextTaskUnblockTime+0x3c>)
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc04:	e008      	b.n	800dc18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc06:	4b07      	ldr	r3, [pc, #28]	; (800dc24 <prvResetNextTaskUnblockTime+0x38>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	4a04      	ldr	r2, [pc, #16]	; (800dc28 <prvResetNextTaskUnblockTime+0x3c>)
 800dc16:	6013      	str	r3, [r2, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	200055bc 	.word	0x200055bc
 800dc28:	20005624 	.word	0x20005624

0800dc2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc32:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <xTaskGetSchedulerState+0x34>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d102      	bne.n	800dc40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	607b      	str	r3, [r7, #4]
 800dc3e:	e008      	b.n	800dc52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc40:	4b08      	ldr	r3, [pc, #32]	; (800dc64 <xTaskGetSchedulerState+0x38>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d102      	bne.n	800dc4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc48:	2302      	movs	r3, #2
 800dc4a:	607b      	str	r3, [r7, #4]
 800dc4c:	e001      	b.n	800dc52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc52:	687b      	ldr	r3, [r7, #4]
	}
 800dc54:	4618      	mov	r0, r3
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	20005610 	.word	0x20005610
 800dc64:	2000562c 	.word	0x2000562c

0800dc68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d05e      	beq.n	800dd3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc82:	4b31      	ldr	r3, [pc, #196]	; (800dd48 <xTaskPriorityInherit+0xe0>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d24e      	bcs.n	800dd2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	db06      	blt.n	800dca2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc94:	4b2c      	ldr	r3, [pc, #176]	; (800dd48 <xTaskPriorityInherit+0xe0>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	f1c3 0207 	rsb	r2, r3, #7
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6959      	ldr	r1, [r3, #20]
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcaa:	4613      	mov	r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	4413      	add	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4a26      	ldr	r2, [pc, #152]	; (800dd4c <xTaskPriorityInherit+0xe4>)
 800dcb4:	4413      	add	r3, r2
 800dcb6:	4299      	cmp	r1, r3
 800dcb8:	d12f      	bne.n	800dd1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fe fa20 	bl	800c104 <uxListRemove>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10a      	bne.n	800dce0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	2201      	movs	r2, #1
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	43da      	mvns	r2, r3
 800dcd6:	4b1e      	ldr	r3, [pc, #120]	; (800dd50 <xTaskPriorityInherit+0xe8>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4013      	ands	r3, r2
 800dcdc:	4a1c      	ldr	r2, [pc, #112]	; (800dd50 <xTaskPriorityInherit+0xe8>)
 800dcde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dce0:	4b19      	ldr	r3, [pc, #100]	; (800dd48 <xTaskPriorityInherit+0xe0>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcee:	2201      	movs	r2, #1
 800dcf0:	409a      	lsls	r2, r3
 800dcf2:	4b17      	ldr	r3, [pc, #92]	; (800dd50 <xTaskPriorityInherit+0xe8>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <xTaskPriorityInherit+0xe8>)
 800dcfa:	6013      	str	r3, [r2, #0]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd00:	4613      	mov	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4a10      	ldr	r2, [pc, #64]	; (800dd4c <xTaskPriorityInherit+0xe4>)
 800dd0a:	441a      	add	r2, r3
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	3304      	adds	r3, #4
 800dd10:	4619      	mov	r1, r3
 800dd12:	4610      	mov	r0, r2
 800dd14:	f7fe f999 	bl	800c04a <vListInsertEnd>
 800dd18:	e004      	b.n	800dd24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <xTaskPriorityInherit+0xe0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd24:	2301      	movs	r3, #1
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	e008      	b.n	800dd3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd2e:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <xTaskPriorityInherit+0xe0>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d201      	bcs.n	800dd3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
	}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20005504 	.word	0x20005504
 800dd4c:	20005508 	.word	0x20005508
 800dd50:	2000560c 	.word	0x2000560c

0800dd54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd60:	2300      	movs	r3, #0
 800dd62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d06e      	beq.n	800de48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dd6a:	4b3a      	ldr	r3, [pc, #232]	; (800de54 <xTaskPriorityDisinherit+0x100>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d00a      	beq.n	800dd8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	60fb      	str	r3, [r7, #12]
}
 800dd86:	bf00      	nop
 800dd88:	e7fe      	b.n	800dd88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	60bb      	str	r3, [r7, #8]
}
 800dda4:	bf00      	nop
 800dda6:	e7fe      	b.n	800dda6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddac:	1e5a      	subs	r2, r3, #1
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d044      	beq.n	800de48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d140      	bne.n	800de48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	3304      	adds	r3, #4
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe f99a 	bl	800c104 <uxListRemove>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d115      	bne.n	800de02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddda:	491f      	ldr	r1, [pc, #124]	; (800de58 <xTaskPriorityDisinherit+0x104>)
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	440b      	add	r3, r1
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <xTaskPriorityDisinherit+0xae>
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf6:	43da      	mvns	r2, r3
 800ddf8:	4b18      	ldr	r3, [pc, #96]	; (800de5c <xTaskPriorityDisinherit+0x108>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	4a17      	ldr	r2, [pc, #92]	; (800de5c <xTaskPriorityDisinherit+0x108>)
 800de00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0e:	f1c3 0207 	rsb	r2, r3, #7
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1a:	2201      	movs	r2, #1
 800de1c:	409a      	lsls	r2, r3
 800de1e:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <xTaskPriorityDisinherit+0x108>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4313      	orrs	r3, r2
 800de24:	4a0d      	ldr	r2, [pc, #52]	; (800de5c <xTaskPriorityDisinherit+0x108>)
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2c:	4613      	mov	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4a08      	ldr	r2, [pc, #32]	; (800de58 <xTaskPriorityDisinherit+0x104>)
 800de36:	441a      	add	r2, r3
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	3304      	adds	r3, #4
 800de3c:	4619      	mov	r1, r3
 800de3e:	4610      	mov	r0, r2
 800de40:	f7fe f903 	bl	800c04a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de44:	2301      	movs	r3, #1
 800de46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de48:	697b      	ldr	r3, [r7, #20]
	}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	20005504 	.word	0x20005504
 800de58:	20005508 	.word	0x20005508
 800de5c:	2000560c 	.word	0x2000560c

0800de60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800de6e:	2301      	movs	r3, #1
 800de70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d077      	beq.n	800df68 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10a      	bne.n	800de96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800de80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	60fb      	str	r3, [r7, #12]
}
 800de92:	bf00      	nop
 800de94:	e7fe      	b.n	800de94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d902      	bls.n	800dea6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	61fb      	str	r3, [r7, #28]
 800dea4:	e002      	b.n	800deac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb0:	69fa      	ldr	r2, [r7, #28]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d058      	beq.n	800df68 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	429a      	cmp	r2, r3
 800debe:	d153      	bne.n	800df68 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dec0:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	69ba      	ldr	r2, [r7, #24]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d10a      	bne.n	800dee0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	60bb      	str	r3, [r7, #8]
}
 800dedc:	bf00      	nop
 800dede:	e7fe      	b.n	800dede <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	69fa      	ldr	r2, [r7, #28]
 800deea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	2b00      	cmp	r3, #0
 800def2:	db04      	blt.n	800defe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	f1c3 0207 	rsb	r2, r3, #7
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	6959      	ldr	r1, [r3, #20]
 800df02:	693a      	ldr	r2, [r7, #16]
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4a19      	ldr	r2, [pc, #100]	; (800df74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df0e:	4413      	add	r3, r2
 800df10:	4299      	cmp	r1, r3
 800df12:	d129      	bne.n	800df68 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	3304      	adds	r3, #4
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fe f8f3 	bl	800c104 <uxListRemove>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	2201      	movs	r2, #1
 800df2a:	fa02 f303 	lsl.w	r3, r2, r3
 800df2e:	43da      	mvns	r2, r3
 800df30:	4b11      	ldr	r3, [pc, #68]	; (800df78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4013      	ands	r3, r2
 800df36:	4a10      	ldr	r2, [pc, #64]	; (800df78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3e:	2201      	movs	r2, #1
 800df40:	409a      	lsls	r2, r3
 800df42:	4b0d      	ldr	r3, [pc, #52]	; (800df78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4313      	orrs	r3, r2
 800df48:	4a0b      	ldr	r2, [pc, #44]	; (800df78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df50:	4613      	mov	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4a06      	ldr	r2, [pc, #24]	; (800df74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df5a:	441a      	add	r2, r3
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	3304      	adds	r3, #4
 800df60:	4619      	mov	r1, r3
 800df62:	4610      	mov	r0, r2
 800df64:	f7fe f871 	bl	800c04a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df68:	bf00      	nop
 800df6a:	3720      	adds	r7, #32
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20005504 	.word	0x20005504
 800df74:	20005508 	.word	0x20005508
 800df78:	2000560c 	.word	0x2000560c

0800df7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800df7c:	b480      	push	{r7}
 800df7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df80:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <pvTaskIncrementMutexHeldCount+0x24>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d004      	beq.n	800df92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df88:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <pvTaskIncrementMutexHeldCount+0x24>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df8e:	3201      	adds	r2, #1
 800df90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800df92:	4b03      	ldr	r3, [pc, #12]	; (800dfa0 <pvTaskIncrementMutexHeldCount+0x24>)
 800df94:	681b      	ldr	r3, [r3, #0]
	}
 800df96:	4618      	mov	r0, r3
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	20005504 	.word	0x20005504

0800dfa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfae:	4b29      	ldr	r3, [pc, #164]	; (800e054 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfb4:	4b28      	ldr	r3, [pc, #160]	; (800e058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe f8a2 	bl	800c104 <uxListRemove>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10b      	bne.n	800dfde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dfc6:	4b24      	ldr	r3, [pc, #144]	; (800e058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfcc:	2201      	movs	r2, #1
 800dfce:	fa02 f303 	lsl.w	r3, r2, r3
 800dfd2:	43da      	mvns	r2, r3
 800dfd4:	4b21      	ldr	r3, [pc, #132]	; (800e05c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4013      	ands	r3, r2
 800dfda:	4a20      	ldr	r2, [pc, #128]	; (800e05c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe4:	d10a      	bne.n	800dffc <prvAddCurrentTaskToDelayedList+0x58>
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d007      	beq.n	800dffc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfec:	4b1a      	ldr	r3, [pc, #104]	; (800e058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3304      	adds	r3, #4
 800dff2:	4619      	mov	r1, r3
 800dff4:	481a      	ldr	r0, [pc, #104]	; (800e060 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dff6:	f7fe f828 	bl	800c04a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dffa:	e026      	b.n	800e04a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4413      	add	r3, r2
 800e002:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e004:	4b14      	ldr	r3, [pc, #80]	; (800e058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68ba      	ldr	r2, [r7, #8]
 800e00a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	429a      	cmp	r2, r3
 800e012:	d209      	bcs.n	800e028 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e014:	4b13      	ldr	r3, [pc, #76]	; (800e064 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7fe f836 	bl	800c092 <vListInsert>
}
 800e026:	e010      	b.n	800e04a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e028:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	4b0a      	ldr	r3, [pc, #40]	; (800e058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	3304      	adds	r3, #4
 800e032:	4619      	mov	r1, r3
 800e034:	4610      	mov	r0, r2
 800e036:	f7fe f82c 	bl	800c092 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e03a:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	429a      	cmp	r2, r3
 800e042:	d202      	bcs.n	800e04a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e044:	4a09      	ldr	r2, [pc, #36]	; (800e06c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	6013      	str	r3, [r2, #0]
}
 800e04a:	bf00      	nop
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	20005608 	.word	0x20005608
 800e058:	20005504 	.word	0x20005504
 800e05c:	2000560c 	.word	0x2000560c
 800e060:	200055f0 	.word	0x200055f0
 800e064:	200055c0 	.word	0x200055c0
 800e068:	200055bc 	.word	0x200055bc
 800e06c:	20005624 	.word	0x20005624

0800e070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800e076:	2300      	movs	r3, #0
 800e078:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e07a:	f000 fb31 	bl	800e6e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e07e:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <xTimerCreateTimerTask+0x54>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00b      	beq.n	800e09e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800e086:	4b10      	ldr	r3, [pc, #64]	; (800e0c8 <xTimerCreateTimerTask+0x58>)
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	2302      	movs	r3, #2
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	2300      	movs	r3, #0
 800e090:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e094:	490d      	ldr	r1, [pc, #52]	; (800e0cc <xTimerCreateTimerTask+0x5c>)
 800e096:	480e      	ldr	r0, [pc, #56]	; (800e0d0 <xTimerCreateTimerTask+0x60>)
 800e098:	f7ff f848 	bl	800d12c <xTaskCreate>
 800e09c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10a      	bne.n	800e0ba <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800e0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	603b      	str	r3, [r7, #0]
}
 800e0b6:	bf00      	nop
 800e0b8:	e7fe      	b.n	800e0b8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800e0ba:	687b      	ldr	r3, [r7, #4]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	20005660 	.word	0x20005660
 800e0c8:	20005664 	.word	0x20005664
 800e0cc:	0801d188 	.word	0x0801d188
 800e0d0:	0800e2c1 	.word	0x0800e2c1

0800e0d4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b088      	sub	sp, #32
 800e0d8:	af02      	add	r7, sp, #8
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e0e2:	2028      	movs	r0, #40	; 0x28
 800e0e4:	f000 fd80 	bl	800ebe8 <pvPortMalloc>
 800e0e8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00d      	beq.n	800e10c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	68b9      	ldr	r1, [r7, #8]
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f000 f805 	bl	800e116 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e10c:	697b      	ldr	r3, [r7, #20]
	}
 800e10e:	4618      	mov	r0, r3
 800e110:	3718      	adds	r7, #24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b086      	sub	sp, #24
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	60f8      	str	r0, [r7, #12]
 800e11e:	60b9      	str	r1, [r7, #8]
 800e120:	607a      	str	r2, [r7, #4]
 800e122:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d10a      	bne.n	800e140 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12e:	f383 8811 	msr	BASEPRI, r3
 800e132:	f3bf 8f6f 	isb	sy
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	617b      	str	r3, [r7, #20]
}
 800e13c:	bf00      	nop
 800e13e:	e7fe      	b.n	800e13e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	2b00      	cmp	r3, #0
 800e144:	d01e      	beq.n	800e184 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e146:	f000 facb 	bl	800e6e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	6a3a      	ldr	r2, [r7, #32]
 800e160:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e164:	3304      	adds	r3, #4
 800e166:	4618      	mov	r0, r3
 800e168:	f7fd ff62 	bl	800c030 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d008      	beq.n	800e184 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e178:	f043 0304 	orr.w	r3, r3, #4
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e184:	bf00      	nop
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10a      	bne.n	800e1ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	623b      	str	r3, [r7, #32]
}
 800e1b6:	bf00      	nop
 800e1b8:	e7fe      	b.n	800e1b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	; (800e224 <xTimerGenericCommand+0x98>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d02a      	beq.n	800e218 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b05      	cmp	r3, #5
 800e1d2:	dc18      	bgt.n	800e206 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e1d4:	f7ff fd2a 	bl	800dc2c <xTaskGetSchedulerState>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d109      	bne.n	800e1f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e1de:	4b11      	ldr	r3, [pc, #68]	; (800e224 <xTimerGenericCommand+0x98>)
 800e1e0:	6818      	ldr	r0, [r3, #0]
 800e1e2:	f107 0114 	add.w	r1, r7, #20
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ea:	f7fe f8a5 	bl	800c338 <xQueueGenericSend>
 800e1ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e1f0:	e012      	b.n	800e218 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e1f2:	4b0c      	ldr	r3, [pc, #48]	; (800e224 <xTimerGenericCommand+0x98>)
 800e1f4:	6818      	ldr	r0, [r3, #0]
 800e1f6:	f107 0114 	add.w	r1, r7, #20
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f7fe f89b 	bl	800c338 <xQueueGenericSend>
 800e202:	6278      	str	r0, [r7, #36]	; 0x24
 800e204:	e008      	b.n	800e218 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e206:	4b07      	ldr	r3, [pc, #28]	; (800e224 <xTimerGenericCommand+0x98>)
 800e208:	6818      	ldr	r0, [r3, #0]
 800e20a:	f107 0114 	add.w	r1, r7, #20
 800e20e:	2300      	movs	r3, #0
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	f7fe f98f 	bl	800c534 <xQueueGenericSendFromISR>
 800e216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3728      	adds	r7, #40	; 0x28
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20005660 	.word	0x20005660

0800e228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af02      	add	r7, sp, #8
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e232:	4b22      	ldr	r3, [pc, #136]	; (800e2bc <prvProcessExpiredTimer+0x94>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	3304      	adds	r3, #4
 800e240:	4618      	mov	r0, r3
 800e242:	f7fd ff5f 	bl	800c104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d022      	beq.n	800e29a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	699a      	ldr	r2, [r3, #24]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	18d1      	adds	r1, r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	6978      	ldr	r0, [r7, #20]
 800e262:	f000 f8d1 	bl	800e408 <prvInsertTimerInActiveList>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d01f      	beq.n	800e2ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e26c:	2300      	movs	r3, #0
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	2300      	movs	r3, #0
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	2100      	movs	r1, #0
 800e276:	6978      	ldr	r0, [r7, #20]
 800e278:	f7ff ff88 	bl	800e18c <xTimerGenericCommand>
 800e27c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d113      	bne.n	800e2ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	60fb      	str	r3, [r7, #12]
}
 800e296:	bf00      	nop
 800e298:	e7fe      	b.n	800e298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e2a0:	f023 0301 	bic.w	r3, r3, #1
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	6a1b      	ldr	r3, [r3, #32]
 800e2b0:	6978      	ldr	r0, [r7, #20]
 800e2b2:	4798      	blx	r3
}
 800e2b4:	bf00      	nop
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20005658 	.word	0x20005658

0800e2c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e2c8:	f107 0308 	add.w	r3, r7, #8
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f000 f857 	bl	800e380 <prvGetNextExpireTime>
 800e2d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f000 f803 	bl	800e2e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e2de:	f000 f8d5 	bl	800e48c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e2e2:	e7f1      	b.n	800e2c8 <prvTimerTask+0x8>

0800e2e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e2ee:	f7ff f8d1 	bl	800d494 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2f2:	f107 0308 	add.w	r3, r7, #8
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 f866 	bl	800e3c8 <prvSampleTimeNow>
 800e2fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d130      	bne.n	800e366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10a      	bne.n	800e320 <prvProcessTimerOrBlockTask+0x3c>
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d806      	bhi.n	800e320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e312:	f7ff f8cd 	bl	800d4b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e316:	68f9      	ldr	r1, [r7, #12]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff ff85 	bl	800e228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e31e:	e024      	b.n	800e36a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d008      	beq.n	800e338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e326:	4b13      	ldr	r3, [pc, #76]	; (800e374 <prvProcessTimerOrBlockTask+0x90>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <prvProcessTimerOrBlockTask+0x50>
 800e330:	2301      	movs	r3, #1
 800e332:	e000      	b.n	800e336 <prvProcessTimerOrBlockTask+0x52>
 800e334:	2300      	movs	r3, #0
 800e336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e338:	4b0f      	ldr	r3, [pc, #60]	; (800e378 <prvProcessTimerOrBlockTask+0x94>)
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	683a      	ldr	r2, [r7, #0]
 800e344:	4619      	mov	r1, r3
 800e346:	f7fe febd 	bl	800d0c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e34a:	f7ff f8b1 	bl	800d4b0 <xTaskResumeAll>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10a      	bne.n	800e36a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e354:	4b09      	ldr	r3, [pc, #36]	; (800e37c <prvProcessTimerOrBlockTask+0x98>)
 800e356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	f3bf 8f6f 	isb	sy
}
 800e364:	e001      	b.n	800e36a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e366:	f7ff f8a3 	bl	800d4b0 <xTaskResumeAll>
}
 800e36a:	bf00      	nop
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	2000565c 	.word	0x2000565c
 800e378:	20005660 	.word	0x20005660
 800e37c:	e000ed04 	.word	0xe000ed04

0800e380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e388:	4b0e      	ldr	r3, [pc, #56]	; (800e3c4 <prvGetNextExpireTime+0x44>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <prvGetNextExpireTime+0x16>
 800e392:	2201      	movs	r2, #1
 800e394:	e000      	b.n	800e398 <prvGetNextExpireTime+0x18>
 800e396:	2200      	movs	r2, #0
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d105      	bne.n	800e3b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3a4:	4b07      	ldr	r3, [pc, #28]	; (800e3c4 <prvGetNextExpireTime+0x44>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	60fb      	str	r3, [r7, #12]
 800e3ae:	e001      	b.n	800e3b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3714      	adds	r7, #20
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	20005658 	.word	0x20005658

0800e3c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e3d0:	f7ff f90a 	bl	800d5e8 <xTaskGetTickCount>
 800e3d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e3d6:	4b0b      	ldr	r3, [pc, #44]	; (800e404 <prvSampleTimeNow+0x3c>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d205      	bcs.n	800e3ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e3e0:	f000 f91a 	bl	800e618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e3f2:	4a04      	ldr	r2, [pc, #16]	; (800e404 <prvSampleTimeNow+0x3c>)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20005668 	.word	0x20005668

0800e408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e416:	2300      	movs	r3, #0
 800e418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d812      	bhi.n	800e454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	1ad2      	subs	r2, r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d302      	bcc.n	800e442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e43c:	2301      	movs	r3, #1
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	e01b      	b.n	800e47a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e442:	4b10      	ldr	r3, [pc, #64]	; (800e484 <prvInsertTimerInActiveList+0x7c>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	3304      	adds	r3, #4
 800e44a:	4619      	mov	r1, r3
 800e44c:	4610      	mov	r0, r2
 800e44e:	f7fd fe20 	bl	800c092 <vListInsert>
 800e452:	e012      	b.n	800e47a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d206      	bcs.n	800e46a <prvInsertTimerInActiveList+0x62>
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	429a      	cmp	r2, r3
 800e462:	d302      	bcc.n	800e46a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e464:	2301      	movs	r3, #1
 800e466:	617b      	str	r3, [r7, #20]
 800e468:	e007      	b.n	800e47a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e46a:	4b07      	ldr	r3, [pc, #28]	; (800e488 <prvInsertTimerInActiveList+0x80>)
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3304      	adds	r3, #4
 800e472:	4619      	mov	r1, r3
 800e474:	4610      	mov	r0, r2
 800e476:	f7fd fe0c 	bl	800c092 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e47a:	697b      	ldr	r3, [r7, #20]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	2000565c 	.word	0x2000565c
 800e488:	20005658 	.word	0x20005658

0800e48c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08c      	sub	sp, #48	; 0x30
 800e490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e492:	e0ae      	b.n	800e5f2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2b00      	cmp	r3, #0
 800e498:	f2c0 80ab 	blt.w	800e5f2 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fd fe29 	bl	800c104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e4b2:	1d3b      	adds	r3, r7, #4
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff ff87 	bl	800e3c8 <prvSampleTimeNow>
 800e4ba:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2b09      	cmp	r3, #9
 800e4c0:	f200 8096 	bhi.w	800e5f0 <prvProcessReceivedCommands+0x164>
 800e4c4:	a201      	add	r2, pc, #4	; (adr r2, 800e4cc <prvProcessReceivedCommands+0x40>)
 800e4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ca:	bf00      	nop
 800e4cc:	0800e4f5 	.word	0x0800e4f5
 800e4d0:	0800e4f5 	.word	0x0800e4f5
 800e4d4:	0800e4f5 	.word	0x0800e4f5
 800e4d8:	0800e569 	.word	0x0800e569
 800e4dc:	0800e57d 	.word	0x0800e57d
 800e4e0:	0800e5c7 	.word	0x0800e5c7
 800e4e4:	0800e4f5 	.word	0x0800e4f5
 800e4e8:	0800e4f5 	.word	0x0800e4f5
 800e4ec:	0800e569 	.word	0x0800e569
 800e4f0:	0800e57d 	.word	0x0800e57d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	18d1      	adds	r1, r2, r3
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6a3a      	ldr	r2, [r7, #32]
 800e512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e514:	f7ff ff78 	bl	800e408 <prvInsertTimerInActiveList>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d069      	beq.n	800e5f2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e520:	6a1b      	ldr	r3, [r3, #32]
 800e522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	d05e      	beq.n	800e5f2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	441a      	add	r2, r3
 800e53c:	2300      	movs	r3, #0
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	2300      	movs	r3, #0
 800e542:	2100      	movs	r1, #0
 800e544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e546:	f7ff fe21 	bl	800e18c <xTimerGenericCommand>
 800e54a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d14f      	bne.n	800e5f2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	61bb      	str	r3, [r7, #24]
}
 800e564:	bf00      	nop
 800e566:	e7fe      	b.n	800e566 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e56e:	f023 0301 	bic.w	r3, r3, #1
 800e572:	b2da      	uxtb	r2, r3
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e57a:	e03a      	b.n	800e5f2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e582:	f043 0301 	orr.w	r3, r3, #1
 800e586:	b2da      	uxtb	r2, r3
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e592:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	699b      	ldr	r3, [r3, #24]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	617b      	str	r3, [r7, #20]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b4:	699a      	ldr	r2, [r3, #24]
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	18d1      	adds	r1, r2, r3
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	6a3a      	ldr	r2, [r7, #32]
 800e5be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5c0:	f7ff ff22 	bl	800e408 <prvInsertTimerInActiveList>
					break;
 800e5c4:	e015      	b.n	800e5f2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5cc:	f003 0302 	and.w	r3, r3, #2
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d103      	bne.n	800e5dc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5d6:	f000 fbd3 	bl	800ed80 <vPortFree>
 800e5da:	e00a      	b.n	800e5f2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5e2:	f023 0301 	bic.w	r3, r3, #1
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e5ee:	e000      	b.n	800e5f2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800e5f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5f2:	4b08      	ldr	r3, [pc, #32]	; (800e614 <prvProcessReceivedCommands+0x188>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f107 0108 	add.w	r1, r7, #8
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fe f8c1 	bl	800c784 <xQueueReceive>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	f47f af45 	bne.w	800e494 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e60a:	bf00      	nop
 800e60c:	bf00      	nop
 800e60e:	3728      	adds	r7, #40	; 0x28
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	20005660 	.word	0x20005660

0800e618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b088      	sub	sp, #32
 800e61c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e61e:	e048      	b.n	800e6b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e620:	4b2d      	ldr	r3, [pc, #180]	; (800e6d8 <prvSwitchTimerLists+0xc0>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e62a:	4b2b      	ldr	r3, [pc, #172]	; (800e6d8 <prvSwitchTimerLists+0xc0>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3304      	adds	r3, #4
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fd fd63 	bl	800c104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e64c:	f003 0304 	and.w	r3, r3, #4
 800e650:	2b00      	cmp	r3, #0
 800e652:	d02e      	beq.n	800e6b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	699b      	ldr	r3, [r3, #24]
 800e658:	693a      	ldr	r2, [r7, #16]
 800e65a:	4413      	add	r3, r2
 800e65c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	429a      	cmp	r2, r3
 800e664:	d90e      	bls.n	800e684 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e672:	4b19      	ldr	r3, [pc, #100]	; (800e6d8 <prvSwitchTimerLists+0xc0>)
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3304      	adds	r3, #4
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7fd fd08 	bl	800c092 <vListInsert>
 800e682:	e016      	b.n	800e6b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e684:	2300      	movs	r3, #0
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	2300      	movs	r3, #0
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	2100      	movs	r1, #0
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7ff fd7c 	bl	800e18c <xTimerGenericCommand>
 800e694:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10a      	bne.n	800e6b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	603b      	str	r3, [r7, #0]
}
 800e6ae:	bf00      	nop
 800e6b0:	e7fe      	b.n	800e6b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6b2:	4b09      	ldr	r3, [pc, #36]	; (800e6d8 <prvSwitchTimerLists+0xc0>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1b1      	bne.n	800e620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e6bc:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <prvSwitchTimerLists+0xc0>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e6c2:	4b06      	ldr	r3, [pc, #24]	; (800e6dc <prvSwitchTimerLists+0xc4>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a04      	ldr	r2, [pc, #16]	; (800e6d8 <prvSwitchTimerLists+0xc0>)
 800e6c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e6ca:	4a04      	ldr	r2, [pc, #16]	; (800e6dc <prvSwitchTimerLists+0xc4>)
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	6013      	str	r3, [r2, #0]
}
 800e6d0:	bf00      	nop
 800e6d2:	3718      	adds	r7, #24
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	20005658 	.word	0x20005658
 800e6dc:	2000565c 	.word	0x2000565c

0800e6e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e6e4:	f000 f95e 	bl	800e9a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e6e8:	4b12      	ldr	r3, [pc, #72]	; (800e734 <prvCheckForValidListAndQueue+0x54>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d11d      	bne.n	800e72c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e6f0:	4811      	ldr	r0, [pc, #68]	; (800e738 <prvCheckForValidListAndQueue+0x58>)
 800e6f2:	f7fd fc7d 	bl	800bff0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6f6:	4811      	ldr	r0, [pc, #68]	; (800e73c <prvCheckForValidListAndQueue+0x5c>)
 800e6f8:	f7fd fc7a 	bl	800bff0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6fc:	4b10      	ldr	r3, [pc, #64]	; (800e740 <prvCheckForValidListAndQueue+0x60>)
 800e6fe:	4a0e      	ldr	r2, [pc, #56]	; (800e738 <prvCheckForValidListAndQueue+0x58>)
 800e700:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e702:	4b10      	ldr	r3, [pc, #64]	; (800e744 <prvCheckForValidListAndQueue+0x64>)
 800e704:	4a0d      	ldr	r2, [pc, #52]	; (800e73c <prvCheckForValidListAndQueue+0x5c>)
 800e706:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e708:	2200      	movs	r2, #0
 800e70a:	210c      	movs	r1, #12
 800e70c:	200a      	movs	r0, #10
 800e70e:	f7fd fd8b 	bl	800c228 <xQueueGenericCreate>
 800e712:	4603      	mov	r3, r0
 800e714:	4a07      	ldr	r2, [pc, #28]	; (800e734 <prvCheckForValidListAndQueue+0x54>)
 800e716:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e718:	4b06      	ldr	r3, [pc, #24]	; (800e734 <prvCheckForValidListAndQueue+0x54>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d005      	beq.n	800e72c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e720:	4b04      	ldr	r3, [pc, #16]	; (800e734 <prvCheckForValidListAndQueue+0x54>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4908      	ldr	r1, [pc, #32]	; (800e748 <prvCheckForValidListAndQueue+0x68>)
 800e726:	4618      	mov	r0, r3
 800e728:	f7fe fca2 	bl	800d070 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e72c:	f000 f96a 	bl	800ea04 <vPortExitCritical>
}
 800e730:	bf00      	nop
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20005660 	.word	0x20005660
 800e738:	20005630 	.word	0x20005630
 800e73c:	20005644 	.word	0x20005644
 800e740:	20005658 	.word	0x20005658
 800e744:	2000565c 	.word	0x2000565c
 800e748:	0801d190 	.word	0x0801d190

0800e74c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3b04      	subs	r3, #4
 800e75c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	3b04      	subs	r3, #4
 800e76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	f023 0201 	bic.w	r2, r3, #1
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3b04      	subs	r3, #4
 800e77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e77c:	4a0c      	ldr	r2, [pc, #48]	; (800e7b0 <pxPortInitialiseStack+0x64>)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	3b14      	subs	r3, #20
 800e786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	3b04      	subs	r3, #4
 800e792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f06f 0202 	mvn.w	r2, #2
 800e79a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	3b20      	subs	r3, #32
 800e7a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	0800e7b5 	.word	0x0800e7b5

0800e7b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7be:	4b12      	ldr	r3, [pc, #72]	; (800e808 <prvTaskExitError+0x54>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c6:	d00a      	beq.n	800e7de <prvTaskExitError+0x2a>
	__asm volatile
 800e7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	60fb      	str	r3, [r7, #12]
}
 800e7da:	bf00      	nop
 800e7dc:	e7fe      	b.n	800e7dc <prvTaskExitError+0x28>
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	60bb      	str	r3, [r7, #8]
}
 800e7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7f2:	bf00      	nop
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d0fc      	beq.n	800e7f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7fa:	bf00      	nop
 800e7fc:	bf00      	nop
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	20000034 	.word	0x20000034
 800e80c:	00000000 	.word	0x00000000

0800e810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e810:	4b07      	ldr	r3, [pc, #28]	; (800e830 <pxCurrentTCBConst2>)
 800e812:	6819      	ldr	r1, [r3, #0]
 800e814:	6808      	ldr	r0, [r1, #0]
 800e816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81a:	f380 8809 	msr	PSP, r0
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f04f 0000 	mov.w	r0, #0
 800e826:	f380 8811 	msr	BASEPRI, r0
 800e82a:	4770      	bx	lr
 800e82c:	f3af 8000 	nop.w

0800e830 <pxCurrentTCBConst2>:
 800e830:	20005504 	.word	0x20005504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e834:	bf00      	nop
 800e836:	bf00      	nop

0800e838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e838:	4808      	ldr	r0, [pc, #32]	; (800e85c <prvPortStartFirstTask+0x24>)
 800e83a:	6800      	ldr	r0, [r0, #0]
 800e83c:	6800      	ldr	r0, [r0, #0]
 800e83e:	f380 8808 	msr	MSP, r0
 800e842:	f04f 0000 	mov.w	r0, #0
 800e846:	f380 8814 	msr	CONTROL, r0
 800e84a:	b662      	cpsie	i
 800e84c:	b661      	cpsie	f
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	df00      	svc	0
 800e858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e85a:	bf00      	nop
 800e85c:	e000ed08 	.word	0xe000ed08

0800e860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b086      	sub	sp, #24
 800e864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e866:	4b46      	ldr	r3, [pc, #280]	; (800e980 <xPortStartScheduler+0x120>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a46      	ldr	r2, [pc, #280]	; (800e984 <xPortStartScheduler+0x124>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d10a      	bne.n	800e886 <xPortStartScheduler+0x26>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	613b      	str	r3, [r7, #16]
}
 800e882:	bf00      	nop
 800e884:	e7fe      	b.n	800e884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e886:	4b3e      	ldr	r3, [pc, #248]	; (800e980 <xPortStartScheduler+0x120>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a3f      	ldr	r2, [pc, #252]	; (800e988 <xPortStartScheduler+0x128>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d10a      	bne.n	800e8a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e894:	f383 8811 	msr	BASEPRI, r3
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	60fb      	str	r3, [r7, #12]
}
 800e8a2:	bf00      	nop
 800e8a4:	e7fe      	b.n	800e8a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8a6:	4b39      	ldr	r3, [pc, #228]	; (800e98c <xPortStartScheduler+0x12c>)
 800e8a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	22ff      	movs	r2, #255	; 0xff
 800e8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8c0:	78fb      	ldrb	r3, [r7, #3]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	4b31      	ldr	r3, [pc, #196]	; (800e990 <xPortStartScheduler+0x130>)
 800e8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8ce:	4b31      	ldr	r3, [pc, #196]	; (800e994 <xPortStartScheduler+0x134>)
 800e8d0:	2207      	movs	r2, #7
 800e8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8d4:	e009      	b.n	800e8ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e8d6:	4b2f      	ldr	r3, [pc, #188]	; (800e994 <xPortStartScheduler+0x134>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	4a2d      	ldr	r2, [pc, #180]	; (800e994 <xPortStartScheduler+0x134>)
 800e8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8ea:	78fb      	ldrb	r3, [r7, #3]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8f2:	2b80      	cmp	r3, #128	; 0x80
 800e8f4:	d0ef      	beq.n	800e8d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8f6:	4b27      	ldr	r3, [pc, #156]	; (800e994 <xPortStartScheduler+0x134>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f1c3 0307 	rsb	r3, r3, #7
 800e8fe:	2b04      	cmp	r3, #4
 800e900:	d00a      	beq.n	800e918 <xPortStartScheduler+0xb8>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60bb      	str	r3, [r7, #8]
}
 800e914:	bf00      	nop
 800e916:	e7fe      	b.n	800e916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e918:	4b1e      	ldr	r3, [pc, #120]	; (800e994 <xPortStartScheduler+0x134>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	021b      	lsls	r3, r3, #8
 800e91e:	4a1d      	ldr	r2, [pc, #116]	; (800e994 <xPortStartScheduler+0x134>)
 800e920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e922:	4b1c      	ldr	r3, [pc, #112]	; (800e994 <xPortStartScheduler+0x134>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e92a:	4a1a      	ldr	r2, [pc, #104]	; (800e994 <xPortStartScheduler+0x134>)
 800e92c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	b2da      	uxtb	r2, r3
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e936:	4b18      	ldr	r3, [pc, #96]	; (800e998 <xPortStartScheduler+0x138>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a17      	ldr	r2, [pc, #92]	; (800e998 <xPortStartScheduler+0x138>)
 800e93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e942:	4b15      	ldr	r3, [pc, #84]	; (800e998 <xPortStartScheduler+0x138>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a14      	ldr	r2, [pc, #80]	; (800e998 <xPortStartScheduler+0x138>)
 800e948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e94c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e94e:	f000 f8dd 	bl	800eb0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e952:	4b12      	ldr	r3, [pc, #72]	; (800e99c <xPortStartScheduler+0x13c>)
 800e954:	2200      	movs	r2, #0
 800e956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e958:	f000 f8fc 	bl	800eb54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e95c:	4b10      	ldr	r3, [pc, #64]	; (800e9a0 <xPortStartScheduler+0x140>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a0f      	ldr	r2, [pc, #60]	; (800e9a0 <xPortStartScheduler+0x140>)
 800e962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e968:	f7ff ff66 	bl	800e838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e96c:	f7fe ff16 	bl	800d79c <vTaskSwitchContext>
	prvTaskExitError();
 800e970:	f7ff ff20 	bl	800e7b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3718      	adds	r7, #24
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	e000ed00 	.word	0xe000ed00
 800e984:	410fc271 	.word	0x410fc271
 800e988:	410fc270 	.word	0x410fc270
 800e98c:	e000e400 	.word	0xe000e400
 800e990:	2000566c 	.word	0x2000566c
 800e994:	20005670 	.word	0x20005670
 800e998:	e000ed20 	.word	0xe000ed20
 800e99c:	20000034 	.word	0x20000034
 800e9a0:	e000ef34 	.word	0xe000ef34

0800e9a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	607b      	str	r3, [r7, #4]
}
 800e9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9be:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <vPortEnterCritical+0x58>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	4a0d      	ldr	r2, [pc, #52]	; (800e9fc <vPortEnterCritical+0x58>)
 800e9c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9c8:	4b0c      	ldr	r3, [pc, #48]	; (800e9fc <vPortEnterCritical+0x58>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d10f      	bne.n	800e9f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ea00 <vPortEnterCritical+0x5c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00a      	beq.n	800e9f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	603b      	str	r3, [r7, #0]
}
 800e9ec:	bf00      	nop
 800e9ee:	e7fe      	b.n	800e9ee <vPortEnterCritical+0x4a>
	}
}
 800e9f0:	bf00      	nop
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	20000034 	.word	0x20000034
 800ea00:	e000ed04 	.word	0xe000ed04

0800ea04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea0a:	4b12      	ldr	r3, [pc, #72]	; (800ea54 <vPortExitCritical+0x50>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10a      	bne.n	800ea28 <vPortExitCritical+0x24>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	607b      	str	r3, [r7, #4]
}
 800ea24:	bf00      	nop
 800ea26:	e7fe      	b.n	800ea26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ea28:	4b0a      	ldr	r3, [pc, #40]	; (800ea54 <vPortExitCritical+0x50>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	4a09      	ldr	r2, [pc, #36]	; (800ea54 <vPortExitCritical+0x50>)
 800ea30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea32:	4b08      	ldr	r3, [pc, #32]	; (800ea54 <vPortExitCritical+0x50>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d105      	bne.n	800ea46 <vPortExitCritical+0x42>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	f383 8811 	msr	BASEPRI, r3
}
 800ea44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea46:	bf00      	nop
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20000034 	.word	0x20000034
	...

0800ea60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea60:	f3ef 8009 	mrs	r0, PSP
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	4b15      	ldr	r3, [pc, #84]	; (800eac0 <pxCurrentTCBConst>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	f01e 0f10 	tst.w	lr, #16
 800ea70:	bf08      	it	eq
 800ea72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7a:	6010      	str	r0, [r2, #0]
 800ea7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea84:	f380 8811 	msr	BASEPRI, r0
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f7fe fe84 	bl	800d79c <vTaskSwitchContext>
 800ea94:	f04f 0000 	mov.w	r0, #0
 800ea98:	f380 8811 	msr	BASEPRI, r0
 800ea9c:	bc09      	pop	{r0, r3}
 800ea9e:	6819      	ldr	r1, [r3, #0]
 800eaa0:	6808      	ldr	r0, [r1, #0]
 800eaa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa6:	f01e 0f10 	tst.w	lr, #16
 800eaaa:	bf08      	it	eq
 800eaac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eab0:	f380 8809 	msr	PSP, r0
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst>:
 800eac0:	20005504 	.word	0x20005504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	607b      	str	r3, [r7, #4]
}
 800eae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eae2:	f7fe fda3 	bl	800d62c <xTaskIncrementTick>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d003      	beq.n	800eaf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaec:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <SysTick_Handler+0x40>)
 800eaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	f383 8811 	msr	BASEPRI, r3
}
 800eafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb00:	bf00      	nop
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	e000ed04 	.word	0xe000ed04

0800eb0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb10:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <vPortSetupTimerInterrupt+0x34>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb16:	4b0b      	ldr	r3, [pc, #44]	; (800eb44 <vPortSetupTimerInterrupt+0x38>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb1c:	4b0a      	ldr	r3, [pc, #40]	; (800eb48 <vPortSetupTimerInterrupt+0x3c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a0a      	ldr	r2, [pc, #40]	; (800eb4c <vPortSetupTimerInterrupt+0x40>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	099b      	lsrs	r3, r3, #6
 800eb28:	4a09      	ldr	r2, [pc, #36]	; (800eb50 <vPortSetupTimerInterrupt+0x44>)
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb2e:	4b04      	ldr	r3, [pc, #16]	; (800eb40 <vPortSetupTimerInterrupt+0x34>)
 800eb30:	2207      	movs	r2, #7
 800eb32:	601a      	str	r2, [r3, #0]
}
 800eb34:	bf00      	nop
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	e000e010 	.word	0xe000e010
 800eb44:	e000e018 	.word	0xe000e018
 800eb48:	20000004 	.word	0x20000004
 800eb4c:	10624dd3 	.word	0x10624dd3
 800eb50:	e000e014 	.word	0xe000e014

0800eb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb64 <vPortEnableVFP+0x10>
 800eb58:	6801      	ldr	r1, [r0, #0]
 800eb5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb5e:	6001      	str	r1, [r0, #0]
 800eb60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb62:	bf00      	nop
 800eb64:	e000ed88 	.word	0xe000ed88

0800eb68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb6e:	f3ef 8305 	mrs	r3, IPSR
 800eb72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2b0f      	cmp	r3, #15
 800eb78:	d914      	bls.n	800eba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb7a:	4a17      	ldr	r2, [pc, #92]	; (800ebd8 <vPortValidateInterruptPriority+0x70>)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	4413      	add	r3, r2
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb84:	4b15      	ldr	r3, [pc, #84]	; (800ebdc <vPortValidateInterruptPriority+0x74>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	7afa      	ldrb	r2, [r7, #11]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d20a      	bcs.n	800eba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	607b      	str	r3, [r7, #4]
}
 800eba0:	bf00      	nop
 800eba2:	e7fe      	b.n	800eba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eba4:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <vPortValidateInterruptPriority+0x78>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ebac:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <vPortValidateInterruptPriority+0x7c>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d90a      	bls.n	800ebca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	603b      	str	r3, [r7, #0]
}
 800ebc6:	bf00      	nop
 800ebc8:	e7fe      	b.n	800ebc8 <vPortValidateInterruptPriority+0x60>
	}
 800ebca:	bf00      	nop
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	e000e3f0 	.word	0xe000e3f0
 800ebdc:	2000566c 	.word	0x2000566c
 800ebe0:	e000ed0c 	.word	0xe000ed0c
 800ebe4:	20005670 	.word	0x20005670

0800ebe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08a      	sub	sp, #40	; 0x28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebf4:	f7fe fc4e 	bl	800d494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebf8:	4b5b      	ldr	r3, [pc, #364]	; (800ed68 <pvPortMalloc+0x180>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec00:	f000 f920 	bl	800ee44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec04:	4b59      	ldr	r3, [pc, #356]	; (800ed6c <pvPortMalloc+0x184>)
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f040 8093 	bne.w	800ed38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d01d      	beq.n	800ec54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ec18:	2208      	movs	r2, #8
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d014      	beq.n	800ec54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f023 0307 	bic.w	r3, r3, #7
 800ec30:	3308      	adds	r3, #8
 800ec32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f003 0307 	and.w	r3, r3, #7
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00a      	beq.n	800ec54 <pvPortMalloc+0x6c>
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	617b      	str	r3, [r7, #20]
}
 800ec50:	bf00      	nop
 800ec52:	e7fe      	b.n	800ec52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d06e      	beq.n	800ed38 <pvPortMalloc+0x150>
 800ec5a:	4b45      	ldr	r3, [pc, #276]	; (800ed70 <pvPortMalloc+0x188>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d869      	bhi.n	800ed38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec64:	4b43      	ldr	r3, [pc, #268]	; (800ed74 <pvPortMalloc+0x18c>)
 800ec66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec68:	4b42      	ldr	r3, [pc, #264]	; (800ed74 <pvPortMalloc+0x18c>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec6e:	e004      	b.n	800ec7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d903      	bls.n	800ec8c <pvPortMalloc+0xa4>
 800ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1f1      	bne.n	800ec70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec8c:	4b36      	ldr	r3, [pc, #216]	; (800ed68 <pvPortMalloc+0x180>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d050      	beq.n	800ed38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2208      	movs	r2, #8
 800ec9c:	4413      	add	r3, r2
 800ec9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	1ad2      	subs	r2, r2, r3
 800ecb0:	2308      	movs	r3, #8
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d91f      	bls.n	800ecf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ecb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	f003 0307 	and.w	r3, r3, #7
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00a      	beq.n	800ece0 <pvPortMalloc+0xf8>
	__asm volatile
 800ecca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecce:	f383 8811 	msr	BASEPRI, r3
 800ecd2:	f3bf 8f6f 	isb	sy
 800ecd6:	f3bf 8f4f 	dsb	sy
 800ecda:	613b      	str	r3, [r7, #16]
}
 800ecdc:	bf00      	nop
 800ecde:	e7fe      	b.n	800ecde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	685a      	ldr	r2, [r3, #4]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	1ad2      	subs	r2, r2, r3
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecf2:	69b8      	ldr	r0, [r7, #24]
 800ecf4:	f000 f908 	bl	800ef08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecf8:	4b1d      	ldr	r3, [pc, #116]	; (800ed70 <pvPortMalloc+0x188>)
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	4a1b      	ldr	r2, [pc, #108]	; (800ed70 <pvPortMalloc+0x188>)
 800ed04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed06:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <pvPortMalloc+0x188>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	4b1b      	ldr	r3, [pc, #108]	; (800ed78 <pvPortMalloc+0x190>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d203      	bcs.n	800ed1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed12:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <pvPortMalloc+0x188>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a18      	ldr	r2, [pc, #96]	; (800ed78 <pvPortMalloc+0x190>)
 800ed18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	685a      	ldr	r2, [r3, #4]
 800ed1e:	4b13      	ldr	r3, [pc, #76]	; (800ed6c <pvPortMalloc+0x184>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	431a      	orrs	r2, r3
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ed2e:	4b13      	ldr	r3, [pc, #76]	; (800ed7c <pvPortMalloc+0x194>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3301      	adds	r3, #1
 800ed34:	4a11      	ldr	r2, [pc, #68]	; (800ed7c <pvPortMalloc+0x194>)
 800ed36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed38:	f7fe fbba 	bl	800d4b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	f003 0307 	and.w	r3, r3, #7
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00a      	beq.n	800ed5c <pvPortMalloc+0x174>
	__asm volatile
 800ed46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4a:	f383 8811 	msr	BASEPRI, r3
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	60fb      	str	r3, [r7, #12]
}
 800ed58:	bf00      	nop
 800ed5a:	e7fe      	b.n	800ed5a <pvPortMalloc+0x172>
	return pvReturn;
 800ed5c:	69fb      	ldr	r3, [r7, #28]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3728      	adds	r7, #40	; 0x28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	2000927c 	.word	0x2000927c
 800ed6c:	20009290 	.word	0x20009290
 800ed70:	20009280 	.word	0x20009280
 800ed74:	20009274 	.word	0x20009274
 800ed78:	20009284 	.word	0x20009284
 800ed7c:	20009288 	.word	0x20009288

0800ed80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d04d      	beq.n	800ee2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed92:	2308      	movs	r3, #8
 800ed94:	425b      	negs	r3, r3
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	4413      	add	r3, r2
 800ed9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	685a      	ldr	r2, [r3, #4]
 800eda4:	4b24      	ldr	r3, [pc, #144]	; (800ee38 <vPortFree+0xb8>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4013      	ands	r3, r2
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10a      	bne.n	800edc4 <vPortFree+0x44>
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	60fb      	str	r3, [r7, #12]
}
 800edc0:	bf00      	nop
 800edc2:	e7fe      	b.n	800edc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00a      	beq.n	800ede2 <vPortFree+0x62>
	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd0:	f383 8811 	msr	BASEPRI, r3
 800edd4:	f3bf 8f6f 	isb	sy
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	60bb      	str	r3, [r7, #8]
}
 800edde:	bf00      	nop
 800ede0:	e7fe      	b.n	800ede0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	4b14      	ldr	r3, [pc, #80]	; (800ee38 <vPortFree+0xb8>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4013      	ands	r3, r2
 800edec:	2b00      	cmp	r3, #0
 800edee:	d01e      	beq.n	800ee2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d11a      	bne.n	800ee2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	685a      	ldr	r2, [r3, #4]
 800edfc:	4b0e      	ldr	r3, [pc, #56]	; (800ee38 <vPortFree+0xb8>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	43db      	mvns	r3, r3
 800ee02:	401a      	ands	r2, r3
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee08:	f7fe fb44 	bl	800d494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	685a      	ldr	r2, [r3, #4]
 800ee10:	4b0a      	ldr	r3, [pc, #40]	; (800ee3c <vPortFree+0xbc>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4413      	add	r3, r2
 800ee16:	4a09      	ldr	r2, [pc, #36]	; (800ee3c <vPortFree+0xbc>)
 800ee18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee1a:	6938      	ldr	r0, [r7, #16]
 800ee1c:	f000 f874 	bl	800ef08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ee20:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <vPortFree+0xc0>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	4a06      	ldr	r2, [pc, #24]	; (800ee40 <vPortFree+0xc0>)
 800ee28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ee2a:	f7fe fb41 	bl	800d4b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee2e:	bf00      	nop
 800ee30:	3718      	adds	r7, #24
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	20009290 	.word	0x20009290
 800ee3c:	20009280 	.word	0x20009280
 800ee40:	2000928c 	.word	0x2000928c

0800ee44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ee4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee50:	4b27      	ldr	r3, [pc, #156]	; (800eef0 <prvHeapInit+0xac>)
 800ee52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f003 0307 	and.w	r3, r3, #7
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00c      	beq.n	800ee78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3307      	adds	r3, #7
 800ee62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0307 	bic.w	r3, r3, #7
 800ee6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	4a1f      	ldr	r2, [pc, #124]	; (800eef0 <prvHeapInit+0xac>)
 800ee74:	4413      	add	r3, r2
 800ee76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee7c:	4a1d      	ldr	r2, [pc, #116]	; (800eef4 <prvHeapInit+0xb0>)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee82:	4b1c      	ldr	r3, [pc, #112]	; (800eef4 <prvHeapInit+0xb0>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68ba      	ldr	r2, [r7, #8]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee90:	2208      	movs	r2, #8
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	1a9b      	subs	r3, r3, r2
 800ee96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f023 0307 	bic.w	r3, r3, #7
 800ee9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4a15      	ldr	r2, [pc, #84]	; (800eef8 <prvHeapInit+0xb4>)
 800eea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eea6:	4b14      	ldr	r3, [pc, #80]	; (800eef8 <prvHeapInit+0xb4>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eeae:	4b12      	ldr	r3, [pc, #72]	; (800eef8 <prvHeapInit+0xb4>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	1ad2      	subs	r2, r2, r3
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eec4:	4b0c      	ldr	r3, [pc, #48]	; (800eef8 <prvHeapInit+0xb4>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	4a0a      	ldr	r2, [pc, #40]	; (800eefc <prvHeapInit+0xb8>)
 800eed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	4a09      	ldr	r2, [pc, #36]	; (800ef00 <prvHeapInit+0xbc>)
 800eeda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <prvHeapInit+0xc0>)
 800eede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eee2:	601a      	str	r2, [r3, #0]
}
 800eee4:	bf00      	nop
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr
 800eef0:	20005674 	.word	0x20005674
 800eef4:	20009274 	.word	0x20009274
 800eef8:	2000927c 	.word	0x2000927c
 800eefc:	20009284 	.word	0x20009284
 800ef00:	20009280 	.word	0x20009280
 800ef04:	20009290 	.word	0x20009290

0800ef08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef10:	4b28      	ldr	r3, [pc, #160]	; (800efb4 <prvInsertBlockIntoFreeList+0xac>)
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	e002      	b.n	800ef1c <prvInsertBlockIntoFreeList+0x14>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d8f7      	bhi.n	800ef16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	4413      	add	r3, r2
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d108      	bne.n	800ef4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	685a      	ldr	r2, [r3, #4]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	441a      	add	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	68ba      	ldr	r2, [r7, #8]
 800ef54:	441a      	add	r2, r3
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d118      	bne.n	800ef90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	4b15      	ldr	r3, [pc, #84]	; (800efb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d00d      	beq.n	800ef86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	685a      	ldr	r2, [r3, #4]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	441a      	add	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	601a      	str	r2, [r3, #0]
 800ef84:	e008      	b.n	800ef98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef86:	4b0c      	ldr	r3, [pc, #48]	; (800efb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	e003      	b.n	800ef98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d002      	beq.n	800efa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efa6:	bf00      	nop
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	20009274 	.word	0x20009274
 800efb8:	2000927c 	.word	0x2000927c

0800efbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800efc6:	f007 ff15 	bl	8016df4 <sys_timeouts_sleeptime>
 800efca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd2:	d10b      	bne.n	800efec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800efd4:	4813      	ldr	r0, [pc, #76]	; (800f024 <tcpip_timeouts_mbox_fetch+0x68>)
 800efd6:	f00a ff3c 	bl	8019e52 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800efda:	2200      	movs	r2, #0
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f00a feb0 	bl	8019d44 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800efe4:	480f      	ldr	r0, [pc, #60]	; (800f024 <tcpip_timeouts_mbox_fetch+0x68>)
 800efe6:	f00a ff25 	bl	8019e34 <sys_mutex_lock>
    return;
 800efea:	e018      	b.n	800f01e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d102      	bne.n	800eff8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800eff2:	f007 fec5 	bl	8016d80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eff6:	e7e6      	b.n	800efc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800eff8:	480a      	ldr	r0, [pc, #40]	; (800f024 <tcpip_timeouts_mbox_fetch+0x68>)
 800effa:	f00a ff2a 	bl	8019e52 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f00a fe9e 	bl	8019d44 <sys_arch_mbox_fetch>
 800f008:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f00a:	4806      	ldr	r0, [pc, #24]	; (800f024 <tcpip_timeouts_mbox_fetch+0x68>)
 800f00c:	f00a ff12 	bl	8019e34 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f016:	d102      	bne.n	800f01e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f018:	f007 feb2 	bl	8016d80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f01c:	e7d3      	b.n	800efc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	200092a0 	.word	0x200092a0

0800f028 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f030:	4810      	ldr	r0, [pc, #64]	; (800f074 <tcpip_thread+0x4c>)
 800f032:	f00a feff 	bl	8019e34 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f036:	4b10      	ldr	r3, [pc, #64]	; (800f078 <tcpip_thread+0x50>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d005      	beq.n	800f04a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f03e:	4b0e      	ldr	r3, [pc, #56]	; (800f078 <tcpip_thread+0x50>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4a0e      	ldr	r2, [pc, #56]	; (800f07c <tcpip_thread+0x54>)
 800f044:	6812      	ldr	r2, [r2, #0]
 800f046:	4610      	mov	r0, r2
 800f048:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f04a:	f107 030c 	add.w	r3, r7, #12
 800f04e:	4619      	mov	r1, r3
 800f050:	480b      	ldr	r0, [pc, #44]	; (800f080 <tcpip_thread+0x58>)
 800f052:	f7ff ffb3 	bl	800efbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d106      	bne.n	800f06a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f05c:	4b09      	ldr	r3, [pc, #36]	; (800f084 <tcpip_thread+0x5c>)
 800f05e:	2291      	movs	r2, #145	; 0x91
 800f060:	4909      	ldr	r1, [pc, #36]	; (800f088 <tcpip_thread+0x60>)
 800f062:	480a      	ldr	r0, [pc, #40]	; (800f08c <tcpip_thread+0x64>)
 800f064:	f00b fd34 	bl	801aad0 <iprintf>
      continue;
 800f068:	e003      	b.n	800f072 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f000 f80f 	bl	800f090 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f072:	e7ea      	b.n	800f04a <tcpip_thread+0x22>
 800f074:	200092a0 	.word	0x200092a0
 800f078:	20009294 	.word	0x20009294
 800f07c:	20009298 	.word	0x20009298
 800f080:	2000929c 	.word	0x2000929c
 800f084:	0801d198 	.word	0x0801d198
 800f088:	0801d1c8 	.word	0x0801d1c8
 800f08c:	0801d1e8 	.word	0x0801d1e8

0800f090 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d026      	beq.n	800f0ee <tcpip_thread_handle_msg+0x5e>
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	dc2b      	bgt.n	800f0fc <tcpip_thread_handle_msg+0x6c>
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <tcpip_thread_handle_msg+0x1e>
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d015      	beq.n	800f0d8 <tcpip_thread_handle_msg+0x48>
 800f0ac:	e026      	b.n	800f0fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	6850      	ldr	r0, [r2, #4]
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	6892      	ldr	r2, [r2, #8]
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4798      	blx	r3
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d004      	beq.n	800f0ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f001 fff1 	bl	80110b0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f0ce:	6879      	ldr	r1, [r7, #4]
 800f0d0:	2009      	movs	r0, #9
 800f0d2:	f001 f92d 	bl	8010330 <memp_free>
      break;
 800f0d6:	e018      	b.n	800f10a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	6892      	ldr	r2, [r2, #8]
 800f0e0:	4610      	mov	r0, r2
 800f0e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	2008      	movs	r0, #8
 800f0e8:	f001 f922 	bl	8010330 <memp_free>
      break;
 800f0ec:	e00d      	b.n	800f10a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	6892      	ldr	r2, [r2, #8]
 800f0f6:	4610      	mov	r0, r2
 800f0f8:	4798      	blx	r3
      break;
 800f0fa:	e006      	b.n	800f10a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f0fc:	4b05      	ldr	r3, [pc, #20]	; (800f114 <tcpip_thread_handle_msg+0x84>)
 800f0fe:	22cf      	movs	r2, #207	; 0xcf
 800f100:	4905      	ldr	r1, [pc, #20]	; (800f118 <tcpip_thread_handle_msg+0x88>)
 800f102:	4806      	ldr	r0, [pc, #24]	; (800f11c <tcpip_thread_handle_msg+0x8c>)
 800f104:	f00b fce4 	bl	801aad0 <iprintf>
      break;
 800f108:	bf00      	nop
  }
}
 800f10a:	bf00      	nop
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	0801d198 	.word	0x0801d198
 800f118:	0801d1c8 	.word	0x0801d1c8
 800f11c:	0801d1e8 	.word	0x0801d1e8

0800f120 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f12c:	481a      	ldr	r0, [pc, #104]	; (800f198 <tcpip_inpkt+0x78>)
 800f12e:	f00a fe48 	bl	8019dc2 <sys_mbox_valid>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d105      	bne.n	800f144 <tcpip_inpkt+0x24>
 800f138:	4b18      	ldr	r3, [pc, #96]	; (800f19c <tcpip_inpkt+0x7c>)
 800f13a:	22fc      	movs	r2, #252	; 0xfc
 800f13c:	4918      	ldr	r1, [pc, #96]	; (800f1a0 <tcpip_inpkt+0x80>)
 800f13e:	4819      	ldr	r0, [pc, #100]	; (800f1a4 <tcpip_inpkt+0x84>)
 800f140:	f00b fcc6 	bl	801aad0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f144:	2009      	movs	r0, #9
 800f146:	f001 f87d 	bl	8010244 <memp_malloc>
 800f14a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d102      	bne.n	800f158 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f152:	f04f 33ff 	mov.w	r3, #4294967295
 800f156:	e01a      	b.n	800f18e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	2200      	movs	r2, #0
 800f15c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f170:	6979      	ldr	r1, [r7, #20]
 800f172:	4809      	ldr	r0, [pc, #36]	; (800f198 <tcpip_inpkt+0x78>)
 800f174:	f00a fdcc 	bl	8019d10 <sys_mbox_trypost>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d006      	beq.n	800f18c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f17e:	6979      	ldr	r1, [r7, #20]
 800f180:	2009      	movs	r0, #9
 800f182:	f001 f8d5 	bl	8010330 <memp_free>
    return ERR_MEM;
 800f186:	f04f 33ff 	mov.w	r3, #4294967295
 800f18a:	e000      	b.n	800f18e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f18c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3718      	adds	r7, #24
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	2000929c 	.word	0x2000929c
 800f19c:	0801d198 	.word	0x0801d198
 800f1a0:	0801d210 	.word	0x0801d210
 800f1a4:	0801d1e8 	.word	0x0801d1e8

0800f1a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f1b8:	f003 0318 	and.w	r3, r3, #24
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d006      	beq.n	800f1ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f1c0:	4a08      	ldr	r2, [pc, #32]	; (800f1e4 <tcpip_input+0x3c>)
 800f1c2:	6839      	ldr	r1, [r7, #0]
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff ffab 	bl	800f120 <tcpip_inpkt>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	e005      	b.n	800f1da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f1ce:	4a06      	ldr	r2, [pc, #24]	; (800f1e8 <tcpip_input+0x40>)
 800f1d0:	6839      	ldr	r1, [r7, #0]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff ffa4 	bl	800f120 <tcpip_inpkt>
 800f1d8:	4603      	mov	r3, r0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	08019b29 	.word	0x08019b29
 800f1e8:	08018a31 	.word	0x08018a31

0800f1ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f1f6:	4819      	ldr	r0, [pc, #100]	; (800f25c <tcpip_try_callback+0x70>)
 800f1f8:	f00a fde3 	bl	8019dc2 <sys_mbox_valid>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d106      	bne.n	800f210 <tcpip_try_callback+0x24>
 800f202:	4b17      	ldr	r3, [pc, #92]	; (800f260 <tcpip_try_callback+0x74>)
 800f204:	f240 125d 	movw	r2, #349	; 0x15d
 800f208:	4916      	ldr	r1, [pc, #88]	; (800f264 <tcpip_try_callback+0x78>)
 800f20a:	4817      	ldr	r0, [pc, #92]	; (800f268 <tcpip_try_callback+0x7c>)
 800f20c:	f00b fc60 	bl	801aad0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f210:	2008      	movs	r0, #8
 800f212:	f001 f817 	bl	8010244 <memp_malloc>
 800f216:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d102      	bne.n	800f224 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f21e:	f04f 33ff 	mov.w	r3, #4294967295
 800f222:	e017      	b.n	800f254 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2201      	movs	r2, #1
 800f228:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f236:	68f9      	ldr	r1, [r7, #12]
 800f238:	4808      	ldr	r0, [pc, #32]	; (800f25c <tcpip_try_callback+0x70>)
 800f23a:	f00a fd69 	bl	8019d10 <sys_mbox_trypost>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d006      	beq.n	800f252 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f244:	68f9      	ldr	r1, [r7, #12]
 800f246:	2008      	movs	r0, #8
 800f248:	f001 f872 	bl	8010330 <memp_free>
    return ERR_MEM;
 800f24c:	f04f 33ff 	mov.w	r3, #4294967295
 800f250:	e000      	b.n	800f254 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f252:	2300      	movs	r3, #0
}
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	2000929c 	.word	0x2000929c
 800f260:	0801d198 	.word	0x0801d198
 800f264:	0801d210 	.word	0x0801d210
 800f268:	0801d1e8 	.word	0x0801d1e8

0800f26c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af02      	add	r7, sp, #8
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f276:	f000 fb3a 	bl	800f8ee <lwip_init>

  tcpip_init_done = initfunc;
 800f27a:	4a17      	ldr	r2, [pc, #92]	; (800f2d8 <tcpip_init+0x6c>)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f280:	4a16      	ldr	r2, [pc, #88]	; (800f2dc <tcpip_init+0x70>)
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f286:	2106      	movs	r1, #6
 800f288:	4815      	ldr	r0, [pc, #84]	; (800f2e0 <tcpip_init+0x74>)
 800f28a:	f00a fd23 	bl	8019cd4 <sys_mbox_new>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d006      	beq.n	800f2a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f294:	4b13      	ldr	r3, [pc, #76]	; (800f2e4 <tcpip_init+0x78>)
 800f296:	f240 2261 	movw	r2, #609	; 0x261
 800f29a:	4913      	ldr	r1, [pc, #76]	; (800f2e8 <tcpip_init+0x7c>)
 800f29c:	4813      	ldr	r0, [pc, #76]	; (800f2ec <tcpip_init+0x80>)
 800f29e:	f00b fc17 	bl	801aad0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f2a2:	4813      	ldr	r0, [pc, #76]	; (800f2f0 <tcpip_init+0x84>)
 800f2a4:	f00a fdac 	bl	8019e00 <sys_mutex_new>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d006      	beq.n	800f2bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f2ae:	4b0d      	ldr	r3, [pc, #52]	; (800f2e4 <tcpip_init+0x78>)
 800f2b0:	f240 2265 	movw	r2, #613	; 0x265
 800f2b4:	490f      	ldr	r1, [pc, #60]	; (800f2f4 <tcpip_init+0x88>)
 800f2b6:	480d      	ldr	r0, [pc, #52]	; (800f2ec <tcpip_init+0x80>)
 800f2b8:	f00b fc0a 	bl	801aad0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f2bc:	2300      	movs	r3, #0
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	490c      	ldr	r1, [pc, #48]	; (800f2f8 <tcpip_init+0x8c>)
 800f2c8:	480c      	ldr	r0, [pc, #48]	; (800f2fc <tcpip_init+0x90>)
 800f2ca:	f00a fdcf 	bl	8019e6c <sys_thread_new>
}
 800f2ce:	bf00      	nop
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20009294 	.word	0x20009294
 800f2dc:	20009298 	.word	0x20009298
 800f2e0:	2000929c 	.word	0x2000929c
 800f2e4:	0801d198 	.word	0x0801d198
 800f2e8:	0801d220 	.word	0x0801d220
 800f2ec:	0801d1e8 	.word	0x0801d1e8
 800f2f0:	200092a0 	.word	0x200092a0
 800f2f4:	0801d244 	.word	0x0801d244
 800f2f8:	0800f029 	.word	0x0800f029
 800f2fc:	0801d268 	.word	0x0801d268

0800f300 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	4603      	mov	r3, r0
 800f308:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f30a:	88fb      	ldrh	r3, [r7, #6]
 800f30c:	021b      	lsls	r3, r3, #8
 800f30e:	b21a      	sxth	r2, r3
 800f310:	88fb      	ldrh	r3, [r7, #6]
 800f312:	0a1b      	lsrs	r3, r3, #8
 800f314:	b29b      	uxth	r3, r3
 800f316:	b21b      	sxth	r3, r3
 800f318:	4313      	orrs	r3, r2
 800f31a:	b21b      	sxth	r3, r3
 800f31c:	b29b      	uxth	r3, r3
}
 800f31e:	4618      	mov	r0, r3
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f32a:	b480      	push	{r7}
 800f32c:	b083      	sub	sp, #12
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	061a      	lsls	r2, r3, #24
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	021b      	lsls	r3, r3, #8
 800f33a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f33e:	431a      	orrs	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	0a1b      	lsrs	r3, r3, #8
 800f344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f348:	431a      	orrs	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	0e1b      	lsrs	r3, r3, #24
 800f34e:	4313      	orrs	r3, r2
}
 800f350:	4618      	mov	r0, r3
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f35c:	b480      	push	{r7}
 800f35e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f360:	bf00      	nop
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f36e:	f000 faa9 	bl	800f8c4 <dns_check_entries>
}
 800f372:	bf00      	nop
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b090      	sub	sp, #64	; 0x40
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4603      	mov	r3, r0
 800f380:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f382:	79fa      	ldrb	r2, [r7, #7]
 800f384:	4613      	mov	r3, r2
 800f386:	011b      	lsls	r3, r3, #4
 800f388:	4413      	add	r3, r2
 800f38a:	011b      	lsls	r3, r3, #4
 800f38c:	4a6c      	ldr	r2, [pc, #432]	; (800f540 <dns_send+0x1c8>)
 800f38e:	4413      	add	r3, r2
 800f390:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	7adb      	ldrb	r3, [r3, #11]
 800f396:	2b01      	cmp	r3, #1
 800f398:	d906      	bls.n	800f3a8 <dns_send+0x30>
 800f39a:	4b6a      	ldr	r3, [pc, #424]	; (800f544 <dns_send+0x1cc>)
 800f39c:	f240 22fa 	movw	r2, #762	; 0x2fa
 800f3a0:	4969      	ldr	r1, [pc, #420]	; (800f548 <dns_send+0x1d0>)
 800f3a2:	486a      	ldr	r0, [pc, #424]	; (800f54c <dns_send+0x1d4>)
 800f3a4:	f00b fb94 	bl	801aad0 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3aa:	7adb      	ldrb	r3, [r3, #11]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	4b68      	ldr	r3, [pc, #416]	; (800f550 <dns_send+0x1d8>)
 800f3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d109      	bne.n	800f3cc <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f3b8:	79fb      	ldrb	r3, [r7, #7]
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 f8cb 	bl	800f558 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e0b4      	b.n	800f536 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ce:	3310      	adds	r3, #16
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7f0 ff5d 	bl	8000290 <strlen>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	3312      	adds	r3, #18
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	2036      	movs	r0, #54	; 0x36
 800f3e6:	f001 fb7f 	bl	8010ae8 <pbuf_alloc>
 800f3ea:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 8095 	beq.w	800f51e <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f3f4:	f107 0310 	add.w	r3, r7, #16
 800f3f8:	220c      	movs	r2, #12
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f00b fc9b 	bl	801ad38 <memset>
    hdr.id = lwip_htons(entry->txid);
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	891b      	ldrh	r3, [r3, #8]
 800f406:	4618      	mov	r0, r3
 800f408:	f7ff ff7a 	bl	800f300 <lwip_htons>
 800f40c:	4603      	mov	r3, r0
 800f40e:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f410:	2301      	movs	r3, #1
 800f412:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f418:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f41a:	f107 0310 	add.w	r3, r7, #16
 800f41e:	220c      	movs	r2, #12
 800f420:	4619      	mov	r1, r3
 800f422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f424:	f002 f8f8 	bl	8011618 <pbuf_take>
    hostname = entry->name;
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42a:	3310      	adds	r3, #16
 800f42c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800f42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f430:	3b01      	subs	r3, #1
 800f432:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f434:	230c      	movs	r3, #12
 800f436:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	3301      	adds	r3, #1
 800f43c:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f442:	2300      	movs	r3, #0
 800f444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f448:	e007      	b.n	800f45a <dns_send+0xe2>
        ++n;
 800f44a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f44e:	3301      	adds	r3, #1
 800f450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	3301      	adds	r3, #1
 800f458:	63bb      	str	r3, [r7, #56]	; 0x38
 800f45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	2b2e      	cmp	r3, #46	; 0x2e
 800f460:	d003      	beq.n	800f46a <dns_send+0xf2>
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1ef      	bne.n	800f44a <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f472:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f478:	4413      	add	r3, r2
 800f47a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f47e:	4293      	cmp	r3, r2
 800f480:	dc53      	bgt.n	800f52a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f482:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f488:	4619      	mov	r1, r3
 800f48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f48c:	f002 f9f2 	bl	8011874 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f492:	3301      	adds	r3, #1
 800f494:	b29b      	uxth	r3, r3
 800f496:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f49a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f49c:	f002 f94e 	bl	801173c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f4a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4a8:	4413      	add	r3, r2
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1bf      	bne.n	800f438 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f4b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4c0:	f002 f9d8 	bl	8011874 <pbuf_put_at>
    query_idx++;
 800f4c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4ce:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f4d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4d4:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f4d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4d8:	f107 010c 	add.w	r1, r7, #12
 800f4dc:	2204      	movs	r2, #4
 800f4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4e0:	f002 f92c 	bl	801173c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	7bdb      	ldrb	r3, [r3, #15]
 800f4e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f4ec:	2335      	movs	r3, #53	; 0x35
 800f4ee:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	7adb      	ldrb	r3, [r3, #11]
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4a16      	ldr	r2, [pc, #88]	; (800f550 <dns_send+0x1d8>)
 800f4f8:	4413      	add	r3, r2
 800f4fa:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f4fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f500:	4a14      	ldr	r2, [pc, #80]	; (800f554 <dns_send+0x1dc>)
 800f502:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f508:	69fa      	ldr	r2, [r7, #28]
 800f50a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f50c:	f007 fe6c 	bl	80171e8 <udp_sendto>
 800f510:	4603      	mov	r3, r0
 800f512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f518:	f001 fdca 	bl	80110b0 <pbuf_free>
 800f51c:	e002      	b.n	800f524 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f51e:	23ff      	movs	r3, #255	; 0xff
 800f520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800f524:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f528:	e005      	b.n	800f536 <dns_send+0x1be>
        goto overflow_return;
 800f52a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f52e:	f001 fdbf 	bl	80110b0 <pbuf_free>
  return ERR_VAL;
 800f532:	f06f 0305 	mvn.w	r3, #5
}
 800f536:	4618      	mov	r0, r3
 800f538:	3740      	adds	r7, #64	; 0x40
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	200092b4 	.word	0x200092b4
 800f544:	0801d278 	.word	0x0801d278
 800f548:	0801d2a8 	.word	0x0801d2a8
 800f54c:	0801d2c0 	.word	0x0801d2c0
 800f550:	20009724 	.word	0x20009724
 800f554:	200092a4 	.word	0x200092a4

0800f558 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f558:	b590      	push	{r4, r7, lr}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	4603      	mov	r3, r0
 800f560:	6039      	str	r1, [r7, #0]
 800f562:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f564:	2300      	movs	r3, #0
 800f566:	73fb      	strb	r3, [r7, #15]
 800f568:	e03d      	b.n	800f5e6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f56a:	7bfa      	ldrb	r2, [r7, #15]
 800f56c:	4957      	ldr	r1, [pc, #348]	; (800f6cc <dns_call_found+0x174>)
 800f56e:	4613      	mov	r3, r2
 800f570:	005b      	lsls	r3, r3, #1
 800f572:	4413      	add	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	440b      	add	r3, r1
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d030      	beq.n	800f5e0 <dns_call_found+0x88>
 800f57e:	7bfa      	ldrb	r2, [r7, #15]
 800f580:	4952      	ldr	r1, [pc, #328]	; (800f6cc <dns_call_found+0x174>)
 800f582:	4613      	mov	r3, r2
 800f584:	005b      	lsls	r3, r3, #1
 800f586:	4413      	add	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	440b      	add	r3, r1
 800f58c:	3308      	adds	r3, #8
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	79fa      	ldrb	r2, [r7, #7]
 800f592:	429a      	cmp	r2, r3
 800f594:	d124      	bne.n	800f5e0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f596:	7bfa      	ldrb	r2, [r7, #15]
 800f598:	494c      	ldr	r1, [pc, #304]	; (800f6cc <dns_call_found+0x174>)
 800f59a:	4613      	mov	r3, r2
 800f59c:	005b      	lsls	r3, r3, #1
 800f59e:	4413      	add	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	440b      	add	r3, r1
 800f5a4:	681c      	ldr	r4, [r3, #0]
 800f5a6:	79fa      	ldrb	r2, [r7, #7]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	011b      	lsls	r3, r3, #4
 800f5ac:	4413      	add	r3, r2
 800f5ae:	011b      	lsls	r3, r3, #4
 800f5b0:	3310      	adds	r3, #16
 800f5b2:	4a47      	ldr	r2, [pc, #284]	; (800f6d0 <dns_call_found+0x178>)
 800f5b4:	1898      	adds	r0, r3, r2
 800f5b6:	7bfa      	ldrb	r2, [r7, #15]
 800f5b8:	4944      	ldr	r1, [pc, #272]	; (800f6cc <dns_call_found+0x174>)
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	4413      	add	r3, r2
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	440b      	add	r3, r1
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f5ce:	7bfa      	ldrb	r2, [r7, #15]
 800f5d0:	493e      	ldr	r1, [pc, #248]	; (800f6cc <dns_call_found+0x174>)
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	4413      	add	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	440b      	add	r3, r1
 800f5dc:	2200      	movs	r2, #0
 800f5de:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	73fb      	strb	r3, [r7, #15]
 800f5e6:	7bfb      	ldrb	r3, [r7, #15]
 800f5e8:	2b03      	cmp	r3, #3
 800f5ea:	d9be      	bls.n	800f56a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	73fb      	strb	r3, [r7, #15]
 800f5f0:	e031      	b.n	800f656 <dns_call_found+0xfe>
    if (i == idx) {
 800f5f2:	7bfa      	ldrb	r2, [r7, #15]
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d029      	beq.n	800f64e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f5fa:	7bfa      	ldrb	r2, [r7, #15]
 800f5fc:	4934      	ldr	r1, [pc, #208]	; (800f6d0 <dns_call_found+0x178>)
 800f5fe:	4613      	mov	r3, r2
 800f600:	011b      	lsls	r3, r3, #4
 800f602:	4413      	add	r3, r2
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	440b      	add	r3, r1
 800f608:	330a      	adds	r3, #10
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d11f      	bne.n	800f650 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f610:	7bfa      	ldrb	r2, [r7, #15]
 800f612:	492f      	ldr	r1, [pc, #188]	; (800f6d0 <dns_call_found+0x178>)
 800f614:	4613      	mov	r3, r2
 800f616:	011b      	lsls	r3, r3, #4
 800f618:	4413      	add	r3, r2
 800f61a:	011b      	lsls	r3, r3, #4
 800f61c:	440b      	add	r3, r1
 800f61e:	330f      	adds	r3, #15
 800f620:	7819      	ldrb	r1, [r3, #0]
 800f622:	79fa      	ldrb	r2, [r7, #7]
 800f624:	482a      	ldr	r0, [pc, #168]	; (800f6d0 <dns_call_found+0x178>)
 800f626:	4613      	mov	r3, r2
 800f628:	011b      	lsls	r3, r3, #4
 800f62a:	4413      	add	r3, r2
 800f62c:	011b      	lsls	r3, r3, #4
 800f62e:	4403      	add	r3, r0
 800f630:	330f      	adds	r3, #15
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	4299      	cmp	r1, r3
 800f636:	d10b      	bne.n	800f650 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f638:	79fa      	ldrb	r2, [r7, #7]
 800f63a:	4925      	ldr	r1, [pc, #148]	; (800f6d0 <dns_call_found+0x178>)
 800f63c:	4613      	mov	r3, r2
 800f63e:	011b      	lsls	r3, r3, #4
 800f640:	4413      	add	r3, r2
 800f642:	011b      	lsls	r3, r3, #4
 800f644:	440b      	add	r3, r1
 800f646:	330f      	adds	r3, #15
 800f648:	2204      	movs	r2, #4
 800f64a:	701a      	strb	r2, [r3, #0]
        break;
 800f64c:	e006      	b.n	800f65c <dns_call_found+0x104>
      continue; /* only check other requests */
 800f64e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	3301      	adds	r3, #1
 800f654:	73fb      	strb	r3, [r7, #15]
 800f656:	7bfb      	ldrb	r3, [r7, #15]
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d9ca      	bls.n	800f5f2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f65c:	79fa      	ldrb	r2, [r7, #7]
 800f65e:	491c      	ldr	r1, [pc, #112]	; (800f6d0 <dns_call_found+0x178>)
 800f660:	4613      	mov	r3, r2
 800f662:	011b      	lsls	r3, r3, #4
 800f664:	4413      	add	r3, r2
 800f666:	011b      	lsls	r3, r3, #4
 800f668:	440b      	add	r3, r1
 800f66a:	330f      	adds	r3, #15
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b03      	cmp	r3, #3
 800f670:	d827      	bhi.n	800f6c2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f672:	79fa      	ldrb	r2, [r7, #7]
 800f674:	4916      	ldr	r1, [pc, #88]	; (800f6d0 <dns_call_found+0x178>)
 800f676:	4613      	mov	r3, r2
 800f678:	011b      	lsls	r3, r3, #4
 800f67a:	4413      	add	r3, r2
 800f67c:	011b      	lsls	r3, r3, #4
 800f67e:	440b      	add	r3, r1
 800f680:	330f      	adds	r3, #15
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	461a      	mov	r2, r3
 800f686:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <dns_call_found+0x17c>)
 800f688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f007 ffe9 	bl	8017664 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800f692:	79fa      	ldrb	r2, [r7, #7]
 800f694:	490e      	ldr	r1, [pc, #56]	; (800f6d0 <dns_call_found+0x178>)
 800f696:	4613      	mov	r3, r2
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	4413      	add	r3, r2
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	440b      	add	r3, r1
 800f6a0:	330f      	adds	r3, #15
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4b0b      	ldr	r3, [pc, #44]	; (800f6d4 <dns_call_found+0x17c>)
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f6ae:	79fa      	ldrb	r2, [r7, #7]
 800f6b0:	4907      	ldr	r1, [pc, #28]	; (800f6d0 <dns_call_found+0x178>)
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	011b      	lsls	r3, r3, #4
 800f6b6:	4413      	add	r3, r2
 800f6b8:	011b      	lsls	r3, r3, #4
 800f6ba:	440b      	add	r3, r1
 800f6bc:	330f      	adds	r3, #15
 800f6be:	2204      	movs	r2, #4
 800f6c0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800f6c2:	bf00      	nop
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd90      	pop	{r4, r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	200096f4 	.word	0x200096f4
 800f6d0:	200092b4 	.word	0x200092b4
 800f6d4:	200092a4 	.word	0x200092a4

0800f6d8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800f6de:	f00a fc05 	bl	8019eec <rand>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	71fb      	strb	r3, [r7, #7]
 800f6ea:	e01a      	b.n	800f722 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f6ec:	79fa      	ldrb	r2, [r7, #7]
 800f6ee:	4911      	ldr	r1, [pc, #68]	; (800f734 <dns_create_txid+0x5c>)
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	4413      	add	r3, r2
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	440b      	add	r3, r1
 800f6fa:	330a      	adds	r3, #10
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	2b02      	cmp	r3, #2
 800f700:	d10c      	bne.n	800f71c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800f702:	79fa      	ldrb	r2, [r7, #7]
 800f704:	490b      	ldr	r1, [pc, #44]	; (800f734 <dns_create_txid+0x5c>)
 800f706:	4613      	mov	r3, r2
 800f708:	011b      	lsls	r3, r3, #4
 800f70a:	4413      	add	r3, r2
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	440b      	add	r3, r1
 800f710:	3308      	adds	r3, #8
 800f712:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f714:	88ba      	ldrh	r2, [r7, #4]
 800f716:	429a      	cmp	r2, r3
 800f718:	d100      	bne.n	800f71c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800f71a:	e7e0      	b.n	800f6de <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f71c:	79fb      	ldrb	r3, [r7, #7]
 800f71e:	3301      	adds	r3, #1
 800f720:	71fb      	strb	r3, [r7, #7]
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	2b03      	cmp	r3, #3
 800f726:	d9e1      	bls.n	800f6ec <dns_create_txid+0x14>
    }
  }

  return txid;
 800f728:	88bb      	ldrh	r3, [r7, #4]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	200092b4 	.word	0x200092b4

0800f738 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800f740:	2300      	movs	r3, #0
 800f742:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00d      	beq.n	800f766 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	7adb      	ldrb	r3, [r3, #11]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d109      	bne.n	800f766 <dns_backupserver_available+0x2e>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	7adb      	ldrb	r3, [r3, #11]
 800f756:	3301      	adds	r3, #1
 800f758:	4a06      	ldr	r2, [pc, #24]	; (800f774 <dns_backupserver_available+0x3c>)
 800f75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <dns_backupserver_available+0x2e>
      ret = 1;
 800f762:	2301      	movs	r3, #1
 800f764:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f766:	7bfb      	ldrb	r3, [r7, #15]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3714      	adds	r7, #20
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr
 800f774:	20009724 	.word	0x20009724

0800f778 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	4603      	mov	r3, r0
 800f780:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800f782:	79fa      	ldrb	r2, [r7, #7]
 800f784:	4613      	mov	r3, r2
 800f786:	011b      	lsls	r3, r3, #4
 800f788:	4413      	add	r3, r2
 800f78a:	011b      	lsls	r3, r3, #4
 800f78c:	4a48      	ldr	r2, [pc, #288]	; (800f8b0 <dns_check_entry+0x138>)
 800f78e:	4413      	add	r3, r2
 800f790:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800f792:	79fb      	ldrb	r3, [r7, #7]
 800f794:	2b03      	cmp	r3, #3
 800f796:	d906      	bls.n	800f7a6 <dns_check_entry+0x2e>
 800f798:	4b46      	ldr	r3, [pc, #280]	; (800f8b4 <dns_check_entry+0x13c>)
 800f79a:	f240 421c 	movw	r2, #1052	; 0x41c
 800f79e:	4946      	ldr	r1, [pc, #280]	; (800f8b8 <dns_check_entry+0x140>)
 800f7a0:	4846      	ldr	r0, [pc, #280]	; (800f8bc <dns_check_entry+0x144>)
 800f7a2:	f00b f995 	bl	801aad0 <iprintf>

  switch (entry->state) {
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	7a9b      	ldrb	r3, [r3, #10]
 800f7aa:	2b03      	cmp	r3, #3
 800f7ac:	d86f      	bhi.n	800f88e <dns_check_entry+0x116>
 800f7ae:	a201      	add	r2, pc, #4	; (adr r2, 800f7b4 <dns_check_entry+0x3c>)
 800f7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b4:	0800f89f 	.word	0x0800f89f
 800f7b8:	0800f7c5 	.word	0x0800f7c5
 800f7bc:	0800f7f7 	.word	0x0800f7f7
 800f7c0:	0800f86d 	.word	0x0800f86d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800f7c4:	f7ff ff88 	bl	800f6d8 <dns_create_txid>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800f7e8:	79fb      	ldrb	r3, [r7, #7]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7ff fdc4 	bl	800f378 <dns_send>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f7f4:	e058      	b.n	800f8a8 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	7b1b      	ldrb	r3, [r3, #12]
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	731a      	strb	r2, [r3, #12]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	7b1b      	ldrb	r3, [r3, #12]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d14b      	bne.n	800f8a2 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	7b5b      	ldrb	r3, [r3, #13]
 800f80e:	3301      	adds	r3, #1
 800f810:	b2da      	uxtb	r2, r3
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	735a      	strb	r2, [r3, #13]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	7b5b      	ldrb	r3, [r3, #13]
 800f81a:	2b04      	cmp	r3, #4
 800f81c:	d11b      	bne.n	800f856 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff ff8a 	bl	800f738 <dns_backupserver_available>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00c      	beq.n	800f844 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	7adb      	ldrb	r3, [r3, #11]
 800f82e:	3301      	adds	r3, #1
 800f830:	b2da      	uxtb	r2, r3
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2201      	movs	r2, #1
 800f83a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	735a      	strb	r2, [r3, #13]
 800f842:	e00c      	b.n	800f85e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f844:	79fb      	ldrb	r3, [r7, #7]
 800f846:	2100      	movs	r1, #0
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fe85 	bl	800f558 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2200      	movs	r2, #0
 800f852:	729a      	strb	r2, [r3, #10]
            break;
 800f854:	e028      	b.n	800f8a8 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	7b5a      	ldrb	r2, [r3, #13]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	4618      	mov	r0, r3
 800f862:	f7ff fd89 	bl	800f378 <dns_send>
 800f866:	4603      	mov	r3, r0
 800f868:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f86a:	e01a      	b.n	800f8a2 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d008      	beq.n	800f886 <dns_check_entry+0x10e>
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	1e5a      	subs	r2, r3, #1
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10f      	bne.n	800f8a6 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2200      	movs	r2, #0
 800f88a:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f88c:	e00b      	b.n	800f8a6 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f88e:	4b09      	ldr	r3, [pc, #36]	; (800f8b4 <dns_check_entry+0x13c>)
 800f890:	f240 425b 	movw	r2, #1115	; 0x45b
 800f894:	490a      	ldr	r1, [pc, #40]	; (800f8c0 <dns_check_entry+0x148>)
 800f896:	4809      	ldr	r0, [pc, #36]	; (800f8bc <dns_check_entry+0x144>)
 800f898:	f00b f91a 	bl	801aad0 <iprintf>
      break;
 800f89c:	e004      	b.n	800f8a8 <dns_check_entry+0x130>
      break;
 800f89e:	bf00      	nop
 800f8a0:	e002      	b.n	800f8a8 <dns_check_entry+0x130>
      break;
 800f8a2:	bf00      	nop
 800f8a4:	e000      	b.n	800f8a8 <dns_check_entry+0x130>
      break;
 800f8a6:	bf00      	nop
  }
}
 800f8a8:	bf00      	nop
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	200092b4 	.word	0x200092b4
 800f8b4:	0801d278 	.word	0x0801d278
 800f8b8:	0801d2e8 	.word	0x0801d2e8
 800f8bc:	0801d2c0 	.word	0x0801d2c0
 800f8c0:	0801d304 	.word	0x0801d304

0800f8c4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	71fb      	strb	r3, [r7, #7]
 800f8ce:	e006      	b.n	800f8de <dns_check_entries+0x1a>
    dns_check_entry(i);
 800f8d0:	79fb      	ldrb	r3, [r7, #7]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7ff ff50 	bl	800f778 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f8d8:	79fb      	ldrb	r3, [r7, #7]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	71fb      	strb	r3, [r7, #7]
 800f8de:	79fb      	ldrb	r3, [r7, #7]
 800f8e0:	2b03      	cmp	r3, #3
 800f8e2:	d9f5      	bls.n	800f8d0 <dns_check_entries+0xc>
  }
}
 800f8e4:	bf00      	nop
 800f8e6:	bf00      	nop
 800f8e8:	3708      	adds	r7, #8
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b082      	sub	sp, #8
 800f8f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f8f8:	f00a fa74 	bl	8019de4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f8fc:	f000 f8d6 	bl	800faac <mem_init>
  memp_init();
 800f900:	f000 fc32 	bl	8010168 <memp_init>
  pbuf_init();
  netif_init();
 800f904:	f000 fd3e 	bl	8010384 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f908:	f007 faac 	bl	8016e64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f90c:	f001 ffd4 	bl	80118b8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800f910:	f7ff fd24 	bl	800f35c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f914:	f007 f9ec 	bl	8016cf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f918:	bf00      	nop
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	4603      	mov	r3, r0
 800f928:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f92a:	4b05      	ldr	r3, [pc, #20]	; (800f940 <ptr_to_mem+0x20>)
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	4413      	add	r3, r2
}
 800f932:	4618      	mov	r0, r3
 800f934:	370c      	adds	r7, #12
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	2000bf58 	.word	0x2000bf58

0800f944 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f94c:	4b05      	ldr	r3, [pc, #20]	; (800f964 <mem_to_ptr+0x20>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	b29b      	uxth	r3, r3
}
 800f956:	4618      	mov	r0, r3
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	2000bf58 	.word	0x2000bf58

0800f968 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f970:	4b45      	ldr	r3, [pc, #276]	; (800fa88 <plug_holes+0x120>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	429a      	cmp	r2, r3
 800f978:	d206      	bcs.n	800f988 <plug_holes+0x20>
 800f97a:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <plug_holes+0x124>)
 800f97c:	f240 12df 	movw	r2, #479	; 0x1df
 800f980:	4943      	ldr	r1, [pc, #268]	; (800fa90 <plug_holes+0x128>)
 800f982:	4844      	ldr	r0, [pc, #272]	; (800fa94 <plug_holes+0x12c>)
 800f984:	f00b f8a4 	bl	801aad0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f988:	4b43      	ldr	r3, [pc, #268]	; (800fa98 <plug_holes+0x130>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d306      	bcc.n	800f9a0 <plug_holes+0x38>
 800f992:	4b3e      	ldr	r3, [pc, #248]	; (800fa8c <plug_holes+0x124>)
 800f994:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f998:	4940      	ldr	r1, [pc, #256]	; (800fa9c <plug_holes+0x134>)
 800f99a:	483e      	ldr	r0, [pc, #248]	; (800fa94 <plug_holes+0x12c>)
 800f99c:	f00b f898 	bl	801aad0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	791b      	ldrb	r3, [r3, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d006      	beq.n	800f9b6 <plug_holes+0x4e>
 800f9a8:	4b38      	ldr	r3, [pc, #224]	; (800fa8c <plug_holes+0x124>)
 800f9aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f9ae:	493c      	ldr	r1, [pc, #240]	; (800faa0 <plug_holes+0x138>)
 800f9b0:	4838      	ldr	r0, [pc, #224]	; (800fa94 <plug_holes+0x12c>)
 800f9b2:	f00b f88d 	bl	801aad0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f9be:	d906      	bls.n	800f9ce <plug_holes+0x66>
 800f9c0:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <plug_holes+0x124>)
 800f9c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f9c6:	4937      	ldr	r1, [pc, #220]	; (800faa4 <plug_holes+0x13c>)
 800f9c8:	4832      	ldr	r0, [pc, #200]	; (800fa94 <plug_holes+0x12c>)
 800f9ca:	f00b f881 	bl	801aad0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	881b      	ldrh	r3, [r3, #0]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff ffa4 	bl	800f920 <ptr_to_mem>
 800f9d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d024      	beq.n	800fa2c <plug_holes+0xc4>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	791b      	ldrb	r3, [r3, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d120      	bne.n	800fa2c <plug_holes+0xc4>
 800f9ea:	4b2b      	ldr	r3, [pc, #172]	; (800fa98 <plug_holes+0x130>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d01b      	beq.n	800fa2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f9f4:	4b2c      	ldr	r3, [pc, #176]	; (800faa8 <plug_holes+0x140>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d102      	bne.n	800fa04 <plug_holes+0x9c>
      lfree = mem;
 800f9fe:	4a2a      	ldr	r2, [pc, #168]	; (800faa8 <plug_holes+0x140>)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	881a      	ldrh	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fa14:	d00a      	beq.n	800fa2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff ff80 	bl	800f920 <ptr_to_mem>
 800fa20:	4604      	mov	r4, r0
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7ff ff8e 	bl	800f944 <mem_to_ptr>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	885b      	ldrh	r3, [r3, #2]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff ff75 	bl	800f920 <ptr_to_mem>
 800fa36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d01f      	beq.n	800fa80 <plug_holes+0x118>
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	791b      	ldrb	r3, [r3, #4]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d11b      	bne.n	800fa80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fa48:	4b17      	ldr	r3, [pc, #92]	; (800faa8 <plug_holes+0x140>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d102      	bne.n	800fa58 <plug_holes+0xf0>
      lfree = pmem;
 800fa52:	4a15      	ldr	r2, [pc, #84]	; (800faa8 <plug_holes+0x140>)
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	881a      	ldrh	r2, [r3, #0]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	881b      	ldrh	r3, [r3, #0]
 800fa64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fa68:	d00a      	beq.n	800fa80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff ff56 	bl	800f920 <ptr_to_mem>
 800fa74:	4604      	mov	r4, r0
 800fa76:	68b8      	ldr	r0, [r7, #8]
 800fa78:	f7ff ff64 	bl	800f944 <mem_to_ptr>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fa80:	bf00      	nop
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd90      	pop	{r4, r7, pc}
 800fa88:	2000bf58 	.word	0x2000bf58
 800fa8c:	0801d324 	.word	0x0801d324
 800fa90:	0801d354 	.word	0x0801d354
 800fa94:	0801d36c 	.word	0x0801d36c
 800fa98:	2000bf5c 	.word	0x2000bf5c
 800fa9c:	0801d394 	.word	0x0801d394
 800faa0:	0801d3b0 	.word	0x0801d3b0
 800faa4:	0801d3cc 	.word	0x0801d3cc
 800faa8:	2000bf64 	.word	0x2000bf64

0800faac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fab2:	4b1f      	ldr	r3, [pc, #124]	; (800fb30 <mem_init+0x84>)
 800fab4:	3303      	adds	r3, #3
 800fab6:	f023 0303 	bic.w	r3, r3, #3
 800faba:	461a      	mov	r2, r3
 800fabc:	4b1d      	ldr	r3, [pc, #116]	; (800fb34 <mem_init+0x88>)
 800fabe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fac0:	4b1c      	ldr	r3, [pc, #112]	; (800fb34 <mem_init+0x88>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800facc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fada:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800fade:	f7ff ff1f 	bl	800f920 <ptr_to_mem>
 800fae2:	4603      	mov	r3, r0
 800fae4:	4a14      	ldr	r2, [pc, #80]	; (800fb38 <mem_init+0x8c>)
 800fae6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fae8:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <mem_init+0x8c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2201      	movs	r2, #1
 800faee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800faf0:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <mem_init+0x8c>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800faf8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fafa:	4b0f      	ldr	r3, [pc, #60]	; (800fb38 <mem_init+0x8c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800fb02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fb04:	4b0b      	ldr	r3, [pc, #44]	; (800fb34 <mem_init+0x88>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a0c      	ldr	r2, [pc, #48]	; (800fb3c <mem_init+0x90>)
 800fb0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fb0c:	480c      	ldr	r0, [pc, #48]	; (800fb40 <mem_init+0x94>)
 800fb0e:	f00a f977 	bl	8019e00 <sys_mutex_new>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d006      	beq.n	800fb26 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fb18:	4b0a      	ldr	r3, [pc, #40]	; (800fb44 <mem_init+0x98>)
 800fb1a:	f240 221f 	movw	r2, #543	; 0x21f
 800fb1e:	490a      	ldr	r1, [pc, #40]	; (800fb48 <mem_init+0x9c>)
 800fb20:	480a      	ldr	r0, [pc, #40]	; (800fb4c <mem_init+0xa0>)
 800fb22:	f00a ffd5 	bl	801aad0 <iprintf>
  }
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20009744 	.word	0x20009744
 800fb34:	2000bf58 	.word	0x2000bf58
 800fb38:	2000bf5c 	.word	0x2000bf5c
 800fb3c:	2000bf64 	.word	0x2000bf64
 800fb40:	2000bf60 	.word	0x2000bf60
 800fb44:	0801d324 	.word	0x0801d324
 800fb48:	0801d3f8 	.word	0x0801d3f8
 800fb4c:	0801d36c 	.word	0x0801d36c

0800fb50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff fef3 	bl	800f944 <mem_to_ptr>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	881b      	ldrh	r3, [r3, #0]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7ff feda 	bl	800f920 <ptr_to_mem>
 800fb6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	885b      	ldrh	r3, [r3, #2]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff fed4 	bl	800f920 <ptr_to_mem>
 800fb78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fb82:	d818      	bhi.n	800fbb6 <mem_link_valid+0x66>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	885b      	ldrh	r3, [r3, #2]
 800fb88:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fb8c:	d813      	bhi.n	800fbb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fb92:	8afa      	ldrh	r2, [r7, #22]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d004      	beq.n	800fba2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	8afa      	ldrh	r2, [r7, #22]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d109      	bne.n	800fbb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fba2:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <mem_link_valid+0x74>)
 800fba4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d006      	beq.n	800fbba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	885b      	ldrh	r3, [r3, #2]
 800fbb0:	8afa      	ldrh	r2, [r7, #22]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d001      	beq.n	800fbba <mem_link_valid+0x6a>
    return 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	e000      	b.n	800fbbc <mem_link_valid+0x6c>
  }
  return 1;
 800fbba:	2301      	movs	r3, #1
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	2000bf5c 	.word	0x2000bf5c

0800fbc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d070      	beq.n	800fcb8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f003 0303 	and.w	r3, r3, #3
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d00d      	beq.n	800fbfc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fbe0:	4b37      	ldr	r3, [pc, #220]	; (800fcc0 <mem_free+0xf8>)
 800fbe2:	f240 2273 	movw	r2, #627	; 0x273
 800fbe6:	4937      	ldr	r1, [pc, #220]	; (800fcc4 <mem_free+0xfc>)
 800fbe8:	4837      	ldr	r0, [pc, #220]	; (800fcc8 <mem_free+0x100>)
 800fbea:	f00a ff71 	bl	801aad0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fbee:	f00a f95b 	bl	8019ea8 <sys_arch_protect>
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f00a f965 	bl	8019ec4 <sys_arch_unprotect>
    return;
 800fbfa:	e05e      	b.n	800fcba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	3b08      	subs	r3, #8
 800fc00:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fc02:	4b32      	ldr	r3, [pc, #200]	; (800fccc <mem_free+0x104>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	69fa      	ldr	r2, [r7, #28]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d306      	bcc.n	800fc1a <mem_free+0x52>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f103 020c 	add.w	r2, r3, #12
 800fc12:	4b2f      	ldr	r3, [pc, #188]	; (800fcd0 <mem_free+0x108>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d90d      	bls.n	800fc36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fc1a:	4b29      	ldr	r3, [pc, #164]	; (800fcc0 <mem_free+0xf8>)
 800fc1c:	f240 227f 	movw	r2, #639	; 0x27f
 800fc20:	492c      	ldr	r1, [pc, #176]	; (800fcd4 <mem_free+0x10c>)
 800fc22:	4829      	ldr	r0, [pc, #164]	; (800fcc8 <mem_free+0x100>)
 800fc24:	f00a ff54 	bl	801aad0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fc28:	f00a f93e 	bl	8019ea8 <sys_arch_protect>
 800fc2c:	6138      	str	r0, [r7, #16]
 800fc2e:	6938      	ldr	r0, [r7, #16]
 800fc30:	f00a f948 	bl	8019ec4 <sys_arch_unprotect>
    return;
 800fc34:	e041      	b.n	800fcba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fc36:	4828      	ldr	r0, [pc, #160]	; (800fcd8 <mem_free+0x110>)
 800fc38:	f00a f8fc 	bl	8019e34 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	791b      	ldrb	r3, [r3, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d110      	bne.n	800fc66 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fc44:	4b1e      	ldr	r3, [pc, #120]	; (800fcc0 <mem_free+0xf8>)
 800fc46:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fc4a:	4924      	ldr	r1, [pc, #144]	; (800fcdc <mem_free+0x114>)
 800fc4c:	481e      	ldr	r0, [pc, #120]	; (800fcc8 <mem_free+0x100>)
 800fc4e:	f00a ff3f 	bl	801aad0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fc52:	4821      	ldr	r0, [pc, #132]	; (800fcd8 <mem_free+0x110>)
 800fc54:	f00a f8fd 	bl	8019e52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fc58:	f00a f926 	bl	8019ea8 <sys_arch_protect>
 800fc5c:	6178      	str	r0, [r7, #20]
 800fc5e:	6978      	ldr	r0, [r7, #20]
 800fc60:	f00a f930 	bl	8019ec4 <sys_arch_unprotect>
    return;
 800fc64:	e029      	b.n	800fcba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fc66:	69f8      	ldr	r0, [r7, #28]
 800fc68:	f7ff ff72 	bl	800fb50 <mem_link_valid>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d110      	bne.n	800fc94 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fc72:	4b13      	ldr	r3, [pc, #76]	; (800fcc0 <mem_free+0xf8>)
 800fc74:	f240 2295 	movw	r2, #661	; 0x295
 800fc78:	4919      	ldr	r1, [pc, #100]	; (800fce0 <mem_free+0x118>)
 800fc7a:	4813      	ldr	r0, [pc, #76]	; (800fcc8 <mem_free+0x100>)
 800fc7c:	f00a ff28 	bl	801aad0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fc80:	4815      	ldr	r0, [pc, #84]	; (800fcd8 <mem_free+0x110>)
 800fc82:	f00a f8e6 	bl	8019e52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fc86:	f00a f90f 	bl	8019ea8 <sys_arch_protect>
 800fc8a:	61b8      	str	r0, [r7, #24]
 800fc8c:	69b8      	ldr	r0, [r7, #24]
 800fc8e:	f00a f919 	bl	8019ec4 <sys_arch_unprotect>
    return;
 800fc92:	e012      	b.n	800fcba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	2200      	movs	r2, #0
 800fc98:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fc9a:	4b12      	ldr	r3, [pc, #72]	; (800fce4 <mem_free+0x11c>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	69fa      	ldr	r2, [r7, #28]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d202      	bcs.n	800fcaa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fca4:	4a0f      	ldr	r2, [pc, #60]	; (800fce4 <mem_free+0x11c>)
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fcaa:	69f8      	ldr	r0, [r7, #28]
 800fcac:	f7ff fe5c 	bl	800f968 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fcb0:	4809      	ldr	r0, [pc, #36]	; (800fcd8 <mem_free+0x110>)
 800fcb2:	f00a f8ce 	bl	8019e52 <sys_mutex_unlock>
 800fcb6:	e000      	b.n	800fcba <mem_free+0xf2>
    return;
 800fcb8:	bf00      	nop
}
 800fcba:	3720      	adds	r7, #32
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	0801d324 	.word	0x0801d324
 800fcc4:	0801d414 	.word	0x0801d414
 800fcc8:	0801d36c 	.word	0x0801d36c
 800fccc:	2000bf58 	.word	0x2000bf58
 800fcd0:	2000bf5c 	.word	0x2000bf5c
 800fcd4:	0801d438 	.word	0x0801d438
 800fcd8:	2000bf60 	.word	0x2000bf60
 800fcdc:	0801d454 	.word	0x0801d454
 800fce0:	0801d47c 	.word	0x0801d47c
 800fce4:	2000bf64 	.word	0x2000bf64

0800fce8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fcf4:	887b      	ldrh	r3, [r7, #2]
 800fcf6:	3303      	adds	r3, #3
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	f023 0303 	bic.w	r3, r3, #3
 800fcfe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fd00:	8bfb      	ldrh	r3, [r7, #30]
 800fd02:	2b0b      	cmp	r3, #11
 800fd04:	d801      	bhi.n	800fd0a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fd06:	230c      	movs	r3, #12
 800fd08:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fd0a:	8bfb      	ldrh	r3, [r7, #30]
 800fd0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fd10:	d803      	bhi.n	800fd1a <mem_trim+0x32>
 800fd12:	8bfa      	ldrh	r2, [r7, #30]
 800fd14:	887b      	ldrh	r3, [r7, #2]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d201      	bcs.n	800fd1e <mem_trim+0x36>
    return NULL;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e0d8      	b.n	800fed0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fd1e:	4b6e      	ldr	r3, [pc, #440]	; (800fed8 <mem_trim+0x1f0>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d304      	bcc.n	800fd32 <mem_trim+0x4a>
 800fd28:	4b6c      	ldr	r3, [pc, #432]	; (800fedc <mem_trim+0x1f4>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d306      	bcc.n	800fd40 <mem_trim+0x58>
 800fd32:	4b6b      	ldr	r3, [pc, #428]	; (800fee0 <mem_trim+0x1f8>)
 800fd34:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fd38:	496a      	ldr	r1, [pc, #424]	; (800fee4 <mem_trim+0x1fc>)
 800fd3a:	486b      	ldr	r0, [pc, #428]	; (800fee8 <mem_trim+0x200>)
 800fd3c:	f00a fec8 	bl	801aad0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fd40:	4b65      	ldr	r3, [pc, #404]	; (800fed8 <mem_trim+0x1f0>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d304      	bcc.n	800fd54 <mem_trim+0x6c>
 800fd4a:	4b64      	ldr	r3, [pc, #400]	; (800fedc <mem_trim+0x1f4>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d307      	bcc.n	800fd64 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd54:	f00a f8a8 	bl	8019ea8 <sys_arch_protect>
 800fd58:	60b8      	str	r0, [r7, #8]
 800fd5a:	68b8      	ldr	r0, [r7, #8]
 800fd5c:	f00a f8b2 	bl	8019ec4 <sys_arch_unprotect>
    return rmem;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	e0b5      	b.n	800fed0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3b08      	subs	r3, #8
 800fd68:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fd6a:	69b8      	ldr	r0, [r7, #24]
 800fd6c:	f7ff fdea 	bl	800f944 <mem_to_ptr>
 800fd70:	4603      	mov	r3, r0
 800fd72:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	881a      	ldrh	r2, [r3, #0]
 800fd78:	8afb      	ldrh	r3, [r7, #22]
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	3b08      	subs	r3, #8
 800fd80:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fd82:	8bfa      	ldrh	r2, [r7, #30]
 800fd84:	8abb      	ldrh	r3, [r7, #20]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d906      	bls.n	800fd98 <mem_trim+0xb0>
 800fd8a:	4b55      	ldr	r3, [pc, #340]	; (800fee0 <mem_trim+0x1f8>)
 800fd8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fd90:	4956      	ldr	r1, [pc, #344]	; (800feec <mem_trim+0x204>)
 800fd92:	4855      	ldr	r0, [pc, #340]	; (800fee8 <mem_trim+0x200>)
 800fd94:	f00a fe9c 	bl	801aad0 <iprintf>
  if (newsize > size) {
 800fd98:	8bfa      	ldrh	r2, [r7, #30]
 800fd9a:	8abb      	ldrh	r3, [r7, #20]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d901      	bls.n	800fda4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800fda0:	2300      	movs	r3, #0
 800fda2:	e095      	b.n	800fed0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800fda4:	8bfa      	ldrh	r2, [r7, #30]
 800fda6:	8abb      	ldrh	r3, [r7, #20]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d101      	bne.n	800fdb0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	e08f      	b.n	800fed0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fdb0:	484f      	ldr	r0, [pc, #316]	; (800fef0 <mem_trim+0x208>)
 800fdb2:	f00a f83f 	bl	8019e34 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	881b      	ldrh	r3, [r3, #0]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7ff fdb0 	bl	800f920 <ptr_to_mem>
 800fdc0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	791b      	ldrb	r3, [r3, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d13f      	bne.n	800fe4a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fdd2:	d106      	bne.n	800fde2 <mem_trim+0xfa>
 800fdd4:	4b42      	ldr	r3, [pc, #264]	; (800fee0 <mem_trim+0x1f8>)
 800fdd6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fdda:	4946      	ldr	r1, [pc, #280]	; (800fef4 <mem_trim+0x20c>)
 800fddc:	4842      	ldr	r0, [pc, #264]	; (800fee8 <mem_trim+0x200>)
 800fdde:	f00a fe77 	bl	801aad0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	881b      	ldrh	r3, [r3, #0]
 800fde6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fde8:	8afa      	ldrh	r2, [r7, #22]
 800fdea:	8bfb      	ldrh	r3, [r7, #30]
 800fdec:	4413      	add	r3, r2
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	3308      	adds	r3, #8
 800fdf2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fdf4:	4b40      	ldr	r3, [pc, #256]	; (800fef8 <mem_trim+0x210>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d106      	bne.n	800fe0c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800fdfe:	89fb      	ldrh	r3, [r7, #14]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff fd8d 	bl	800f920 <ptr_to_mem>
 800fe06:	4603      	mov	r3, r0
 800fe08:	4a3b      	ldr	r2, [pc, #236]	; (800fef8 <mem_trim+0x210>)
 800fe0a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fe0c:	89fb      	ldrh	r3, [r7, #14]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff fd86 	bl	800f920 <ptr_to_mem>
 800fe14:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	89ba      	ldrh	r2, [r7, #12]
 800fe20:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	8afa      	ldrh	r2, [r7, #22]
 800fe26:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	89fa      	ldrh	r2, [r7, #14]
 800fe2c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fe36:	d047      	beq.n	800fec8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	881b      	ldrh	r3, [r3, #0]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff fd6f 	bl	800f920 <ptr_to_mem>
 800fe42:	4602      	mov	r2, r0
 800fe44:	89fb      	ldrh	r3, [r7, #14]
 800fe46:	8053      	strh	r3, [r2, #2]
 800fe48:	e03e      	b.n	800fec8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fe4a:	8bfb      	ldrh	r3, [r7, #30]
 800fe4c:	f103 0214 	add.w	r2, r3, #20
 800fe50:	8abb      	ldrh	r3, [r7, #20]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d838      	bhi.n	800fec8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fe56:	8afa      	ldrh	r2, [r7, #22]
 800fe58:	8bfb      	ldrh	r3, [r7, #30]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	3308      	adds	r3, #8
 800fe60:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fe6a:	d106      	bne.n	800fe7a <mem_trim+0x192>
 800fe6c:	4b1c      	ldr	r3, [pc, #112]	; (800fee0 <mem_trim+0x1f8>)
 800fe6e:	f240 3216 	movw	r2, #790	; 0x316
 800fe72:	4920      	ldr	r1, [pc, #128]	; (800fef4 <mem_trim+0x20c>)
 800fe74:	481c      	ldr	r0, [pc, #112]	; (800fee8 <mem_trim+0x200>)
 800fe76:	f00a fe2b 	bl	801aad0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fe7a:	89fb      	ldrh	r3, [r7, #14]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff fd4f 	bl	800f920 <ptr_to_mem>
 800fe82:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800fe84:	4b1c      	ldr	r3, [pc, #112]	; (800fef8 <mem_trim+0x210>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	693a      	ldr	r2, [r7, #16]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d202      	bcs.n	800fe94 <mem_trim+0x1ac>
      lfree = mem2;
 800fe8e:	4a1a      	ldr	r2, [pc, #104]	; (800fef8 <mem_trim+0x210>)
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2200      	movs	r2, #0
 800fe98:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	881a      	ldrh	r2, [r3, #0]
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	8afa      	ldrh	r2, [r7, #22]
 800fea6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	89fa      	ldrh	r2, [r7, #14]
 800feac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	881b      	ldrh	r3, [r3, #0]
 800feb2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800feb6:	d007      	beq.n	800fec8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	881b      	ldrh	r3, [r3, #0]
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fd2f 	bl	800f920 <ptr_to_mem>
 800fec2:	4602      	mov	r2, r0
 800fec4:	89fb      	ldrh	r3, [r7, #14]
 800fec6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fec8:	4809      	ldr	r0, [pc, #36]	; (800fef0 <mem_trim+0x208>)
 800feca:	f009 ffc2 	bl	8019e52 <sys_mutex_unlock>
  return rmem;
 800fece:	687b      	ldr	r3, [r7, #4]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3720      	adds	r7, #32
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	2000bf58 	.word	0x2000bf58
 800fedc:	2000bf5c 	.word	0x2000bf5c
 800fee0:	0801d324 	.word	0x0801d324
 800fee4:	0801d4b0 	.word	0x0801d4b0
 800fee8:	0801d36c 	.word	0x0801d36c
 800feec:	0801d4c8 	.word	0x0801d4c8
 800fef0:	2000bf60 	.word	0x2000bf60
 800fef4:	0801d4e8 	.word	0x0801d4e8
 800fef8:	2000bf64 	.word	0x2000bf64

0800fefc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ff06:	88fb      	ldrh	r3, [r7, #6]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <mem_malloc+0x14>
    return NULL;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	e0e2      	b.n	80100d6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ff10:	88fb      	ldrh	r3, [r7, #6]
 800ff12:	3303      	adds	r3, #3
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	f023 0303 	bic.w	r3, r3, #3
 800ff1a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ff1c:	8bbb      	ldrh	r3, [r7, #28]
 800ff1e:	2b0b      	cmp	r3, #11
 800ff20:	d801      	bhi.n	800ff26 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ff22:	230c      	movs	r3, #12
 800ff24:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ff26:	8bbb      	ldrh	r3, [r7, #28]
 800ff28:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ff2c:	d803      	bhi.n	800ff36 <mem_malloc+0x3a>
 800ff2e:	8bba      	ldrh	r2, [r7, #28]
 800ff30:	88fb      	ldrh	r3, [r7, #6]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d201      	bcs.n	800ff3a <mem_malloc+0x3e>
    return NULL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	e0cd      	b.n	80100d6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ff3a:	4869      	ldr	r0, [pc, #420]	; (80100e0 <mem_malloc+0x1e4>)
 800ff3c:	f009 ff7a 	bl	8019e34 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ff40:	4b68      	ldr	r3, [pc, #416]	; (80100e4 <mem_malloc+0x1e8>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7ff fcfd 	bl	800f944 <mem_to_ptr>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	83fb      	strh	r3, [r7, #30]
 800ff4e:	e0b7      	b.n	80100c0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ff50:	8bfb      	ldrh	r3, [r7, #30]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff fce4 	bl	800f920 <ptr_to_mem>
 800ff58:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	791b      	ldrb	r3, [r3, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f040 80a7 	bne.w	80100b2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	8bfb      	ldrh	r3, [r7, #30]
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	f1a3 0208 	sub.w	r2, r3, #8
 800ff72:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ff74:	429a      	cmp	r2, r3
 800ff76:	f0c0 809c 	bcc.w	80100b2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	881b      	ldrh	r3, [r3, #0]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	8bfb      	ldrh	r3, [r7, #30]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	f1a3 0208 	sub.w	r2, r3, #8
 800ff88:	8bbb      	ldrh	r3, [r7, #28]
 800ff8a:	3314      	adds	r3, #20
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d333      	bcc.n	800fff8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ff90:	8bfa      	ldrh	r2, [r7, #30]
 800ff92:	8bbb      	ldrh	r3, [r7, #28]
 800ff94:	4413      	add	r3, r2
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	3308      	adds	r3, #8
 800ff9a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ff9c:	8a7b      	ldrh	r3, [r7, #18]
 800ff9e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ffa2:	d106      	bne.n	800ffb2 <mem_malloc+0xb6>
 800ffa4:	4b50      	ldr	r3, [pc, #320]	; (80100e8 <mem_malloc+0x1ec>)
 800ffa6:	f240 3287 	movw	r2, #903	; 0x387
 800ffaa:	4950      	ldr	r1, [pc, #320]	; (80100ec <mem_malloc+0x1f0>)
 800ffac:	4850      	ldr	r0, [pc, #320]	; (80100f0 <mem_malloc+0x1f4>)
 800ffae:	f00a fd8f 	bl	801aad0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ffb2:	8a7b      	ldrh	r3, [r7, #18]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7ff fcb3 	bl	800f920 <ptr_to_mem>
 800ffba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	881a      	ldrh	r2, [r3, #0]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	8bfa      	ldrh	r2, [r7, #30]
 800ffce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	8a7a      	ldrh	r2, [r7, #18]
 800ffd4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2201      	movs	r2, #1
 800ffda:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	881b      	ldrh	r3, [r3, #0]
 800ffe0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ffe4:	d00b      	beq.n	800fffe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff fc98 	bl	800f920 <ptr_to_mem>
 800fff0:	4602      	mov	r2, r0
 800fff2:	8a7b      	ldrh	r3, [r7, #18]
 800fff4:	8053      	strh	r3, [r2, #2]
 800fff6:	e002      	b.n	800fffe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	2201      	movs	r2, #1
 800fffc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fffe:	4b39      	ldr	r3, [pc, #228]	; (80100e4 <mem_malloc+0x1e8>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	429a      	cmp	r2, r3
 8010006:	d127      	bne.n	8010058 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010008:	4b36      	ldr	r3, [pc, #216]	; (80100e4 <mem_malloc+0x1e8>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801000e:	e005      	b.n	801001c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	881b      	ldrh	r3, [r3, #0]
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff fc83 	bl	800f920 <ptr_to_mem>
 801001a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	791b      	ldrb	r3, [r3, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d004      	beq.n	801002e <mem_malloc+0x132>
 8010024:	4b33      	ldr	r3, [pc, #204]	; (80100f4 <mem_malloc+0x1f8>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	69ba      	ldr	r2, [r7, #24]
 801002a:	429a      	cmp	r2, r3
 801002c:	d1f0      	bne.n	8010010 <mem_malloc+0x114>
          }
          lfree = cur;
 801002e:	4a2d      	ldr	r2, [pc, #180]	; (80100e4 <mem_malloc+0x1e8>)
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010034:	4b2b      	ldr	r3, [pc, #172]	; (80100e4 <mem_malloc+0x1e8>)
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	4b2e      	ldr	r3, [pc, #184]	; (80100f4 <mem_malloc+0x1f8>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	429a      	cmp	r2, r3
 801003e:	d00b      	beq.n	8010058 <mem_malloc+0x15c>
 8010040:	4b28      	ldr	r3, [pc, #160]	; (80100e4 <mem_malloc+0x1e8>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	791b      	ldrb	r3, [r3, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d006      	beq.n	8010058 <mem_malloc+0x15c>
 801004a:	4b27      	ldr	r3, [pc, #156]	; (80100e8 <mem_malloc+0x1ec>)
 801004c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010050:	4929      	ldr	r1, [pc, #164]	; (80100f8 <mem_malloc+0x1fc>)
 8010052:	4827      	ldr	r0, [pc, #156]	; (80100f0 <mem_malloc+0x1f4>)
 8010054:	f00a fd3c 	bl	801aad0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010058:	4821      	ldr	r0, [pc, #132]	; (80100e0 <mem_malloc+0x1e4>)
 801005a:	f009 fefa 	bl	8019e52 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801005e:	8bba      	ldrh	r2, [r7, #28]
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	4413      	add	r3, r2
 8010064:	3308      	adds	r3, #8
 8010066:	4a23      	ldr	r2, [pc, #140]	; (80100f4 <mem_malloc+0x1f8>)
 8010068:	6812      	ldr	r2, [r2, #0]
 801006a:	4293      	cmp	r3, r2
 801006c:	d906      	bls.n	801007c <mem_malloc+0x180>
 801006e:	4b1e      	ldr	r3, [pc, #120]	; (80100e8 <mem_malloc+0x1ec>)
 8010070:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010074:	4921      	ldr	r1, [pc, #132]	; (80100fc <mem_malloc+0x200>)
 8010076:	481e      	ldr	r0, [pc, #120]	; (80100f0 <mem_malloc+0x1f4>)
 8010078:	f00a fd2a 	bl	801aad0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	f003 0303 	and.w	r3, r3, #3
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <mem_malloc+0x198>
 8010086:	4b18      	ldr	r3, [pc, #96]	; (80100e8 <mem_malloc+0x1ec>)
 8010088:	f240 32bb 	movw	r2, #955	; 0x3bb
 801008c:	491c      	ldr	r1, [pc, #112]	; (8010100 <mem_malloc+0x204>)
 801008e:	4818      	ldr	r0, [pc, #96]	; (80100f0 <mem_malloc+0x1f4>)
 8010090:	f00a fd1e 	bl	801aad0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	f003 0303 	and.w	r3, r3, #3
 801009a:	2b00      	cmp	r3, #0
 801009c:	d006      	beq.n	80100ac <mem_malloc+0x1b0>
 801009e:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <mem_malloc+0x1ec>)
 80100a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80100a4:	4917      	ldr	r1, [pc, #92]	; (8010104 <mem_malloc+0x208>)
 80100a6:	4812      	ldr	r0, [pc, #72]	; (80100f0 <mem_malloc+0x1f4>)
 80100a8:	f00a fd12 	bl	801aad0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	3308      	adds	r3, #8
 80100b0:	e011      	b.n	80100d6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80100b2:	8bfb      	ldrh	r3, [r7, #30]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7ff fc33 	bl	800f920 <ptr_to_mem>
 80100ba:	4603      	mov	r3, r0
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80100c0:	8bfa      	ldrh	r2, [r7, #30]
 80100c2:	8bbb      	ldrh	r3, [r7, #28]
 80100c4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80100c8:	429a      	cmp	r2, r3
 80100ca:	f4ff af41 	bcc.w	800ff50 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80100ce:	4804      	ldr	r0, [pc, #16]	; (80100e0 <mem_malloc+0x1e4>)
 80100d0:	f009 febf 	bl	8019e52 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3720      	adds	r7, #32
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	2000bf60 	.word	0x2000bf60
 80100e4:	2000bf64 	.word	0x2000bf64
 80100e8:	0801d324 	.word	0x0801d324
 80100ec:	0801d4e8 	.word	0x0801d4e8
 80100f0:	0801d36c 	.word	0x0801d36c
 80100f4:	2000bf5c 	.word	0x2000bf5c
 80100f8:	0801d4fc 	.word	0x0801d4fc
 80100fc:	0801d518 	.word	0x0801d518
 8010100:	0801d548 	.word	0x0801d548
 8010104:	0801d578 	.word	0x0801d578

08010108 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	689b      	ldr	r3, [r3, #8]
 8010114:	2200      	movs	r2, #0
 8010116:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	3303      	adds	r3, #3
 801011e:	f023 0303 	bic.w	r3, r3, #3
 8010122:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010124:	2300      	movs	r3, #0
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	e011      	b.n	801014e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	881b      	ldrh	r3, [r3, #0]
 8010140:	461a      	mov	r2, r3
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	4413      	add	r3, r2
 8010146:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3301      	adds	r3, #1
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	885b      	ldrh	r3, [r3, #2]
 8010152:	461a      	mov	r2, r3
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4293      	cmp	r3, r2
 8010158:	dbe7      	blt.n	801012a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801015a:	bf00      	nop
 801015c:	bf00      	nop
 801015e:	3714      	adds	r7, #20
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801016e:	2300      	movs	r3, #0
 8010170:	80fb      	strh	r3, [r7, #6]
 8010172:	e009      	b.n	8010188 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010174:	88fb      	ldrh	r3, [r7, #6]
 8010176:	4a08      	ldr	r2, [pc, #32]	; (8010198 <memp_init+0x30>)
 8010178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff ffc3 	bl	8010108 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010182:	88fb      	ldrh	r3, [r7, #6]
 8010184:	3301      	adds	r3, #1
 8010186:	80fb      	strh	r3, [r7, #6]
 8010188:	88fb      	ldrh	r3, [r7, #6]
 801018a:	2b0d      	cmp	r3, #13
 801018c:	d9f2      	bls.n	8010174 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801018e:	bf00      	nop
 8010190:	bf00      	nop
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	0801fda0 	.word	0x0801fda0

0801019c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80101a4:	f009 fe80 	bl	8019ea8 <sys_arch_protect>
 80101a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d015      	beq.n	80101e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	6812      	ldr	r2, [r2, #0]
 80101c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	f003 0303 	and.w	r3, r3, #3
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d006      	beq.n	80101da <do_memp_malloc_pool+0x3e>
 80101cc:	4b09      	ldr	r3, [pc, #36]	; (80101f4 <do_memp_malloc_pool+0x58>)
 80101ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 80101d2:	4909      	ldr	r1, [pc, #36]	; (80101f8 <do_memp_malloc_pool+0x5c>)
 80101d4:	4809      	ldr	r0, [pc, #36]	; (80101fc <do_memp_malloc_pool+0x60>)
 80101d6:	f00a fc7b 	bl	801aad0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f009 fe72 	bl	8019ec4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	e003      	b.n	80101ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f009 fe6d 	bl	8019ec4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80101ea:	2300      	movs	r3, #0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	0801d59c 	.word	0x0801d59c
 80101f8:	0801d5cc 	.word	0x0801d5cc
 80101fc:	0801d5f0 	.word	0x0801d5f0

08010200 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <memp_malloc_pool+0x1c>
 801020e:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <memp_malloc_pool+0x38>)
 8010210:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010214:	4909      	ldr	r1, [pc, #36]	; (801023c <memp_malloc_pool+0x3c>)
 8010216:	480a      	ldr	r0, [pc, #40]	; (8010240 <memp_malloc_pool+0x40>)
 8010218:	f00a fc5a 	bl	801aad0 <iprintf>
  if (desc == NULL) {
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d101      	bne.n	8010226 <memp_malloc_pool+0x26>
    return NULL;
 8010222:	2300      	movs	r3, #0
 8010224:	e003      	b.n	801022e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7ff ffb8 	bl	801019c <do_memp_malloc_pool>
 801022c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801022e:	4618      	mov	r0, r3
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	0801d59c 	.word	0x0801d59c
 801023c:	0801d618 	.word	0x0801d618
 8010240:	0801d5f0 	.word	0x0801d5f0

08010244 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	4603      	mov	r3, r0
 801024c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801024e:	79fb      	ldrb	r3, [r7, #7]
 8010250:	2b0d      	cmp	r3, #13
 8010252:	d908      	bls.n	8010266 <memp_malloc+0x22>
 8010254:	4b0a      	ldr	r3, [pc, #40]	; (8010280 <memp_malloc+0x3c>)
 8010256:	f240 1257 	movw	r2, #343	; 0x157
 801025a:	490a      	ldr	r1, [pc, #40]	; (8010284 <memp_malloc+0x40>)
 801025c:	480a      	ldr	r0, [pc, #40]	; (8010288 <memp_malloc+0x44>)
 801025e:	f00a fc37 	bl	801aad0 <iprintf>
 8010262:	2300      	movs	r3, #0
 8010264:	e008      	b.n	8010278 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	4a08      	ldr	r2, [pc, #32]	; (801028c <memp_malloc+0x48>)
 801026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff ff94 	bl	801019c <do_memp_malloc_pool>
 8010274:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010276:	68fb      	ldr	r3, [r7, #12]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3710      	adds	r7, #16
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	0801d59c 	.word	0x0801d59c
 8010284:	0801d62c 	.word	0x0801d62c
 8010288:	0801d5f0 	.word	0x0801d5f0
 801028c:	0801fda0 	.word	0x0801fda0

08010290 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	f003 0303 	and.w	r3, r3, #3
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d006      	beq.n	80102b2 <do_memp_free_pool+0x22>
 80102a4:	4b0d      	ldr	r3, [pc, #52]	; (80102dc <do_memp_free_pool+0x4c>)
 80102a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80102aa:	490d      	ldr	r1, [pc, #52]	; (80102e0 <do_memp_free_pool+0x50>)
 80102ac:	480d      	ldr	r0, [pc, #52]	; (80102e4 <do_memp_free_pool+0x54>)
 80102ae:	f00a fc0f 	bl	801aad0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80102b6:	f009 fdf7 	bl	8019ea8 <sys_arch_protect>
 80102ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80102ce:	68b8      	ldr	r0, [r7, #8]
 80102d0:	f009 fdf8 	bl	8019ec4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80102d4:	bf00      	nop
 80102d6:	3710      	adds	r7, #16
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	0801d59c 	.word	0x0801d59c
 80102e0:	0801d64c 	.word	0x0801d64c
 80102e4:	0801d5f0 	.word	0x0801d5f0

080102e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d106      	bne.n	8010306 <memp_free_pool+0x1e>
 80102f8:	4b0a      	ldr	r3, [pc, #40]	; (8010324 <memp_free_pool+0x3c>)
 80102fa:	f240 1295 	movw	r2, #405	; 0x195
 80102fe:	490a      	ldr	r1, [pc, #40]	; (8010328 <memp_free_pool+0x40>)
 8010300:	480a      	ldr	r0, [pc, #40]	; (801032c <memp_free_pool+0x44>)
 8010302:	f00a fbe5 	bl	801aad0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d007      	beq.n	801031c <memp_free_pool+0x34>
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d004      	beq.n	801031c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010312:	6839      	ldr	r1, [r7, #0]
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7ff ffbb 	bl	8010290 <do_memp_free_pool>
 801031a:	e000      	b.n	801031e <memp_free_pool+0x36>
    return;
 801031c:	bf00      	nop
}
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	0801d59c 	.word	0x0801d59c
 8010328:	0801d618 	.word	0x0801d618
 801032c:	0801d5f0 	.word	0x0801d5f0

08010330 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	4603      	mov	r3, r0
 8010338:	6039      	str	r1, [r7, #0]
 801033a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801033c:	79fb      	ldrb	r3, [r7, #7]
 801033e:	2b0d      	cmp	r3, #13
 8010340:	d907      	bls.n	8010352 <memp_free+0x22>
 8010342:	4b0c      	ldr	r3, [pc, #48]	; (8010374 <memp_free+0x44>)
 8010344:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010348:	490b      	ldr	r1, [pc, #44]	; (8010378 <memp_free+0x48>)
 801034a:	480c      	ldr	r0, [pc, #48]	; (801037c <memp_free+0x4c>)
 801034c:	f00a fbc0 	bl	801aad0 <iprintf>
 8010350:	e00c      	b.n	801036c <memp_free+0x3c>

  if (mem == NULL) {
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d008      	beq.n	801036a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010358:	79fb      	ldrb	r3, [r7, #7]
 801035a:	4a09      	ldr	r2, [pc, #36]	; (8010380 <memp_free+0x50>)
 801035c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010360:	6839      	ldr	r1, [r7, #0]
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff ff94 	bl	8010290 <do_memp_free_pool>
 8010368:	e000      	b.n	801036c <memp_free+0x3c>
    return;
 801036a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	0801d59c 	.word	0x0801d59c
 8010378:	0801d66c 	.word	0x0801d66c
 801037c:	0801d5f0 	.word	0x0801d5f0
 8010380:	0801fda0 	.word	0x0801fda0

08010384 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010384:	b480      	push	{r7}
 8010386:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010388:	bf00      	nop
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
	...

08010394 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
 80103a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d108      	bne.n	80103ba <netif_add+0x26>
 80103a8:	4b59      	ldr	r3, [pc, #356]	; (8010510 <netif_add+0x17c>)
 80103aa:	f240 1227 	movw	r2, #295	; 0x127
 80103ae:	4959      	ldr	r1, [pc, #356]	; (8010514 <netif_add+0x180>)
 80103b0:	4859      	ldr	r0, [pc, #356]	; (8010518 <netif_add+0x184>)
 80103b2:	f00a fb8d 	bl	801aad0 <iprintf>
 80103b6:	2300      	movs	r3, #0
 80103b8:	e0a5      	b.n	8010506 <netif_add+0x172>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d108      	bne.n	80103d2 <netif_add+0x3e>
 80103c0:	4b53      	ldr	r3, [pc, #332]	; (8010510 <netif_add+0x17c>)
 80103c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80103c6:	4955      	ldr	r1, [pc, #340]	; (801051c <netif_add+0x188>)
 80103c8:	4853      	ldr	r0, [pc, #332]	; (8010518 <netif_add+0x184>)
 80103ca:	f00a fb81 	bl	801aad0 <iprintf>
 80103ce:	2300      	movs	r3, #0
 80103d0:	e099      	b.n	8010506 <netif_add+0x172>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d101      	bne.n	80103dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80103d8:	4b51      	ldr	r3, [pc, #324]	; (8010520 <netif_add+0x18c>)
 80103da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d101      	bne.n	80103e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80103e2:	4b4f      	ldr	r3, [pc, #316]	; (8010520 <netif_add+0x18c>)
 80103e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d101      	bne.n	80103f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80103ec:	4b4c      	ldr	r3, [pc, #304]	; (8010520 <netif_add+0x18c>)
 80103ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2200      	movs	r2, #0
 80103f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2200      	movs	r2, #0
 8010400:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	4a47      	ldr	r2, [pc, #284]	; (8010524 <netif_add+0x190>)
 8010406:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2200      	movs	r2, #0
 801040c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2200      	movs	r2, #0
 801041a:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2200      	movs	r2, #0
 8010420:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6a3a      	ldr	r2, [r7, #32]
 8010426:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8010428:	4b3f      	ldr	r3, [pc, #252]	; (8010528 <netif_add+0x194>)
 801042a:	781a      	ldrb	r2, [r3, #0]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010436:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	68b9      	ldr	r1, [r7, #8]
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	f000 f91c 	bl	801067c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	4798      	blx	r3
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d001      	beq.n	8010454 <netif_add+0xc0>
    return NULL;
 8010450:	2300      	movs	r3, #0
 8010452:	e058      	b.n	8010506 <netif_add+0x172>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801045a:	2bff      	cmp	r3, #255	; 0xff
 801045c:	d103      	bne.n	8010466 <netif_add+0xd2>
        netif->num = 0;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2200      	movs	r2, #0
 8010462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8010466:	2300      	movs	r3, #0
 8010468:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801046a:	4b30      	ldr	r3, [pc, #192]	; (801052c <netif_add+0x198>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	617b      	str	r3, [r7, #20]
 8010470:	e02b      	b.n	80104ca <netif_add+0x136>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010472:	697a      	ldr	r2, [r7, #20]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	429a      	cmp	r2, r3
 8010478:	d106      	bne.n	8010488 <netif_add+0xf4>
 801047a:	4b25      	ldr	r3, [pc, #148]	; (8010510 <netif_add+0x17c>)
 801047c:	f240 128b 	movw	r2, #395	; 0x18b
 8010480:	492b      	ldr	r1, [pc, #172]	; (8010530 <netif_add+0x19c>)
 8010482:	4825      	ldr	r0, [pc, #148]	; (8010518 <netif_add+0x184>)
 8010484:	f00a fb24 	bl	801aad0 <iprintf>
        num_netifs++;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	3301      	adds	r3, #1
 801048c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	2bff      	cmp	r3, #255	; 0xff
 8010492:	dd06      	ble.n	80104a2 <netif_add+0x10e>
 8010494:	4b1e      	ldr	r3, [pc, #120]	; (8010510 <netif_add+0x17c>)
 8010496:	f240 128d 	movw	r2, #397	; 0x18d
 801049a:	4926      	ldr	r1, [pc, #152]	; (8010534 <netif_add+0x1a0>)
 801049c:	481e      	ldr	r0, [pc, #120]	; (8010518 <netif_add+0x184>)
 801049e:	f00a fb17 	bl	801aad0 <iprintf>
        if (netif2->num == netif->num) {
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d108      	bne.n	80104c4 <netif_add+0x130>
          netif->num++;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104b8:	3301      	adds	r3, #1
 80104ba:	b2da      	uxtb	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80104c2:	e005      	b.n	80104d0 <netif_add+0x13c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	617b      	str	r3, [r7, #20]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d1d0      	bne.n	8010472 <netif_add+0xde>
        }
      }
    } while (netif2 != NULL);
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1be      	bne.n	8010454 <netif_add+0xc0>
  }
  if (netif->num == 254) {
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104dc:	2bfe      	cmp	r3, #254	; 0xfe
 80104de:	d103      	bne.n	80104e8 <netif_add+0x154>
    netif_num = 0;
 80104e0:	4b11      	ldr	r3, [pc, #68]	; (8010528 <netif_add+0x194>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	701a      	strb	r2, [r3, #0]
 80104e6:	e006      	b.n	80104f6 <netif_add+0x162>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104ee:	3301      	adds	r3, #1
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	4b0d      	ldr	r3, [pc, #52]	; (8010528 <netif_add+0x194>)
 80104f4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80104f6:	4b0d      	ldr	r3, [pc, #52]	; (801052c <netif_add+0x198>)
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80104fe:	4a0b      	ldr	r2, [pc, #44]	; (801052c <netif_add+0x198>)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010504:	68fb      	ldr	r3, [r7, #12]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	0801d688 	.word	0x0801d688
 8010514:	0801d71c 	.word	0x0801d71c
 8010518:	0801d6d8 	.word	0x0801d6d8
 801051c:	0801d738 	.word	0x0801d738
 8010520:	0801fe20 	.word	0x0801fe20
 8010524:	08010977 	.word	0x08010977
 8010528:	2000f1a8 	.word	0x2000f1a8
 801052c:	2000f1a0 	.word	0x2000f1a0
 8010530:	0801d75c 	.word	0x0801d75c
 8010534:	0801d770 	.word	0x0801d770

08010538 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010542:	6839      	ldr	r1, [r7, #0]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f002 fcff 	bl	8012f48 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f007 f8cb 	bl	80176e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010552:	bf00      	nop
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b086      	sub	sp, #24
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d106      	bne.n	801057c <netif_do_set_ipaddr+0x20>
 801056e:	4b21      	ldr	r3, [pc, #132]	; (80105f4 <netif_do_set_ipaddr+0x98>)
 8010570:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010574:	4920      	ldr	r1, [pc, #128]	; (80105f8 <netif_do_set_ipaddr+0x9c>)
 8010576:	4821      	ldr	r0, [pc, #132]	; (80105fc <netif_do_set_ipaddr+0xa0>)
 8010578:	f00a faaa 	bl	801aad0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d106      	bne.n	8010590 <netif_do_set_ipaddr+0x34>
 8010582:	4b1c      	ldr	r3, [pc, #112]	; (80105f4 <netif_do_set_ipaddr+0x98>)
 8010584:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010588:	491b      	ldr	r1, [pc, #108]	; (80105f8 <netif_do_set_ipaddr+0x9c>)
 801058a:	481c      	ldr	r0, [pc, #112]	; (80105fc <netif_do_set_ipaddr+0xa0>)
 801058c:	f00a faa0 	bl	801aad0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	3304      	adds	r3, #4
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	429a      	cmp	r2, r3
 801059c:	d024      	beq.n	80105e8 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	3304      	adds	r3, #4
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80105ae:	f107 0314 	add.w	r3, r7, #20
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7ff ffbf 	bl	8010538 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <netif_do_set_ipaddr+0x6a>
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	e000      	b.n	80105c8 <netif_do_set_ipaddr+0x6c>
 80105c6:	2300      	movs	r3, #0
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80105cc:	2101      	movs	r1, #1
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f000 f8e2 	bl	8010798 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	69db      	ldr	r3, [r3, #28]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d003      	beq.n	80105e4 <netif_do_set_ipaddr+0x88>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	69db      	ldr	r3, [r3, #28]
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	4798      	blx	r3
    return 1; /* address changed */
 80105e4:	2301      	movs	r3, #1
 80105e6:	e000      	b.n	80105ea <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3718      	adds	r7, #24
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	0801d688 	.word	0x0801d688
 80105f8:	0801d7a0 	.word	0x0801d7a0
 80105fc:	0801d6d8 	.word	0x0801d6d8

08010600 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	3308      	adds	r3, #8
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	429a      	cmp	r2, r3
 8010618:	d00a      	beq.n	8010630 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d002      	beq.n	8010626 <netif_do_set_netmask+0x26>
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	e000      	b.n	8010628 <netif_do_set_netmask+0x28>
 8010626:	2300      	movs	r3, #0
 8010628:	68fa      	ldr	r2, [r7, #12]
 801062a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801062c:	2301      	movs	r3, #1
 801062e:	e000      	b.n	8010632 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr

0801063e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801063e:	b480      	push	{r7}
 8010640:	b085      	sub	sp, #20
 8010642:	af00      	add	r7, sp, #0
 8010644:	60f8      	str	r0, [r7, #12]
 8010646:	60b9      	str	r1, [r7, #8]
 8010648:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	330c      	adds	r3, #12
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	429a      	cmp	r2, r3
 8010656:	d00a      	beq.n	801066e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d002      	beq.n	8010664 <netif_do_set_gw+0x26>
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	e000      	b.n	8010666 <netif_do_set_gw+0x28>
 8010664:	2300      	movs	r3, #0
 8010666:	68fa      	ldr	r2, [r7, #12]
 8010668:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801066a:	2301      	movs	r3, #1
 801066c:	e000      	b.n	8010670 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3714      	adds	r7, #20
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
 8010688:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801068a:	2300      	movs	r3, #0
 801068c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d101      	bne.n	801069c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010698:	4b1c      	ldr	r3, [pc, #112]	; (801070c <netif_set_addr+0x90>)
 801069a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80106a2:	4b1a      	ldr	r3, [pc, #104]	; (801070c <netif_set_addr+0x90>)
 80106a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d101      	bne.n	80106b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80106ac:	4b17      	ldr	r3, [pc, #92]	; (801070c <netif_set_addr+0x90>)
 80106ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d003      	beq.n	80106be <netif_set_addr+0x42>
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <netif_set_addr+0x46>
 80106be:	2301      	movs	r3, #1
 80106c0:	e000      	b.n	80106c4 <netif_set_addr+0x48>
 80106c2:	2300      	movs	r3, #0
 80106c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d006      	beq.n	80106da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80106cc:	f107 0310 	add.w	r3, r7, #16
 80106d0:	461a      	mov	r2, r3
 80106d2:	68b9      	ldr	r1, [r7, #8]
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f7ff ff41 	bl	801055c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80106da:	69fa      	ldr	r2, [r7, #28]
 80106dc:	6879      	ldr	r1, [r7, #4]
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f7ff ff8e 	bl	8010600 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80106e4:	69ba      	ldr	r2, [r7, #24]
 80106e6:	6839      	ldr	r1, [r7, #0]
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f7ff ffa8 	bl	801063e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d106      	bne.n	8010702 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80106f4:	f107 0310 	add.w	r3, r7, #16
 80106f8:	461a      	mov	r2, r3
 80106fa:	68b9      	ldr	r1, [r7, #8]
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f7ff ff2d 	bl	801055c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010702:	bf00      	nop
 8010704:	3720      	adds	r7, #32
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801fe20 	.word	0x0801fe20

08010710 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010718:	4a04      	ldr	r2, [pc, #16]	; (801072c <netif_set_default+0x1c>)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801071e:	bf00      	nop
 8010720:	370c      	adds	r7, #12
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	2000f1a4 	.word	0x2000f1a4

08010730 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d107      	bne.n	801074e <netif_set_up+0x1e>
 801073e:	4b13      	ldr	r3, [pc, #76]	; (801078c <netif_set_up+0x5c>)
 8010740:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010744:	4912      	ldr	r1, [pc, #72]	; (8010790 <netif_set_up+0x60>)
 8010746:	4813      	ldr	r0, [pc, #76]	; (8010794 <netif_set_up+0x64>)
 8010748:	f00a f9c2 	bl	801aad0 <iprintf>
 801074c:	e01b      	b.n	8010786 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	2b00      	cmp	r3, #0
 801075a:	d114      	bne.n	8010786 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010762:	f043 0301 	orr.w	r3, r3, #1
 8010766:	b2da      	uxtb	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	69db      	ldr	r3, [r3, #28]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d003      	beq.n	801077e <netif_set_up+0x4e>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	69db      	ldr	r3, [r3, #28]
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801077e:	2103      	movs	r1, #3
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 f809 	bl	8010798 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	0801d688 	.word	0x0801d688
 8010790:	0801d810 	.word	0x0801d810
 8010794:	0801d6d8 	.word	0x0801d6d8

08010798 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <netif_issue_reports+0x20>
 80107aa:	4b18      	ldr	r3, [pc, #96]	; (801080c <netif_issue_reports+0x74>)
 80107ac:	f240 326d 	movw	r2, #877	; 0x36d
 80107b0:	4917      	ldr	r1, [pc, #92]	; (8010810 <netif_issue_reports+0x78>)
 80107b2:	4818      	ldr	r0, [pc, #96]	; (8010814 <netif_issue_reports+0x7c>)
 80107b4:	f00a f98c 	bl	801aad0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107be:	f003 0304 	and.w	r3, r3, #4
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d01e      	beq.n	8010804 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d017      	beq.n	8010804 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80107d4:	78fb      	ldrb	r3, [r7, #3]
 80107d6:	f003 0301 	and.w	r3, r3, #1
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d013      	beq.n	8010806 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	3304      	adds	r3, #4
 80107e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00e      	beq.n	8010806 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107ee:	f003 0308 	and.w	r3, r3, #8
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d007      	beq.n	8010806 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	3304      	adds	r3, #4
 80107fa:	4619      	mov	r1, r3
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f007 fedd 	bl	80185bc <etharp_request>
 8010802:	e000      	b.n	8010806 <netif_issue_reports+0x6e>
    return;
 8010804:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	0801d688 	.word	0x0801d688
 8010810:	0801d82c 	.word	0x0801d82c
 8010814:	0801d6d8 	.word	0x0801d6d8

08010818 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d107      	bne.n	8010836 <netif_set_down+0x1e>
 8010826:	4b16      	ldr	r3, [pc, #88]	; (8010880 <netif_set_down+0x68>)
 8010828:	f240 329b 	movw	r2, #923	; 0x39b
 801082c:	4915      	ldr	r1, [pc, #84]	; (8010884 <netif_set_down+0x6c>)
 801082e:	4816      	ldr	r0, [pc, #88]	; (8010888 <netif_set_down+0x70>)
 8010830:	f00a f94e 	bl	801aad0 <iprintf>
 8010834:	e021      	b.n	801087a <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801083c:	f003 0301 	and.w	r3, r3, #1
 8010840:	2b00      	cmp	r3, #0
 8010842:	d01a      	beq.n	801087a <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801084a:	f023 0301 	bic.w	r3, r3, #1
 801084e:	b2da      	uxtb	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801085c:	f003 0308 	and.w	r3, r3, #8
 8010860:	2b00      	cmp	r3, #0
 8010862:	d002      	beq.n	801086a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f007 fa67 	bl	8017d38 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	69db      	ldr	r3, [r3, #28]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d003      	beq.n	801087a <netif_set_down+0x62>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	69db      	ldr	r3, [r3, #28]
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	4798      	blx	r3
  }
}
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	0801d688 	.word	0x0801d688
 8010884:	0801d850 	.word	0x0801d850
 8010888:	0801d6d8 	.word	0x0801d6d8

0801088c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d107      	bne.n	80108aa <netif_set_link_up+0x1e>
 801089a:	4b13      	ldr	r3, [pc, #76]	; (80108e8 <netif_set_link_up+0x5c>)
 801089c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80108a0:	4912      	ldr	r1, [pc, #72]	; (80108ec <netif_set_link_up+0x60>)
 80108a2:	4813      	ldr	r0, [pc, #76]	; (80108f0 <netif_set_link_up+0x64>)
 80108a4:	f00a f914 	bl	801aad0 <iprintf>
 80108a8:	e01b      	b.n	80108e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108b0:	f003 0304 	and.w	r3, r3, #4
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d114      	bne.n	80108e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108be:	f043 0304 	orr.w	r3, r3, #4
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80108ca:	2103      	movs	r1, #3
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f7ff ff63 	bl	8010798 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6a1b      	ldr	r3, [r3, #32]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d003      	beq.n	80108e2 <netif_set_link_up+0x56>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a1b      	ldr	r3, [r3, #32]
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	0801d688 	.word	0x0801d688
 80108ec:	0801d870 	.word	0x0801d870
 80108f0:	0801d6d8 	.word	0x0801d6d8

080108f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d107      	bne.n	8010912 <netif_set_link_down+0x1e>
 8010902:	4b11      	ldr	r3, [pc, #68]	; (8010948 <netif_set_link_down+0x54>)
 8010904:	f240 4206 	movw	r2, #1030	; 0x406
 8010908:	4910      	ldr	r1, [pc, #64]	; (801094c <netif_set_link_down+0x58>)
 801090a:	4811      	ldr	r0, [pc, #68]	; (8010950 <netif_set_link_down+0x5c>)
 801090c:	f00a f8e0 	bl	801aad0 <iprintf>
 8010910:	e017      	b.n	8010942 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b00      	cmp	r3, #0
 801091e:	d010      	beq.n	8010942 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010926:	f023 0304 	bic.w	r3, r3, #4
 801092a:	b2da      	uxtb	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a1b      	ldr	r3, [r3, #32]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d003      	beq.n	8010942 <netif_set_link_down+0x4e>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a1b      	ldr	r3, [r3, #32]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	0801d688 	.word	0x0801d688
 801094c:	0801d894 	.word	0x0801d894
 8010950:	0801d6d8 	.word	0x0801d6d8

08010954 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d002      	beq.n	801096a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	683a      	ldr	r2, [r7, #0]
 8010968:	621a      	str	r2, [r3, #32]
  }
}
 801096a:	bf00      	nop
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010976:	b480      	push	{r7}
 8010978:	b085      	sub	sp, #20
 801097a:	af00      	add	r7, sp, #0
 801097c:	60f8      	str	r0, [r7, #12]
 801097e:	60b9      	str	r1, [r7, #8]
 8010980:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010982:	f06f 030b 	mvn.w	r3, #11
}
 8010986:	4618      	mov	r0, r3
 8010988:	3714      	adds	r7, #20
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
	...

08010994 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801099e:	79fb      	ldrb	r3, [r7, #7]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d013      	beq.n	80109cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80109a4:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <netif_get_by_index+0x48>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	e00c      	b.n	80109c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80109b2:	3301      	adds	r3, #1
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	79fa      	ldrb	r2, [r7, #7]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d101      	bne.n	80109c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	e006      	b.n	80109ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1ef      	bne.n	80109ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3714      	adds	r7, #20
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	2000f1a0 	.word	0x2000f1a0

080109e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80109e6:	f009 fa5f 	bl	8019ea8 <sys_arch_protect>
 80109ea:	6038      	str	r0, [r7, #0]
 80109ec:	4b0d      	ldr	r3, [pc, #52]	; (8010a24 <pbuf_free_ooseq+0x44>)
 80109ee:	2200      	movs	r2, #0
 80109f0:	701a      	strb	r2, [r3, #0]
 80109f2:	6838      	ldr	r0, [r7, #0]
 80109f4:	f009 fa66 	bl	8019ec4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80109f8:	4b0b      	ldr	r3, [pc, #44]	; (8010a28 <pbuf_free_ooseq+0x48>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	607b      	str	r3, [r7, #4]
 80109fe:	e00a      	b.n	8010a16 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f002 fadb 	bl	8012fc4 <tcp_free_ooseq>
      return;
 8010a0e:	e005      	b.n	8010a1c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	607b      	str	r3, [r7, #4]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1f1      	bne.n	8010a00 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010a1c:	3708      	adds	r7, #8
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	2000f1a9 	.word	0x2000f1a9
 8010a28:	2000f1b8 	.word	0x2000f1b8

08010a2c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010a34:	f7ff ffd4 	bl	80109e0 <pbuf_free_ooseq>
}
 8010a38:	bf00      	nop
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010a46:	f009 fa2f 	bl	8019ea8 <sys_arch_protect>
 8010a4a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010a4c:	4b0f      	ldr	r3, [pc, #60]	; (8010a8c <pbuf_pool_is_empty+0x4c>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010a52:	4b0e      	ldr	r3, [pc, #56]	; (8010a8c <pbuf_pool_is_empty+0x4c>)
 8010a54:	2201      	movs	r2, #1
 8010a56:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f009 fa33 	bl	8019ec4 <sys_arch_unprotect>

  if (!queued) {
 8010a5e:	78fb      	ldrb	r3, [r7, #3]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d10f      	bne.n	8010a84 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010a64:	2100      	movs	r1, #0
 8010a66:	480a      	ldr	r0, [pc, #40]	; (8010a90 <pbuf_pool_is_empty+0x50>)
 8010a68:	f7fe fbc0 	bl	800f1ec <tcpip_try_callback>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d008      	beq.n	8010a84 <pbuf_pool_is_empty+0x44>
 8010a72:	f009 fa19 	bl	8019ea8 <sys_arch_protect>
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	4b04      	ldr	r3, [pc, #16]	; (8010a8c <pbuf_pool_is_empty+0x4c>)
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	701a      	strb	r2, [r3, #0]
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f009 fa20 	bl	8019ec4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	2000f1a9 	.word	0x2000f1a9
 8010a90:	08010a2d 	.word	0x08010a2d

08010a94 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	80fb      	strh	r3, [r7, #6]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	88fa      	ldrh	r2, [r7, #6]
 8010aba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	88ba      	ldrh	r2, [r7, #4]
 8010ac0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010ac2:	8b3b      	ldrh	r3, [r7, #24]
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	7f3a      	ldrb	r2, [r7, #28]
 8010ace:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	73da      	strb	r2, [r3, #15]
}
 8010adc:	bf00      	nop
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08c      	sub	sp, #48	; 0x30
 8010aec:	af02      	add	r7, sp, #8
 8010aee:	4603      	mov	r3, r0
 8010af0:	71fb      	strb	r3, [r7, #7]
 8010af2:	460b      	mov	r3, r1
 8010af4:	80bb      	strh	r3, [r7, #4]
 8010af6:	4613      	mov	r3, r2
 8010af8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010afa:	79fb      	ldrb	r3, [r7, #7]
 8010afc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010afe:	887b      	ldrh	r3, [r7, #2]
 8010b00:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010b04:	d07f      	beq.n	8010c06 <pbuf_alloc+0x11e>
 8010b06:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010b0a:	f300 80c8 	bgt.w	8010c9e <pbuf_alloc+0x1b6>
 8010b0e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010b12:	d010      	beq.n	8010b36 <pbuf_alloc+0x4e>
 8010b14:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010b18:	f300 80c1 	bgt.w	8010c9e <pbuf_alloc+0x1b6>
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d002      	beq.n	8010b26 <pbuf_alloc+0x3e>
 8010b20:	2b41      	cmp	r3, #65	; 0x41
 8010b22:	f040 80bc 	bne.w	8010c9e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010b26:	887a      	ldrh	r2, [r7, #2]
 8010b28:	88bb      	ldrh	r3, [r7, #4]
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	f000 f8d1 	bl	8010cd4 <pbuf_alloc_reference>
 8010b32:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010b34:	e0bd      	b.n	8010cb2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010b3e:	88bb      	ldrh	r3, [r7, #4]
 8010b40:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010b42:	200d      	movs	r0, #13
 8010b44:	f7ff fb7e 	bl	8010244 <memp_malloc>
 8010b48:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d109      	bne.n	8010b64 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010b50:	f7ff ff76 	bl	8010a40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d002      	beq.n	8010b60 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b5c:	f000 faa8 	bl	80110b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010b60:	2300      	movs	r3, #0
 8010b62:	e0a7      	b.n	8010cb4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010b64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b66:	3303      	adds	r3, #3
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	f023 0303 	bic.w	r3, r3, #3
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	8b7a      	ldrh	r2, [r7, #26]
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	bf28      	it	cs
 8010b7c:	4613      	movcs	r3, r2
 8010b7e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b82:	3310      	adds	r3, #16
 8010b84:	693a      	ldr	r2, [r7, #16]
 8010b86:	4413      	add	r3, r2
 8010b88:	3303      	adds	r3, #3
 8010b8a:	f023 0303 	bic.w	r3, r3, #3
 8010b8e:	4618      	mov	r0, r3
 8010b90:	89f9      	ldrh	r1, [r7, #14]
 8010b92:	8b7a      	ldrh	r2, [r7, #26]
 8010b94:	2300      	movs	r3, #0
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	887b      	ldrh	r3, [r7, #2]
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	6938      	ldr	r0, [r7, #16]
 8010ba2:	f7ff ff77 	bl	8010a94 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	f003 0303 	and.w	r3, r3, #3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d006      	beq.n	8010bc0 <pbuf_alloc+0xd8>
 8010bb2:	4b42      	ldr	r3, [pc, #264]	; (8010cbc <pbuf_alloc+0x1d4>)
 8010bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bb8:	4941      	ldr	r1, [pc, #260]	; (8010cc0 <pbuf_alloc+0x1d8>)
 8010bba:	4842      	ldr	r0, [pc, #264]	; (8010cc4 <pbuf_alloc+0x1dc>)
 8010bbc:	f009 ff88 	bl	801aad0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010bc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bc2:	3303      	adds	r3, #3
 8010bc4:	f023 0303 	bic.w	r3, r3, #3
 8010bc8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010bcc:	d106      	bne.n	8010bdc <pbuf_alloc+0xf4>
 8010bce:	4b3b      	ldr	r3, [pc, #236]	; (8010cbc <pbuf_alloc+0x1d4>)
 8010bd0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010bd4:	493c      	ldr	r1, [pc, #240]	; (8010cc8 <pbuf_alloc+0x1e0>)
 8010bd6:	483b      	ldr	r0, [pc, #236]	; (8010cc4 <pbuf_alloc+0x1dc>)
 8010bd8:	f009 ff7a 	bl	801aad0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d102      	bne.n	8010be8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	627b      	str	r3, [r7, #36]	; 0x24
 8010be6:	e002      	b.n	8010bee <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	693a      	ldr	r2, [r7, #16]
 8010bec:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010bf2:	8b7a      	ldrh	r2, [r7, #26]
 8010bf4:	89fb      	ldrh	r3, [r7, #14]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010bfe:	8b7b      	ldrh	r3, [r7, #26]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d19e      	bne.n	8010b42 <pbuf_alloc+0x5a>
      break;
 8010c04:	e055      	b.n	8010cb2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c08:	3303      	adds	r3, #3
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	f023 0303 	bic.w	r3, r3, #3
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	88bb      	ldrh	r3, [r7, #4]
 8010c14:	3303      	adds	r3, #3
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	f023 0303 	bic.w	r3, r3, #3
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	4413      	add	r3, r2
 8010c20:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010c22:	8b3b      	ldrh	r3, [r7, #24]
 8010c24:	3310      	adds	r3, #16
 8010c26:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010c28:	8b3a      	ldrh	r2, [r7, #24]
 8010c2a:	88bb      	ldrh	r3, [r7, #4]
 8010c2c:	3303      	adds	r3, #3
 8010c2e:	f023 0303 	bic.w	r3, r3, #3
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d306      	bcc.n	8010c44 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010c36:	8afa      	ldrh	r2, [r7, #22]
 8010c38:	88bb      	ldrh	r3, [r7, #4]
 8010c3a:	3303      	adds	r3, #3
 8010c3c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d201      	bcs.n	8010c48 <pbuf_alloc+0x160>
        return NULL;
 8010c44:	2300      	movs	r3, #0
 8010c46:	e035      	b.n	8010cb4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010c48:	8afb      	ldrh	r3, [r7, #22]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff f956 	bl	800fefc <mem_malloc>
 8010c50:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d101      	bne.n	8010c5c <pbuf_alloc+0x174>
        return NULL;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e02b      	b.n	8010cb4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010c5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c5e:	3310      	adds	r3, #16
 8010c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c62:	4413      	add	r3, r2
 8010c64:	3303      	adds	r3, #3
 8010c66:	f023 0303 	bic.w	r3, r3, #3
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	88b9      	ldrh	r1, [r7, #4]
 8010c6e:	88ba      	ldrh	r2, [r7, #4]
 8010c70:	2300      	movs	r3, #0
 8010c72:	9301      	str	r3, [sp, #4]
 8010c74:	887b      	ldrh	r3, [r7, #2]
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4601      	mov	r1, r0
 8010c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c7e:	f7ff ff09 	bl	8010a94 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	f003 0303 	and.w	r3, r3, #3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d010      	beq.n	8010cb0 <pbuf_alloc+0x1c8>
 8010c8e:	4b0b      	ldr	r3, [pc, #44]	; (8010cbc <pbuf_alloc+0x1d4>)
 8010c90:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010c94:	490d      	ldr	r1, [pc, #52]	; (8010ccc <pbuf_alloc+0x1e4>)
 8010c96:	480b      	ldr	r0, [pc, #44]	; (8010cc4 <pbuf_alloc+0x1dc>)
 8010c98:	f009 ff1a 	bl	801aad0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010c9c:	e008      	b.n	8010cb0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010c9e:	4b07      	ldr	r3, [pc, #28]	; (8010cbc <pbuf_alloc+0x1d4>)
 8010ca0:	f240 1227 	movw	r2, #295	; 0x127
 8010ca4:	490a      	ldr	r1, [pc, #40]	; (8010cd0 <pbuf_alloc+0x1e8>)
 8010ca6:	4807      	ldr	r0, [pc, #28]	; (8010cc4 <pbuf_alloc+0x1dc>)
 8010ca8:	f009 ff12 	bl	801aad0 <iprintf>
      return NULL;
 8010cac:	2300      	movs	r3, #0
 8010cae:	e001      	b.n	8010cb4 <pbuf_alloc+0x1cc>
      break;
 8010cb0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3728      	adds	r7, #40	; 0x28
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	0801d8b8 	.word	0x0801d8b8
 8010cc0:	0801d8e8 	.word	0x0801d8e8
 8010cc4:	0801d918 	.word	0x0801d918
 8010cc8:	0801d940 	.word	0x0801d940
 8010ccc:	0801d974 	.word	0x0801d974
 8010cd0:	0801d9a0 	.word	0x0801d9a0

08010cd4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b086      	sub	sp, #24
 8010cd8:	af02      	add	r7, sp, #8
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	807b      	strh	r3, [r7, #2]
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010ce4:	883b      	ldrh	r3, [r7, #0]
 8010ce6:	2b41      	cmp	r3, #65	; 0x41
 8010ce8:	d009      	beq.n	8010cfe <pbuf_alloc_reference+0x2a>
 8010cea:	883b      	ldrh	r3, [r7, #0]
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	d006      	beq.n	8010cfe <pbuf_alloc_reference+0x2a>
 8010cf0:	4b0f      	ldr	r3, [pc, #60]	; (8010d30 <pbuf_alloc_reference+0x5c>)
 8010cf2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010cf6:	490f      	ldr	r1, [pc, #60]	; (8010d34 <pbuf_alloc_reference+0x60>)
 8010cf8:	480f      	ldr	r0, [pc, #60]	; (8010d38 <pbuf_alloc_reference+0x64>)
 8010cfa:	f009 fee9 	bl	801aad0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010cfe:	200c      	movs	r0, #12
 8010d00:	f7ff faa0 	bl	8010244 <memp_malloc>
 8010d04:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d101      	bne.n	8010d10 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e00b      	b.n	8010d28 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010d10:	8879      	ldrh	r1, [r7, #2]
 8010d12:	887a      	ldrh	r2, [r7, #2]
 8010d14:	2300      	movs	r3, #0
 8010d16:	9301      	str	r3, [sp, #4]
 8010d18:	883b      	ldrh	r3, [r7, #0]
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	6879      	ldr	r1, [r7, #4]
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f7ff feb7 	bl	8010a94 <pbuf_init_alloced_pbuf>
  return p;
 8010d26:	68fb      	ldr	r3, [r7, #12]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	0801d8b8 	.word	0x0801d8b8
 8010d34:	0801d9bc 	.word	0x0801d9bc
 8010d38:	0801d918 	.word	0x0801d918

08010d3c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b088      	sub	sp, #32
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	607b      	str	r3, [r7, #4]
 8010d44:	4603      	mov	r3, r0
 8010d46:	73fb      	strb	r3, [r7, #15]
 8010d48:	460b      	mov	r3, r1
 8010d4a:	81bb      	strh	r3, [r7, #12]
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010d50:	7bfb      	ldrb	r3, [r7, #15]
 8010d52:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010d54:	8a7b      	ldrh	r3, [r7, #18]
 8010d56:	3303      	adds	r3, #3
 8010d58:	f023 0203 	bic.w	r2, r3, #3
 8010d5c:	89bb      	ldrh	r3, [r7, #12]
 8010d5e:	441a      	add	r2, r3
 8010d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d901      	bls.n	8010d6a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010d66:	2300      	movs	r3, #0
 8010d68:	e018      	b.n	8010d9c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010d6a:	6a3b      	ldr	r3, [r7, #32]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d007      	beq.n	8010d80 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010d70:	8a7b      	ldrh	r3, [r7, #18]
 8010d72:	3303      	adds	r3, #3
 8010d74:	f023 0303 	bic.w	r3, r3, #3
 8010d78:	6a3a      	ldr	r2, [r7, #32]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	617b      	str	r3, [r7, #20]
 8010d7e:	e001      	b.n	8010d84 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	89b9      	ldrh	r1, [r7, #12]
 8010d88:	89ba      	ldrh	r2, [r7, #12]
 8010d8a:	2302      	movs	r3, #2
 8010d8c:	9301      	str	r3, [sp, #4]
 8010d8e:	897b      	ldrh	r3, [r7, #10]
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	460b      	mov	r3, r1
 8010d94:	6979      	ldr	r1, [r7, #20]
 8010d96:	f7ff fe7d 	bl	8010a94 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010d9a:	687b      	ldr	r3, [r7, #4]
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3718      	adds	r7, #24
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	460b      	mov	r3, r1
 8010dae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d106      	bne.n	8010dc4 <pbuf_realloc+0x20>
 8010db6:	4b3a      	ldr	r3, [pc, #232]	; (8010ea0 <pbuf_realloc+0xfc>)
 8010db8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010dbc:	4939      	ldr	r1, [pc, #228]	; (8010ea4 <pbuf_realloc+0x100>)
 8010dbe:	483a      	ldr	r0, [pc, #232]	; (8010ea8 <pbuf_realloc+0x104>)
 8010dc0:	f009 fe86 	bl	801aad0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	891b      	ldrh	r3, [r3, #8]
 8010dc8:	887a      	ldrh	r2, [r7, #2]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d263      	bcs.n	8010e96 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	891a      	ldrh	r2, [r3, #8]
 8010dd2:	887b      	ldrh	r3, [r7, #2]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010dd8:	887b      	ldrh	r3, [r7, #2]
 8010dda:	817b      	strh	r3, [r7, #10]
  q = p;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010de0:	e018      	b.n	8010e14 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	895b      	ldrh	r3, [r3, #10]
 8010de6:	897a      	ldrh	r2, [r7, #10]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	891a      	ldrh	r2, [r3, #8]
 8010df0:	893b      	ldrh	r3, [r7, #8]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d106      	bne.n	8010e14 <pbuf_realloc+0x70>
 8010e06:	4b26      	ldr	r3, [pc, #152]	; (8010ea0 <pbuf_realloc+0xfc>)
 8010e08:	f240 12af 	movw	r2, #431	; 0x1af
 8010e0c:	4927      	ldr	r1, [pc, #156]	; (8010eac <pbuf_realloc+0x108>)
 8010e0e:	4826      	ldr	r0, [pc, #152]	; (8010ea8 <pbuf_realloc+0x104>)
 8010e10:	f009 fe5e 	bl	801aad0 <iprintf>
  while (rem_len > q->len) {
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	895b      	ldrh	r3, [r3, #10]
 8010e18:	897a      	ldrh	r2, [r7, #10]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d8e1      	bhi.n	8010de2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	7b1b      	ldrb	r3, [r3, #12]
 8010e22:	f003 030f 	and.w	r3, r3, #15
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d121      	bne.n	8010e6e <pbuf_realloc+0xca>
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	895b      	ldrh	r3, [r3, #10]
 8010e2e:	897a      	ldrh	r2, [r7, #10]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d01c      	beq.n	8010e6e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	7b5b      	ldrb	r3, [r3, #13]
 8010e38:	f003 0302 	and.w	r3, r3, #2
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d116      	bne.n	8010e6e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	685a      	ldr	r2, [r3, #4]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	897b      	ldrh	r3, [r7, #10]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	4619      	mov	r1, r3
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f7fe ff48 	bl	800fce8 <mem_trim>
 8010e58:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d106      	bne.n	8010e6e <pbuf_realloc+0xca>
 8010e60:	4b0f      	ldr	r3, [pc, #60]	; (8010ea0 <pbuf_realloc+0xfc>)
 8010e62:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010e66:	4912      	ldr	r1, [pc, #72]	; (8010eb0 <pbuf_realloc+0x10c>)
 8010e68:	480f      	ldr	r0, [pc, #60]	; (8010ea8 <pbuf_realloc+0x104>)
 8010e6a:	f009 fe31 	bl	801aad0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	897a      	ldrh	r2, [r7, #10]
 8010e72:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	895a      	ldrh	r2, [r3, #10]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d004      	beq.n	8010e8e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 f911 	bl	80110b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2200      	movs	r2, #0
 8010e92:	601a      	str	r2, [r3, #0]
 8010e94:	e000      	b.n	8010e98 <pbuf_realloc+0xf4>
    return;
 8010e96:	bf00      	nop

}
 8010e98:	3710      	adds	r7, #16
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	0801d8b8 	.word	0x0801d8b8
 8010ea4:	0801d9d0 	.word	0x0801d9d0
 8010ea8:	0801d918 	.word	0x0801d918
 8010eac:	0801d9e8 	.word	0x0801d9e8
 8010eb0:	0801da00 	.word	0x0801da00

08010eb4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d106      	bne.n	8010ed6 <pbuf_add_header_impl+0x22>
 8010ec8:	4b2b      	ldr	r3, [pc, #172]	; (8010f78 <pbuf_add_header_impl+0xc4>)
 8010eca:	f240 12df 	movw	r2, #479	; 0x1df
 8010ece:	492b      	ldr	r1, [pc, #172]	; (8010f7c <pbuf_add_header_impl+0xc8>)
 8010ed0:	482b      	ldr	r0, [pc, #172]	; (8010f80 <pbuf_add_header_impl+0xcc>)
 8010ed2:	f009 fdfd 	bl	801aad0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d003      	beq.n	8010ee4 <pbuf_add_header_impl+0x30>
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ee2:	d301      	bcc.n	8010ee8 <pbuf_add_header_impl+0x34>
    return 1;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e043      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <pbuf_add_header_impl+0x3e>
    return 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e03e      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	891a      	ldrh	r2, [r3, #8]
 8010efa:	8a7b      	ldrh	r3, [r7, #18]
 8010efc:	4413      	add	r3, r2
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	8a7a      	ldrh	r2, [r7, #18]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d901      	bls.n	8010f0a <pbuf_add_header_impl+0x56>
    return 1;
 8010f06:	2301      	movs	r3, #1
 8010f08:	e032      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	7b1b      	ldrb	r3, [r3, #12]
 8010f0e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010f10:	8a3b      	ldrh	r3, [r7, #16]
 8010f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00c      	beq.n	8010f34 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	685a      	ldr	r2, [r3, #4]
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	425b      	negs	r3, r3
 8010f22:	4413      	add	r3, r2
 8010f24:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	3310      	adds	r3, #16
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d20d      	bcs.n	8010f4c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010f30:	2301      	movs	r3, #1
 8010f32:	e01d      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010f34:	79fb      	ldrb	r3, [r7, #7]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d006      	beq.n	8010f48 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	425b      	negs	r3, r3
 8010f42:	4413      	add	r3, r2
 8010f44:	617b      	str	r3, [r7, #20]
 8010f46:	e001      	b.n	8010f4c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	e011      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	697a      	ldr	r2, [r7, #20]
 8010f50:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	895a      	ldrh	r2, [r3, #10]
 8010f56:	8a7b      	ldrh	r3, [r7, #18]
 8010f58:	4413      	add	r3, r2
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	891a      	ldrh	r2, [r3, #8]
 8010f64:	8a7b      	ldrh	r3, [r7, #18]
 8010f66:	4413      	add	r3, r2
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	811a      	strh	r2, [r3, #8]


  return 0;
 8010f6e:	2300      	movs	r3, #0
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	0801d8b8 	.word	0x0801d8b8
 8010f7c:	0801da1c 	.word	0x0801da1c
 8010f80:	0801d918 	.word	0x0801d918

08010f84 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010f8e:	2200      	movs	r2, #0
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7ff ff8e 	bl	8010eb4 <pbuf_add_header_impl>
 8010f98:	4603      	mov	r3, r0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
	...

08010fa4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d106      	bne.n	8010fc2 <pbuf_remove_header+0x1e>
 8010fb4:	4b20      	ldr	r3, [pc, #128]	; (8011038 <pbuf_remove_header+0x94>)
 8010fb6:	f240 224b 	movw	r2, #587	; 0x24b
 8010fba:	4920      	ldr	r1, [pc, #128]	; (801103c <pbuf_remove_header+0x98>)
 8010fbc:	4820      	ldr	r0, [pc, #128]	; (8011040 <pbuf_remove_header+0x9c>)
 8010fbe:	f009 fd87 	bl	801aad0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d003      	beq.n	8010fd0 <pbuf_remove_header+0x2c>
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fce:	d301      	bcc.n	8010fd4 <pbuf_remove_header+0x30>
    return 1;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e02c      	b.n	801102e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d101      	bne.n	8010fde <pbuf_remove_header+0x3a>
    return 0;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	e027      	b.n	801102e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	895b      	ldrh	r3, [r3, #10]
 8010fe6:	89fa      	ldrh	r2, [r7, #14]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d908      	bls.n	8010ffe <pbuf_remove_header+0x5a>
 8010fec:	4b12      	ldr	r3, [pc, #72]	; (8011038 <pbuf_remove_header+0x94>)
 8010fee:	f240 2255 	movw	r2, #597	; 0x255
 8010ff2:	4914      	ldr	r1, [pc, #80]	; (8011044 <pbuf_remove_header+0xa0>)
 8010ff4:	4812      	ldr	r0, [pc, #72]	; (8011040 <pbuf_remove_header+0x9c>)
 8010ff6:	f009 fd6b 	bl	801aad0 <iprintf>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e017      	b.n	801102e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	441a      	add	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	895a      	ldrh	r2, [r3, #10]
 8011014:	89fb      	ldrh	r3, [r7, #14]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	891a      	ldrh	r2, [r3, #8]
 8011022:	89fb      	ldrh	r3, [r7, #14]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b29a      	uxth	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	0801d8b8 	.word	0x0801d8b8
 801103c:	0801da1c 	.word	0x0801da1c
 8011040:	0801d918 	.word	0x0801d918
 8011044:	0801da28 	.word	0x0801da28

08011048 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	460b      	mov	r3, r1
 8011052:	807b      	strh	r3, [r7, #2]
 8011054:	4613      	mov	r3, r2
 8011056:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801105c:	2b00      	cmp	r3, #0
 801105e:	da08      	bge.n	8011072 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011064:	425b      	negs	r3, r3
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff ff9b 	bl	8010fa4 <pbuf_remove_header>
 801106e:	4603      	mov	r3, r0
 8011070:	e007      	b.n	8011082 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011072:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011076:	787a      	ldrb	r2, [r7, #1]
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7ff ff1a 	bl	8010eb4 <pbuf_add_header_impl>
 8011080:	4603      	mov	r3, r0
  }
}
 8011082:	4618      	mov	r0, r3
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b082      	sub	sp, #8
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	460b      	mov	r3, r1
 8011094:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011096:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801109a:	2201      	movs	r2, #1
 801109c:	4619      	mov	r1, r3
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7ff ffd2 	bl	8011048 <pbuf_header_impl>
 80110a4:	4603      	mov	r3, r0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3708      	adds	r7, #8
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b088      	sub	sp, #32
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10b      	bne.n	80110d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d106      	bne.n	80110d2 <pbuf_free+0x22>
 80110c4:	4b3b      	ldr	r3, [pc, #236]	; (80111b4 <pbuf_free+0x104>)
 80110c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80110ca:	493b      	ldr	r1, [pc, #236]	; (80111b8 <pbuf_free+0x108>)
 80110cc:	483b      	ldr	r0, [pc, #236]	; (80111bc <pbuf_free+0x10c>)
 80110ce:	f009 fcff 	bl	801aad0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	e069      	b.n	80111aa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80110da:	e062      	b.n	80111a2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80110dc:	f008 fee4 	bl	8019ea8 <sys_arch_protect>
 80110e0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	7b9b      	ldrb	r3, [r3, #14]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <pbuf_free+0x48>
 80110ea:	4b32      	ldr	r3, [pc, #200]	; (80111b4 <pbuf_free+0x104>)
 80110ec:	f240 22f1 	movw	r2, #753	; 0x2f1
 80110f0:	4933      	ldr	r1, [pc, #204]	; (80111c0 <pbuf_free+0x110>)
 80110f2:	4832      	ldr	r0, [pc, #200]	; (80111bc <pbuf_free+0x10c>)
 80110f4:	f009 fcec 	bl	801aad0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	7b9b      	ldrb	r3, [r3, #14]
 80110fc:	3b01      	subs	r3, #1
 80110fe:	b2da      	uxtb	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	739a      	strb	r2, [r3, #14]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	7b9b      	ldrb	r3, [r3, #14]
 8011108:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801110a:	69b8      	ldr	r0, [r7, #24]
 801110c:	f008 feda 	bl	8019ec4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011110:	7dfb      	ldrb	r3, [r7, #23]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d143      	bne.n	801119e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	7b1b      	ldrb	r3, [r3, #12]
 8011120:	f003 030f 	and.w	r3, r3, #15
 8011124:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	7b5b      	ldrb	r3, [r3, #13]
 801112a:	f003 0302 	and.w	r3, r3, #2
 801112e:	2b00      	cmp	r3, #0
 8011130:	d011      	beq.n	8011156 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <pbuf_free+0x9c>
 801113e:	4b1d      	ldr	r3, [pc, #116]	; (80111b4 <pbuf_free+0x104>)
 8011140:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011144:	491f      	ldr	r1, [pc, #124]	; (80111c4 <pbuf_free+0x114>)
 8011146:	481d      	ldr	r0, [pc, #116]	; (80111bc <pbuf_free+0x10c>)
 8011148:	f009 fcc2 	bl	801aad0 <iprintf>
        pc->custom_free_function(p);
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	4798      	blx	r3
 8011154:	e01d      	b.n	8011192 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011156:	7bfb      	ldrb	r3, [r7, #15]
 8011158:	2b02      	cmp	r3, #2
 801115a:	d104      	bne.n	8011166 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801115c:	6879      	ldr	r1, [r7, #4]
 801115e:	200d      	movs	r0, #13
 8011160:	f7ff f8e6 	bl	8010330 <memp_free>
 8011164:	e015      	b.n	8011192 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011166:	7bfb      	ldrb	r3, [r7, #15]
 8011168:	2b01      	cmp	r3, #1
 801116a:	d104      	bne.n	8011176 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801116c:	6879      	ldr	r1, [r7, #4]
 801116e:	200c      	movs	r0, #12
 8011170:	f7ff f8de 	bl	8010330 <memp_free>
 8011174:	e00d      	b.n	8011192 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011176:	7bfb      	ldrb	r3, [r7, #15]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d103      	bne.n	8011184 <pbuf_free+0xd4>
          mem_free(p);
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7fe fd23 	bl	800fbc8 <mem_free>
 8011182:	e006      	b.n	8011192 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011184:	4b0b      	ldr	r3, [pc, #44]	; (80111b4 <pbuf_free+0x104>)
 8011186:	f240 320f 	movw	r2, #783	; 0x30f
 801118a:	490f      	ldr	r1, [pc, #60]	; (80111c8 <pbuf_free+0x118>)
 801118c:	480b      	ldr	r0, [pc, #44]	; (80111bc <pbuf_free+0x10c>)
 801118e:	f009 fc9f 	bl	801aad0 <iprintf>
        }
      }
      count++;
 8011192:	7ffb      	ldrb	r3, [r7, #31]
 8011194:	3301      	adds	r3, #1
 8011196:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	607b      	str	r3, [r7, #4]
 801119c:	e001      	b.n	80111a2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801119e:	2300      	movs	r3, #0
 80111a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d199      	bne.n	80110dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80111a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3720      	adds	r7, #32
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	0801d8b8 	.word	0x0801d8b8
 80111b8:	0801da1c 	.word	0x0801da1c
 80111bc:	0801d918 	.word	0x0801d918
 80111c0:	0801da48 	.word	0x0801da48
 80111c4:	0801da60 	.word	0x0801da60
 80111c8:	0801da84 	.word	0x0801da84

080111cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b085      	sub	sp, #20
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80111d4:	2300      	movs	r3, #0
 80111d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80111d8:	e005      	b.n	80111e6 <pbuf_clen+0x1a>
    ++len;
 80111da:	89fb      	ldrh	r3, [r7, #14]
 80111dc:	3301      	adds	r3, #1
 80111de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1f6      	bne.n	80111da <pbuf_clen+0xe>
  }
  return len;
 80111ec:	89fb      	ldrh	r3, [r7, #14]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
	...

080111fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d016      	beq.n	8011238 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801120a:	f008 fe4d 	bl	8019ea8 <sys_arch_protect>
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	7b9b      	ldrb	r3, [r3, #14]
 8011214:	3301      	adds	r3, #1
 8011216:	b2da      	uxtb	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	739a      	strb	r2, [r3, #14]
 801121c:	68f8      	ldr	r0, [r7, #12]
 801121e:	f008 fe51 	bl	8019ec4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7b9b      	ldrb	r3, [r3, #14]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d106      	bne.n	8011238 <pbuf_ref+0x3c>
 801122a:	4b05      	ldr	r3, [pc, #20]	; (8011240 <pbuf_ref+0x44>)
 801122c:	f240 3242 	movw	r2, #834	; 0x342
 8011230:	4904      	ldr	r1, [pc, #16]	; (8011244 <pbuf_ref+0x48>)
 8011232:	4805      	ldr	r0, [pc, #20]	; (8011248 <pbuf_ref+0x4c>)
 8011234:	f009 fc4c 	bl	801aad0 <iprintf>
  }
}
 8011238:	bf00      	nop
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	0801d8b8 	.word	0x0801d8b8
 8011244:	0801da98 	.word	0x0801da98
 8011248:	0801d918 	.word	0x0801d918

0801124c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d002      	beq.n	8011262 <pbuf_cat+0x16>
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d107      	bne.n	8011272 <pbuf_cat+0x26>
 8011262:	4b20      	ldr	r3, [pc, #128]	; (80112e4 <pbuf_cat+0x98>)
 8011264:	f240 3259 	movw	r2, #857	; 0x359
 8011268:	491f      	ldr	r1, [pc, #124]	; (80112e8 <pbuf_cat+0x9c>)
 801126a:	4820      	ldr	r0, [pc, #128]	; (80112ec <pbuf_cat+0xa0>)
 801126c:	f009 fc30 	bl	801aad0 <iprintf>
 8011270:	e034      	b.n	80112dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	60fb      	str	r3, [r7, #12]
 8011276:	e00a      	b.n	801128e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	891a      	ldrh	r2, [r3, #8]
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	4413      	add	r3, r2
 8011282:	b29a      	uxth	r2, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d1f0      	bne.n	8011278 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	891a      	ldrh	r2, [r3, #8]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	895b      	ldrh	r3, [r3, #10]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d006      	beq.n	80112b0 <pbuf_cat+0x64>
 80112a2:	4b10      	ldr	r3, [pc, #64]	; (80112e4 <pbuf_cat+0x98>)
 80112a4:	f240 3262 	movw	r2, #866	; 0x362
 80112a8:	4911      	ldr	r1, [pc, #68]	; (80112f0 <pbuf_cat+0xa4>)
 80112aa:	4810      	ldr	r0, [pc, #64]	; (80112ec <pbuf_cat+0xa0>)
 80112ac:	f009 fc10 	bl	801aad0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d006      	beq.n	80112c6 <pbuf_cat+0x7a>
 80112b8:	4b0a      	ldr	r3, [pc, #40]	; (80112e4 <pbuf_cat+0x98>)
 80112ba:	f240 3263 	movw	r2, #867	; 0x363
 80112be:	490d      	ldr	r1, [pc, #52]	; (80112f4 <pbuf_cat+0xa8>)
 80112c0:	480a      	ldr	r0, [pc, #40]	; (80112ec <pbuf_cat+0xa0>)
 80112c2:	f009 fc05 	bl	801aad0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	891a      	ldrh	r2, [r3, #8]
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	891b      	ldrh	r3, [r3, #8]
 80112ce:	4413      	add	r3, r2
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	683a      	ldr	r2, [r7, #0]
 80112da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	0801d8b8 	.word	0x0801d8b8
 80112e8:	0801daac 	.word	0x0801daac
 80112ec:	0801d918 	.word	0x0801d918
 80112f0:	0801dae4 	.word	0x0801dae4
 80112f4:	0801db14 	.word	0x0801db14

080112f8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011302:	6839      	ldr	r1, [r7, #0]
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7ff ffa1 	bl	801124c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801130a:	6838      	ldr	r0, [r7, #0]
 801130c:	f7ff ff76 	bl	80111fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011310:	bf00      	nop
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011322:	2300      	movs	r3, #0
 8011324:	617b      	str	r3, [r7, #20]
 8011326:	2300      	movs	r3, #0
 8011328:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d008      	beq.n	8011342 <pbuf_copy+0x2a>
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d005      	beq.n	8011342 <pbuf_copy+0x2a>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	891a      	ldrh	r2, [r3, #8]
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	891b      	ldrh	r3, [r3, #8]
 801133e:	429a      	cmp	r2, r3
 8011340:	d209      	bcs.n	8011356 <pbuf_copy+0x3e>
 8011342:	4b57      	ldr	r3, [pc, #348]	; (80114a0 <pbuf_copy+0x188>)
 8011344:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011348:	4956      	ldr	r1, [pc, #344]	; (80114a4 <pbuf_copy+0x18c>)
 801134a:	4857      	ldr	r0, [pc, #348]	; (80114a8 <pbuf_copy+0x190>)
 801134c:	f009 fbc0 	bl	801aad0 <iprintf>
 8011350:	f06f 030f 	mvn.w	r3, #15
 8011354:	e09f      	b.n	8011496 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	895b      	ldrh	r3, [r3, #10]
 801135a:	461a      	mov	r2, r3
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	1ad2      	subs	r2, r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	895b      	ldrh	r3, [r3, #10]
 8011364:	4619      	mov	r1, r3
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	1acb      	subs	r3, r1, r3
 801136a:	429a      	cmp	r2, r3
 801136c:	d306      	bcc.n	801137c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	895b      	ldrh	r3, [r3, #10]
 8011372:	461a      	mov	r2, r3
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	60fb      	str	r3, [r7, #12]
 801137a:	e005      	b.n	8011388 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	895b      	ldrh	r3, [r3, #10]
 8011380:	461a      	mov	r2, r3
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	1ad3      	subs	r3, r2, r3
 8011386:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	18d0      	adds	r0, r2, r3
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	685a      	ldr	r2, [r3, #4]
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	4413      	add	r3, r2
 8011398:	68fa      	ldr	r2, [r7, #12]
 801139a:	4619      	mov	r1, r3
 801139c:	f009 fd4b 	bl	801ae36 <memcpy>
    offset_to += len;
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	4413      	add	r3, r2
 80113a6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80113a8:	693a      	ldr	r2, [r7, #16]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	4413      	add	r3, r2
 80113ae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	895b      	ldrh	r3, [r3, #10]
 80113b4:	461a      	mov	r2, r3
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d906      	bls.n	80113ca <pbuf_copy+0xb2>
 80113bc:	4b38      	ldr	r3, [pc, #224]	; (80114a0 <pbuf_copy+0x188>)
 80113be:	f240 32d9 	movw	r2, #985	; 0x3d9
 80113c2:	493a      	ldr	r1, [pc, #232]	; (80114ac <pbuf_copy+0x194>)
 80113c4:	4838      	ldr	r0, [pc, #224]	; (80114a8 <pbuf_copy+0x190>)
 80113c6:	f009 fb83 	bl	801aad0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	895b      	ldrh	r3, [r3, #10]
 80113ce:	461a      	mov	r2, r3
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d906      	bls.n	80113e4 <pbuf_copy+0xcc>
 80113d6:	4b32      	ldr	r3, [pc, #200]	; (80114a0 <pbuf_copy+0x188>)
 80113d8:	f240 32da 	movw	r2, #986	; 0x3da
 80113dc:	4934      	ldr	r1, [pc, #208]	; (80114b0 <pbuf_copy+0x198>)
 80113de:	4832      	ldr	r0, [pc, #200]	; (80114a8 <pbuf_copy+0x190>)
 80113e0:	f009 fb76 	bl	801aad0 <iprintf>
    if (offset_from >= p_from->len) {
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	895b      	ldrh	r3, [r3, #10]
 80113e8:	461a      	mov	r2, r3
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d304      	bcc.n	80113fa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	895b      	ldrh	r3, [r3, #10]
 80113fe:	461a      	mov	r2, r3
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	4293      	cmp	r3, r2
 8011404:	d114      	bne.n	8011430 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011406:	2300      	movs	r3, #0
 8011408:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d10c      	bne.n	8011430 <pbuf_copy+0x118>
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d009      	beq.n	8011430 <pbuf_copy+0x118>
 801141c:	4b20      	ldr	r3, [pc, #128]	; (80114a0 <pbuf_copy+0x188>)
 801141e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011422:	4924      	ldr	r1, [pc, #144]	; (80114b4 <pbuf_copy+0x19c>)
 8011424:	4820      	ldr	r0, [pc, #128]	; (80114a8 <pbuf_copy+0x190>)
 8011426:	f009 fb53 	bl	801aad0 <iprintf>
 801142a:	f06f 030f 	mvn.w	r3, #15
 801142e:	e032      	b.n	8011496 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d013      	beq.n	801145e <pbuf_copy+0x146>
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	895a      	ldrh	r2, [r3, #10]
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	891b      	ldrh	r3, [r3, #8]
 801143e:	429a      	cmp	r2, r3
 8011440:	d10d      	bne.n	801145e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d009      	beq.n	801145e <pbuf_copy+0x146>
 801144a:	4b15      	ldr	r3, [pc, #84]	; (80114a0 <pbuf_copy+0x188>)
 801144c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011450:	4919      	ldr	r1, [pc, #100]	; (80114b8 <pbuf_copy+0x1a0>)
 8011452:	4815      	ldr	r0, [pc, #84]	; (80114a8 <pbuf_copy+0x190>)
 8011454:	f009 fb3c 	bl	801aad0 <iprintf>
 8011458:	f06f 0305 	mvn.w	r3, #5
 801145c:	e01b      	b.n	8011496 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d013      	beq.n	801148c <pbuf_copy+0x174>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	895a      	ldrh	r2, [r3, #10]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	891b      	ldrh	r3, [r3, #8]
 801146c:	429a      	cmp	r2, r3
 801146e:	d10d      	bne.n	801148c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d009      	beq.n	801148c <pbuf_copy+0x174>
 8011478:	4b09      	ldr	r3, [pc, #36]	; (80114a0 <pbuf_copy+0x188>)
 801147a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801147e:	490e      	ldr	r1, [pc, #56]	; (80114b8 <pbuf_copy+0x1a0>)
 8011480:	4809      	ldr	r0, [pc, #36]	; (80114a8 <pbuf_copy+0x190>)
 8011482:	f009 fb25 	bl	801aad0 <iprintf>
 8011486:	f06f 0305 	mvn.w	r3, #5
 801148a:	e004      	b.n	8011496 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	f47f af61 	bne.w	8011356 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011494:	2300      	movs	r3, #0
}
 8011496:	4618      	mov	r0, r3
 8011498:	3718      	adds	r7, #24
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	0801d8b8 	.word	0x0801d8b8
 80114a4:	0801db60 	.word	0x0801db60
 80114a8:	0801d918 	.word	0x0801d918
 80114ac:	0801db90 	.word	0x0801db90
 80114b0:	0801dba8 	.word	0x0801dba8
 80114b4:	0801dbc4 	.word	0x0801dbc4
 80114b8:	0801dbd4 	.word	0x0801dbd4

080114bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b088      	sub	sp, #32
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	4611      	mov	r1, r2
 80114c8:	461a      	mov	r2, r3
 80114ca:	460b      	mov	r3, r1
 80114cc:	80fb      	strh	r3, [r7, #6]
 80114ce:	4613      	mov	r3, r2
 80114d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80114d2:	2300      	movs	r3, #0
 80114d4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d108      	bne.n	80114f2 <pbuf_copy_partial+0x36>
 80114e0:	4b2b      	ldr	r3, [pc, #172]	; (8011590 <pbuf_copy_partial+0xd4>)
 80114e2:	f240 420a 	movw	r2, #1034	; 0x40a
 80114e6:	492b      	ldr	r1, [pc, #172]	; (8011594 <pbuf_copy_partial+0xd8>)
 80114e8:	482b      	ldr	r0, [pc, #172]	; (8011598 <pbuf_copy_partial+0xdc>)
 80114ea:	f009 faf1 	bl	801aad0 <iprintf>
 80114ee:	2300      	movs	r3, #0
 80114f0:	e04a      	b.n	8011588 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d108      	bne.n	801150a <pbuf_copy_partial+0x4e>
 80114f8:	4b25      	ldr	r3, [pc, #148]	; (8011590 <pbuf_copy_partial+0xd4>)
 80114fa:	f240 420b 	movw	r2, #1035	; 0x40b
 80114fe:	4927      	ldr	r1, [pc, #156]	; (801159c <pbuf_copy_partial+0xe0>)
 8011500:	4825      	ldr	r0, [pc, #148]	; (8011598 <pbuf_copy_partial+0xdc>)
 8011502:	f009 fae5 	bl	801aad0 <iprintf>
 8011506:	2300      	movs	r3, #0
 8011508:	e03e      	b.n	8011588 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	61fb      	str	r3, [r7, #28]
 801150e:	e034      	b.n	801157a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011510:	88bb      	ldrh	r3, [r7, #4]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d00a      	beq.n	801152c <pbuf_copy_partial+0x70>
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	895b      	ldrh	r3, [r3, #10]
 801151a:	88ba      	ldrh	r2, [r7, #4]
 801151c:	429a      	cmp	r2, r3
 801151e:	d305      	bcc.n	801152c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	895b      	ldrh	r3, [r3, #10]
 8011524:	88ba      	ldrh	r2, [r7, #4]
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	80bb      	strh	r3, [r7, #4]
 801152a:	e023      	b.n	8011574 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	895a      	ldrh	r2, [r3, #10]
 8011530:	88bb      	ldrh	r3, [r7, #4]
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011536:	8b3a      	ldrh	r2, [r7, #24]
 8011538:	88fb      	ldrh	r3, [r7, #6]
 801153a:	429a      	cmp	r2, r3
 801153c:	d901      	bls.n	8011542 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801153e:	88fb      	ldrh	r3, [r7, #6]
 8011540:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011542:	8b7b      	ldrh	r3, [r7, #26]
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	18d0      	adds	r0, r2, r3
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	685a      	ldr	r2, [r3, #4]
 801154c:	88bb      	ldrh	r3, [r7, #4]
 801154e:	4413      	add	r3, r2
 8011550:	8b3a      	ldrh	r2, [r7, #24]
 8011552:	4619      	mov	r1, r3
 8011554:	f009 fc6f 	bl	801ae36 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011558:	8afa      	ldrh	r2, [r7, #22]
 801155a:	8b3b      	ldrh	r3, [r7, #24]
 801155c:	4413      	add	r3, r2
 801155e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011560:	8b7a      	ldrh	r2, [r7, #26]
 8011562:	8b3b      	ldrh	r3, [r7, #24]
 8011564:	4413      	add	r3, r2
 8011566:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011568:	88fa      	ldrh	r2, [r7, #6]
 801156a:	8b3b      	ldrh	r3, [r7, #24]
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011570:	2300      	movs	r3, #0
 8011572:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011574:	69fb      	ldr	r3, [r7, #28]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	61fb      	str	r3, [r7, #28]
 801157a:	88fb      	ldrh	r3, [r7, #6]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <pbuf_copy_partial+0xca>
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d1c4      	bne.n	8011510 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011586:	8afb      	ldrh	r3, [r7, #22]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3720      	adds	r7, #32
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	0801d8b8 	.word	0x0801d8b8
 8011594:	0801dc00 	.word	0x0801dc00
 8011598:	0801d918 	.word	0x0801d918
 801159c:	0801dc20 	.word	0x0801dc20

080115a0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b087      	sub	sp, #28
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	460b      	mov	r3, r1
 80115aa:	607a      	str	r2, [r7, #4]
 80115ac:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80115ae:	897b      	ldrh	r3, [r7, #10]
 80115b0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80115b6:	e007      	b.n	80115c8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	895b      	ldrh	r3, [r3, #10]
 80115bc:	8afa      	ldrh	r2, [r7, #22]
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d004      	beq.n	80115d8 <pbuf_skip_const+0x38>
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	895b      	ldrh	r3, [r3, #10]
 80115d2:	8afa      	ldrh	r2, [r7, #22]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d2ef      	bcs.n	80115b8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d002      	beq.n	80115e4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8afa      	ldrh	r2, [r7, #22]
 80115e2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80115e4:	693b      	ldr	r3, [r7, #16]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	371c      	adds	r7, #28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b086      	sub	sp, #24
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	60f8      	str	r0, [r7, #12]
 80115fa:	460b      	mov	r3, r1
 80115fc:	607a      	str	r2, [r7, #4]
 80115fe:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011600:	897b      	ldrh	r3, [r7, #10]
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	4619      	mov	r1, r3
 8011606:	68f8      	ldr	r0, [r7, #12]
 8011608:	f7ff ffca 	bl	80115a0 <pbuf_skip_const>
 801160c:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 801160e:	697b      	ldr	r3, [r7, #20]
}
 8011610:	4618      	mov	r0, r3
 8011612:	3718      	adds	r7, #24
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b088      	sub	sp, #32
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	4613      	mov	r3, r2
 8011624:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011626:	88fb      	ldrh	r3, [r7, #6]
 8011628:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801162a:	2300      	movs	r3, #0
 801162c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d109      	bne.n	8011648 <pbuf_take+0x30>
 8011634:	4b3a      	ldr	r3, [pc, #232]	; (8011720 <pbuf_take+0x108>)
 8011636:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801163a:	493a      	ldr	r1, [pc, #232]	; (8011724 <pbuf_take+0x10c>)
 801163c:	483a      	ldr	r0, [pc, #232]	; (8011728 <pbuf_take+0x110>)
 801163e:	f009 fa47 	bl	801aad0 <iprintf>
 8011642:	f06f 030f 	mvn.w	r3, #15
 8011646:	e067      	b.n	8011718 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d109      	bne.n	8011662 <pbuf_take+0x4a>
 801164e:	4b34      	ldr	r3, [pc, #208]	; (8011720 <pbuf_take+0x108>)
 8011650:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011654:	4935      	ldr	r1, [pc, #212]	; (801172c <pbuf_take+0x114>)
 8011656:	4834      	ldr	r0, [pc, #208]	; (8011728 <pbuf_take+0x110>)
 8011658:	f009 fa3a 	bl	801aad0 <iprintf>
 801165c:	f06f 030f 	mvn.w	r3, #15
 8011660:	e05a      	b.n	8011718 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	891b      	ldrh	r3, [r3, #8]
 8011666:	88fa      	ldrh	r2, [r7, #6]
 8011668:	429a      	cmp	r2, r3
 801166a:	d909      	bls.n	8011680 <pbuf_take+0x68>
 801166c:	4b2c      	ldr	r3, [pc, #176]	; (8011720 <pbuf_take+0x108>)
 801166e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011672:	492f      	ldr	r1, [pc, #188]	; (8011730 <pbuf_take+0x118>)
 8011674:	482c      	ldr	r0, [pc, #176]	; (8011728 <pbuf_take+0x110>)
 8011676:	f009 fa2b 	bl	801aad0 <iprintf>
 801167a:	f04f 33ff 	mov.w	r3, #4294967295
 801167e:	e04b      	b.n	8011718 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d007      	beq.n	8011696 <pbuf_take+0x7e>
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d004      	beq.n	8011696 <pbuf_take+0x7e>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	891b      	ldrh	r3, [r3, #8]
 8011690:	88fa      	ldrh	r2, [r7, #6]
 8011692:	429a      	cmp	r2, r3
 8011694:	d902      	bls.n	801169c <pbuf_take+0x84>
    return ERR_ARG;
 8011696:	f06f 030f 	mvn.w	r3, #15
 801169a:	e03d      	b.n	8011718 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	61fb      	str	r3, [r7, #28]
 80116a0:	e028      	b.n	80116f4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d106      	bne.n	80116b6 <pbuf_take+0x9e>
 80116a8:	4b1d      	ldr	r3, [pc, #116]	; (8011720 <pbuf_take+0x108>)
 80116aa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80116ae:	4921      	ldr	r1, [pc, #132]	; (8011734 <pbuf_take+0x11c>)
 80116b0:	481d      	ldr	r0, [pc, #116]	; (8011728 <pbuf_take+0x110>)
 80116b2:	f009 fa0d 	bl	801aad0 <iprintf>
    buf_copy_len = total_copy_len;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	895b      	ldrh	r3, [r3, #10]
 80116be:	461a      	mov	r2, r3
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d902      	bls.n	80116cc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80116c6:	69fb      	ldr	r3, [r7, #28]
 80116c8:	895b      	ldrh	r3, [r3, #10]
 80116ca:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	6858      	ldr	r0, [r3, #4]
 80116d0:	68ba      	ldr	r2, [r7, #8]
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	4413      	add	r3, r2
 80116d6:	69ba      	ldr	r2, [r7, #24]
 80116d8:	4619      	mov	r1, r3
 80116da:	f009 fbac 	bl	801ae36 <memcpy>
    total_copy_len -= buf_copy_len;
 80116de:	697a      	ldr	r2, [r7, #20]
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80116e6:	693a      	ldr	r2, [r7, #16]
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	4413      	add	r3, r2
 80116ec:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	61fb      	str	r3, [r7, #28]
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1d3      	bne.n	80116a2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d103      	bne.n	8011708 <pbuf_take+0xf0>
 8011700:	88fb      	ldrh	r3, [r7, #6]
 8011702:	693a      	ldr	r2, [r7, #16]
 8011704:	429a      	cmp	r2, r3
 8011706:	d006      	beq.n	8011716 <pbuf_take+0xfe>
 8011708:	4b05      	ldr	r3, [pc, #20]	; (8011720 <pbuf_take+0x108>)
 801170a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801170e:	490a      	ldr	r1, [pc, #40]	; (8011738 <pbuf_take+0x120>)
 8011710:	4805      	ldr	r0, [pc, #20]	; (8011728 <pbuf_take+0x110>)
 8011712:	f009 f9dd 	bl	801aad0 <iprintf>
  return ERR_OK;
 8011716:	2300      	movs	r3, #0
}
 8011718:	4618      	mov	r0, r3
 801171a:	3720      	adds	r7, #32
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	0801d8b8 	.word	0x0801d8b8
 8011724:	0801dc90 	.word	0x0801dc90
 8011728:	0801d918 	.word	0x0801d918
 801172c:	0801dca8 	.word	0x0801dca8
 8011730:	0801dcc4 	.word	0x0801dcc4
 8011734:	0801dce4 	.word	0x0801dce4
 8011738:	0801dcfc 	.word	0x0801dcfc

0801173c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b088      	sub	sp, #32
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	4611      	mov	r1, r2
 8011748:	461a      	mov	r2, r3
 801174a:	460b      	mov	r3, r1
 801174c:	80fb      	strh	r3, [r7, #6]
 801174e:	4613      	mov	r3, r2
 8011750:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8011752:	f107 0210 	add.w	r2, r7, #16
 8011756:	88bb      	ldrh	r3, [r7, #4]
 8011758:	4619      	mov	r1, r3
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f7ff ff49 	bl	80115f2 <pbuf_skip>
 8011760:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d047      	beq.n	80117f8 <pbuf_take_at+0xbc>
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	891b      	ldrh	r3, [r3, #8]
 801176c:	461a      	mov	r2, r3
 801176e:	8a3b      	ldrh	r3, [r7, #16]
 8011770:	4619      	mov	r1, r3
 8011772:	88fb      	ldrh	r3, [r7, #6]
 8011774:	440b      	add	r3, r1
 8011776:	429a      	cmp	r2, r3
 8011778:	db3e      	blt.n	80117f8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801177a:	88fb      	ldrh	r3, [r7, #6]
 801177c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	895a      	ldrh	r2, [r3, #10]
 8011786:	8a3b      	ldrh	r3, [r7, #16]
 8011788:	429a      	cmp	r2, r3
 801178a:	d806      	bhi.n	801179a <pbuf_take_at+0x5e>
 801178c:	4b1d      	ldr	r3, [pc, #116]	; (8011804 <pbuf_take_at+0xc8>)
 801178e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011792:	491d      	ldr	r1, [pc, #116]	; (8011808 <pbuf_take_at+0xcc>)
 8011794:	481d      	ldr	r0, [pc, #116]	; (801180c <pbuf_take_at+0xd0>)
 8011796:	f009 f99b 	bl	801aad0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	895b      	ldrh	r3, [r3, #10]
 801179e:	461a      	mov	r2, r3
 80117a0:	8a3b      	ldrh	r3, [r7, #16]
 80117a2:	1ad2      	subs	r2, r2, r3
 80117a4:	88fb      	ldrh	r3, [r7, #6]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	da05      	bge.n	80117b6 <pbuf_take_at+0x7a>
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	895a      	ldrh	r2, [r3, #10]
 80117ae:	8a3b      	ldrh	r3, [r7, #16]
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	e000      	b.n	80117b8 <pbuf_take_at+0x7c>
 80117b6:	88fb      	ldrh	r3, [r7, #6]
 80117b8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	8a3a      	ldrh	r2, [r7, #16]
 80117c0:	4413      	add	r3, r2
 80117c2:	8a7a      	ldrh	r2, [r7, #18]
 80117c4:	68b9      	ldr	r1, [r7, #8]
 80117c6:	4618      	mov	r0, r3
 80117c8:	f009 fb35 	bl	801ae36 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80117cc:	8b7a      	ldrh	r2, [r7, #26]
 80117ce:	8a7b      	ldrh	r3, [r7, #18]
 80117d0:	1ad3      	subs	r3, r2, r3
 80117d2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80117d4:	8a7b      	ldrh	r3, [r7, #18]
 80117d6:	697a      	ldr	r2, [r7, #20]
 80117d8:	4413      	add	r3, r2
 80117da:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80117dc:	8b7b      	ldrh	r3, [r7, #26]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d008      	beq.n	80117f4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	8b7a      	ldrh	r2, [r7, #26]
 80117e8:	6979      	ldr	r1, [r7, #20]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff ff14 	bl	8011618 <pbuf_take>
 80117f0:	4603      	mov	r3, r0
 80117f2:	e003      	b.n	80117fc <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80117f4:	2300      	movs	r3, #0
 80117f6:	e001      	b.n	80117fc <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80117f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3720      	adds	r7, #32
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	0801d8b8 	.word	0x0801d8b8
 8011808:	0801dd14 	.word	0x0801dd14
 801180c:	0801d918 	.word	0x0801d918

08011810 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	4603      	mov	r3, r0
 8011818:	603a      	str	r2, [r7, #0]
 801181a:	71fb      	strb	r3, [r7, #7]
 801181c:	460b      	mov	r3, r1
 801181e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	8919      	ldrh	r1, [r3, #8]
 8011824:	88ba      	ldrh	r2, [r7, #4]
 8011826:	79fb      	ldrb	r3, [r7, #7]
 8011828:	4618      	mov	r0, r3
 801182a:	f7ff f95d 	bl	8010ae8 <pbuf_alloc>
 801182e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <pbuf_clone+0x2a>
    return NULL;
 8011836:	2300      	movs	r3, #0
 8011838:	e011      	b.n	801185e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801183a:	6839      	ldr	r1, [r7, #0]
 801183c:	68f8      	ldr	r0, [r7, #12]
 801183e:	f7ff fd6b 	bl	8011318 <pbuf_copy>
 8011842:	4603      	mov	r3, r0
 8011844:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011846:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d006      	beq.n	801185c <pbuf_clone+0x4c>
 801184e:	4b06      	ldr	r3, [pc, #24]	; (8011868 <pbuf_clone+0x58>)
 8011850:	f240 5224 	movw	r2, #1316	; 0x524
 8011854:	4905      	ldr	r1, [pc, #20]	; (801186c <pbuf_clone+0x5c>)
 8011856:	4806      	ldr	r0, [pc, #24]	; (8011870 <pbuf_clone+0x60>)
 8011858:	f009 f93a 	bl	801aad0 <iprintf>
  return q;
 801185c:	68fb      	ldr	r3, [r7, #12]
}
 801185e:	4618      	mov	r0, r3
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	0801d8b8 	.word	0x0801d8b8
 801186c:	0801dd2c 	.word	0x0801dd2c
 8011870:	0801d918 	.word	0x0801d918

08011874 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	460b      	mov	r3, r1
 801187e:	807b      	strh	r3, [r7, #2]
 8011880:	4613      	mov	r3, r2
 8011882:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8011884:	f107 020a 	add.w	r2, r7, #10
 8011888:	887b      	ldrh	r3, [r7, #2]
 801188a:	4619      	mov	r1, r3
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff feb0 	bl	80115f2 <pbuf_skip>
 8011892:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00a      	beq.n	80118b0 <pbuf_put_at+0x3c>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	895a      	ldrh	r2, [r3, #10]
 801189e:	897b      	ldrh	r3, [r7, #10]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d905      	bls.n	80118b0 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	897a      	ldrh	r2, [r7, #10]
 80118aa:	4413      	add	r3, r2
 80118ac:	787a      	ldrb	r2, [r7, #1]
 80118ae:	701a      	strb	r2, [r3, #0]
  }
}
 80118b0:	bf00      	nop
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80118bc:	f008 fb16 	bl	8019eec <rand>
 80118c0:	4603      	mov	r3, r0
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	4b01      	ldr	r3, [pc, #4]	; (80118d8 <tcp_init+0x20>)
 80118d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80118d4:	bf00      	nop
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	20000038 	.word	0x20000038

080118dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7d1b      	ldrb	r3, [r3, #20]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d105      	bne.n	80118f8 <tcp_free+0x1c>
 80118ec:	4b06      	ldr	r3, [pc, #24]	; (8011908 <tcp_free+0x2c>)
 80118ee:	22d4      	movs	r2, #212	; 0xd4
 80118f0:	4906      	ldr	r1, [pc, #24]	; (801190c <tcp_free+0x30>)
 80118f2:	4807      	ldr	r0, [pc, #28]	; (8011910 <tcp_free+0x34>)
 80118f4:	f009 f8ec 	bl	801aad0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80118f8:	6879      	ldr	r1, [r7, #4]
 80118fa:	2001      	movs	r0, #1
 80118fc:	f7fe fd18 	bl	8010330 <memp_free>
}
 8011900:	bf00      	nop
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	0801ddb8 	.word	0x0801ddb8
 801190c:	0801dde8 	.word	0x0801dde8
 8011910:	0801ddfc 	.word	0x0801ddfc

08011914 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7d1b      	ldrb	r3, [r3, #20]
 8011920:	2b01      	cmp	r3, #1
 8011922:	d105      	bne.n	8011930 <tcp_free_listen+0x1c>
 8011924:	4b06      	ldr	r3, [pc, #24]	; (8011940 <tcp_free_listen+0x2c>)
 8011926:	22df      	movs	r2, #223	; 0xdf
 8011928:	4906      	ldr	r1, [pc, #24]	; (8011944 <tcp_free_listen+0x30>)
 801192a:	4807      	ldr	r0, [pc, #28]	; (8011948 <tcp_free_listen+0x34>)
 801192c:	f009 f8d0 	bl	801aad0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011930:	6879      	ldr	r1, [r7, #4]
 8011932:	2002      	movs	r0, #2
 8011934:	f7fe fcfc 	bl	8010330 <memp_free>
}
 8011938:	bf00      	nop
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	0801ddb8 	.word	0x0801ddb8
 8011944:	0801de24 	.word	0x0801de24
 8011948:	0801ddfc 	.word	0x0801ddfc

0801194c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011950:	f000 fea2 	bl	8012698 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011954:	4b07      	ldr	r3, [pc, #28]	; (8011974 <tcp_tmr+0x28>)
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	3301      	adds	r3, #1
 801195a:	b2da      	uxtb	r2, r3
 801195c:	4b05      	ldr	r3, [pc, #20]	; (8011974 <tcp_tmr+0x28>)
 801195e:	701a      	strb	r2, [r3, #0]
 8011960:	4b04      	ldr	r3, [pc, #16]	; (8011974 <tcp_tmr+0x28>)
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	f003 0301 	and.w	r3, r3, #1
 8011968:	2b00      	cmp	r3, #0
 801196a:	d001      	beq.n	8011970 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801196c:	f000 fb54 	bl	8012018 <tcp_slowtmr>
  }
}
 8011970:	bf00      	nop
 8011972:	bd80      	pop	{r7, pc}
 8011974:	2000f1c1 	.word	0x2000f1c1

08011978 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d105      	bne.n	8011994 <tcp_remove_listener+0x1c>
 8011988:	4b0d      	ldr	r3, [pc, #52]	; (80119c0 <tcp_remove_listener+0x48>)
 801198a:	22ff      	movs	r2, #255	; 0xff
 801198c:	490d      	ldr	r1, [pc, #52]	; (80119c4 <tcp_remove_listener+0x4c>)
 801198e:	480e      	ldr	r0, [pc, #56]	; (80119c8 <tcp_remove_listener+0x50>)
 8011990:	f009 f89e 	bl	801aad0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	60fb      	str	r3, [r7, #12]
 8011998:	e00a      	b.n	80119b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d102      	bne.n	80119aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2200      	movs	r2, #0
 80119a8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	60fb      	str	r3, [r7, #12]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1f1      	bne.n	801199a <tcp_remove_listener+0x22>
    }
  }
}
 80119b6:	bf00      	nop
 80119b8:	bf00      	nop
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	0801ddb8 	.word	0x0801ddb8
 80119c4:	0801de40 	.word	0x0801de40
 80119c8:	0801ddfc 	.word	0x0801ddfc

080119cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d106      	bne.n	80119e8 <tcp_listen_closed+0x1c>
 80119da:	4b14      	ldr	r3, [pc, #80]	; (8011a2c <tcp_listen_closed+0x60>)
 80119dc:	f240 1211 	movw	r2, #273	; 0x111
 80119e0:	4913      	ldr	r1, [pc, #76]	; (8011a30 <tcp_listen_closed+0x64>)
 80119e2:	4814      	ldr	r0, [pc, #80]	; (8011a34 <tcp_listen_closed+0x68>)
 80119e4:	f009 f874 	bl	801aad0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	7d1b      	ldrb	r3, [r3, #20]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d006      	beq.n	80119fe <tcp_listen_closed+0x32>
 80119f0:	4b0e      	ldr	r3, [pc, #56]	; (8011a2c <tcp_listen_closed+0x60>)
 80119f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80119f6:	4910      	ldr	r1, [pc, #64]	; (8011a38 <tcp_listen_closed+0x6c>)
 80119f8:	480e      	ldr	r0, [pc, #56]	; (8011a34 <tcp_listen_closed+0x68>)
 80119fa:	f009 f869 	bl	801aad0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80119fe:	2301      	movs	r3, #1
 8011a00:	60fb      	str	r3, [r7, #12]
 8011a02:	e00b      	b.n	8011a1c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011a04:	4a0d      	ldr	r2, [pc, #52]	; (8011a3c <tcp_listen_closed+0x70>)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	6879      	ldr	r1, [r7, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff ffb1 	bl	8011978 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	3301      	adds	r3, #1
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2b03      	cmp	r3, #3
 8011a20:	d9f0      	bls.n	8011a04 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011a22:	bf00      	nop
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	0801ddb8 	.word	0x0801ddb8
 8011a30:	0801de68 	.word	0x0801de68
 8011a34:	0801ddfc 	.word	0x0801ddfc
 8011a38:	0801de74 	.word	0x0801de74
 8011a3c:	0801fdf0 	.word	0x0801fdf0

08011a40 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011a40:	b5b0      	push	{r4, r5, r7, lr}
 8011a42:	b088      	sub	sp, #32
 8011a44:	af04      	add	r7, sp, #16
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	460b      	mov	r3, r1
 8011a4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d106      	bne.n	8011a60 <tcp_close_shutdown+0x20>
 8011a52:	4b63      	ldr	r3, [pc, #396]	; (8011be0 <tcp_close_shutdown+0x1a0>)
 8011a54:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011a58:	4962      	ldr	r1, [pc, #392]	; (8011be4 <tcp_close_shutdown+0x1a4>)
 8011a5a:	4863      	ldr	r0, [pc, #396]	; (8011be8 <tcp_close_shutdown+0x1a8>)
 8011a5c:	f009 f838 	bl	801aad0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011a60:	78fb      	ldrb	r3, [r7, #3]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d066      	beq.n	8011b34 <tcp_close_shutdown+0xf4>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	7d1b      	ldrb	r3, [r3, #20]
 8011a6a:	2b04      	cmp	r3, #4
 8011a6c:	d003      	beq.n	8011a76 <tcp_close_shutdown+0x36>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	7d1b      	ldrb	r3, [r3, #20]
 8011a72:	2b07      	cmp	r3, #7
 8011a74:	d15e      	bne.n	8011b34 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d104      	bne.n	8011a88 <tcp_close_shutdown+0x48>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011a86:	d055      	beq.n	8011b34 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	8b5b      	ldrh	r3, [r3, #26]
 8011a8c:	f003 0310 	and.w	r3, r3, #16
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d106      	bne.n	8011aa2 <tcp_close_shutdown+0x62>
 8011a94:	4b52      	ldr	r3, [pc, #328]	; (8011be0 <tcp_close_shutdown+0x1a0>)
 8011a96:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011a9a:	4954      	ldr	r1, [pc, #336]	; (8011bec <tcp_close_shutdown+0x1ac>)
 8011a9c:	4852      	ldr	r0, [pc, #328]	; (8011be8 <tcp_close_shutdown+0x1a8>)
 8011a9e:	f009 f817 	bl	801aad0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011aaa:	687d      	ldr	r5, [r7, #4]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	3304      	adds	r3, #4
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	8ad2      	ldrh	r2, [r2, #22]
 8011ab4:	6879      	ldr	r1, [r7, #4]
 8011ab6:	8b09      	ldrh	r1, [r1, #24]
 8011ab8:	9102      	str	r1, [sp, #8]
 8011aba:	9201      	str	r2, [sp, #4]
 8011abc:	9300      	str	r3, [sp, #0]
 8011abe:	462b      	mov	r3, r5
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	4601      	mov	r1, r0
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f004 fe91 	bl	80167ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f001 f8c6 	bl	8012c5c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011ad0:	4b47      	ldr	r3, [pc, #284]	; (8011bf0 <tcp_close_shutdown+0x1b0>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d105      	bne.n	8011ae6 <tcp_close_shutdown+0xa6>
 8011ada:	4b45      	ldr	r3, [pc, #276]	; (8011bf0 <tcp_close_shutdown+0x1b0>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	4a43      	ldr	r2, [pc, #268]	; (8011bf0 <tcp_close_shutdown+0x1b0>)
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	e013      	b.n	8011b0e <tcp_close_shutdown+0xce>
 8011ae6:	4b42      	ldr	r3, [pc, #264]	; (8011bf0 <tcp_close_shutdown+0x1b0>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	60fb      	str	r3, [r7, #12]
 8011aec:	e00c      	b.n	8011b08 <tcp_close_shutdown+0xc8>
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d104      	bne.n	8011b02 <tcp_close_shutdown+0xc2>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	68da      	ldr	r2, [r3, #12]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	60da      	str	r2, [r3, #12]
 8011b00:	e005      	b.n	8011b0e <tcp_close_shutdown+0xce>
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	60fb      	str	r3, [r7, #12]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1ef      	bne.n	8011aee <tcp_close_shutdown+0xae>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	60da      	str	r2, [r3, #12]
 8011b14:	4b37      	ldr	r3, [pc, #220]	; (8011bf4 <tcp_close_shutdown+0x1b4>)
 8011b16:	2201      	movs	r2, #1
 8011b18:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011b1a:	4b37      	ldr	r3, [pc, #220]	; (8011bf8 <tcp_close_shutdown+0x1b8>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d102      	bne.n	8011b2a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011b24:	f003 fd5e 	bl	80155e4 <tcp_trigger_input_pcb_close>
 8011b28:	e002      	b.n	8011b30 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff fed6 	bl	80118dc <tcp_free>
      }
      return ERR_OK;
 8011b30:	2300      	movs	r3, #0
 8011b32:	e050      	b.n	8011bd6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	7d1b      	ldrb	r3, [r3, #20]
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d03b      	beq.n	8011bb4 <tcp_close_shutdown+0x174>
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	dc44      	bgt.n	8011bca <tcp_close_shutdown+0x18a>
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d002      	beq.n	8011b4a <tcp_close_shutdown+0x10a>
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d02a      	beq.n	8011b9e <tcp_close_shutdown+0x15e>
 8011b48:	e03f      	b.n	8011bca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8adb      	ldrh	r3, [r3, #22]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d021      	beq.n	8011b96 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011b52:	4b2a      	ldr	r3, [pc, #168]	; (8011bfc <tcp_close_shutdown+0x1bc>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d105      	bne.n	8011b68 <tcp_close_shutdown+0x128>
 8011b5c:	4b27      	ldr	r3, [pc, #156]	; (8011bfc <tcp_close_shutdown+0x1bc>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	4a26      	ldr	r2, [pc, #152]	; (8011bfc <tcp_close_shutdown+0x1bc>)
 8011b64:	6013      	str	r3, [r2, #0]
 8011b66:	e013      	b.n	8011b90 <tcp_close_shutdown+0x150>
 8011b68:	4b24      	ldr	r3, [pc, #144]	; (8011bfc <tcp_close_shutdown+0x1bc>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	60bb      	str	r3, [r7, #8]
 8011b6e:	e00c      	b.n	8011b8a <tcp_close_shutdown+0x14a>
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d104      	bne.n	8011b84 <tcp_close_shutdown+0x144>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	68da      	ldr	r2, [r3, #12]
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	60da      	str	r2, [r3, #12]
 8011b82:	e005      	b.n	8011b90 <tcp_close_shutdown+0x150>
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	60bb      	str	r3, [r7, #8]
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1ef      	bne.n	8011b70 <tcp_close_shutdown+0x130>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff fea0 	bl	80118dc <tcp_free>
      break;
 8011b9c:	e01a      	b.n	8011bd4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7ff ff14 	bl	80119cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011ba4:	6879      	ldr	r1, [r7, #4]
 8011ba6:	4816      	ldr	r0, [pc, #88]	; (8011c00 <tcp_close_shutdown+0x1c0>)
 8011ba8:	f001 f8a8 	bl	8012cfc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7ff feb1 	bl	8011914 <tcp_free_listen>
      break;
 8011bb2:	e00f      	b.n	8011bd4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011bb4:	6879      	ldr	r1, [r7, #4]
 8011bb6:	480e      	ldr	r0, [pc, #56]	; (8011bf0 <tcp_close_shutdown+0x1b0>)
 8011bb8:	f001 f8a0 	bl	8012cfc <tcp_pcb_remove>
 8011bbc:	4b0d      	ldr	r3, [pc, #52]	; (8011bf4 <tcp_close_shutdown+0x1b4>)
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff fe8a 	bl	80118dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011bc8:	e004      	b.n	8011bd4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 f81a 	bl	8011c04 <tcp_close_shutdown_fin>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	e000      	b.n	8011bd6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8011bde:	bf00      	nop
 8011be0:	0801ddb8 	.word	0x0801ddb8
 8011be4:	0801de8c 	.word	0x0801de8c
 8011be8:	0801ddfc 	.word	0x0801ddfc
 8011bec:	0801deac 	.word	0x0801deac
 8011bf0:	2000f1b8 	.word	0x2000f1b8
 8011bf4:	2000f1c0 	.word	0x2000f1c0
 8011bf8:	2000f1f8 	.word	0x2000f1f8
 8011bfc:	2000f1b0 	.word	0x2000f1b0
 8011c00:	2000f1b4 	.word	0x2000f1b4

08011c04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d106      	bne.n	8011c20 <tcp_close_shutdown_fin+0x1c>
 8011c12:	4b2e      	ldr	r3, [pc, #184]	; (8011ccc <tcp_close_shutdown_fin+0xc8>)
 8011c14:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011c18:	492d      	ldr	r1, [pc, #180]	; (8011cd0 <tcp_close_shutdown_fin+0xcc>)
 8011c1a:	482e      	ldr	r0, [pc, #184]	; (8011cd4 <tcp_close_shutdown_fin+0xd0>)
 8011c1c:	f008 ff58 	bl	801aad0 <iprintf>

  switch (pcb->state) {
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	7d1b      	ldrb	r3, [r3, #20]
 8011c24:	2b07      	cmp	r3, #7
 8011c26:	d020      	beq.n	8011c6a <tcp_close_shutdown_fin+0x66>
 8011c28:	2b07      	cmp	r3, #7
 8011c2a:	dc2b      	bgt.n	8011c84 <tcp_close_shutdown_fin+0x80>
 8011c2c:	2b03      	cmp	r3, #3
 8011c2e:	d002      	beq.n	8011c36 <tcp_close_shutdown_fin+0x32>
 8011c30:	2b04      	cmp	r3, #4
 8011c32:	d00d      	beq.n	8011c50 <tcp_close_shutdown_fin+0x4c>
 8011c34:	e026      	b.n	8011c84 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f003 fee6 	bl	8015a08 <tcp_send_fin>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d11f      	bne.n	8011c88 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2205      	movs	r2, #5
 8011c4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c4e:	e01b      	b.n	8011c88 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f003 fed9 	bl	8015a08 <tcp_send_fin>
 8011c56:	4603      	mov	r3, r0
 8011c58:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d114      	bne.n	8011c8c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2205      	movs	r2, #5
 8011c66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c68:	e010      	b.n	8011c8c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f003 fecc 	bl	8015a08 <tcp_send_fin>
 8011c70:	4603      	mov	r3, r0
 8011c72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d109      	bne.n	8011c90 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2209      	movs	r2, #9
 8011c80:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c82:	e005      	b.n	8011c90 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	e01c      	b.n	8011cc2 <tcp_close_shutdown_fin+0xbe>
      break;
 8011c88:	bf00      	nop
 8011c8a:	e002      	b.n	8011c92 <tcp_close_shutdown_fin+0x8e>
      break;
 8011c8c:	bf00      	nop
 8011c8e:	e000      	b.n	8011c92 <tcp_close_shutdown_fin+0x8e>
      break;
 8011c90:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d103      	bne.n	8011ca2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f003 fff2 	bl	8015c84 <tcp_output>
 8011ca0:	e00d      	b.n	8011cbe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011caa:	d108      	bne.n	8011cbe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	8b5b      	ldrh	r3, [r3, #26]
 8011cb0:	f043 0308 	orr.w	r3, r3, #8
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	e001      	b.n	8011cc2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	0801ddb8 	.word	0x0801ddb8
 8011cd0:	0801de68 	.word	0x0801de68
 8011cd4:	0801ddfc 	.word	0x0801ddfc

08011cd8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d109      	bne.n	8011cfa <tcp_close+0x22>
 8011ce6:	4b0f      	ldr	r3, [pc, #60]	; (8011d24 <tcp_close+0x4c>)
 8011ce8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011cec:	490e      	ldr	r1, [pc, #56]	; (8011d28 <tcp_close+0x50>)
 8011cee:	480f      	ldr	r0, [pc, #60]	; (8011d2c <tcp_close+0x54>)
 8011cf0:	f008 feee 	bl	801aad0 <iprintf>
 8011cf4:	f06f 030f 	mvn.w	r3, #15
 8011cf8:	e00f      	b.n	8011d1a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	7d1b      	ldrb	r3, [r3, #20]
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d006      	beq.n	8011d10 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	8b5b      	ldrh	r3, [r3, #26]
 8011d06:	f043 0310 	orr.w	r3, r3, #16
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011d10:	2101      	movs	r1, #1
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff fe94 	bl	8011a40 <tcp_close_shutdown>
 8011d18:	4603      	mov	r3, r0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	0801ddb8 	.word	0x0801ddb8
 8011d28:	0801dec8 	.word	0x0801dec8
 8011d2c:	0801ddfc 	.word	0x0801ddfc

08011d30 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b08e      	sub	sp, #56	; 0x38
 8011d34:	af04      	add	r7, sp, #16
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d107      	bne.n	8011d50 <tcp_abandon+0x20>
 8011d40:	4b52      	ldr	r3, [pc, #328]	; (8011e8c <tcp_abandon+0x15c>)
 8011d42:	f240 223d 	movw	r2, #573	; 0x23d
 8011d46:	4952      	ldr	r1, [pc, #328]	; (8011e90 <tcp_abandon+0x160>)
 8011d48:	4852      	ldr	r0, [pc, #328]	; (8011e94 <tcp_abandon+0x164>)
 8011d4a:	f008 fec1 	bl	801aad0 <iprintf>
 8011d4e:	e099      	b.n	8011e84 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	7d1b      	ldrb	r3, [r3, #20]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d106      	bne.n	8011d66 <tcp_abandon+0x36>
 8011d58:	4b4c      	ldr	r3, [pc, #304]	; (8011e8c <tcp_abandon+0x15c>)
 8011d5a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011d5e:	494e      	ldr	r1, [pc, #312]	; (8011e98 <tcp_abandon+0x168>)
 8011d60:	484c      	ldr	r0, [pc, #304]	; (8011e94 <tcp_abandon+0x164>)
 8011d62:	f008 feb5 	bl	801aad0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	7d1b      	ldrb	r3, [r3, #20]
 8011d6a:	2b0a      	cmp	r3, #10
 8011d6c:	d107      	bne.n	8011d7e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011d6e:	6879      	ldr	r1, [r7, #4]
 8011d70:	484a      	ldr	r0, [pc, #296]	; (8011e9c <tcp_abandon+0x16c>)
 8011d72:	f000 ffc3 	bl	8012cfc <tcp_pcb_remove>
    tcp_free(pcb);
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7ff fdb0 	bl	80118dc <tcp_free>
 8011d7c:	e082      	b.n	8011e84 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011d82:	2300      	movs	r3, #0
 8011d84:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d8a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d90:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d98:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	691b      	ldr	r3, [r3, #16]
 8011d9e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	7d1b      	ldrb	r3, [r3, #20]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d126      	bne.n	8011df6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	8adb      	ldrh	r3, [r3, #22]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d02e      	beq.n	8011e0e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011db0:	4b3b      	ldr	r3, [pc, #236]	; (8011ea0 <tcp_abandon+0x170>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d105      	bne.n	8011dc6 <tcp_abandon+0x96>
 8011dba:	4b39      	ldr	r3, [pc, #228]	; (8011ea0 <tcp_abandon+0x170>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	4a37      	ldr	r2, [pc, #220]	; (8011ea0 <tcp_abandon+0x170>)
 8011dc2:	6013      	str	r3, [r2, #0]
 8011dc4:	e013      	b.n	8011dee <tcp_abandon+0xbe>
 8011dc6:	4b36      	ldr	r3, [pc, #216]	; (8011ea0 <tcp_abandon+0x170>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	61fb      	str	r3, [r7, #28]
 8011dcc:	e00c      	b.n	8011de8 <tcp_abandon+0xb8>
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d104      	bne.n	8011de2 <tcp_abandon+0xb2>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	68da      	ldr	r2, [r3, #12]
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	60da      	str	r2, [r3, #12]
 8011de0:	e005      	b.n	8011dee <tcp_abandon+0xbe>
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	61fb      	str	r3, [r7, #28]
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1ef      	bne.n	8011dce <tcp_abandon+0x9e>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	60da      	str	r2, [r3, #12]
 8011df4:	e00b      	b.n	8011e0e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	8adb      	ldrh	r3, [r3, #22]
 8011dfe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011e00:	6879      	ldr	r1, [r7, #4]
 8011e02:	4828      	ldr	r0, [pc, #160]	; (8011ea4 <tcp_abandon+0x174>)
 8011e04:	f000 ff7a 	bl	8012cfc <tcp_pcb_remove>
 8011e08:	4b27      	ldr	r3, [pc, #156]	; (8011ea8 <tcp_abandon+0x178>)
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d004      	beq.n	8011e20 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f000 fd1c 	bl	8012858 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d004      	beq.n	8011e32 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f000 fd13 	bl	8012858 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d004      	beq.n	8011e44 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f000 fd0a 	bl	8012858 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00e      	beq.n	8011e68 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011e4a:	6879      	ldr	r1, [r7, #4]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3304      	adds	r3, #4
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	8b12      	ldrh	r2, [r2, #24]
 8011e54:	9202      	str	r2, [sp, #8]
 8011e56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e58:	9201      	str	r2, [sp, #4]
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	697a      	ldr	r2, [r7, #20]
 8011e60:	69b9      	ldr	r1, [r7, #24]
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f004 fcc2 	bl	80167ec <tcp_rst>
    }
    last_state = pcb->state;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	7d1b      	ldrb	r3, [r3, #20]
 8011e6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff fd34 	bl	80118dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d004      	beq.n	8011e84 <tcp_abandon+0x154>
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	f06f 010c 	mvn.w	r1, #12
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	4798      	blx	r3
  }
}
 8011e84:	3728      	adds	r7, #40	; 0x28
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	0801ddb8 	.word	0x0801ddb8
 8011e90:	0801defc 	.word	0x0801defc
 8011e94:	0801ddfc 	.word	0x0801ddfc
 8011e98:	0801df18 	.word	0x0801df18
 8011e9c:	2000f1bc 	.word	0x2000f1bc
 8011ea0:	2000f1b0 	.word	0x2000f1b0
 8011ea4:	2000f1b8 	.word	0x2000f1b8
 8011ea8:	2000f1c0 	.word	0x2000f1c0

08011eac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011eb4:	2101      	movs	r1, #1
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7ff ff3a 	bl	8011d30 <tcp_abandon>
}
 8011ebc:	bf00      	nop
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <tcp_update_rcv_ann_wnd+0x1c>
 8011ed2:	4b25      	ldr	r3, [pc, #148]	; (8011f68 <tcp_update_rcv_ann_wnd+0xa4>)
 8011ed4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011ed8:	4924      	ldr	r1, [pc, #144]	; (8011f6c <tcp_update_rcv_ann_wnd+0xa8>)
 8011eda:	4825      	ldr	r0, [pc, #148]	; (8011f70 <tcp_update_rcv_ann_wnd+0xac>)
 8011edc:	f008 fdf8 	bl	801aad0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011ee8:	4413      	add	r3, r2
 8011eea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011ef4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011ef8:	bf28      	it	cs
 8011efa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011efe:	b292      	uxth	r2, r2
 8011f00:	4413      	add	r3, r2
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	db08      	blt.n	8011f1c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f16:	68fa      	ldr	r2, [r7, #12]
 8011f18:	1ad3      	subs	r3, r2, r3
 8011f1a:	e020      	b.n	8011f5e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f24:	1ad3      	subs	r3, r2, r3
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	dd03      	ble.n	8011f32 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011f30:	e014      	b.n	8011f5c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f44:	d306      	bcc.n	8011f54 <tcp_update_rcv_ann_wnd+0x90>
 8011f46:	4b08      	ldr	r3, [pc, #32]	; (8011f68 <tcp_update_rcv_ann_wnd+0xa4>)
 8011f48:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011f4c:	4909      	ldr	r1, [pc, #36]	; (8011f74 <tcp_update_rcv_ann_wnd+0xb0>)
 8011f4e:	4808      	ldr	r0, [pc, #32]	; (8011f70 <tcp_update_rcv_ann_wnd+0xac>)
 8011f50:	f008 fdbe 	bl	801aad0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011f5c:	2300      	movs	r3, #0
  }
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	0801ddb8 	.word	0x0801ddb8
 8011f6c:	0801e014 	.word	0x0801e014
 8011f70:	0801ddfc 	.word	0x0801ddfc
 8011f74:	0801e038 	.word	0x0801e038

08011f78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	460b      	mov	r3, r1
 8011f82:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d107      	bne.n	8011f9a <tcp_recved+0x22>
 8011f8a:	4b1f      	ldr	r3, [pc, #124]	; (8012008 <tcp_recved+0x90>)
 8011f8c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011f90:	491e      	ldr	r1, [pc, #120]	; (801200c <tcp_recved+0x94>)
 8011f92:	481f      	ldr	r0, [pc, #124]	; (8012010 <tcp_recved+0x98>)
 8011f94:	f008 fd9c 	bl	801aad0 <iprintf>
 8011f98:	e032      	b.n	8012000 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	7d1b      	ldrb	r3, [r3, #20]
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d106      	bne.n	8011fb0 <tcp_recved+0x38>
 8011fa2:	4b19      	ldr	r3, [pc, #100]	; (8012008 <tcp_recved+0x90>)
 8011fa4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011fa8:	491a      	ldr	r1, [pc, #104]	; (8012014 <tcp_recved+0x9c>)
 8011faa:	4819      	ldr	r0, [pc, #100]	; (8012010 <tcp_recved+0x98>)
 8011fac:	f008 fd90 	bl	801aad0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fb4:	887b      	ldrh	r3, [r7, #2]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011fba:	89fb      	ldrh	r3, [r7, #14]
 8011fbc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011fc0:	d804      	bhi.n	8011fcc <tcp_recved+0x54>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fc6:	89fa      	ldrh	r2, [r7, #14]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d204      	bcs.n	8011fd6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011fd2:	851a      	strh	r2, [r3, #40]	; 0x28
 8011fd4:	e002      	b.n	8011fdc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	89fa      	ldrh	r2, [r7, #14]
 8011fda:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7ff ff71 	bl	8011ec4 <tcp_update_rcv_ann_wnd>
 8011fe2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011fea:	d309      	bcc.n	8012000 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	8b5b      	ldrh	r3, [r3, #26]
 8011ff0:	f043 0302 	orr.w	r3, r3, #2
 8011ff4:	b29a      	uxth	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f003 fe42 	bl	8015c84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	0801ddb8 	.word	0x0801ddb8
 801200c:	0801e054 	.word	0x0801e054
 8012010:	0801ddfc 	.word	0x0801ddfc
 8012014:	0801e06c 	.word	0x0801e06c

08012018 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012018:	b5b0      	push	{r4, r5, r7, lr}
 801201a:	b090      	sub	sp, #64	; 0x40
 801201c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801201e:	2300      	movs	r3, #0
 8012020:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012024:	4b94      	ldr	r3, [pc, #592]	; (8012278 <tcp_slowtmr+0x260>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	3301      	adds	r3, #1
 801202a:	4a93      	ldr	r2, [pc, #588]	; (8012278 <tcp_slowtmr+0x260>)
 801202c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801202e:	4b93      	ldr	r3, [pc, #588]	; (801227c <tcp_slowtmr+0x264>)
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	3301      	adds	r3, #1
 8012034:	b2da      	uxtb	r2, r3
 8012036:	4b91      	ldr	r3, [pc, #580]	; (801227c <tcp_slowtmr+0x264>)
 8012038:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801203a:	2300      	movs	r3, #0
 801203c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801203e:	4b90      	ldr	r3, [pc, #576]	; (8012280 <tcp_slowtmr+0x268>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012044:	e29f      	b.n	8012586 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012048:	7d1b      	ldrb	r3, [r3, #20]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_slowtmr+0x44>
 801204e:	4b8d      	ldr	r3, [pc, #564]	; (8012284 <tcp_slowtmr+0x26c>)
 8012050:	f240 42be 	movw	r2, #1214	; 0x4be
 8012054:	498c      	ldr	r1, [pc, #560]	; (8012288 <tcp_slowtmr+0x270>)
 8012056:	488d      	ldr	r0, [pc, #564]	; (801228c <tcp_slowtmr+0x274>)
 8012058:	f008 fd3a 	bl	801aad0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205e:	7d1b      	ldrb	r3, [r3, #20]
 8012060:	2b01      	cmp	r3, #1
 8012062:	d106      	bne.n	8012072 <tcp_slowtmr+0x5a>
 8012064:	4b87      	ldr	r3, [pc, #540]	; (8012284 <tcp_slowtmr+0x26c>)
 8012066:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801206a:	4989      	ldr	r1, [pc, #548]	; (8012290 <tcp_slowtmr+0x278>)
 801206c:	4887      	ldr	r0, [pc, #540]	; (801228c <tcp_slowtmr+0x274>)
 801206e:	f008 fd2f 	bl	801aad0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012074:	7d1b      	ldrb	r3, [r3, #20]
 8012076:	2b0a      	cmp	r3, #10
 8012078:	d106      	bne.n	8012088 <tcp_slowtmr+0x70>
 801207a:	4b82      	ldr	r3, [pc, #520]	; (8012284 <tcp_slowtmr+0x26c>)
 801207c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012080:	4984      	ldr	r1, [pc, #528]	; (8012294 <tcp_slowtmr+0x27c>)
 8012082:	4882      	ldr	r0, [pc, #520]	; (801228c <tcp_slowtmr+0x274>)
 8012084:	f008 fd24 	bl	801aad0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208a:	7f9a      	ldrb	r2, [r3, #30]
 801208c:	4b7b      	ldr	r3, [pc, #492]	; (801227c <tcp_slowtmr+0x264>)
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	429a      	cmp	r2, r3
 8012092:	d105      	bne.n	80120a0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012096:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801209e:	e272      	b.n	8012586 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80120a0:	4b76      	ldr	r3, [pc, #472]	; (801227c <tcp_slowtmr+0x264>)
 80120a2:	781a      	ldrb	r2, [r3, #0]
 80120a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80120ae:	2300      	movs	r3, #0
 80120b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80120b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b6:	7d1b      	ldrb	r3, [r3, #20]
 80120b8:	2b02      	cmp	r3, #2
 80120ba:	d10a      	bne.n	80120d2 <tcp_slowtmr+0xba>
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80120c2:	2b05      	cmp	r3, #5
 80120c4:	d905      	bls.n	80120d2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80120c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120ca:	3301      	adds	r3, #1
 80120cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120d0:	e11e      	b.n	8012310 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80120d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80120d8:	2b0b      	cmp	r3, #11
 80120da:	d905      	bls.n	80120e8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80120dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120e0:	3301      	adds	r3, #1
 80120e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120e6:	e113      	b.n	8012310 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80120e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d075      	beq.n	80121de <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80120f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d006      	beq.n	8012108 <tcp_slowtmr+0xf0>
 80120fa:	4b62      	ldr	r3, [pc, #392]	; (8012284 <tcp_slowtmr+0x26c>)
 80120fc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012100:	4965      	ldr	r1, [pc, #404]	; (8012298 <tcp_slowtmr+0x280>)
 8012102:	4862      	ldr	r0, [pc, #392]	; (801228c <tcp_slowtmr+0x274>)
 8012104:	f008 fce4 	bl	801aad0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801210c:	2b00      	cmp	r3, #0
 801210e:	d106      	bne.n	801211e <tcp_slowtmr+0x106>
 8012110:	4b5c      	ldr	r3, [pc, #368]	; (8012284 <tcp_slowtmr+0x26c>)
 8012112:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012116:	4961      	ldr	r1, [pc, #388]	; (801229c <tcp_slowtmr+0x284>)
 8012118:	485c      	ldr	r0, [pc, #368]	; (801228c <tcp_slowtmr+0x274>)
 801211a:	f008 fcd9 	bl	801aad0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012120:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012124:	2b0b      	cmp	r3, #11
 8012126:	d905      	bls.n	8012134 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801212c:	3301      	adds	r3, #1
 801212e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012132:	e0ed      	b.n	8012310 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801213a:	3b01      	subs	r3, #1
 801213c:	4a58      	ldr	r2, [pc, #352]	; (80122a0 <tcp_slowtmr+0x288>)
 801213e:	5cd3      	ldrb	r3, [r2, r3]
 8012140:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012144:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012148:	7c7a      	ldrb	r2, [r7, #17]
 801214a:	429a      	cmp	r2, r3
 801214c:	d907      	bls.n	801215e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012150:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012154:	3301      	adds	r3, #1
 8012156:	b2da      	uxtb	r2, r3
 8012158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012160:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012164:	7c7a      	ldrb	r2, [r7, #17]
 8012166:	429a      	cmp	r2, r3
 8012168:	f200 80d2 	bhi.w	8012310 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801216c:	2301      	movs	r3, #1
 801216e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012176:	2b00      	cmp	r3, #0
 8012178:	d108      	bne.n	801218c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801217a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801217c:	f004 fc2a 	bl	80169d4 <tcp_zero_window_probe>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d014      	beq.n	80121b0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012186:	2300      	movs	r3, #0
 8012188:	623b      	str	r3, [r7, #32]
 801218a:	e011      	b.n	80121b0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012192:	4619      	mov	r1, r3
 8012194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012196:	f003 faef 	bl	8015778 <tcp_split_unsent_seg>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d107      	bne.n	80121b0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80121a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121a2:	f003 fd6f 	bl	8015c84 <tcp_output>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d101      	bne.n	80121b0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80121ac:	2300      	movs	r3, #0
 80121ae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f000 80ac 	beq.w	8012310 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80121b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ba:	2200      	movs	r2, #0
 80121bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80121c6:	2b06      	cmp	r3, #6
 80121c8:	f200 80a2 	bhi.w	8012310 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80121cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80121d2:	3301      	adds	r3, #1
 80121d4:	b2da      	uxtb	r2, r3
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80121dc:	e098      	b.n	8012310 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80121de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	db0f      	blt.n	8012208 <tcp_slowtmr+0x1f0>
 80121e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80121ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d008      	beq.n	8012208 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80121f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	3301      	adds	r3, #1
 8012200:	b29b      	uxth	r3, r3
 8012202:	b21a      	sxth	r2, r3
 8012204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012206:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012210:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012214:	429a      	cmp	r2, r3
 8012216:	db7b      	blt.n	8012310 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801221a:	f004 f827 	bl	801626c <tcp_rexmit_rto_prepare>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d007      	beq.n	8012234 <tcp_slowtmr+0x21c>
 8012224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012228:	2b00      	cmp	r3, #0
 801222a:	d171      	bne.n	8012310 <tcp_slowtmr+0x2f8>
 801222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012230:	2b00      	cmp	r3, #0
 8012232:	d06d      	beq.n	8012310 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012236:	7d1b      	ldrb	r3, [r3, #20]
 8012238:	2b02      	cmp	r3, #2
 801223a:	d03a      	beq.n	80122b2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012242:	2b0c      	cmp	r3, #12
 8012244:	bf28      	it	cs
 8012246:	230c      	movcs	r3, #12
 8012248:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012250:	10db      	asrs	r3, r3, #3
 8012252:	b21b      	sxth	r3, r3
 8012254:	461a      	mov	r2, r3
 8012256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012258:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801225c:	4413      	add	r3, r2
 801225e:	7efa      	ldrb	r2, [r7, #27]
 8012260:	4910      	ldr	r1, [pc, #64]	; (80122a4 <tcp_slowtmr+0x28c>)
 8012262:	5c8a      	ldrb	r2, [r1, r2]
 8012264:	4093      	lsls	r3, r2
 8012266:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801226e:	4293      	cmp	r3, r2
 8012270:	dc1a      	bgt.n	80122a8 <tcp_slowtmr+0x290>
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	b21a      	sxth	r2, r3
 8012276:	e019      	b.n	80122ac <tcp_slowtmr+0x294>
 8012278:	2000f1ac 	.word	0x2000f1ac
 801227c:	2000f1c2 	.word	0x2000f1c2
 8012280:	2000f1b8 	.word	0x2000f1b8
 8012284:	0801ddb8 	.word	0x0801ddb8
 8012288:	0801e0fc 	.word	0x0801e0fc
 801228c:	0801ddfc 	.word	0x0801ddfc
 8012290:	0801e128 	.word	0x0801e128
 8012294:	0801e154 	.word	0x0801e154
 8012298:	0801e184 	.word	0x0801e184
 801229c:	0801e1b8 	.word	0x0801e1b8
 80122a0:	0801fde8 	.word	0x0801fde8
 80122a4:	0801fdd8 	.word	0x0801fdd8
 80122a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80122ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80122b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b4:	2200      	movs	r2, #0
 80122b6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80122be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122c4:	4293      	cmp	r3, r2
 80122c6:	bf28      	it	cs
 80122c8:	4613      	movcs	r3, r2
 80122ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80122cc:	8a7b      	ldrh	r3, [r7, #18]
 80122ce:	085b      	lsrs	r3, r3, #1
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80122d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80122de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122e2:	005b      	lsls	r3, r3, #1
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d206      	bcs.n	80122f8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80122ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122ee:	005b      	lsls	r3, r3, #1
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80122f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012304:	2200      	movs	r2, #0
 8012306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801230a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801230c:	f004 f81e 	bl	801634c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012312:	7d1b      	ldrb	r3, [r3, #20]
 8012314:	2b06      	cmp	r3, #6
 8012316:	d111      	bne.n	801233c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	8b5b      	ldrh	r3, [r3, #26]
 801231c:	f003 0310 	and.w	r3, r3, #16
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00b      	beq.n	801233c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012324:	4b9d      	ldr	r3, [pc, #628]	; (801259c <tcp_slowtmr+0x584>)
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232a:	6a1b      	ldr	r3, [r3, #32]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	2b28      	cmp	r3, #40	; 0x28
 8012330:	d904      	bls.n	801233c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012336:	3301      	adds	r3, #1
 8012338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233e:	7a5b      	ldrb	r3, [r3, #9]
 8012340:	f003 0308 	and.w	r3, r3, #8
 8012344:	2b00      	cmp	r3, #0
 8012346:	d04c      	beq.n	80123e2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801234c:	2b04      	cmp	r3, #4
 801234e:	d003      	beq.n	8012358 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012354:	2b07      	cmp	r3, #7
 8012356:	d144      	bne.n	80123e2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012358:	4b90      	ldr	r3, [pc, #576]	; (801259c <tcp_slowtmr+0x584>)
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	6a1b      	ldr	r3, [r3, #32]
 8012360:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012368:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801236c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012370:	498b      	ldr	r1, [pc, #556]	; (80125a0 <tcp_slowtmr+0x588>)
 8012372:	fba1 1303 	umull	r1, r3, r1, r3
 8012376:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012378:	429a      	cmp	r2, r3
 801237a:	d90a      	bls.n	8012392 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801237c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012380:	3301      	adds	r3, #1
 8012382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012386:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801238a:	3301      	adds	r3, #1
 801238c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012390:	e027      	b.n	80123e2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012392:	4b82      	ldr	r3, [pc, #520]	; (801259c <tcp_slowtmr+0x584>)
 8012394:	681a      	ldr	r2, [r3, #0]
 8012396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012398:	6a1b      	ldr	r3, [r3, #32]
 801239a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80123a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80123a8:	4618      	mov	r0, r3
 80123aa:	4b7e      	ldr	r3, [pc, #504]	; (80125a4 <tcp_slowtmr+0x58c>)
 80123ac:	fb00 f303 	mul.w	r3, r0, r3
 80123b0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80123b2:	497b      	ldr	r1, [pc, #492]	; (80125a0 <tcp_slowtmr+0x588>)
 80123b4:	fba1 1303 	umull	r1, r3, r1, r3
 80123b8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d911      	bls.n	80123e2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80123be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123c0:	f004 fac8 	bl	8016954 <tcp_keepalive>
 80123c4:	4603      	mov	r3, r0
 80123c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80123ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d107      	bne.n	80123e2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80123d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80123d8:	3301      	adds	r3, #1
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80123e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d011      	beq.n	801240e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80123ea:	4b6c      	ldr	r3, [pc, #432]	; (801259c <tcp_slowtmr+0x584>)
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f0:	6a1b      	ldr	r3, [r3, #32]
 80123f2:	1ad2      	subs	r2, r2, r3
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80123fa:	4619      	mov	r1, r3
 80123fc:	460b      	mov	r3, r1
 80123fe:	005b      	lsls	r3, r3, #1
 8012400:	440b      	add	r3, r1
 8012402:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012404:	429a      	cmp	r2, r3
 8012406:	d302      	bcc.n	801240e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801240a:	f000 fddb 	bl	8012fc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012410:	7d1b      	ldrb	r3, [r3, #20]
 8012412:	2b03      	cmp	r3, #3
 8012414:	d10b      	bne.n	801242e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012416:	4b61      	ldr	r3, [pc, #388]	; (801259c <tcp_slowtmr+0x584>)
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241c:	6a1b      	ldr	r3, [r3, #32]
 801241e:	1ad3      	subs	r3, r2, r3
 8012420:	2b28      	cmp	r3, #40	; 0x28
 8012422:	d904      	bls.n	801242e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012428:	3301      	adds	r3, #1
 801242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012430:	7d1b      	ldrb	r3, [r3, #20]
 8012432:	2b09      	cmp	r3, #9
 8012434:	d10b      	bne.n	801244e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012436:	4b59      	ldr	r3, [pc, #356]	; (801259c <tcp_slowtmr+0x584>)
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243c:	6a1b      	ldr	r3, [r3, #32]
 801243e:	1ad3      	subs	r3, r2, r3
 8012440:	2bf0      	cmp	r3, #240	; 0xf0
 8012442:	d904      	bls.n	801244e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012448:	3301      	adds	r3, #1
 801244a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801244e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012452:	2b00      	cmp	r3, #0
 8012454:	d060      	beq.n	8012518 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801245c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801245e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012460:	f000 fbfc 	bl	8012c5c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	2b00      	cmp	r3, #0
 8012468:	d010      	beq.n	801248c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801246a:	4b4f      	ldr	r3, [pc, #316]	; (80125a8 <tcp_slowtmr+0x590>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012470:	429a      	cmp	r2, r3
 8012472:	d106      	bne.n	8012482 <tcp_slowtmr+0x46a>
 8012474:	4b4d      	ldr	r3, [pc, #308]	; (80125ac <tcp_slowtmr+0x594>)
 8012476:	f240 526d 	movw	r2, #1389	; 0x56d
 801247a:	494d      	ldr	r1, [pc, #308]	; (80125b0 <tcp_slowtmr+0x598>)
 801247c:	484d      	ldr	r0, [pc, #308]	; (80125b4 <tcp_slowtmr+0x59c>)
 801247e:	f008 fb27 	bl	801aad0 <iprintf>
        prev->next = pcb->next;
 8012482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012484:	68da      	ldr	r2, [r3, #12]
 8012486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012488:	60da      	str	r2, [r3, #12]
 801248a:	e00f      	b.n	80124ac <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801248c:	4b46      	ldr	r3, [pc, #280]	; (80125a8 <tcp_slowtmr+0x590>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012492:	429a      	cmp	r2, r3
 8012494:	d006      	beq.n	80124a4 <tcp_slowtmr+0x48c>
 8012496:	4b45      	ldr	r3, [pc, #276]	; (80125ac <tcp_slowtmr+0x594>)
 8012498:	f240 5271 	movw	r2, #1393	; 0x571
 801249c:	4946      	ldr	r1, [pc, #280]	; (80125b8 <tcp_slowtmr+0x5a0>)
 801249e:	4845      	ldr	r0, [pc, #276]	; (80125b4 <tcp_slowtmr+0x59c>)
 80124a0:	f008 fb16 	bl	801aad0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80124a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	4a3f      	ldr	r2, [pc, #252]	; (80125a8 <tcp_slowtmr+0x590>)
 80124aa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80124ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d013      	beq.n	80124dc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80124b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80124bc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80124be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c0:	3304      	adds	r3, #4
 80124c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124c4:	8ad2      	ldrh	r2, [r2, #22]
 80124c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124c8:	8b09      	ldrh	r1, [r1, #24]
 80124ca:	9102      	str	r1, [sp, #8]
 80124cc:	9201      	str	r2, [sp, #4]
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	462b      	mov	r3, r5
 80124d2:	4622      	mov	r2, r4
 80124d4:	4601      	mov	r1, r0
 80124d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124d8:	f004 f988 	bl	80167ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80124dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124de:	691b      	ldr	r3, [r3, #16]
 80124e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80124e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e4:	7d1b      	ldrb	r3, [r3, #20]
 80124e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80124e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80124ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80124f2:	6838      	ldr	r0, [r7, #0]
 80124f4:	f7ff f9f2 	bl	80118dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80124f8:	4b30      	ldr	r3, [pc, #192]	; (80125bc <tcp_slowtmr+0x5a4>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d004      	beq.n	801250e <tcp_slowtmr+0x4f6>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f06f 010c 	mvn.w	r1, #12
 801250a:	68b8      	ldr	r0, [r7, #8]
 801250c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801250e:	4b2b      	ldr	r3, [pc, #172]	; (80125bc <tcp_slowtmr+0x5a4>)
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d037      	beq.n	8012586 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012516:	e590      	b.n	801203a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012524:	7f1b      	ldrb	r3, [r3, #28]
 8012526:	3301      	adds	r3, #1
 8012528:	b2da      	uxtb	r2, r3
 801252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012530:	7f1a      	ldrb	r2, [r3, #28]
 8012532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012534:	7f5b      	ldrb	r3, [r3, #29]
 8012536:	429a      	cmp	r2, r3
 8012538:	d325      	bcc.n	8012586 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253c:	2200      	movs	r2, #0
 801253e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012540:	4b1e      	ldr	r3, [pc, #120]	; (80125bc <tcp_slowtmr+0x5a4>)
 8012542:	2200      	movs	r2, #0
 8012544:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801254c:	2b00      	cmp	r3, #0
 801254e:	d00b      	beq.n	8012568 <tcp_slowtmr+0x550>
 8012550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012558:	6912      	ldr	r2, [r2, #16]
 801255a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801255c:	4610      	mov	r0, r2
 801255e:	4798      	blx	r3
 8012560:	4603      	mov	r3, r0
 8012562:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012566:	e002      	b.n	801256e <tcp_slowtmr+0x556>
 8012568:	2300      	movs	r3, #0
 801256a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801256e:	4b13      	ldr	r3, [pc, #76]	; (80125bc <tcp_slowtmr+0x5a4>)
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d000      	beq.n	8012578 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012576:	e560      	b.n	801203a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012578:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801257c:	2b00      	cmp	r3, #0
 801257e:	d102      	bne.n	8012586 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012582:	f003 fb7f 	bl	8015c84 <tcp_output>
  while (pcb != NULL) {
 8012586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012588:	2b00      	cmp	r3, #0
 801258a:	f47f ad5c 	bne.w	8012046 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801258e:	2300      	movs	r3, #0
 8012590:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012592:	4b0b      	ldr	r3, [pc, #44]	; (80125c0 <tcp_slowtmr+0x5a8>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012598:	e067      	b.n	801266a <tcp_slowtmr+0x652>
 801259a:	bf00      	nop
 801259c:	2000f1ac 	.word	0x2000f1ac
 80125a0:	10624dd3 	.word	0x10624dd3
 80125a4:	000124f8 	.word	0x000124f8
 80125a8:	2000f1b8 	.word	0x2000f1b8
 80125ac:	0801ddb8 	.word	0x0801ddb8
 80125b0:	0801e1f0 	.word	0x0801e1f0
 80125b4:	0801ddfc 	.word	0x0801ddfc
 80125b8:	0801e21c 	.word	0x0801e21c
 80125bc:	2000f1c0 	.word	0x2000f1c0
 80125c0:	2000f1bc 	.word	0x2000f1bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80125c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c6:	7d1b      	ldrb	r3, [r3, #20]
 80125c8:	2b0a      	cmp	r3, #10
 80125ca:	d006      	beq.n	80125da <tcp_slowtmr+0x5c2>
 80125cc:	4b2b      	ldr	r3, [pc, #172]	; (801267c <tcp_slowtmr+0x664>)
 80125ce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80125d2:	492b      	ldr	r1, [pc, #172]	; (8012680 <tcp_slowtmr+0x668>)
 80125d4:	482b      	ldr	r0, [pc, #172]	; (8012684 <tcp_slowtmr+0x66c>)
 80125d6:	f008 fa7b 	bl	801aad0 <iprintf>
    pcb_remove = 0;
 80125da:	2300      	movs	r3, #0
 80125dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80125e0:	4b29      	ldr	r3, [pc, #164]	; (8012688 <tcp_slowtmr+0x670>)
 80125e2:	681a      	ldr	r2, [r3, #0]
 80125e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e6:	6a1b      	ldr	r3, [r3, #32]
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	2bf0      	cmp	r3, #240	; 0xf0
 80125ec:	d904      	bls.n	80125f8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80125ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f2:	3301      	adds	r3, #1
 80125f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80125f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d02f      	beq.n	8012660 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012602:	f000 fb2b 	bl	8012c5c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012608:	2b00      	cmp	r3, #0
 801260a:	d010      	beq.n	801262e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801260c:	4b1f      	ldr	r3, [pc, #124]	; (801268c <tcp_slowtmr+0x674>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012612:	429a      	cmp	r2, r3
 8012614:	d106      	bne.n	8012624 <tcp_slowtmr+0x60c>
 8012616:	4b19      	ldr	r3, [pc, #100]	; (801267c <tcp_slowtmr+0x664>)
 8012618:	f240 52af 	movw	r2, #1455	; 0x5af
 801261c:	491c      	ldr	r1, [pc, #112]	; (8012690 <tcp_slowtmr+0x678>)
 801261e:	4819      	ldr	r0, [pc, #100]	; (8012684 <tcp_slowtmr+0x66c>)
 8012620:	f008 fa56 	bl	801aad0 <iprintf>
        prev->next = pcb->next;
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	68da      	ldr	r2, [r3, #12]
 8012628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262a:	60da      	str	r2, [r3, #12]
 801262c:	e00f      	b.n	801264e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801262e:	4b17      	ldr	r3, [pc, #92]	; (801268c <tcp_slowtmr+0x674>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012634:	429a      	cmp	r2, r3
 8012636:	d006      	beq.n	8012646 <tcp_slowtmr+0x62e>
 8012638:	4b10      	ldr	r3, [pc, #64]	; (801267c <tcp_slowtmr+0x664>)
 801263a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801263e:	4915      	ldr	r1, [pc, #84]	; (8012694 <tcp_slowtmr+0x67c>)
 8012640:	4810      	ldr	r0, [pc, #64]	; (8012684 <tcp_slowtmr+0x66c>)
 8012642:	f008 fa45 	bl	801aad0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	4a10      	ldr	r2, [pc, #64]	; (801268c <tcp_slowtmr+0x674>)
 801264c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012650:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012658:	69f8      	ldr	r0, [r7, #28]
 801265a:	f7ff f93f 	bl	80118dc <tcp_free>
 801265e:	e004      	b.n	801266a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012662:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1a9      	bne.n	80125c4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012670:	bf00      	nop
 8012672:	bf00      	nop
 8012674:	3730      	adds	r7, #48	; 0x30
 8012676:	46bd      	mov	sp, r7
 8012678:	bdb0      	pop	{r4, r5, r7, pc}
 801267a:	bf00      	nop
 801267c:	0801ddb8 	.word	0x0801ddb8
 8012680:	0801e248 	.word	0x0801e248
 8012684:	0801ddfc 	.word	0x0801ddfc
 8012688:	2000f1ac 	.word	0x2000f1ac
 801268c:	2000f1bc 	.word	0x2000f1bc
 8012690:	0801e278 	.word	0x0801e278
 8012694:	0801e2a0 	.word	0x0801e2a0

08012698 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801269e:	4b2d      	ldr	r3, [pc, #180]	; (8012754 <tcp_fasttmr+0xbc>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	3301      	adds	r3, #1
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	4b2b      	ldr	r3, [pc, #172]	; (8012754 <tcp_fasttmr+0xbc>)
 80126a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80126aa:	4b2b      	ldr	r3, [pc, #172]	; (8012758 <tcp_fasttmr+0xc0>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80126b0:	e048      	b.n	8012744 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	7f9a      	ldrb	r2, [r3, #30]
 80126b6:	4b27      	ldr	r3, [pc, #156]	; (8012754 <tcp_fasttmr+0xbc>)
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d03f      	beq.n	801273e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80126be:	4b25      	ldr	r3, [pc, #148]	; (8012754 <tcp_fasttmr+0xbc>)
 80126c0:	781a      	ldrb	r2, [r3, #0]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	8b5b      	ldrh	r3, [r3, #26]
 80126ca:	f003 0301 	and.w	r3, r3, #1
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d010      	beq.n	80126f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	8b5b      	ldrh	r3, [r3, #26]
 80126d6:	f043 0302 	orr.w	r3, r3, #2
 80126da:	b29a      	uxth	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f003 facf 	bl	8015c84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	8b5b      	ldrh	r3, [r3, #26]
 80126ea:	f023 0303 	bic.w	r3, r3, #3
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	8b5b      	ldrh	r3, [r3, #26]
 80126f8:	f003 0308 	and.w	r3, r3, #8
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d009      	beq.n	8012714 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	8b5b      	ldrh	r3, [r3, #26]
 8012704:	f023 0308 	bic.w	r3, r3, #8
 8012708:	b29a      	uxth	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7ff fa78 	bl	8011c04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801271e:	2b00      	cmp	r3, #0
 8012720:	d00a      	beq.n	8012738 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012722:	4b0e      	ldr	r3, [pc, #56]	; (801275c <tcp_fasttmr+0xc4>)
 8012724:	2200      	movs	r2, #0
 8012726:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f819 	bl	8012760 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801272e:	4b0b      	ldr	r3, [pc, #44]	; (801275c <tcp_fasttmr+0xc4>)
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d000      	beq.n	8012738 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012736:	e7b8      	b.n	80126aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	607b      	str	r3, [r7, #4]
 801273c:	e002      	b.n	8012744 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d1b3      	bne.n	80126b2 <tcp_fasttmr+0x1a>
    }
  }
}
 801274a:	bf00      	nop
 801274c:	bf00      	nop
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	2000f1c2 	.word	0x2000f1c2
 8012758:	2000f1b8 	.word	0x2000f1b8
 801275c:	2000f1c0 	.word	0x2000f1c0

08012760 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012760:	b590      	push	{r4, r7, lr}
 8012762:	b085      	sub	sp, #20
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d109      	bne.n	8012782 <tcp_process_refused_data+0x22>
 801276e:	4b37      	ldr	r3, [pc, #220]	; (801284c <tcp_process_refused_data+0xec>)
 8012770:	f240 6209 	movw	r2, #1545	; 0x609
 8012774:	4936      	ldr	r1, [pc, #216]	; (8012850 <tcp_process_refused_data+0xf0>)
 8012776:	4837      	ldr	r0, [pc, #220]	; (8012854 <tcp_process_refused_data+0xf4>)
 8012778:	f008 f9aa 	bl	801aad0 <iprintf>
 801277c:	f06f 030f 	mvn.w	r3, #15
 8012780:	e060      	b.n	8012844 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012786:	7b5b      	ldrb	r3, [r3, #13]
 8012788:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801278e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00b      	beq.n	80127b8 <tcp_process_refused_data+0x58>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6918      	ldr	r0, [r3, #16]
 80127aa:	2300      	movs	r3, #0
 80127ac:	68ba      	ldr	r2, [r7, #8]
 80127ae:	6879      	ldr	r1, [r7, #4]
 80127b0:	47a0      	blx	r4
 80127b2:	4603      	mov	r3, r0
 80127b4:	73fb      	strb	r3, [r7, #15]
 80127b6:	e007      	b.n	80127c8 <tcp_process_refused_data+0x68>
 80127b8:	2300      	movs	r3, #0
 80127ba:	68ba      	ldr	r2, [r7, #8]
 80127bc:	6879      	ldr	r1, [r7, #4]
 80127be:	2000      	movs	r0, #0
 80127c0:	f000 f8a4 	bl	801290c <tcp_recv_null>
 80127c4:	4603      	mov	r3, r0
 80127c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80127c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d12a      	bne.n	8012826 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80127d0:	7bbb      	ldrb	r3, [r7, #14]
 80127d2:	f003 0320 	and.w	r3, r3, #32
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d033      	beq.n	8012842 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80127e2:	d005      	beq.n	80127f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127e8:	3301      	adds	r3, #1
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00b      	beq.n	8012812 <tcp_process_refused_data+0xb2>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6918      	ldr	r0, [r3, #16]
 8012804:	2300      	movs	r3, #0
 8012806:	2200      	movs	r2, #0
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	47a0      	blx	r4
 801280c:	4603      	mov	r3, r0
 801280e:	73fb      	strb	r3, [r7, #15]
 8012810:	e001      	b.n	8012816 <tcp_process_refused_data+0xb6>
 8012812:	2300      	movs	r3, #0
 8012814:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801281a:	f113 0f0d 	cmn.w	r3, #13
 801281e:	d110      	bne.n	8012842 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012820:	f06f 030c 	mvn.w	r3, #12
 8012824:	e00e      	b.n	8012844 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801282a:	f113 0f0d 	cmn.w	r3, #13
 801282e:	d102      	bne.n	8012836 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012830:	f06f 030c 	mvn.w	r3, #12
 8012834:	e006      	b.n	8012844 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68ba      	ldr	r2, [r7, #8]
 801283a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801283c:	f06f 0304 	mvn.w	r3, #4
 8012840:	e000      	b.n	8012844 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012842:	2300      	movs	r3, #0
}
 8012844:	4618      	mov	r0, r3
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	bd90      	pop	{r4, r7, pc}
 801284c:	0801ddb8 	.word	0x0801ddb8
 8012850:	0801e2c8 	.word	0x0801e2c8
 8012854:	0801ddfc 	.word	0x0801ddfc

08012858 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012860:	e007      	b.n	8012872 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 f80a 	bl	8012882 <tcp_seg_free>
    seg = next;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d1f4      	bne.n	8012862 <tcp_segs_free+0xa>
  }
}
 8012878:	bf00      	nop
 801287a:	bf00      	nop
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}

08012882 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b082      	sub	sp, #8
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00c      	beq.n	80128aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d004      	beq.n	80128a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	4618      	mov	r0, r3
 801289e:	f7fe fc07 	bl	80110b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80128a2:	6879      	ldr	r1, [r7, #4]
 80128a4:	2003      	movs	r0, #3
 80128a6:	f7fd fd43 	bl	8010330 <memp_free>
  }
}
 80128aa:	bf00      	nop
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
	...

080128b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d106      	bne.n	80128d0 <tcp_seg_copy+0x1c>
 80128c2:	4b0f      	ldr	r3, [pc, #60]	; (8012900 <tcp_seg_copy+0x4c>)
 80128c4:	f240 6282 	movw	r2, #1666	; 0x682
 80128c8:	490e      	ldr	r1, [pc, #56]	; (8012904 <tcp_seg_copy+0x50>)
 80128ca:	480f      	ldr	r0, [pc, #60]	; (8012908 <tcp_seg_copy+0x54>)
 80128cc:	f008 f900 	bl	801aad0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80128d0:	2003      	movs	r0, #3
 80128d2:	f7fd fcb7 	bl	8010244 <memp_malloc>
 80128d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d101      	bne.n	80128e2 <tcp_seg_copy+0x2e>
    return NULL;
 80128de:	2300      	movs	r3, #0
 80128e0:	e00a      	b.n	80128f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80128e2:	2210      	movs	r2, #16
 80128e4:	6879      	ldr	r1, [r7, #4]
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f008 faa5 	bl	801ae36 <memcpy>
  pbuf_ref(cseg->p);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7fe fc83 	bl	80111fc <pbuf_ref>
  return cseg;
 80128f6:	68fb      	ldr	r3, [r7, #12]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	0801ddb8 	.word	0x0801ddb8
 8012904:	0801e30c 	.word	0x0801e30c
 8012908:	0801ddfc 	.word	0x0801ddfc

0801290c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
 8012918:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d109      	bne.n	8012934 <tcp_recv_null+0x28>
 8012920:	4b12      	ldr	r3, [pc, #72]	; (801296c <tcp_recv_null+0x60>)
 8012922:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012926:	4912      	ldr	r1, [pc, #72]	; (8012970 <tcp_recv_null+0x64>)
 8012928:	4812      	ldr	r0, [pc, #72]	; (8012974 <tcp_recv_null+0x68>)
 801292a:	f008 f8d1 	bl	801aad0 <iprintf>
 801292e:	f06f 030f 	mvn.w	r3, #15
 8012932:	e016      	b.n	8012962 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d009      	beq.n	801294e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	891b      	ldrh	r3, [r3, #8]
 801293e:	4619      	mov	r1, r3
 8012940:	68b8      	ldr	r0, [r7, #8]
 8012942:	f7ff fb19 	bl	8011f78 <tcp_recved>
    pbuf_free(p);
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f7fe fbb2 	bl	80110b0 <pbuf_free>
 801294c:	e008      	b.n	8012960 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801294e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d104      	bne.n	8012960 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012956:	68b8      	ldr	r0, [r7, #8]
 8012958:	f7ff f9be 	bl	8011cd8 <tcp_close>
 801295c:	4603      	mov	r3, r0
 801295e:	e000      	b.n	8012962 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012960:	2300      	movs	r3, #0
}
 8012962:	4618      	mov	r0, r3
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	0801ddb8 	.word	0x0801ddb8
 8012970:	0801e328 	.word	0x0801e328
 8012974:	0801ddfc 	.word	0x0801ddfc

08012978 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b086      	sub	sp, #24
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012986:	2b00      	cmp	r3, #0
 8012988:	db01      	blt.n	801298e <tcp_kill_prio+0x16>
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	e000      	b.n	8012990 <tcp_kill_prio+0x18>
 801298e:	237f      	movs	r3, #127	; 0x7f
 8012990:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012992:	7afb      	ldrb	r3, [r7, #11]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d034      	beq.n	8012a02 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012998:	7afb      	ldrb	r3, [r7, #11]
 801299a:	3b01      	subs	r3, #1
 801299c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801299e:	2300      	movs	r3, #0
 80129a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80129a2:	2300      	movs	r3, #0
 80129a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80129a6:	4b19      	ldr	r3, [pc, #100]	; (8012a0c <tcp_kill_prio+0x94>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	e01f      	b.n	80129ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	7d5b      	ldrb	r3, [r3, #21]
 80129b2:	7afa      	ldrb	r2, [r7, #11]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d80c      	bhi.n	80129d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80129bc:	7afa      	ldrb	r2, [r7, #11]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d112      	bne.n	80129e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80129c2:	4b13      	ldr	r3, [pc, #76]	; (8012a10 <tcp_kill_prio+0x98>)
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	6a1b      	ldr	r3, [r3, #32]
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d80a      	bhi.n	80129e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80129d2:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <tcp_kill_prio+0x98>)
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	6a1b      	ldr	r3, [r3, #32]
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	7d5b      	ldrb	r3, [r3, #21]
 80129e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	617b      	str	r3, [r7, #20]
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d1dc      	bne.n	80129ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d004      	beq.n	8012a04 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80129fa:	6938      	ldr	r0, [r7, #16]
 80129fc:	f7ff fa56 	bl	8011eac <tcp_abort>
 8012a00:	e000      	b.n	8012a04 <tcp_kill_prio+0x8c>
    return;
 8012a02:	bf00      	nop
  }
}
 8012a04:	3718      	adds	r7, #24
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	2000f1b8 	.word	0x2000f1b8
 8012a10:	2000f1ac 	.word	0x2000f1ac

08012a14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012a1e:	79fb      	ldrb	r3, [r7, #7]
 8012a20:	2b08      	cmp	r3, #8
 8012a22:	d009      	beq.n	8012a38 <tcp_kill_state+0x24>
 8012a24:	79fb      	ldrb	r3, [r7, #7]
 8012a26:	2b09      	cmp	r3, #9
 8012a28:	d006      	beq.n	8012a38 <tcp_kill_state+0x24>
 8012a2a:	4b1a      	ldr	r3, [pc, #104]	; (8012a94 <tcp_kill_state+0x80>)
 8012a2c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012a30:	4919      	ldr	r1, [pc, #100]	; (8012a98 <tcp_kill_state+0x84>)
 8012a32:	481a      	ldr	r0, [pc, #104]	; (8012a9c <tcp_kill_state+0x88>)
 8012a34:	f008 f84c 	bl	801aad0 <iprintf>

  inactivity = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a40:	4b17      	ldr	r3, [pc, #92]	; (8012aa0 <tcp_kill_state+0x8c>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	617b      	str	r3, [r7, #20]
 8012a46:	e017      	b.n	8012a78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	7d1b      	ldrb	r3, [r3, #20]
 8012a4c:	79fa      	ldrb	r2, [r7, #7]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d10f      	bne.n	8012a72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012a52:	4b14      	ldr	r3, [pc, #80]	; (8012aa4 <tcp_kill_state+0x90>)
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	6a1b      	ldr	r3, [r3, #32]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d807      	bhi.n	8012a72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012a62:	4b10      	ldr	r3, [pc, #64]	; (8012aa4 <tcp_kill_state+0x90>)
 8012a64:	681a      	ldr	r2, [r3, #0]
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	1ad3      	subs	r3, r2, r3
 8012a6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	617b      	str	r3, [r7, #20]
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1e4      	bne.n	8012a48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d003      	beq.n	8012a8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012a84:	2100      	movs	r1, #0
 8012a86:	6938      	ldr	r0, [r7, #16]
 8012a88:	f7ff f952 	bl	8011d30 <tcp_abandon>
  }
}
 8012a8c:	bf00      	nop
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	0801ddb8 	.word	0x0801ddb8
 8012a98:	0801e344 	.word	0x0801e344
 8012a9c:	0801ddfc 	.word	0x0801ddfc
 8012aa0:	2000f1b8 	.word	0x2000f1b8
 8012aa4:	2000f1ac 	.word	0x2000f1ac

08012aa8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ab6:	4b12      	ldr	r3, [pc, #72]	; (8012b00 <tcp_kill_timewait+0x58>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	60fb      	str	r3, [r7, #12]
 8012abc:	e012      	b.n	8012ae4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012abe:	4b11      	ldr	r3, [pc, #68]	; (8012b04 <tcp_kill_timewait+0x5c>)
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	6a1b      	ldr	r3, [r3, #32]
 8012ac6:	1ad3      	subs	r3, r2, r3
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d807      	bhi.n	8012ade <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012ace:	4b0d      	ldr	r3, [pc, #52]	; (8012b04 <tcp_kill_timewait+0x5c>)
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	6a1b      	ldr	r3, [r3, #32]
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	60fb      	str	r3, [r7, #12]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1e9      	bne.n	8012abe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d002      	beq.n	8012af6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012af0:	68b8      	ldr	r0, [r7, #8]
 8012af2:	f7ff f9db 	bl	8011eac <tcp_abort>
  }
}
 8012af6:	bf00      	nop
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	2000f1bc 	.word	0x2000f1bc
 8012b04:	2000f1ac 	.word	0x2000f1ac

08012b08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012b0e:	4b10      	ldr	r3, [pc, #64]	; (8012b50 <tcp_handle_closepend+0x48>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012b14:	e014      	b.n	8012b40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	68db      	ldr	r3, [r3, #12]
 8012b1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	8b5b      	ldrh	r3, [r3, #26]
 8012b20:	f003 0308 	and.w	r3, r3, #8
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d009      	beq.n	8012b3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	8b5b      	ldrh	r3, [r3, #26]
 8012b2c:	f023 0308 	bic.w	r3, r3, #8
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7ff f864 	bl	8011c04 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1e7      	bne.n	8012b16 <tcp_handle_closepend+0xe>
  }
}
 8012b46:	bf00      	nop
 8012b48:	bf00      	nop
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	2000f1b8 	.word	0x2000f1b8

08012b54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012b5e:	2001      	movs	r0, #1
 8012b60:	f7fd fb70 	bl	8010244 <memp_malloc>
 8012b64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d126      	bne.n	8012bba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012b6c:	f7ff ffcc 	bl	8012b08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012b70:	f7ff ff9a 	bl	8012aa8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012b74:	2001      	movs	r0, #1
 8012b76:	f7fd fb65 	bl	8010244 <memp_malloc>
 8012b7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d11b      	bne.n	8012bba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012b82:	2009      	movs	r0, #9
 8012b84:	f7ff ff46 	bl	8012a14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012b88:	2001      	movs	r0, #1
 8012b8a:	f7fd fb5b 	bl	8010244 <memp_malloc>
 8012b8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d111      	bne.n	8012bba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012b96:	2008      	movs	r0, #8
 8012b98:	f7ff ff3c 	bl	8012a14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012b9c:	2001      	movs	r0, #1
 8012b9e:	f7fd fb51 	bl	8010244 <memp_malloc>
 8012ba2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d107      	bne.n	8012bba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012baa:	79fb      	ldrb	r3, [r7, #7]
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff fee3 	bl	8012978 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012bb2:	2001      	movs	r0, #1
 8012bb4:	f7fd fb46 	bl	8010244 <memp_malloc>
 8012bb8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d03f      	beq.n	8012c40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012bc0:	229c      	movs	r2, #156	; 0x9c
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	f008 f8b7 	bl	801ad38 <memset>
    pcb->prio = prio;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	79fa      	ldrb	r2, [r7, #7]
 8012bce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012bd6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	22ff      	movs	r2, #255	; 0xff
 8012bee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012bf6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2206      	movs	r2, #6
 8012bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2206      	movs	r2, #6
 8012c04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2201      	movs	r2, #1
 8012c12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012c16:	4b0d      	ldr	r3, [pc, #52]	; (8012c4c <tcp_alloc+0xf8>)
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012c1e:	4b0c      	ldr	r3, [pc, #48]	; (8012c50 <tcp_alloc+0xfc>)
 8012c20:	781a      	ldrb	r2, [r3, #0]
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012c2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	4a08      	ldr	r2, [pc, #32]	; (8012c54 <tcp_alloc+0x100>)
 8012c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	4a07      	ldr	r2, [pc, #28]	; (8012c58 <tcp_alloc+0x104>)
 8012c3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012c40:	68fb      	ldr	r3, [r7, #12]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	2000f1ac 	.word	0x2000f1ac
 8012c50:	2000f1c2 	.word	0x2000f1c2
 8012c54:	0801290d 	.word	0x0801290d
 8012c58:	006ddd00 	.word	0x006ddd00

08012c5c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d107      	bne.n	8012c7a <tcp_pcb_purge+0x1e>
 8012c6a:	4b21      	ldr	r3, [pc, #132]	; (8012cf0 <tcp_pcb_purge+0x94>)
 8012c6c:	f640 0251 	movw	r2, #2129	; 0x851
 8012c70:	4920      	ldr	r1, [pc, #128]	; (8012cf4 <tcp_pcb_purge+0x98>)
 8012c72:	4821      	ldr	r0, [pc, #132]	; (8012cf8 <tcp_pcb_purge+0x9c>)
 8012c74:	f007 ff2c 	bl	801aad0 <iprintf>
 8012c78:	e037      	b.n	8012cea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	7d1b      	ldrb	r3, [r3, #20]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d033      	beq.n	8012cea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012c86:	2b0a      	cmp	r3, #10
 8012c88:	d02f      	beq.n	8012cea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d02b      	beq.n	8012cea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d007      	beq.n	8012caa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fe fa06 	bl	80110b0 <pbuf_free>
      pcb->refused_data = NULL;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d002      	beq.n	8012cb8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f986 	bl	8012fc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cbe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff fdc7 	bl	8012858 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7ff fdc2 	bl	8012858 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012cea:	3708      	adds	r7, #8
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	0801ddb8 	.word	0x0801ddb8
 8012cf4:	0801e404 	.word	0x0801e404
 8012cf8:	0801ddfc 	.word	0x0801ddfc

08012cfc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d106      	bne.n	8012d1a <tcp_pcb_remove+0x1e>
 8012d0c:	4b3e      	ldr	r3, [pc, #248]	; (8012e08 <tcp_pcb_remove+0x10c>)
 8012d0e:	f640 0283 	movw	r2, #2179	; 0x883
 8012d12:	493e      	ldr	r1, [pc, #248]	; (8012e0c <tcp_pcb_remove+0x110>)
 8012d14:	483e      	ldr	r0, [pc, #248]	; (8012e10 <tcp_pcb_remove+0x114>)
 8012d16:	f007 fedb 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d106      	bne.n	8012d2e <tcp_pcb_remove+0x32>
 8012d20:	4b39      	ldr	r3, [pc, #228]	; (8012e08 <tcp_pcb_remove+0x10c>)
 8012d22:	f640 0284 	movw	r2, #2180	; 0x884
 8012d26:	493b      	ldr	r1, [pc, #236]	; (8012e14 <tcp_pcb_remove+0x118>)
 8012d28:	4839      	ldr	r0, [pc, #228]	; (8012e10 <tcp_pcb_remove+0x114>)
 8012d2a:	f007 fed1 	bl	801aad0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	683a      	ldr	r2, [r7, #0]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d105      	bne.n	8012d44 <tcp_pcb_remove+0x48>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	68da      	ldr	r2, [r3, #12]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	601a      	str	r2, [r3, #0]
 8012d42:	e013      	b.n	8012d6c <tcp_pcb_remove+0x70>
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	60fb      	str	r3, [r7, #12]
 8012d4a:	e00c      	b.n	8012d66 <tcp_pcb_remove+0x6a>
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	683a      	ldr	r2, [r7, #0]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d104      	bne.n	8012d60 <tcp_pcb_remove+0x64>
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	68da      	ldr	r2, [r3, #12]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	60da      	str	r2, [r3, #12]
 8012d5e:	e005      	b.n	8012d6c <tcp_pcb_remove+0x70>
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	60fb      	str	r3, [r7, #12]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d1ef      	bne.n	8012d4c <tcp_pcb_remove+0x50>
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012d72:	6838      	ldr	r0, [r7, #0]
 8012d74:	f7ff ff72 	bl	8012c5c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	7d1b      	ldrb	r3, [r3, #20]
 8012d7c:	2b0a      	cmp	r3, #10
 8012d7e:	d013      	beq.n	8012da8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d00f      	beq.n	8012da8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	8b5b      	ldrh	r3, [r3, #26]
 8012d8c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d009      	beq.n	8012da8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	8b5b      	ldrh	r3, [r3, #26]
 8012d98:	f043 0302 	orr.w	r3, r3, #2
 8012d9c:	b29a      	uxth	r2, r3
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012da2:	6838      	ldr	r0, [r7, #0]
 8012da4:	f002 ff6e 	bl	8015c84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	7d1b      	ldrb	r3, [r3, #20]
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d020      	beq.n	8012df2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d006      	beq.n	8012dc6 <tcp_pcb_remove+0xca>
 8012db8:	4b13      	ldr	r3, [pc, #76]	; (8012e08 <tcp_pcb_remove+0x10c>)
 8012dba:	f640 0293 	movw	r2, #2195	; 0x893
 8012dbe:	4916      	ldr	r1, [pc, #88]	; (8012e18 <tcp_pcb_remove+0x11c>)
 8012dc0:	4813      	ldr	r0, [pc, #76]	; (8012e10 <tcp_pcb_remove+0x114>)
 8012dc2:	f007 fe85 	bl	801aad0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d006      	beq.n	8012ddc <tcp_pcb_remove+0xe0>
 8012dce:	4b0e      	ldr	r3, [pc, #56]	; (8012e08 <tcp_pcb_remove+0x10c>)
 8012dd0:	f640 0294 	movw	r2, #2196	; 0x894
 8012dd4:	4911      	ldr	r1, [pc, #68]	; (8012e1c <tcp_pcb_remove+0x120>)
 8012dd6:	480e      	ldr	r0, [pc, #56]	; (8012e10 <tcp_pcb_remove+0x114>)
 8012dd8:	f007 fe7a 	bl	801aad0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d006      	beq.n	8012df2 <tcp_pcb_remove+0xf6>
 8012de4:	4b08      	ldr	r3, [pc, #32]	; (8012e08 <tcp_pcb_remove+0x10c>)
 8012de6:	f640 0296 	movw	r2, #2198	; 0x896
 8012dea:	490d      	ldr	r1, [pc, #52]	; (8012e20 <tcp_pcb_remove+0x124>)
 8012dec:	4808      	ldr	r0, [pc, #32]	; (8012e10 <tcp_pcb_remove+0x114>)
 8012dee:	f007 fe6f 	bl	801aad0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	2200      	movs	r2, #0
 8012df6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012dfe:	bf00      	nop
 8012e00:	3710      	adds	r7, #16
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	0801ddb8 	.word	0x0801ddb8
 8012e0c:	0801e420 	.word	0x0801e420
 8012e10:	0801ddfc 	.word	0x0801ddfc
 8012e14:	0801e43c 	.word	0x0801e43c
 8012e18:	0801e45c 	.word	0x0801e45c
 8012e1c:	0801e474 	.word	0x0801e474
 8012e20:	0801e490 	.word	0x0801e490

08012e24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d106      	bne.n	8012e40 <tcp_next_iss+0x1c>
 8012e32:	4b0a      	ldr	r3, [pc, #40]	; (8012e5c <tcp_next_iss+0x38>)
 8012e34:	f640 02af 	movw	r2, #2223	; 0x8af
 8012e38:	4909      	ldr	r1, [pc, #36]	; (8012e60 <tcp_next_iss+0x3c>)
 8012e3a:	480a      	ldr	r0, [pc, #40]	; (8012e64 <tcp_next_iss+0x40>)
 8012e3c:	f007 fe48 	bl	801aad0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012e40:	4b09      	ldr	r3, [pc, #36]	; (8012e68 <tcp_next_iss+0x44>)
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	4b09      	ldr	r3, [pc, #36]	; (8012e6c <tcp_next_iss+0x48>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	4413      	add	r3, r2
 8012e4a:	4a07      	ldr	r2, [pc, #28]	; (8012e68 <tcp_next_iss+0x44>)
 8012e4c:	6013      	str	r3, [r2, #0]
  return iss;
 8012e4e:	4b06      	ldr	r3, [pc, #24]	; (8012e68 <tcp_next_iss+0x44>)
 8012e50:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3708      	adds	r7, #8
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	0801ddb8 	.word	0x0801ddb8
 8012e60:	0801e4a8 	.word	0x0801e4a8
 8012e64:	0801ddfc 	.word	0x0801ddfc
 8012e68:	2000003c 	.word	0x2000003c
 8012e6c:	2000f1ac 	.word	0x2000f1ac

08012e70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b086      	sub	sp, #24
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4603      	mov	r3, r0
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	607a      	str	r2, [r7, #4]
 8012e7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d106      	bne.n	8012e92 <tcp_eff_send_mss_netif+0x22>
 8012e84:	4b14      	ldr	r3, [pc, #80]	; (8012ed8 <tcp_eff_send_mss_netif+0x68>)
 8012e86:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012e8a:	4914      	ldr	r1, [pc, #80]	; (8012edc <tcp_eff_send_mss_netif+0x6c>)
 8012e8c:	4814      	ldr	r0, [pc, #80]	; (8012ee0 <tcp_eff_send_mss_netif+0x70>)
 8012e8e:	f007 fe1f 	bl	801aad0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d101      	bne.n	8012e9c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012e98:	89fb      	ldrh	r3, [r7, #14]
 8012e9a:	e019      	b.n	8012ed0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ea0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012ea2:	8afb      	ldrh	r3, [r7, #22]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d012      	beq.n	8012ece <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012ea8:	2328      	movs	r3, #40	; 0x28
 8012eaa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012eac:	8afa      	ldrh	r2, [r7, #22]
 8012eae:	8abb      	ldrh	r3, [r7, #20]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d904      	bls.n	8012ebe <tcp_eff_send_mss_netif+0x4e>
 8012eb4:	8afa      	ldrh	r2, [r7, #22]
 8012eb6:	8abb      	ldrh	r3, [r7, #20]
 8012eb8:	1ad3      	subs	r3, r2, r3
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	e000      	b.n	8012ec0 <tcp_eff_send_mss_netif+0x50>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012ec2:	8a7a      	ldrh	r2, [r7, #18]
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	bf28      	it	cs
 8012eca:	4613      	movcs	r3, r2
 8012ecc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012ece:	89fb      	ldrh	r3, [r7, #14]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3718      	adds	r7, #24
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	0801ddb8 	.word	0x0801ddb8
 8012edc:	0801e4c4 	.word	0x0801e4c4
 8012ee0:	0801ddfc 	.word	0x0801ddfc

08012ee4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d119      	bne.n	8012f2c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012ef8:	4b10      	ldr	r3, [pc, #64]	; (8012f3c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012efa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012efe:	4910      	ldr	r1, [pc, #64]	; (8012f40 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012f00:	4810      	ldr	r0, [pc, #64]	; (8012f44 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012f02:	f007 fde5 	bl	801aad0 <iprintf>

  while (pcb != NULL) {
 8012f06:	e011      	b.n	8012f2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d108      	bne.n	8012f26 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	f7fe ffc6 	bl	8011eac <tcp_abort>
      pcb = next;
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	60fb      	str	r3, [r7, #12]
 8012f24:	e002      	b.n	8012f2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	68db      	ldr	r3, [r3, #12]
 8012f2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d1ea      	bne.n	8012f08 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012f32:	bf00      	nop
 8012f34:	bf00      	nop
 8012f36:	3710      	adds	r7, #16
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	0801ddb8 	.word	0x0801ddb8
 8012f40:	0801e4ec 	.word	0x0801e4ec
 8012f44:	0801ddfc 	.word	0x0801ddfc

08012f48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d02a      	beq.n	8012fae <tcp_netif_ip_addr_changed+0x66>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d026      	beq.n	8012fae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012f60:	4b15      	ldr	r3, [pc, #84]	; (8012fb8 <tcp_netif_ip_addr_changed+0x70>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4619      	mov	r1, r3
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff ffbc 	bl	8012ee4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012f6c:	4b13      	ldr	r3, [pc, #76]	; (8012fbc <tcp_netif_ip_addr_changed+0x74>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4619      	mov	r1, r3
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7ff ffb6 	bl	8012ee4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d017      	beq.n	8012fae <tcp_netif_ip_addr_changed+0x66>
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d013      	beq.n	8012fae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012f86:	4b0e      	ldr	r3, [pc, #56]	; (8012fc0 <tcp_netif_ip_addr_changed+0x78>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	60fb      	str	r3, [r7, #12]
 8012f8c:	e00c      	b.n	8012fa8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d103      	bne.n	8012fa2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	681a      	ldr	r2, [r3, #0]
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d1ef      	bne.n	8012f8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012fae:	bf00      	nop
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	2000f1b8 	.word	0x2000f1b8
 8012fbc:	2000f1b0 	.word	0x2000f1b0
 8012fc0:	2000f1b4 	.word	0x2000f1b4

08012fc4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d007      	beq.n	8012fe4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7ff fc3d 	bl	8012858 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012fe4:	bf00      	nop
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012fec:	b590      	push	{r4, r7, lr}
 8012fee:	b08d      	sub	sp, #52	; 0x34
 8012ff0:	af04      	add	r7, sp, #16
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d105      	bne.n	8013008 <tcp_input+0x1c>
 8012ffc:	4b9b      	ldr	r3, [pc, #620]	; (801326c <tcp_input+0x280>)
 8012ffe:	2283      	movs	r2, #131	; 0x83
 8013000:	499b      	ldr	r1, [pc, #620]	; (8013270 <tcp_input+0x284>)
 8013002:	489c      	ldr	r0, [pc, #624]	; (8013274 <tcp_input+0x288>)
 8013004:	f007 fd64 	bl	801aad0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	4a9a      	ldr	r2, [pc, #616]	; (8013278 <tcp_input+0x28c>)
 801300e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	895b      	ldrh	r3, [r3, #10]
 8013014:	2b13      	cmp	r3, #19
 8013016:	f240 83d1 	bls.w	80137bc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801301a:	4b98      	ldr	r3, [pc, #608]	; (801327c <tcp_input+0x290>)
 801301c:	695b      	ldr	r3, [r3, #20]
 801301e:	4a97      	ldr	r2, [pc, #604]	; (801327c <tcp_input+0x290>)
 8013020:	6812      	ldr	r2, [r2, #0]
 8013022:	4611      	mov	r1, r2
 8013024:	4618      	mov	r0, r3
 8013026:	f005 feff 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	f040 83c7 	bne.w	80137c0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013032:	4b92      	ldr	r3, [pc, #584]	; (801327c <tcp_input+0x290>)
 8013034:	695b      	ldr	r3, [r3, #20]
 8013036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801303a:	2be0      	cmp	r3, #224	; 0xe0
 801303c:	f000 83c0 	beq.w	80137c0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013040:	4b8d      	ldr	r3, [pc, #564]	; (8013278 <tcp_input+0x28c>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	899b      	ldrh	r3, [r3, #12]
 8013046:	b29b      	uxth	r3, r3
 8013048:	4618      	mov	r0, r3
 801304a:	f7fc f959 	bl	800f300 <lwip_htons>
 801304e:	4603      	mov	r3, r0
 8013050:	0b1b      	lsrs	r3, r3, #12
 8013052:	b29b      	uxth	r3, r3
 8013054:	b2db      	uxtb	r3, r3
 8013056:	009b      	lsls	r3, r3, #2
 8013058:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801305a:	7cbb      	ldrb	r3, [r7, #18]
 801305c:	2b13      	cmp	r3, #19
 801305e:	f240 83b1 	bls.w	80137c4 <tcp_input+0x7d8>
 8013062:	7cbb      	ldrb	r3, [r7, #18]
 8013064:	b29a      	uxth	r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	891b      	ldrh	r3, [r3, #8]
 801306a:	429a      	cmp	r2, r3
 801306c:	f200 83aa 	bhi.w	80137c4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013070:	7cbb      	ldrb	r3, [r7, #18]
 8013072:	b29b      	uxth	r3, r3
 8013074:	3b14      	subs	r3, #20
 8013076:	b29a      	uxth	r2, r3
 8013078:	4b81      	ldr	r3, [pc, #516]	; (8013280 <tcp_input+0x294>)
 801307a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801307c:	4b81      	ldr	r3, [pc, #516]	; (8013284 <tcp_input+0x298>)
 801307e:	2200      	movs	r2, #0
 8013080:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	895a      	ldrh	r2, [r3, #10]
 8013086:	7cbb      	ldrb	r3, [r7, #18]
 8013088:	b29b      	uxth	r3, r3
 801308a:	429a      	cmp	r2, r3
 801308c:	d309      	bcc.n	80130a2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801308e:	4b7c      	ldr	r3, [pc, #496]	; (8013280 <tcp_input+0x294>)
 8013090:	881a      	ldrh	r2, [r3, #0]
 8013092:	4b7d      	ldr	r3, [pc, #500]	; (8013288 <tcp_input+0x29c>)
 8013094:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013096:	7cbb      	ldrb	r3, [r7, #18]
 8013098:	4619      	mov	r1, r3
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7fd ff82 	bl	8010fa4 <pbuf_remove_header>
 80130a0:	e04e      	b.n	8013140 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d105      	bne.n	80130b6 <tcp_input+0xca>
 80130aa:	4b70      	ldr	r3, [pc, #448]	; (801326c <tcp_input+0x280>)
 80130ac:	22c2      	movs	r2, #194	; 0xc2
 80130ae:	4977      	ldr	r1, [pc, #476]	; (801328c <tcp_input+0x2a0>)
 80130b0:	4870      	ldr	r0, [pc, #448]	; (8013274 <tcp_input+0x288>)
 80130b2:	f007 fd0d 	bl	801aad0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80130b6:	2114      	movs	r1, #20
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7fd ff73 	bl	8010fa4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	895a      	ldrh	r2, [r3, #10]
 80130c2:	4b71      	ldr	r3, [pc, #452]	; (8013288 <tcp_input+0x29c>)
 80130c4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80130c6:	4b6e      	ldr	r3, [pc, #440]	; (8013280 <tcp_input+0x294>)
 80130c8:	881a      	ldrh	r2, [r3, #0]
 80130ca:	4b6f      	ldr	r3, [pc, #444]	; (8013288 <tcp_input+0x29c>)
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	1ad3      	subs	r3, r2, r3
 80130d0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80130d2:	4b6d      	ldr	r3, [pc, #436]	; (8013288 <tcp_input+0x29c>)
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	4619      	mov	r1, r3
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7fd ff63 	bl	8010fa4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	895b      	ldrh	r3, [r3, #10]
 80130e4:	8a3a      	ldrh	r2, [r7, #16]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	f200 836e 	bhi.w	80137c8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	685b      	ldr	r3, [r3, #4]
 80130f2:	4a64      	ldr	r2, [pc, #400]	; (8013284 <tcp_input+0x298>)
 80130f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	8a3a      	ldrh	r2, [r7, #16]
 80130fc:	4611      	mov	r1, r2
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fd ff50 	bl	8010fa4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	891a      	ldrh	r2, [r3, #8]
 8013108:	8a3b      	ldrh	r3, [r7, #16]
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	b29a      	uxth	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	895b      	ldrh	r3, [r3, #10]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d005      	beq.n	8013126 <tcp_input+0x13a>
 801311a:	4b54      	ldr	r3, [pc, #336]	; (801326c <tcp_input+0x280>)
 801311c:	22df      	movs	r2, #223	; 0xdf
 801311e:	495c      	ldr	r1, [pc, #368]	; (8013290 <tcp_input+0x2a4>)
 8013120:	4854      	ldr	r0, [pc, #336]	; (8013274 <tcp_input+0x288>)
 8013122:	f007 fcd5 	bl	801aad0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	891a      	ldrh	r2, [r3, #8]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	891b      	ldrh	r3, [r3, #8]
 8013130:	429a      	cmp	r2, r3
 8013132:	d005      	beq.n	8013140 <tcp_input+0x154>
 8013134:	4b4d      	ldr	r3, [pc, #308]	; (801326c <tcp_input+0x280>)
 8013136:	22e0      	movs	r2, #224	; 0xe0
 8013138:	4956      	ldr	r1, [pc, #344]	; (8013294 <tcp_input+0x2a8>)
 801313a:	484e      	ldr	r0, [pc, #312]	; (8013274 <tcp_input+0x288>)
 801313c:	f007 fcc8 	bl	801aad0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013140:	4b4d      	ldr	r3, [pc, #308]	; (8013278 <tcp_input+0x28c>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	b29b      	uxth	r3, r3
 8013148:	4a4b      	ldr	r2, [pc, #300]	; (8013278 <tcp_input+0x28c>)
 801314a:	6814      	ldr	r4, [r2, #0]
 801314c:	4618      	mov	r0, r3
 801314e:	f7fc f8d7 	bl	800f300 <lwip_htons>
 8013152:	4603      	mov	r3, r0
 8013154:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013156:	4b48      	ldr	r3, [pc, #288]	; (8013278 <tcp_input+0x28c>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	885b      	ldrh	r3, [r3, #2]
 801315c:	b29b      	uxth	r3, r3
 801315e:	4a46      	ldr	r2, [pc, #280]	; (8013278 <tcp_input+0x28c>)
 8013160:	6814      	ldr	r4, [r2, #0]
 8013162:	4618      	mov	r0, r3
 8013164:	f7fc f8cc 	bl	800f300 <lwip_htons>
 8013168:	4603      	mov	r3, r0
 801316a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801316c:	4b42      	ldr	r3, [pc, #264]	; (8013278 <tcp_input+0x28c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	4a41      	ldr	r2, [pc, #260]	; (8013278 <tcp_input+0x28c>)
 8013174:	6814      	ldr	r4, [r2, #0]
 8013176:	4618      	mov	r0, r3
 8013178:	f7fc f8d7 	bl	800f32a <lwip_htonl>
 801317c:	4603      	mov	r3, r0
 801317e:	6063      	str	r3, [r4, #4]
 8013180:	6863      	ldr	r3, [r4, #4]
 8013182:	4a45      	ldr	r2, [pc, #276]	; (8013298 <tcp_input+0x2ac>)
 8013184:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013186:	4b3c      	ldr	r3, [pc, #240]	; (8013278 <tcp_input+0x28c>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	4a3a      	ldr	r2, [pc, #232]	; (8013278 <tcp_input+0x28c>)
 801318e:	6814      	ldr	r4, [r2, #0]
 8013190:	4618      	mov	r0, r3
 8013192:	f7fc f8ca 	bl	800f32a <lwip_htonl>
 8013196:	4603      	mov	r3, r0
 8013198:	60a3      	str	r3, [r4, #8]
 801319a:	68a3      	ldr	r3, [r4, #8]
 801319c:	4a3f      	ldr	r2, [pc, #252]	; (801329c <tcp_input+0x2b0>)
 801319e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80131a0:	4b35      	ldr	r3, [pc, #212]	; (8013278 <tcp_input+0x28c>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	89db      	ldrh	r3, [r3, #14]
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	4a33      	ldr	r2, [pc, #204]	; (8013278 <tcp_input+0x28c>)
 80131aa:	6814      	ldr	r4, [r2, #0]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fc f8a7 	bl	800f300 <lwip_htons>
 80131b2:	4603      	mov	r3, r0
 80131b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80131b6:	4b30      	ldr	r3, [pc, #192]	; (8013278 <tcp_input+0x28c>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	899b      	ldrh	r3, [r3, #12]
 80131bc:	b29b      	uxth	r3, r3
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fc f89e 	bl	800f300 <lwip_htons>
 80131c4:	4603      	mov	r3, r0
 80131c6:	b2db      	uxtb	r3, r3
 80131c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131cc:	b2da      	uxtb	r2, r3
 80131ce:	4b34      	ldr	r3, [pc, #208]	; (80132a0 <tcp_input+0x2b4>)
 80131d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	891a      	ldrh	r2, [r3, #8]
 80131d6:	4b33      	ldr	r3, [pc, #204]	; (80132a4 <tcp_input+0x2b8>)
 80131d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80131da:	4b31      	ldr	r3, [pc, #196]	; (80132a0 <tcp_input+0x2b4>)
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	f003 0303 	and.w	r3, r3, #3
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d00c      	beq.n	8013200 <tcp_input+0x214>
    tcplen++;
 80131e6:	4b2f      	ldr	r3, [pc, #188]	; (80132a4 <tcp_input+0x2b8>)
 80131e8:	881b      	ldrh	r3, [r3, #0]
 80131ea:	3301      	adds	r3, #1
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	4b2d      	ldr	r3, [pc, #180]	; (80132a4 <tcp_input+0x2b8>)
 80131f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	891a      	ldrh	r2, [r3, #8]
 80131f6:	4b2b      	ldr	r3, [pc, #172]	; (80132a4 <tcp_input+0x2b8>)
 80131f8:	881b      	ldrh	r3, [r3, #0]
 80131fa:	429a      	cmp	r2, r3
 80131fc:	f200 82e6 	bhi.w	80137cc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013200:	2300      	movs	r3, #0
 8013202:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013204:	4b28      	ldr	r3, [pc, #160]	; (80132a8 <tcp_input+0x2bc>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	61fb      	str	r3, [r7, #28]
 801320a:	e09d      	b.n	8013348 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	7d1b      	ldrb	r3, [r3, #20]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d105      	bne.n	8013220 <tcp_input+0x234>
 8013214:	4b15      	ldr	r3, [pc, #84]	; (801326c <tcp_input+0x280>)
 8013216:	22fb      	movs	r2, #251	; 0xfb
 8013218:	4924      	ldr	r1, [pc, #144]	; (80132ac <tcp_input+0x2c0>)
 801321a:	4816      	ldr	r0, [pc, #88]	; (8013274 <tcp_input+0x288>)
 801321c:	f007 fc58 	bl	801aad0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	7d1b      	ldrb	r3, [r3, #20]
 8013224:	2b0a      	cmp	r3, #10
 8013226:	d105      	bne.n	8013234 <tcp_input+0x248>
 8013228:	4b10      	ldr	r3, [pc, #64]	; (801326c <tcp_input+0x280>)
 801322a:	22fc      	movs	r2, #252	; 0xfc
 801322c:	4920      	ldr	r1, [pc, #128]	; (80132b0 <tcp_input+0x2c4>)
 801322e:	4811      	ldr	r0, [pc, #68]	; (8013274 <tcp_input+0x288>)
 8013230:	f007 fc4e 	bl	801aad0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	7d1b      	ldrb	r3, [r3, #20]
 8013238:	2b01      	cmp	r3, #1
 801323a:	d105      	bne.n	8013248 <tcp_input+0x25c>
 801323c:	4b0b      	ldr	r3, [pc, #44]	; (801326c <tcp_input+0x280>)
 801323e:	22fd      	movs	r2, #253	; 0xfd
 8013240:	491c      	ldr	r1, [pc, #112]	; (80132b4 <tcp_input+0x2c8>)
 8013242:	480c      	ldr	r0, [pc, #48]	; (8013274 <tcp_input+0x288>)
 8013244:	f007 fc44 	bl	801aad0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	7a1b      	ldrb	r3, [r3, #8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d033      	beq.n	80132b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	7a1a      	ldrb	r2, [r3, #8]
 8013254:	4b09      	ldr	r3, [pc, #36]	; (801327c <tcp_input+0x290>)
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801325c:	3301      	adds	r3, #1
 801325e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013260:	429a      	cmp	r2, r3
 8013262:	d029      	beq.n	80132b8 <tcp_input+0x2cc>
      prev = pcb;
 8013264:	69fb      	ldr	r3, [r7, #28]
 8013266:	61bb      	str	r3, [r7, #24]
      continue;
 8013268:	e06b      	b.n	8013342 <tcp_input+0x356>
 801326a:	bf00      	nop
 801326c:	0801e520 	.word	0x0801e520
 8013270:	0801e554 	.word	0x0801e554
 8013274:	0801e56c 	.word	0x0801e56c
 8013278:	2000f1d4 	.word	0x2000f1d4
 801327c:	2000972c 	.word	0x2000972c
 8013280:	2000f1d8 	.word	0x2000f1d8
 8013284:	2000f1dc 	.word	0x2000f1dc
 8013288:	2000f1da 	.word	0x2000f1da
 801328c:	0801e594 	.word	0x0801e594
 8013290:	0801e5a4 	.word	0x0801e5a4
 8013294:	0801e5b0 	.word	0x0801e5b0
 8013298:	2000f1e4 	.word	0x2000f1e4
 801329c:	2000f1e8 	.word	0x2000f1e8
 80132a0:	2000f1f0 	.word	0x2000f1f0
 80132a4:	2000f1ee 	.word	0x2000f1ee
 80132a8:	2000f1b8 	.word	0x2000f1b8
 80132ac:	0801e5d0 	.word	0x0801e5d0
 80132b0:	0801e5f8 	.word	0x0801e5f8
 80132b4:	0801e624 	.word	0x0801e624
    }

    if (pcb->remote_port == tcphdr->src &&
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	8b1a      	ldrh	r2, [r3, #24]
 80132bc:	4b72      	ldr	r3, [pc, #456]	; (8013488 <tcp_input+0x49c>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d13a      	bne.n	801333e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	8ada      	ldrh	r2, [r3, #22]
 80132cc:	4b6e      	ldr	r3, [pc, #440]	; (8013488 <tcp_input+0x49c>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	885b      	ldrh	r3, [r3, #2]
 80132d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d132      	bne.n	801333e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	685a      	ldr	r2, [r3, #4]
 80132dc:	4b6b      	ldr	r3, [pc, #428]	; (801348c <tcp_input+0x4a0>)
 80132de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d12c      	bne.n	801333e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	681a      	ldr	r2, [r3, #0]
 80132e8:	4b68      	ldr	r3, [pc, #416]	; (801348c <tcp_input+0x4a0>)
 80132ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d126      	bne.n	801333e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	69fa      	ldr	r2, [r7, #28]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d106      	bne.n	8013308 <tcp_input+0x31c>
 80132fa:	4b65      	ldr	r3, [pc, #404]	; (8013490 <tcp_input+0x4a4>)
 80132fc:	f240 120d 	movw	r2, #269	; 0x10d
 8013300:	4964      	ldr	r1, [pc, #400]	; (8013494 <tcp_input+0x4a8>)
 8013302:	4865      	ldr	r0, [pc, #404]	; (8013498 <tcp_input+0x4ac>)
 8013304:	f007 fbe4 	bl	801aad0 <iprintf>
      if (prev != NULL) {
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d00a      	beq.n	8013324 <tcp_input+0x338>
        prev->next = pcb->next;
 801330e:	69fb      	ldr	r3, [r7, #28]
 8013310:	68da      	ldr	r2, [r3, #12]
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013316:	4b61      	ldr	r3, [pc, #388]	; (801349c <tcp_input+0x4b0>)
 8013318:	681a      	ldr	r2, [r3, #0]
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801331e:	4a5f      	ldr	r2, [pc, #380]	; (801349c <tcp_input+0x4b0>)
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	69fa      	ldr	r2, [r7, #28]
 801332a:	429a      	cmp	r2, r3
 801332c:	d111      	bne.n	8013352 <tcp_input+0x366>
 801332e:	4b58      	ldr	r3, [pc, #352]	; (8013490 <tcp_input+0x4a4>)
 8013330:	f240 1215 	movw	r2, #277	; 0x115
 8013334:	495a      	ldr	r1, [pc, #360]	; (80134a0 <tcp_input+0x4b4>)
 8013336:	4858      	ldr	r0, [pc, #352]	; (8013498 <tcp_input+0x4ac>)
 8013338:	f007 fbca 	bl	801aad0 <iprintf>
      break;
 801333c:	e009      	b.n	8013352 <tcp_input+0x366>
    }
    prev = pcb;
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	61fb      	str	r3, [r7, #28]
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	2b00      	cmp	r3, #0
 801334c:	f47f af5e 	bne.w	801320c <tcp_input+0x220>
 8013350:	e000      	b.n	8013354 <tcp_input+0x368>
      break;
 8013352:	bf00      	nop
  }

  if (pcb == NULL) {
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	2b00      	cmp	r3, #0
 8013358:	f040 80aa 	bne.w	80134b0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801335c:	4b51      	ldr	r3, [pc, #324]	; (80134a4 <tcp_input+0x4b8>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	61fb      	str	r3, [r7, #28]
 8013362:	e03f      	b.n	80133e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	7d1b      	ldrb	r3, [r3, #20]
 8013368:	2b0a      	cmp	r3, #10
 801336a:	d006      	beq.n	801337a <tcp_input+0x38e>
 801336c:	4b48      	ldr	r3, [pc, #288]	; (8013490 <tcp_input+0x4a4>)
 801336e:	f240 121f 	movw	r2, #287	; 0x11f
 8013372:	494d      	ldr	r1, [pc, #308]	; (80134a8 <tcp_input+0x4bc>)
 8013374:	4848      	ldr	r0, [pc, #288]	; (8013498 <tcp_input+0x4ac>)
 8013376:	f007 fbab 	bl	801aad0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	7a1b      	ldrb	r3, [r3, #8]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d009      	beq.n	8013396 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	7a1a      	ldrb	r2, [r3, #8]
 8013386:	4b41      	ldr	r3, [pc, #260]	; (801348c <tcp_input+0x4a0>)
 8013388:	685b      	ldr	r3, [r3, #4]
 801338a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801338e:	3301      	adds	r3, #1
 8013390:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013392:	429a      	cmp	r2, r3
 8013394:	d122      	bne.n	80133dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	8b1a      	ldrh	r2, [r3, #24]
 801339a:	4b3b      	ldr	r3, [pc, #236]	; (8013488 <tcp_input+0x49c>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	881b      	ldrh	r3, [r3, #0]
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d11b      	bne.n	80133de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	8ada      	ldrh	r2, [r3, #22]
 80133aa:	4b37      	ldr	r3, [pc, #220]	; (8013488 <tcp_input+0x49c>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	885b      	ldrh	r3, [r3, #2]
 80133b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d113      	bne.n	80133de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80133b6:	69fb      	ldr	r3, [r7, #28]
 80133b8:	685a      	ldr	r2, [r3, #4]
 80133ba:	4b34      	ldr	r3, [pc, #208]	; (801348c <tcp_input+0x4a0>)
 80133bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80133be:	429a      	cmp	r2, r3
 80133c0:	d10d      	bne.n	80133de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	4b31      	ldr	r3, [pc, #196]	; (801348c <tcp_input+0x4a0>)
 80133c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d107      	bne.n	80133de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80133ce:	69f8      	ldr	r0, [r7, #28]
 80133d0:	f000 fb56 	bl	8013a80 <tcp_timewait_input>
        }
        pbuf_free(p);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7fd fe6b 	bl	80110b0 <pbuf_free>
        return;
 80133da:	e1fd      	b.n	80137d8 <tcp_input+0x7ec>
        continue;
 80133dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80133de:	69fb      	ldr	r3, [r7, #28]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	61fb      	str	r3, [r7, #28]
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d1bc      	bne.n	8013364 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80133ea:	2300      	movs	r3, #0
 80133ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80133ee:	4b2f      	ldr	r3, [pc, #188]	; (80134ac <tcp_input+0x4c0>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	617b      	str	r3, [r7, #20]
 80133f4:	e02a      	b.n	801344c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	7a1b      	ldrb	r3, [r3, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00c      	beq.n	8013418 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	7a1a      	ldrb	r2, [r3, #8]
 8013402:	4b22      	ldr	r3, [pc, #136]	; (801348c <tcp_input+0x4a0>)
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801340a:	3301      	adds	r3, #1
 801340c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801340e:	429a      	cmp	r2, r3
 8013410:	d002      	beq.n	8013418 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	61bb      	str	r3, [r7, #24]
        continue;
 8013416:	e016      	b.n	8013446 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	8ada      	ldrh	r2, [r3, #22]
 801341c:	4b1a      	ldr	r3, [pc, #104]	; (8013488 <tcp_input+0x49c>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	885b      	ldrh	r3, [r3, #2]
 8013422:	b29b      	uxth	r3, r3
 8013424:	429a      	cmp	r2, r3
 8013426:	d10c      	bne.n	8013442 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	4b17      	ldr	r3, [pc, #92]	; (801348c <tcp_input+0x4a0>)
 801342e:	695b      	ldr	r3, [r3, #20]
 8013430:	429a      	cmp	r2, r3
 8013432:	d00f      	beq.n	8013454 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00d      	beq.n	8013456 <tcp_input+0x46a>
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d009      	beq.n	8013456 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	617b      	str	r3, [r7, #20]
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d1d1      	bne.n	80133f6 <tcp_input+0x40a>
 8013452:	e000      	b.n	8013456 <tcp_input+0x46a>
            break;
 8013454:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d029      	beq.n	80134b0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00a      	beq.n	8013478 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	68da      	ldr	r2, [r3, #12]
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801346a:	4b10      	ldr	r3, [pc, #64]	; (80134ac <tcp_input+0x4c0>)
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013472:	4a0e      	ldr	r2, [pc, #56]	; (80134ac <tcp_input+0x4c0>)
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013478:	6978      	ldr	r0, [r7, #20]
 801347a:	f000 fa03 	bl	8013884 <tcp_listen_input>
      }
      pbuf_free(p);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7fd fe16 	bl	80110b0 <pbuf_free>
      return;
 8013484:	e1a8      	b.n	80137d8 <tcp_input+0x7ec>
 8013486:	bf00      	nop
 8013488:	2000f1d4 	.word	0x2000f1d4
 801348c:	2000972c 	.word	0x2000972c
 8013490:	0801e520 	.word	0x0801e520
 8013494:	0801e64c 	.word	0x0801e64c
 8013498:	0801e56c 	.word	0x0801e56c
 801349c:	2000f1b8 	.word	0x2000f1b8
 80134a0:	0801e678 	.word	0x0801e678
 80134a4:	2000f1bc 	.word	0x2000f1bc
 80134a8:	0801e6a4 	.word	0x0801e6a4
 80134ac:	2000f1b4 	.word	0x2000f1b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80134b0:	69fb      	ldr	r3, [r7, #28]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	f000 8158 	beq.w	8013768 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80134b8:	4b95      	ldr	r3, [pc, #596]	; (8013710 <tcp_input+0x724>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	891a      	ldrh	r2, [r3, #8]
 80134c2:	4b93      	ldr	r3, [pc, #588]	; (8013710 <tcp_input+0x724>)
 80134c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80134c6:	4a92      	ldr	r2, [pc, #584]	; (8013710 <tcp_input+0x724>)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80134cc:	4b91      	ldr	r3, [pc, #580]	; (8013714 <tcp_input+0x728>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	4a8f      	ldr	r2, [pc, #572]	; (8013710 <tcp_input+0x724>)
 80134d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80134d4:	4b90      	ldr	r3, [pc, #576]	; (8013718 <tcp_input+0x72c>)
 80134d6:	2200      	movs	r2, #0
 80134d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80134da:	4b90      	ldr	r3, [pc, #576]	; (801371c <tcp_input+0x730>)
 80134dc:	2200      	movs	r2, #0
 80134de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80134e0:	4b8f      	ldr	r3, [pc, #572]	; (8013720 <tcp_input+0x734>)
 80134e2:	2200      	movs	r2, #0
 80134e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80134e6:	4b8f      	ldr	r3, [pc, #572]	; (8013724 <tcp_input+0x738>)
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	f003 0308 	and.w	r3, r3, #8
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d006      	beq.n	8013500 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	7b5b      	ldrb	r3, [r3, #13]
 80134f6:	f043 0301 	orr.w	r3, r3, #1
 80134fa:	b2da      	uxtb	r2, r3
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013500:	69fb      	ldr	r3, [r7, #28]
 8013502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013504:	2b00      	cmp	r3, #0
 8013506:	d017      	beq.n	8013538 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013508:	69f8      	ldr	r0, [r7, #28]
 801350a:	f7ff f929 	bl	8012760 <tcp_process_refused_data>
 801350e:	4603      	mov	r3, r0
 8013510:	f113 0f0d 	cmn.w	r3, #13
 8013514:	d007      	beq.n	8013526 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00c      	beq.n	8013538 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801351e:	4b82      	ldr	r3, [pc, #520]	; (8013728 <tcp_input+0x73c>)
 8013520:	881b      	ldrh	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d008      	beq.n	8013538 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801352a:	2b00      	cmp	r3, #0
 801352c:	f040 80e3 	bne.w	80136f6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013530:	69f8      	ldr	r0, [r7, #28]
 8013532:	f003 f9ad 	bl	8016890 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013536:	e0de      	b.n	80136f6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013538:	4a7c      	ldr	r2, [pc, #496]	; (801372c <tcp_input+0x740>)
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801353e:	69f8      	ldr	r0, [r7, #28]
 8013540:	f000 fb18 	bl	8013b74 <tcp_process>
 8013544:	4603      	mov	r3, r0
 8013546:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801354c:	f113 0f0d 	cmn.w	r3, #13
 8013550:	f000 80d3 	beq.w	80136fa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013554:	4b71      	ldr	r3, [pc, #452]	; (801371c <tcp_input+0x730>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	f003 0308 	and.w	r3, r3, #8
 801355c:	2b00      	cmp	r3, #0
 801355e:	d015      	beq.n	801358c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013566:	2b00      	cmp	r3, #0
 8013568:	d008      	beq.n	801357c <tcp_input+0x590>
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013570:	69fa      	ldr	r2, [r7, #28]
 8013572:	6912      	ldr	r2, [r2, #16]
 8013574:	f06f 010d 	mvn.w	r1, #13
 8013578:	4610      	mov	r0, r2
 801357a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801357c:	69f9      	ldr	r1, [r7, #28]
 801357e:	486c      	ldr	r0, [pc, #432]	; (8013730 <tcp_input+0x744>)
 8013580:	f7ff fbbc 	bl	8012cfc <tcp_pcb_remove>
        tcp_free(pcb);
 8013584:	69f8      	ldr	r0, [r7, #28]
 8013586:	f7fe f9a9 	bl	80118dc <tcp_free>
 801358a:	e0da      	b.n	8013742 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801358c:	2300      	movs	r3, #0
 801358e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013590:	4b63      	ldr	r3, [pc, #396]	; (8013720 <tcp_input+0x734>)
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d01d      	beq.n	80135d4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013598:	4b61      	ldr	r3, [pc, #388]	; (8013720 <tcp_input+0x734>)
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00a      	beq.n	80135be <tcp_input+0x5d2>
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135ae:	69fa      	ldr	r2, [r7, #28]
 80135b0:	6910      	ldr	r0, [r2, #16]
 80135b2:	89fa      	ldrh	r2, [r7, #14]
 80135b4:	69f9      	ldr	r1, [r7, #28]
 80135b6:	4798      	blx	r3
 80135b8:	4603      	mov	r3, r0
 80135ba:	74fb      	strb	r3, [r7, #19]
 80135bc:	e001      	b.n	80135c2 <tcp_input+0x5d6>
 80135be:	2300      	movs	r3, #0
 80135c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80135c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80135c6:	f113 0f0d 	cmn.w	r3, #13
 80135ca:	f000 8098 	beq.w	80136fe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80135ce:	4b54      	ldr	r3, [pc, #336]	; (8013720 <tcp_input+0x734>)
 80135d0:	2200      	movs	r2, #0
 80135d2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80135d4:	69f8      	ldr	r0, [r7, #28]
 80135d6:	f000 f915 	bl	8013804 <tcp_input_delayed_close>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	f040 8090 	bne.w	8013702 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80135e2:	4b4d      	ldr	r3, [pc, #308]	; (8013718 <tcp_input+0x72c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d041      	beq.n	801366e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d006      	beq.n	8013600 <tcp_input+0x614>
 80135f2:	4b50      	ldr	r3, [pc, #320]	; (8013734 <tcp_input+0x748>)
 80135f4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80135f8:	494f      	ldr	r1, [pc, #316]	; (8013738 <tcp_input+0x74c>)
 80135fa:	4850      	ldr	r0, [pc, #320]	; (801373c <tcp_input+0x750>)
 80135fc:	f007 fa68 	bl	801aad0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013600:	69fb      	ldr	r3, [r7, #28]
 8013602:	8b5b      	ldrh	r3, [r3, #26]
 8013604:	f003 0310 	and.w	r3, r3, #16
 8013608:	2b00      	cmp	r3, #0
 801360a:	d008      	beq.n	801361e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801360c:	4b42      	ldr	r3, [pc, #264]	; (8013718 <tcp_input+0x72c>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	4618      	mov	r0, r3
 8013612:	f7fd fd4d 	bl	80110b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013616:	69f8      	ldr	r0, [r7, #28]
 8013618:	f7fe fc48 	bl	8011eac <tcp_abort>
            goto aborted;
 801361c:	e091      	b.n	8013742 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013624:	2b00      	cmp	r3, #0
 8013626:	d00c      	beq.n	8013642 <tcp_input+0x656>
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	6918      	ldr	r0, [r3, #16]
 8013632:	4b39      	ldr	r3, [pc, #228]	; (8013718 <tcp_input+0x72c>)
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	2300      	movs	r3, #0
 8013638:	69f9      	ldr	r1, [r7, #28]
 801363a:	47a0      	blx	r4
 801363c:	4603      	mov	r3, r0
 801363e:	74fb      	strb	r3, [r7, #19]
 8013640:	e008      	b.n	8013654 <tcp_input+0x668>
 8013642:	4b35      	ldr	r3, [pc, #212]	; (8013718 <tcp_input+0x72c>)
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	2300      	movs	r3, #0
 8013648:	69f9      	ldr	r1, [r7, #28]
 801364a:	2000      	movs	r0, #0
 801364c:	f7ff f95e 	bl	801290c <tcp_recv_null>
 8013650:	4603      	mov	r3, r0
 8013652:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013658:	f113 0f0d 	cmn.w	r3, #13
 801365c:	d053      	beq.n	8013706 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801365e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d003      	beq.n	801366e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013666:	4b2c      	ldr	r3, [pc, #176]	; (8013718 <tcp_input+0x72c>)
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801366e:	4b2b      	ldr	r3, [pc, #172]	; (801371c <tcp_input+0x730>)
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	f003 0320 	and.w	r3, r3, #32
 8013676:	2b00      	cmp	r3, #0
 8013678:	d030      	beq.n	80136dc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801367e:	2b00      	cmp	r3, #0
 8013680:	d009      	beq.n	8013696 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013686:	7b5a      	ldrb	r2, [r3, #13]
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801368c:	f042 0220 	orr.w	r2, r2, #32
 8013690:	b2d2      	uxtb	r2, r2
 8013692:	735a      	strb	r2, [r3, #13]
 8013694:	e022      	b.n	80136dc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801369a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801369e:	d005      	beq.n	80136ac <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136a4:	3301      	adds	r3, #1
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	69fb      	ldr	r3, [r7, #28]
 80136aa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d00b      	beq.n	80136ce <tcp_input+0x6e2>
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	6918      	ldr	r0, [r3, #16]
 80136c0:	2300      	movs	r3, #0
 80136c2:	2200      	movs	r2, #0
 80136c4:	69f9      	ldr	r1, [r7, #28]
 80136c6:	47a0      	blx	r4
 80136c8:	4603      	mov	r3, r0
 80136ca:	74fb      	strb	r3, [r7, #19]
 80136cc:	e001      	b.n	80136d2 <tcp_input+0x6e6>
 80136ce:	2300      	movs	r3, #0
 80136d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80136d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136d6:	f113 0f0d 	cmn.w	r3, #13
 80136da:	d016      	beq.n	801370a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80136dc:	4b13      	ldr	r3, [pc, #76]	; (801372c <tcp_input+0x740>)
 80136de:	2200      	movs	r2, #0
 80136e0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80136e2:	69f8      	ldr	r0, [r7, #28]
 80136e4:	f000 f88e 	bl	8013804 <tcp_input_delayed_close>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d128      	bne.n	8013740 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80136ee:	69f8      	ldr	r0, [r7, #28]
 80136f0:	f002 fac8 	bl	8015c84 <tcp_output>
 80136f4:	e025      	b.n	8013742 <tcp_input+0x756>
        goto aborted;
 80136f6:	bf00      	nop
 80136f8:	e023      	b.n	8013742 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80136fa:	bf00      	nop
 80136fc:	e021      	b.n	8013742 <tcp_input+0x756>
              goto aborted;
 80136fe:	bf00      	nop
 8013700:	e01f      	b.n	8013742 <tcp_input+0x756>
          goto aborted;
 8013702:	bf00      	nop
 8013704:	e01d      	b.n	8013742 <tcp_input+0x756>
            goto aborted;
 8013706:	bf00      	nop
 8013708:	e01b      	b.n	8013742 <tcp_input+0x756>
              goto aborted;
 801370a:	bf00      	nop
 801370c:	e019      	b.n	8013742 <tcp_input+0x756>
 801370e:	bf00      	nop
 8013710:	2000f1c4 	.word	0x2000f1c4
 8013714:	2000f1d4 	.word	0x2000f1d4
 8013718:	2000f1f4 	.word	0x2000f1f4
 801371c:	2000f1f1 	.word	0x2000f1f1
 8013720:	2000f1ec 	.word	0x2000f1ec
 8013724:	2000f1f0 	.word	0x2000f1f0
 8013728:	2000f1ee 	.word	0x2000f1ee
 801372c:	2000f1f8 	.word	0x2000f1f8
 8013730:	2000f1b8 	.word	0x2000f1b8
 8013734:	0801e520 	.word	0x0801e520
 8013738:	0801e6d4 	.word	0x0801e6d4
 801373c:	0801e56c 	.word	0x0801e56c
          goto aborted;
 8013740:	bf00      	nop
    tcp_input_pcb = NULL;
 8013742:	4b27      	ldr	r3, [pc, #156]	; (80137e0 <tcp_input+0x7f4>)
 8013744:	2200      	movs	r2, #0
 8013746:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013748:	4b26      	ldr	r3, [pc, #152]	; (80137e4 <tcp_input+0x7f8>)
 801374a:	2200      	movs	r2, #0
 801374c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801374e:	4b26      	ldr	r3, [pc, #152]	; (80137e8 <tcp_input+0x7fc>)
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d03f      	beq.n	80137d6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013756:	4b24      	ldr	r3, [pc, #144]	; (80137e8 <tcp_input+0x7fc>)
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	4618      	mov	r0, r3
 801375c:	f7fd fca8 	bl	80110b0 <pbuf_free>
      inseg.p = NULL;
 8013760:	4b21      	ldr	r3, [pc, #132]	; (80137e8 <tcp_input+0x7fc>)
 8013762:	2200      	movs	r2, #0
 8013764:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013766:	e036      	b.n	80137d6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013768:	4b20      	ldr	r3, [pc, #128]	; (80137ec <tcp_input+0x800>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	899b      	ldrh	r3, [r3, #12]
 801376e:	b29b      	uxth	r3, r3
 8013770:	4618      	mov	r0, r3
 8013772:	f7fb fdc5 	bl	800f300 <lwip_htons>
 8013776:	4603      	mov	r3, r0
 8013778:	b2db      	uxtb	r3, r3
 801377a:	f003 0304 	and.w	r3, r3, #4
 801377e:	2b00      	cmp	r3, #0
 8013780:	d118      	bne.n	80137b4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013782:	4b1b      	ldr	r3, [pc, #108]	; (80137f0 <tcp_input+0x804>)
 8013784:	6819      	ldr	r1, [r3, #0]
 8013786:	4b1b      	ldr	r3, [pc, #108]	; (80137f4 <tcp_input+0x808>)
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	461a      	mov	r2, r3
 801378c:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <tcp_input+0x80c>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013792:	4b16      	ldr	r3, [pc, #88]	; (80137ec <tcp_input+0x800>)
 8013794:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013796:	885b      	ldrh	r3, [r3, #2]
 8013798:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801379a:	4a14      	ldr	r2, [pc, #80]	; (80137ec <tcp_input+0x800>)
 801379c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801379e:	8812      	ldrh	r2, [r2, #0]
 80137a0:	b292      	uxth	r2, r2
 80137a2:	9202      	str	r2, [sp, #8]
 80137a4:	9301      	str	r3, [sp, #4]
 80137a6:	4b15      	ldr	r3, [pc, #84]	; (80137fc <tcp_input+0x810>)
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	4b15      	ldr	r3, [pc, #84]	; (8013800 <tcp_input+0x814>)
 80137ac:	4602      	mov	r2, r0
 80137ae:	2000      	movs	r0, #0
 80137b0:	f003 f81c 	bl	80167ec <tcp_rst>
    pbuf_free(p);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7fd fc7b 	bl	80110b0 <pbuf_free>
  return;
 80137ba:	e00c      	b.n	80137d6 <tcp_input+0x7ea>
    goto dropped;
 80137bc:	bf00      	nop
 80137be:	e006      	b.n	80137ce <tcp_input+0x7e2>
    goto dropped;
 80137c0:	bf00      	nop
 80137c2:	e004      	b.n	80137ce <tcp_input+0x7e2>
    goto dropped;
 80137c4:	bf00      	nop
 80137c6:	e002      	b.n	80137ce <tcp_input+0x7e2>
      goto dropped;
 80137c8:	bf00      	nop
 80137ca:	e000      	b.n	80137ce <tcp_input+0x7e2>
      goto dropped;
 80137cc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7fd fc6e 	bl	80110b0 <pbuf_free>
 80137d4:	e000      	b.n	80137d8 <tcp_input+0x7ec>
  return;
 80137d6:	bf00      	nop
}
 80137d8:	3724      	adds	r7, #36	; 0x24
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd90      	pop	{r4, r7, pc}
 80137de:	bf00      	nop
 80137e0:	2000f1f8 	.word	0x2000f1f8
 80137e4:	2000f1f4 	.word	0x2000f1f4
 80137e8:	2000f1c4 	.word	0x2000f1c4
 80137ec:	2000f1d4 	.word	0x2000f1d4
 80137f0:	2000f1e8 	.word	0x2000f1e8
 80137f4:	2000f1ee 	.word	0x2000f1ee
 80137f8:	2000f1e4 	.word	0x2000f1e4
 80137fc:	2000973c 	.word	0x2000973c
 8013800:	20009740 	.word	0x20009740

08013804 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_input_delayed_close+0x1c>
 8013812:	4b17      	ldr	r3, [pc, #92]	; (8013870 <tcp_input_delayed_close+0x6c>)
 8013814:	f240 225a 	movw	r2, #602	; 0x25a
 8013818:	4916      	ldr	r1, [pc, #88]	; (8013874 <tcp_input_delayed_close+0x70>)
 801381a:	4817      	ldr	r0, [pc, #92]	; (8013878 <tcp_input_delayed_close+0x74>)
 801381c:	f007 f958 	bl	801aad0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013820:	4b16      	ldr	r3, [pc, #88]	; (801387c <tcp_input_delayed_close+0x78>)
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	f003 0310 	and.w	r3, r3, #16
 8013828:	2b00      	cmp	r3, #0
 801382a:	d01c      	beq.n	8013866 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	8b5b      	ldrh	r3, [r3, #26]
 8013830:	f003 0310 	and.w	r3, r3, #16
 8013834:	2b00      	cmp	r3, #0
 8013836:	d10d      	bne.n	8013854 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801383e:	2b00      	cmp	r3, #0
 8013840:	d008      	beq.n	8013854 <tcp_input_delayed_close+0x50>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	6912      	ldr	r2, [r2, #16]
 801384c:	f06f 010e 	mvn.w	r1, #14
 8013850:	4610      	mov	r0, r2
 8013852:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013854:	6879      	ldr	r1, [r7, #4]
 8013856:	480a      	ldr	r0, [pc, #40]	; (8013880 <tcp_input_delayed_close+0x7c>)
 8013858:	f7ff fa50 	bl	8012cfc <tcp_pcb_remove>
    tcp_free(pcb);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7fe f83d 	bl	80118dc <tcp_free>
    return 1;
 8013862:	2301      	movs	r3, #1
 8013864:	e000      	b.n	8013868 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013866:	2300      	movs	r3, #0
}
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	0801e520 	.word	0x0801e520
 8013874:	0801e6f0 	.word	0x0801e6f0
 8013878:	0801e56c 	.word	0x0801e56c
 801387c:	2000f1f1 	.word	0x2000f1f1
 8013880:	2000f1b8 	.word	0x2000f1b8

08013884 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013884:	b590      	push	{r4, r7, lr}
 8013886:	b08b      	sub	sp, #44	; 0x2c
 8013888:	af04      	add	r7, sp, #16
 801388a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801388c:	4b6f      	ldr	r3, [pc, #444]	; (8013a4c <tcp_listen_input+0x1c8>)
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	f003 0304 	and.w	r3, r3, #4
 8013894:	2b00      	cmp	r3, #0
 8013896:	f040 80d2 	bne.w	8013a3e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d106      	bne.n	80138ae <tcp_listen_input+0x2a>
 80138a0:	4b6b      	ldr	r3, [pc, #428]	; (8013a50 <tcp_listen_input+0x1cc>)
 80138a2:	f240 2281 	movw	r2, #641	; 0x281
 80138a6:	496b      	ldr	r1, [pc, #428]	; (8013a54 <tcp_listen_input+0x1d0>)
 80138a8:	486b      	ldr	r0, [pc, #428]	; (8013a58 <tcp_listen_input+0x1d4>)
 80138aa:	f007 f911 	bl	801aad0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80138ae:	4b67      	ldr	r3, [pc, #412]	; (8013a4c <tcp_listen_input+0x1c8>)
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	f003 0310 	and.w	r3, r3, #16
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d019      	beq.n	80138ee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138ba:	4b68      	ldr	r3, [pc, #416]	; (8013a5c <tcp_listen_input+0x1d8>)
 80138bc:	6819      	ldr	r1, [r3, #0]
 80138be:	4b68      	ldr	r3, [pc, #416]	; (8013a60 <tcp_listen_input+0x1dc>)
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	461a      	mov	r2, r3
 80138c4:	4b67      	ldr	r3, [pc, #412]	; (8013a64 <tcp_listen_input+0x1e0>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138ca:	4b67      	ldr	r3, [pc, #412]	; (8013a68 <tcp_listen_input+0x1e4>)
 80138cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138ce:	885b      	ldrh	r3, [r3, #2]
 80138d0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138d2:	4a65      	ldr	r2, [pc, #404]	; (8013a68 <tcp_listen_input+0x1e4>)
 80138d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138d6:	8812      	ldrh	r2, [r2, #0]
 80138d8:	b292      	uxth	r2, r2
 80138da:	9202      	str	r2, [sp, #8]
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	4b63      	ldr	r3, [pc, #396]	; (8013a6c <tcp_listen_input+0x1e8>)
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	4b63      	ldr	r3, [pc, #396]	; (8013a70 <tcp_listen_input+0x1ec>)
 80138e4:	4602      	mov	r2, r0
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f002 ff80 	bl	80167ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80138ec:	e0a9      	b.n	8013a42 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80138ee:	4b57      	ldr	r3, [pc, #348]	; (8013a4c <tcp_listen_input+0x1c8>)
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	f003 0302 	and.w	r3, r3, #2
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 80a3 	beq.w	8013a42 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	7d5b      	ldrb	r3, [r3, #21]
 8013900:	4618      	mov	r0, r3
 8013902:	f7ff f927 	bl	8012b54 <tcp_alloc>
 8013906:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d111      	bne.n	8013932 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	699b      	ldr	r3, [r3, #24]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00a      	beq.n	801392c <tcp_listen_input+0xa8>
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	699b      	ldr	r3, [r3, #24]
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	6910      	ldr	r0, [r2, #16]
 801391e:	f04f 32ff 	mov.w	r2, #4294967295
 8013922:	2100      	movs	r1, #0
 8013924:	4798      	blx	r3
 8013926:	4603      	mov	r3, r0
 8013928:	73bb      	strb	r3, [r7, #14]
      return;
 801392a:	e08b      	b.n	8013a44 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801392c:	23f0      	movs	r3, #240	; 0xf0
 801392e:	73bb      	strb	r3, [r7, #14]
      return;
 8013930:	e088      	b.n	8013a44 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013932:	4b50      	ldr	r3, [pc, #320]	; (8013a74 <tcp_listen_input+0x1f0>)
 8013934:	695a      	ldr	r2, [r3, #20]
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801393a:	4b4e      	ldr	r3, [pc, #312]	; (8013a74 <tcp_listen_input+0x1f0>)
 801393c:	691a      	ldr	r2, [r3, #16]
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	8ada      	ldrh	r2, [r3, #22]
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801394a:	4b47      	ldr	r3, [pc, #284]	; (8013a68 <tcp_listen_input+0x1e4>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	b29a      	uxth	r2, r3
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	2203      	movs	r2, #3
 801395a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801395c:	4b41      	ldr	r3, [pc, #260]	; (8013a64 <tcp_listen_input+0x1e0>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	1c5a      	adds	r2, r3, #1
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801396e:	6978      	ldr	r0, [r7, #20]
 8013970:	f7ff fa58 	bl	8012e24 <tcp_next_iss>
 8013974:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	693a      	ldr	r2, [r7, #16]
 801397a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	693a      	ldr	r2, [r7, #16]
 8013980:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	693a      	ldr	r2, [r7, #16]
 8013986:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013988:	697b      	ldr	r3, [r7, #20]
 801398a:	693a      	ldr	r2, [r7, #16]
 801398c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801398e:	4b35      	ldr	r3, [pc, #212]	; (8013a64 <tcp_listen_input+0x1e0>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	1e5a      	subs	r2, r3, #1
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	691a      	ldr	r2, [r3, #16]
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	7a5b      	ldrb	r3, [r3, #9]
 80139aa:	f003 030c 	and.w	r3, r3, #12
 80139ae:	b2da      	uxtb	r2, r3
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	7a1a      	ldrb	r2, [r3, #8]
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80139bc:	4b2e      	ldr	r3, [pc, #184]	; (8013a78 <tcp_listen_input+0x1f4>)
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	60da      	str	r2, [r3, #12]
 80139c4:	4a2c      	ldr	r2, [pc, #176]	; (8013a78 <tcp_listen_input+0x1f4>)
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	6013      	str	r3, [r2, #0]
 80139ca:	f003 f8d1 	bl	8016b70 <tcp_timer_needed>
 80139ce:	4b2b      	ldr	r3, [pc, #172]	; (8013a7c <tcp_listen_input+0x1f8>)
 80139d0:	2201      	movs	r2, #1
 80139d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80139d4:	6978      	ldr	r0, [r7, #20]
 80139d6:	f001 fd8f 	bl	80154f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80139da:	4b23      	ldr	r3, [pc, #140]	; (8013a68 <tcp_listen_input+0x1e4>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	89db      	ldrh	r3, [r3, #14]
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	3304      	adds	r3, #4
 80139fc:	4618      	mov	r0, r3
 80139fe:	f004 ff7d 	bl	80188fc <ip4_route>
 8013a02:	4601      	mov	r1, r0
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	3304      	adds	r3, #4
 8013a08:	461a      	mov	r2, r3
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f7ff fa30 	bl	8012e70 <tcp_eff_send_mss_netif>
 8013a10:	4603      	mov	r3, r0
 8013a12:	461a      	mov	r2, r3
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013a18:	2112      	movs	r1, #18
 8013a1a:	6978      	ldr	r0, [r7, #20]
 8013a1c:	f002 f844 	bl	8015aa8 <tcp_enqueue_flags>
 8013a20:	4603      	mov	r3, r0
 8013a22:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d004      	beq.n	8013a36 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	6978      	ldr	r0, [r7, #20]
 8013a30:	f7fe f97e 	bl	8011d30 <tcp_abandon>
      return;
 8013a34:	e006      	b.n	8013a44 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013a36:	6978      	ldr	r0, [r7, #20]
 8013a38:	f002 f924 	bl	8015c84 <tcp_output>
  return;
 8013a3c:	e001      	b.n	8013a42 <tcp_listen_input+0x1be>
    return;
 8013a3e:	bf00      	nop
 8013a40:	e000      	b.n	8013a44 <tcp_listen_input+0x1c0>
  return;
 8013a42:	bf00      	nop
}
 8013a44:	371c      	adds	r7, #28
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd90      	pop	{r4, r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	2000f1f0 	.word	0x2000f1f0
 8013a50:	0801e520 	.word	0x0801e520
 8013a54:	0801e718 	.word	0x0801e718
 8013a58:	0801e56c 	.word	0x0801e56c
 8013a5c:	2000f1e8 	.word	0x2000f1e8
 8013a60:	2000f1ee 	.word	0x2000f1ee
 8013a64:	2000f1e4 	.word	0x2000f1e4
 8013a68:	2000f1d4 	.word	0x2000f1d4
 8013a6c:	2000973c 	.word	0x2000973c
 8013a70:	20009740 	.word	0x20009740
 8013a74:	2000972c 	.word	0x2000972c
 8013a78:	2000f1b8 	.word	0x2000f1b8
 8013a7c:	2000f1c0 	.word	0x2000f1c0

08013a80 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af04      	add	r7, sp, #16
 8013a86:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013a88:	4b2f      	ldr	r3, [pc, #188]	; (8013b48 <tcp_timewait_input+0xc8>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	f003 0304 	and.w	r3, r3, #4
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d153      	bne.n	8013b3c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d106      	bne.n	8013aa8 <tcp_timewait_input+0x28>
 8013a9a:	4b2c      	ldr	r3, [pc, #176]	; (8013b4c <tcp_timewait_input+0xcc>)
 8013a9c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013aa0:	492b      	ldr	r1, [pc, #172]	; (8013b50 <tcp_timewait_input+0xd0>)
 8013aa2:	482c      	ldr	r0, [pc, #176]	; (8013b54 <tcp_timewait_input+0xd4>)
 8013aa4:	f007 f814 	bl	801aad0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013aa8:	4b27      	ldr	r3, [pc, #156]	; (8013b48 <tcp_timewait_input+0xc8>)
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	f003 0302 	and.w	r3, r3, #2
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d02a      	beq.n	8013b0a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013ab4:	4b28      	ldr	r3, [pc, #160]	; (8013b58 <tcp_timewait_input+0xd8>)
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	db2d      	blt.n	8013b1e <tcp_timewait_input+0x9e>
 8013ac2:	4b25      	ldr	r3, [pc, #148]	; (8013b58 <tcp_timewait_input+0xd8>)
 8013ac4:	681a      	ldr	r2, [r3, #0]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aca:	6879      	ldr	r1, [r7, #4]
 8013acc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013ace:	440b      	add	r3, r1
 8013ad0:	1ad3      	subs	r3, r2, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	dc23      	bgt.n	8013b1e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ad6:	4b21      	ldr	r3, [pc, #132]	; (8013b5c <tcp_timewait_input+0xdc>)
 8013ad8:	6819      	ldr	r1, [r3, #0]
 8013ada:	4b21      	ldr	r3, [pc, #132]	; (8013b60 <tcp_timewait_input+0xe0>)
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	461a      	mov	r2, r3
 8013ae0:	4b1d      	ldr	r3, [pc, #116]	; (8013b58 <tcp_timewait_input+0xd8>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ae6:	4b1f      	ldr	r3, [pc, #124]	; (8013b64 <tcp_timewait_input+0xe4>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013aea:	885b      	ldrh	r3, [r3, #2]
 8013aec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013aee:	4a1d      	ldr	r2, [pc, #116]	; (8013b64 <tcp_timewait_input+0xe4>)
 8013af0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013af2:	8812      	ldrh	r2, [r2, #0]
 8013af4:	b292      	uxth	r2, r2
 8013af6:	9202      	str	r2, [sp, #8]
 8013af8:	9301      	str	r3, [sp, #4]
 8013afa:	4b1b      	ldr	r3, [pc, #108]	; (8013b68 <tcp_timewait_input+0xe8>)
 8013afc:	9300      	str	r3, [sp, #0]
 8013afe:	4b1b      	ldr	r3, [pc, #108]	; (8013b6c <tcp_timewait_input+0xec>)
 8013b00:	4602      	mov	r2, r0
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f002 fe72 	bl	80167ec <tcp_rst>
      return;
 8013b08:	e01b      	b.n	8013b42 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013b0a:	4b0f      	ldr	r3, [pc, #60]	; (8013b48 <tcp_timewait_input+0xc8>)
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d003      	beq.n	8013b1e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013b16:	4b16      	ldr	r3, [pc, #88]	; (8013b70 <tcp_timewait_input+0xf0>)
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013b1e:	4b10      	ldr	r3, [pc, #64]	; (8013b60 <tcp_timewait_input+0xe0>)
 8013b20:	881b      	ldrh	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00c      	beq.n	8013b40 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	8b5b      	ldrh	r3, [r3, #26]
 8013b2a:	f043 0302 	orr.w	r3, r3, #2
 8013b2e:	b29a      	uxth	r2, r3
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f002 f8a5 	bl	8015c84 <tcp_output>
  }
  return;
 8013b3a:	e001      	b.n	8013b40 <tcp_timewait_input+0xc0>
    return;
 8013b3c:	bf00      	nop
 8013b3e:	e000      	b.n	8013b42 <tcp_timewait_input+0xc2>
  return;
 8013b40:	bf00      	nop
}
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	2000f1f0 	.word	0x2000f1f0
 8013b4c:	0801e520 	.word	0x0801e520
 8013b50:	0801e738 	.word	0x0801e738
 8013b54:	0801e56c 	.word	0x0801e56c
 8013b58:	2000f1e4 	.word	0x2000f1e4
 8013b5c:	2000f1e8 	.word	0x2000f1e8
 8013b60:	2000f1ee 	.word	0x2000f1ee
 8013b64:	2000f1d4 	.word	0x2000f1d4
 8013b68:	2000973c 	.word	0x2000973c
 8013b6c:	20009740 	.word	0x20009740
 8013b70:	2000f1ac 	.word	0x2000f1ac

08013b74 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013b74:	b590      	push	{r4, r7, lr}
 8013b76:	b08d      	sub	sp, #52	; 0x34
 8013b78:	af04      	add	r7, sp, #16
 8013b7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013b80:	2300      	movs	r3, #0
 8013b82:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d106      	bne.n	8013b98 <tcp_process+0x24>
 8013b8a:	4b9d      	ldr	r3, [pc, #628]	; (8013e00 <tcp_process+0x28c>)
 8013b8c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013b90:	499c      	ldr	r1, [pc, #624]	; (8013e04 <tcp_process+0x290>)
 8013b92:	489d      	ldr	r0, [pc, #628]	; (8013e08 <tcp_process+0x294>)
 8013b94:	f006 ff9c 	bl	801aad0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013b98:	4b9c      	ldr	r3, [pc, #624]	; (8013e0c <tcp_process+0x298>)
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	f003 0304 	and.w	r3, r3, #4
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d04e      	beq.n	8013c42 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d108      	bne.n	8013bbe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bb0:	4b97      	ldr	r3, [pc, #604]	; (8013e10 <tcp_process+0x29c>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d123      	bne.n	8013c00 <tcp_process+0x8c>
        acceptable = 1;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	76fb      	strb	r3, [r7, #27]
 8013bbc:	e020      	b.n	8013c00 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013bc2:	4b94      	ldr	r3, [pc, #592]	; (8013e14 <tcp_process+0x2a0>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d102      	bne.n	8013bd0 <tcp_process+0x5c>
        acceptable = 1;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	76fb      	strb	r3, [r7, #27]
 8013bce:	e017      	b.n	8013c00 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013bd0:	4b90      	ldr	r3, [pc, #576]	; (8013e14 <tcp_process+0x2a0>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	db10      	blt.n	8013c00 <tcp_process+0x8c>
 8013bde:	4b8d      	ldr	r3, [pc, #564]	; (8013e14 <tcp_process+0x2a0>)
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be6:	6879      	ldr	r1, [r7, #4]
 8013be8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013bea:	440b      	add	r3, r1
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	dc06      	bgt.n	8013c00 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	8b5b      	ldrh	r3, [r3, #26]
 8013bf6:	f043 0302 	orr.w	r3, r3, #2
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013c00:	7efb      	ldrb	r3, [r7, #27]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d01b      	beq.n	8013c3e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	7d1b      	ldrb	r3, [r3, #20]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d106      	bne.n	8013c1c <tcp_process+0xa8>
 8013c0e:	4b7c      	ldr	r3, [pc, #496]	; (8013e00 <tcp_process+0x28c>)
 8013c10:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013c14:	4980      	ldr	r1, [pc, #512]	; (8013e18 <tcp_process+0x2a4>)
 8013c16:	487c      	ldr	r0, [pc, #496]	; (8013e08 <tcp_process+0x294>)
 8013c18:	f006 ff5a 	bl	801aad0 <iprintf>
      recv_flags |= TF_RESET;
 8013c1c:	4b7f      	ldr	r3, [pc, #508]	; (8013e1c <tcp_process+0x2a8>)
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	f043 0308 	orr.w	r3, r3, #8
 8013c24:	b2da      	uxtb	r2, r3
 8013c26:	4b7d      	ldr	r3, [pc, #500]	; (8013e1c <tcp_process+0x2a8>)
 8013c28:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	8b5b      	ldrh	r3, [r3, #26]
 8013c2e:	f023 0301 	bic.w	r3, r3, #1
 8013c32:	b29a      	uxth	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013c38:	f06f 030d 	mvn.w	r3, #13
 8013c3c:	e37a      	b.n	8014334 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e378      	b.n	8014334 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013c42:	4b72      	ldr	r3, [pc, #456]	; (8013e0c <tcp_process+0x298>)
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	f003 0302 	and.w	r3, r3, #2
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d010      	beq.n	8013c70 <tcp_process+0xfc>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	7d1b      	ldrb	r3, [r3, #20]
 8013c52:	2b02      	cmp	r3, #2
 8013c54:	d00c      	beq.n	8013c70 <tcp_process+0xfc>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	7d1b      	ldrb	r3, [r3, #20]
 8013c5a:	2b03      	cmp	r3, #3
 8013c5c:	d008      	beq.n	8013c70 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	8b5b      	ldrh	r3, [r3, #26]
 8013c62:	f043 0302 	orr.w	r3, r3, #2
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	e361      	b.n	8014334 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	8b5b      	ldrh	r3, [r3, #26]
 8013c74:	f003 0310 	and.w	r3, r3, #16
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d103      	bne.n	8013c84 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013c7c:	4b68      	ldr	r3, [pc, #416]	; (8013e20 <tcp_process+0x2ac>)
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2200      	movs	r2, #0
 8013c88:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f001 fc2f 	bl	80154f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	7d1b      	ldrb	r3, [r3, #20]
 8013c9e:	3b02      	subs	r3, #2
 8013ca0:	2b07      	cmp	r3, #7
 8013ca2:	f200 8337 	bhi.w	8014314 <tcp_process+0x7a0>
 8013ca6:	a201      	add	r2, pc, #4	; (adr r2, 8013cac <tcp_process+0x138>)
 8013ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cac:	08013ccd 	.word	0x08013ccd
 8013cb0:	08013efd 	.word	0x08013efd
 8013cb4:	08014075 	.word	0x08014075
 8013cb8:	0801409f 	.word	0x0801409f
 8013cbc:	080141c3 	.word	0x080141c3
 8013cc0:	08014075 	.word	0x08014075
 8013cc4:	0801424f 	.word	0x0801424f
 8013cc8:	080142df 	.word	0x080142df
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013ccc:	4b4f      	ldr	r3, [pc, #316]	; (8013e0c <tcp_process+0x298>)
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	f003 0310 	and.w	r3, r3, #16
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f000 80e4 	beq.w	8013ea2 <tcp_process+0x32e>
 8013cda:	4b4c      	ldr	r3, [pc, #304]	; (8013e0c <tcp_process+0x298>)
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	f003 0302 	and.w	r3, r3, #2
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	f000 80dd 	beq.w	8013ea2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cec:	1c5a      	adds	r2, r3, #1
 8013cee:	4b48      	ldr	r3, [pc, #288]	; (8013e10 <tcp_process+0x29c>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	f040 80d5 	bne.w	8013ea2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013cf8:	4b46      	ldr	r3, [pc, #280]	; (8013e14 <tcp_process+0x2a0>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	1c5a      	adds	r2, r3, #1
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013d0a:	4b41      	ldr	r3, [pc, #260]	; (8013e10 <tcp_process+0x29c>)
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013d12:	4b44      	ldr	r3, [pc, #272]	; (8013e24 <tcp_process+0x2b0>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	89db      	ldrh	r3, [r3, #14]
 8013d18:	b29a      	uxth	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013d2c:	4b39      	ldr	r3, [pc, #228]	; (8013e14 <tcp_process+0x2a0>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	1e5a      	subs	r2, r3, #1
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2204      	movs	r2, #4
 8013d3a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	3304      	adds	r3, #4
 8013d44:	4618      	mov	r0, r3
 8013d46:	f004 fdd9 	bl	80188fc <ip4_route>
 8013d4a:	4601      	mov	r1, r0
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	3304      	adds	r3, #4
 8013d50:	461a      	mov	r2, r3
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7ff f88c 	bl	8012e70 <tcp_eff_send_mss_netif>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d64:	009a      	lsls	r2, r3, #2
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d6a:	005b      	lsls	r3, r3, #1
 8013d6c:	f241 111c 	movw	r1, #4380	; 0x111c
 8013d70:	428b      	cmp	r3, r1
 8013d72:	bf38      	it	cc
 8013d74:	460b      	movcc	r3, r1
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d204      	bcs.n	8013d84 <tcp_process+0x210>
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	e00d      	b.n	8013da0 <tcp_process+0x22c>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d88:	005b      	lsls	r3, r3, #1
 8013d8a:	f241 121c 	movw	r2, #4380	; 0x111c
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d904      	bls.n	8013d9c <tcp_process+0x228>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d96:	005b      	lsls	r3, r3, #1
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	e001      	b.n	8013da0 <tcp_process+0x22c>
 8013d9c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d106      	bne.n	8013dbe <tcp_process+0x24a>
 8013db0:	4b13      	ldr	r3, [pc, #76]	; (8013e00 <tcp_process+0x28c>)
 8013db2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013db6:	491c      	ldr	r1, [pc, #112]	; (8013e28 <tcp_process+0x2b4>)
 8013db8:	4813      	ldr	r0, [pc, #76]	; (8013e08 <tcp_process+0x294>)
 8013dba:	f006 fe89 	bl	801aad0 <iprintf>
        --pcb->snd_queuelen;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dc4:	3b01      	subs	r3, #1
 8013dc6:	b29a      	uxth	r2, r3
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d12a      	bne.n	8013e30 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dde:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <tcp_process+0x280>
 8013de6:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <tcp_process+0x28c>)
 8013de8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013dec:	490f      	ldr	r1, [pc, #60]	; (8013e2c <tcp_process+0x2b8>)
 8013dee:	4806      	ldr	r0, [pc, #24]	; (8013e08 <tcp_process+0x294>)
 8013df0:	f006 fe6e 	bl	801aad0 <iprintf>
          pcb->unsent = rseg->next;
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	66da      	str	r2, [r3, #108]	; 0x6c
 8013dfc:	e01c      	b.n	8013e38 <tcp_process+0x2c4>
 8013dfe:	bf00      	nop
 8013e00:	0801e520 	.word	0x0801e520
 8013e04:	0801e758 	.word	0x0801e758
 8013e08:	0801e56c 	.word	0x0801e56c
 8013e0c:	2000f1f0 	.word	0x2000f1f0
 8013e10:	2000f1e8 	.word	0x2000f1e8
 8013e14:	2000f1e4 	.word	0x2000f1e4
 8013e18:	0801e774 	.word	0x0801e774
 8013e1c:	2000f1f1 	.word	0x2000f1f1
 8013e20:	2000f1ac 	.word	0x2000f1ac
 8013e24:	2000f1d4 	.word	0x2000f1d4
 8013e28:	0801e794 	.word	0x0801e794
 8013e2c:	0801e7ac 	.word	0x0801e7ac
        } else {
          pcb->unacked = rseg->next;
 8013e30:	69fb      	ldr	r3, [r7, #28]
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013e38:	69f8      	ldr	r0, [r7, #28]
 8013e3a:	f7fe fd22 	bl	8012882 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d104      	bne.n	8013e50 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e4c:	861a      	strh	r2, [r3, #48]	; 0x30
 8013e4e:	e006      	b.n	8013e5e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2200      	movs	r2, #0
 8013e54:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00a      	beq.n	8013e7e <tcp_process+0x30a>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	6910      	ldr	r0, [r2, #16]
 8013e72:	2200      	movs	r2, #0
 8013e74:	6879      	ldr	r1, [r7, #4]
 8013e76:	4798      	blx	r3
 8013e78:	4603      	mov	r3, r0
 8013e7a:	76bb      	strb	r3, [r7, #26]
 8013e7c:	e001      	b.n	8013e82 <tcp_process+0x30e>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013e82:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013e86:	f113 0f0d 	cmn.w	r3, #13
 8013e8a:	d102      	bne.n	8013e92 <tcp_process+0x31e>
          return ERR_ABRT;
 8013e8c:	f06f 030c 	mvn.w	r3, #12
 8013e90:	e250      	b.n	8014334 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	8b5b      	ldrh	r3, [r3, #26]
 8013e96:	f043 0302 	orr.w	r3, r3, #2
 8013e9a:	b29a      	uxth	r2, r3
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013ea0:	e23a      	b.n	8014318 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013ea2:	4b98      	ldr	r3, [pc, #608]	; (8014104 <tcp_process+0x590>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	f003 0310 	and.w	r3, r3, #16
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 8234 	beq.w	8014318 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013eb0:	4b95      	ldr	r3, [pc, #596]	; (8014108 <tcp_process+0x594>)
 8013eb2:	6819      	ldr	r1, [r3, #0]
 8013eb4:	4b95      	ldr	r3, [pc, #596]	; (801410c <tcp_process+0x598>)
 8013eb6:	881b      	ldrh	r3, [r3, #0]
 8013eb8:	461a      	mov	r2, r3
 8013eba:	4b95      	ldr	r3, [pc, #596]	; (8014110 <tcp_process+0x59c>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ec0:	4b94      	ldr	r3, [pc, #592]	; (8014114 <tcp_process+0x5a0>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ec4:	885b      	ldrh	r3, [r3, #2]
 8013ec6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ec8:	4a92      	ldr	r2, [pc, #584]	; (8014114 <tcp_process+0x5a0>)
 8013eca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ecc:	8812      	ldrh	r2, [r2, #0]
 8013ece:	b292      	uxth	r2, r2
 8013ed0:	9202      	str	r2, [sp, #8]
 8013ed2:	9301      	str	r3, [sp, #4]
 8013ed4:	4b90      	ldr	r3, [pc, #576]	; (8014118 <tcp_process+0x5a4>)
 8013ed6:	9300      	str	r3, [sp, #0]
 8013ed8:	4b90      	ldr	r3, [pc, #576]	; (801411c <tcp_process+0x5a8>)
 8013eda:	4602      	mov	r2, r0
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f002 fc85 	bl	80167ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ee8:	2b05      	cmp	r3, #5
 8013eea:	f200 8215 	bhi.w	8014318 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f002 fa51 	bl	801639c <tcp_rexmit_rto>
      break;
 8013efa:	e20d      	b.n	8014318 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013efc:	4b81      	ldr	r3, [pc, #516]	; (8014104 <tcp_process+0x590>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	f003 0310 	and.w	r3, r3, #16
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 80a1 	beq.w	801404c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f0a:	4b7f      	ldr	r3, [pc, #508]	; (8014108 <tcp_process+0x594>)
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	3b01      	subs	r3, #1
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	db7e      	blt.n	8014018 <tcp_process+0x4a4>
 8013f1a:	4b7b      	ldr	r3, [pc, #492]	; (8014108 <tcp_process+0x594>)
 8013f1c:	681a      	ldr	r2, [r3, #0]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	dc77      	bgt.n	8014018 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2204      	movs	r2, #4
 8013f2c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d102      	bne.n	8013f3c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013f36:	23fa      	movs	r3, #250	; 0xfa
 8013f38:	76bb      	strb	r3, [r7, #26]
 8013f3a:	e01d      	b.n	8013f78 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f40:	699b      	ldr	r3, [r3, #24]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d106      	bne.n	8013f54 <tcp_process+0x3e0>
 8013f46:	4b76      	ldr	r3, [pc, #472]	; (8014120 <tcp_process+0x5ac>)
 8013f48:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013f4c:	4975      	ldr	r1, [pc, #468]	; (8014124 <tcp_process+0x5b0>)
 8013f4e:	4876      	ldr	r0, [pc, #472]	; (8014128 <tcp_process+0x5b4>)
 8013f50:	f006 fdbe 	bl	801aad0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f58:	699b      	ldr	r3, [r3, #24]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00a      	beq.n	8013f74 <tcp_process+0x400>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f62:	699b      	ldr	r3, [r3, #24]
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	6910      	ldr	r0, [r2, #16]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	6879      	ldr	r1, [r7, #4]
 8013f6c:	4798      	blx	r3
 8013f6e:	4603      	mov	r3, r0
 8013f70:	76bb      	strb	r3, [r7, #26]
 8013f72:	e001      	b.n	8013f78 <tcp_process+0x404>
 8013f74:	23f0      	movs	r3, #240	; 0xf0
 8013f76:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013f78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d00a      	beq.n	8013f96 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013f80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013f84:	f113 0f0d 	cmn.w	r3, #13
 8013f88:	d002      	beq.n	8013f90 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7fd ff8e 	bl	8011eac <tcp_abort>
            }
            return ERR_ABRT;
 8013f90:	f06f 030c 	mvn.w	r3, #12
 8013f94:	e1ce      	b.n	8014334 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f000 fae0 	bl	801455c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013f9c:	4b63      	ldr	r3, [pc, #396]	; (801412c <tcp_process+0x5b8>)
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d005      	beq.n	8013fb0 <tcp_process+0x43c>
            recv_acked--;
 8013fa4:	4b61      	ldr	r3, [pc, #388]	; (801412c <tcp_process+0x5b8>)
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	3b01      	subs	r3, #1
 8013faa:	b29a      	uxth	r2, r3
 8013fac:	4b5f      	ldr	r3, [pc, #380]	; (801412c <tcp_process+0x5b8>)
 8013fae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fb4:	009a      	lsls	r2, r3, #2
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	f241 111c 	movw	r1, #4380	; 0x111c
 8013fc0:	428b      	cmp	r3, r1
 8013fc2:	bf38      	it	cc
 8013fc4:	460b      	movcc	r3, r1
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d204      	bcs.n	8013fd4 <tcp_process+0x460>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	e00d      	b.n	8013ff0 <tcp_process+0x47c>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	f241 121c 	movw	r2, #4380	; 0x111c
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	d904      	bls.n	8013fec <tcp_process+0x478>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	e001      	b.n	8013ff0 <tcp_process+0x47c>
 8013fec:	f241 131c 	movw	r3, #4380	; 0x111c
 8013ff0:	687a      	ldr	r2, [r7, #4]
 8013ff2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013ff6:	4b4e      	ldr	r3, [pc, #312]	; (8014130 <tcp_process+0x5bc>)
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	f003 0320 	and.w	r3, r3, #32
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d037      	beq.n	8014072 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	8b5b      	ldrh	r3, [r3, #26]
 8014006:	f043 0302 	orr.w	r3, r3, #2
 801400a:	b29a      	uxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2207      	movs	r2, #7
 8014014:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014016:	e02c      	b.n	8014072 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014018:	4b3b      	ldr	r3, [pc, #236]	; (8014108 <tcp_process+0x594>)
 801401a:	6819      	ldr	r1, [r3, #0]
 801401c:	4b3b      	ldr	r3, [pc, #236]	; (801410c <tcp_process+0x598>)
 801401e:	881b      	ldrh	r3, [r3, #0]
 8014020:	461a      	mov	r2, r3
 8014022:	4b3b      	ldr	r3, [pc, #236]	; (8014110 <tcp_process+0x59c>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014028:	4b3a      	ldr	r3, [pc, #232]	; (8014114 <tcp_process+0x5a0>)
 801402a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801402c:	885b      	ldrh	r3, [r3, #2]
 801402e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014030:	4a38      	ldr	r2, [pc, #224]	; (8014114 <tcp_process+0x5a0>)
 8014032:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014034:	8812      	ldrh	r2, [r2, #0]
 8014036:	b292      	uxth	r2, r2
 8014038:	9202      	str	r2, [sp, #8]
 801403a:	9301      	str	r3, [sp, #4]
 801403c:	4b36      	ldr	r3, [pc, #216]	; (8014118 <tcp_process+0x5a4>)
 801403e:	9300      	str	r3, [sp, #0]
 8014040:	4b36      	ldr	r3, [pc, #216]	; (801411c <tcp_process+0x5a8>)
 8014042:	4602      	mov	r2, r0
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f002 fbd1 	bl	80167ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801404a:	e167      	b.n	801431c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801404c:	4b2d      	ldr	r3, [pc, #180]	; (8014104 <tcp_process+0x590>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	f003 0302 	and.w	r3, r3, #2
 8014054:	2b00      	cmp	r3, #0
 8014056:	f000 8161 	beq.w	801431c <tcp_process+0x7a8>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801405e:	1e5a      	subs	r2, r3, #1
 8014060:	4b2b      	ldr	r3, [pc, #172]	; (8014110 <tcp_process+0x59c>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	429a      	cmp	r2, r3
 8014066:	f040 8159 	bne.w	801431c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f002 f9b8 	bl	80163e0 <tcp_rexmit>
      break;
 8014070:	e154      	b.n	801431c <tcp_process+0x7a8>
 8014072:	e153      	b.n	801431c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f000 fa71 	bl	801455c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801407a:	4b2d      	ldr	r3, [pc, #180]	; (8014130 <tcp_process+0x5bc>)
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	f003 0320 	and.w	r3, r3, #32
 8014082:	2b00      	cmp	r3, #0
 8014084:	f000 814c 	beq.w	8014320 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8b5b      	ldrh	r3, [r3, #26]
 801408c:	f043 0302 	orr.w	r3, r3, #2
 8014090:	b29a      	uxth	r2, r3
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2207      	movs	r2, #7
 801409a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801409c:	e140      	b.n	8014320 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f000 fa5c 	bl	801455c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80140a4:	4b22      	ldr	r3, [pc, #136]	; (8014130 <tcp_process+0x5bc>)
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	f003 0320 	and.w	r3, r3, #32
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d071      	beq.n	8014194 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80140b0:	4b14      	ldr	r3, [pc, #80]	; (8014104 <tcp_process+0x590>)
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	f003 0310 	and.w	r3, r3, #16
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d060      	beq.n	801417e <tcp_process+0x60a>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140c0:	4b11      	ldr	r3, [pc, #68]	; (8014108 <tcp_process+0x594>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d15a      	bne.n	801417e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d156      	bne.n	801417e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	8b5b      	ldrh	r3, [r3, #26]
 80140d4:	f043 0302 	orr.w	r3, r3, #2
 80140d8:	b29a      	uxth	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f7fe fdbc 	bl	8012c5c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80140e4:	4b13      	ldr	r3, [pc, #76]	; (8014134 <tcp_process+0x5c0>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d105      	bne.n	80140fa <tcp_process+0x586>
 80140ee:	4b11      	ldr	r3, [pc, #68]	; (8014134 <tcp_process+0x5c0>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	4a0f      	ldr	r2, [pc, #60]	; (8014134 <tcp_process+0x5c0>)
 80140f6:	6013      	str	r3, [r2, #0]
 80140f8:	e02e      	b.n	8014158 <tcp_process+0x5e4>
 80140fa:	4b0e      	ldr	r3, [pc, #56]	; (8014134 <tcp_process+0x5c0>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	617b      	str	r3, [r7, #20]
 8014100:	e027      	b.n	8014152 <tcp_process+0x5de>
 8014102:	bf00      	nop
 8014104:	2000f1f0 	.word	0x2000f1f0
 8014108:	2000f1e8 	.word	0x2000f1e8
 801410c:	2000f1ee 	.word	0x2000f1ee
 8014110:	2000f1e4 	.word	0x2000f1e4
 8014114:	2000f1d4 	.word	0x2000f1d4
 8014118:	2000973c 	.word	0x2000973c
 801411c:	20009740 	.word	0x20009740
 8014120:	0801e520 	.word	0x0801e520
 8014124:	0801e7c0 	.word	0x0801e7c0
 8014128:	0801e56c 	.word	0x0801e56c
 801412c:	2000f1ec 	.word	0x2000f1ec
 8014130:	2000f1f1 	.word	0x2000f1f1
 8014134:	2000f1b8 	.word	0x2000f1b8
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	429a      	cmp	r2, r3
 8014140:	d104      	bne.n	801414c <tcp_process+0x5d8>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	68da      	ldr	r2, [r3, #12]
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	60da      	str	r2, [r3, #12]
 801414a:	e005      	b.n	8014158 <tcp_process+0x5e4>
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	68db      	ldr	r3, [r3, #12]
 8014150:	617b      	str	r3, [r7, #20]
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d1ef      	bne.n	8014138 <tcp_process+0x5c4>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2200      	movs	r2, #0
 801415c:	60da      	str	r2, [r3, #12]
 801415e:	4b77      	ldr	r3, [pc, #476]	; (801433c <tcp_process+0x7c8>)
 8014160:	2201      	movs	r2, #1
 8014162:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	220a      	movs	r2, #10
 8014168:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801416a:	4b75      	ldr	r3, [pc, #468]	; (8014340 <tcp_process+0x7cc>)
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	60da      	str	r2, [r3, #12]
 8014172:	4a73      	ldr	r2, [pc, #460]	; (8014340 <tcp_process+0x7cc>)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6013      	str	r3, [r2, #0]
 8014178:	f002 fcfa 	bl	8016b70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801417c:	e0d2      	b.n	8014324 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	8b5b      	ldrh	r3, [r3, #26]
 8014182:	f043 0302 	orr.w	r3, r3, #2
 8014186:	b29a      	uxth	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2208      	movs	r2, #8
 8014190:	751a      	strb	r2, [r3, #20]
      break;
 8014192:	e0c7      	b.n	8014324 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014194:	4b6b      	ldr	r3, [pc, #428]	; (8014344 <tcp_process+0x7d0>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	f003 0310 	and.w	r3, r3, #16
 801419c:	2b00      	cmp	r3, #0
 801419e:	f000 80c1 	beq.w	8014324 <tcp_process+0x7b0>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80141a6:	4b68      	ldr	r3, [pc, #416]	; (8014348 <tcp_process+0x7d4>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	f040 80ba 	bne.w	8014324 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	f040 80b5 	bne.w	8014324 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2206      	movs	r2, #6
 80141be:	751a      	strb	r2, [r3, #20]
      break;
 80141c0:	e0b0      	b.n	8014324 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f9ca 	bl	801455c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80141c8:	4b60      	ldr	r3, [pc, #384]	; (801434c <tcp_process+0x7d8>)
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	f003 0320 	and.w	r3, r3, #32
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	f000 80a9 	beq.w	8014328 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	8b5b      	ldrh	r3, [r3, #26]
 80141da:	f043 0302 	orr.w	r3, r3, #2
 80141de:	b29a      	uxth	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f7fe fd39 	bl	8012c5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80141ea:	4b59      	ldr	r3, [pc, #356]	; (8014350 <tcp_process+0x7dc>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d105      	bne.n	8014200 <tcp_process+0x68c>
 80141f4:	4b56      	ldr	r3, [pc, #344]	; (8014350 <tcp_process+0x7dc>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	4a55      	ldr	r2, [pc, #340]	; (8014350 <tcp_process+0x7dc>)
 80141fc:	6013      	str	r3, [r2, #0]
 80141fe:	e013      	b.n	8014228 <tcp_process+0x6b4>
 8014200:	4b53      	ldr	r3, [pc, #332]	; (8014350 <tcp_process+0x7dc>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	613b      	str	r3, [r7, #16]
 8014206:	e00c      	b.n	8014222 <tcp_process+0x6ae>
 8014208:	693b      	ldr	r3, [r7, #16]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	429a      	cmp	r2, r3
 8014210:	d104      	bne.n	801421c <tcp_process+0x6a8>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	68da      	ldr	r2, [r3, #12]
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	60da      	str	r2, [r3, #12]
 801421a:	e005      	b.n	8014228 <tcp_process+0x6b4>
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	68db      	ldr	r3, [r3, #12]
 8014220:	613b      	str	r3, [r7, #16]
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d1ef      	bne.n	8014208 <tcp_process+0x694>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	60da      	str	r2, [r3, #12]
 801422e:	4b43      	ldr	r3, [pc, #268]	; (801433c <tcp_process+0x7c8>)
 8014230:	2201      	movs	r2, #1
 8014232:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	220a      	movs	r2, #10
 8014238:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801423a:	4b41      	ldr	r3, [pc, #260]	; (8014340 <tcp_process+0x7cc>)
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60da      	str	r2, [r3, #12]
 8014242:	4a3f      	ldr	r2, [pc, #252]	; (8014340 <tcp_process+0x7cc>)
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6013      	str	r3, [r2, #0]
 8014248:	f002 fc92 	bl	8016b70 <tcp_timer_needed>
      }
      break;
 801424c:	e06c      	b.n	8014328 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f000 f984 	bl	801455c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014254:	4b3b      	ldr	r3, [pc, #236]	; (8014344 <tcp_process+0x7d0>)
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	f003 0310 	and.w	r3, r3, #16
 801425c:	2b00      	cmp	r3, #0
 801425e:	d065      	beq.n	801432c <tcp_process+0x7b8>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014264:	4b38      	ldr	r3, [pc, #224]	; (8014348 <tcp_process+0x7d4>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	429a      	cmp	r2, r3
 801426a:	d15f      	bne.n	801432c <tcp_process+0x7b8>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014270:	2b00      	cmp	r3, #0
 8014272:	d15b      	bne.n	801432c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f7fe fcf1 	bl	8012c5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801427a:	4b35      	ldr	r3, [pc, #212]	; (8014350 <tcp_process+0x7dc>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	429a      	cmp	r2, r3
 8014282:	d105      	bne.n	8014290 <tcp_process+0x71c>
 8014284:	4b32      	ldr	r3, [pc, #200]	; (8014350 <tcp_process+0x7dc>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	68db      	ldr	r3, [r3, #12]
 801428a:	4a31      	ldr	r2, [pc, #196]	; (8014350 <tcp_process+0x7dc>)
 801428c:	6013      	str	r3, [r2, #0]
 801428e:	e013      	b.n	80142b8 <tcp_process+0x744>
 8014290:	4b2f      	ldr	r3, [pc, #188]	; (8014350 <tcp_process+0x7dc>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	60fb      	str	r3, [r7, #12]
 8014296:	e00c      	b.n	80142b2 <tcp_process+0x73e>
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	687a      	ldr	r2, [r7, #4]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d104      	bne.n	80142ac <tcp_process+0x738>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	68da      	ldr	r2, [r3, #12]
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	60da      	str	r2, [r3, #12]
 80142aa:	e005      	b.n	80142b8 <tcp_process+0x744>
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	60fb      	str	r3, [r7, #12]
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d1ef      	bne.n	8014298 <tcp_process+0x724>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2200      	movs	r2, #0
 80142bc:	60da      	str	r2, [r3, #12]
 80142be:	4b1f      	ldr	r3, [pc, #124]	; (801433c <tcp_process+0x7c8>)
 80142c0:	2201      	movs	r2, #1
 80142c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	220a      	movs	r2, #10
 80142c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80142ca:	4b1d      	ldr	r3, [pc, #116]	; (8014340 <tcp_process+0x7cc>)
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	60da      	str	r2, [r3, #12]
 80142d2:	4a1b      	ldr	r2, [pc, #108]	; (8014340 <tcp_process+0x7cc>)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6013      	str	r3, [r2, #0]
 80142d8:	f002 fc4a 	bl	8016b70 <tcp_timer_needed>
      }
      break;
 80142dc:	e026      	b.n	801432c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 f93c 	bl	801455c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80142e4:	4b17      	ldr	r3, [pc, #92]	; (8014344 <tcp_process+0x7d0>)
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	f003 0310 	and.w	r3, r3, #16
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d01f      	beq.n	8014330 <tcp_process+0x7bc>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142f4:	4b14      	ldr	r3, [pc, #80]	; (8014348 <tcp_process+0x7d4>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d119      	bne.n	8014330 <tcp_process+0x7bc>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014300:	2b00      	cmp	r3, #0
 8014302:	d115      	bne.n	8014330 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014304:	4b11      	ldr	r3, [pc, #68]	; (801434c <tcp_process+0x7d8>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	f043 0310 	orr.w	r3, r3, #16
 801430c:	b2da      	uxtb	r2, r3
 801430e:	4b0f      	ldr	r3, [pc, #60]	; (801434c <tcp_process+0x7d8>)
 8014310:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014312:	e00d      	b.n	8014330 <tcp_process+0x7bc>
    default:
      break;
 8014314:	bf00      	nop
 8014316:	e00c      	b.n	8014332 <tcp_process+0x7be>
      break;
 8014318:	bf00      	nop
 801431a:	e00a      	b.n	8014332 <tcp_process+0x7be>
      break;
 801431c:	bf00      	nop
 801431e:	e008      	b.n	8014332 <tcp_process+0x7be>
      break;
 8014320:	bf00      	nop
 8014322:	e006      	b.n	8014332 <tcp_process+0x7be>
      break;
 8014324:	bf00      	nop
 8014326:	e004      	b.n	8014332 <tcp_process+0x7be>
      break;
 8014328:	bf00      	nop
 801432a:	e002      	b.n	8014332 <tcp_process+0x7be>
      break;
 801432c:	bf00      	nop
 801432e:	e000      	b.n	8014332 <tcp_process+0x7be>
      break;
 8014330:	bf00      	nop
  }
  return ERR_OK;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3724      	adds	r7, #36	; 0x24
 8014338:	46bd      	mov	sp, r7
 801433a:	bd90      	pop	{r4, r7, pc}
 801433c:	2000f1c0 	.word	0x2000f1c0
 8014340:	2000f1bc 	.word	0x2000f1bc
 8014344:	2000f1f0 	.word	0x2000f1f0
 8014348:	2000f1e8 	.word	0x2000f1e8
 801434c:	2000f1f1 	.word	0x2000f1f1
 8014350:	2000f1b8 	.word	0x2000f1b8

08014354 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014354:	b590      	push	{r4, r7, lr}
 8014356:	b085      	sub	sp, #20
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d106      	bne.n	8014372 <tcp_oos_insert_segment+0x1e>
 8014364:	4b3b      	ldr	r3, [pc, #236]	; (8014454 <tcp_oos_insert_segment+0x100>)
 8014366:	f240 421f 	movw	r2, #1055	; 0x41f
 801436a:	493b      	ldr	r1, [pc, #236]	; (8014458 <tcp_oos_insert_segment+0x104>)
 801436c:	483b      	ldr	r0, [pc, #236]	; (801445c <tcp_oos_insert_segment+0x108>)
 801436e:	f006 fbaf 	bl	801aad0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	68db      	ldr	r3, [r3, #12]
 8014376:	899b      	ldrh	r3, [r3, #12]
 8014378:	b29b      	uxth	r3, r3
 801437a:	4618      	mov	r0, r3
 801437c:	f7fa ffc0 	bl	800f300 <lwip_htons>
 8014380:	4603      	mov	r3, r0
 8014382:	b2db      	uxtb	r3, r3
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d028      	beq.n	80143de <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801438c:	6838      	ldr	r0, [r7, #0]
 801438e:	f7fe fa63 	bl	8012858 <tcp_segs_free>
    next = NULL;
 8014392:	2300      	movs	r3, #0
 8014394:	603b      	str	r3, [r7, #0]
 8014396:	e056      	b.n	8014446 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	68db      	ldr	r3, [r3, #12]
 801439c:	899b      	ldrh	r3, [r3, #12]
 801439e:	b29b      	uxth	r3, r3
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7fa ffad 	bl	800f300 <lwip_htons>
 80143a6:	4603      	mov	r3, r0
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	f003 0301 	and.w	r3, r3, #1
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d00d      	beq.n	80143ce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	899b      	ldrh	r3, [r3, #12]
 80143b8:	b29c      	uxth	r4, r3
 80143ba:	2001      	movs	r0, #1
 80143bc:	f7fa ffa0 	bl	800f300 <lwip_htons>
 80143c0:	4603      	mov	r3, r0
 80143c2:	461a      	mov	r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	4322      	orrs	r2, r4
 80143ca:	b292      	uxth	r2, r2
 80143cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80143d8:	68f8      	ldr	r0, [r7, #12]
 80143da:	f7fe fa52 	bl	8012882 <tcp_seg_free>
    while (next &&
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d00e      	beq.n	8014402 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	891b      	ldrh	r3, [r3, #8]
 80143e8:	461a      	mov	r2, r3
 80143ea:	4b1d      	ldr	r3, [pc, #116]	; (8014460 <tcp_oos_insert_segment+0x10c>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	441a      	add	r2, r3
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	68db      	ldr	r3, [r3, #12]
 80143f4:	685b      	ldr	r3, [r3, #4]
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	8909      	ldrh	r1, [r1, #8]
 80143fa:	440b      	add	r3, r1
 80143fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80143fe:	2b00      	cmp	r3, #0
 8014400:	daca      	bge.n	8014398 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d01e      	beq.n	8014446 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	891b      	ldrh	r3, [r3, #8]
 801440c:	461a      	mov	r2, r3
 801440e:	4b14      	ldr	r3, [pc, #80]	; (8014460 <tcp_oos_insert_segment+0x10c>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	441a      	add	r2, r3
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	68db      	ldr	r3, [r3, #12]
 8014418:	685b      	ldr	r3, [r3, #4]
 801441a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801441c:	2b00      	cmp	r3, #0
 801441e:	dd12      	ble.n	8014446 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	b29a      	uxth	r2, r3
 8014428:	4b0d      	ldr	r3, [pc, #52]	; (8014460 <tcp_oos_insert_segment+0x10c>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	b29b      	uxth	r3, r3
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	b29a      	uxth	r2, r3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	685a      	ldr	r2, [r3, #4]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	891b      	ldrh	r3, [r3, #8]
 801443e:	4619      	mov	r1, r3
 8014440:	4610      	mov	r0, r2
 8014442:	f7fc fcaf 	bl	8010da4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	683a      	ldr	r2, [r7, #0]
 801444a:	601a      	str	r2, [r3, #0]
}
 801444c:	bf00      	nop
 801444e:	3714      	adds	r7, #20
 8014450:	46bd      	mov	sp, r7
 8014452:	bd90      	pop	{r4, r7, pc}
 8014454:	0801e520 	.word	0x0801e520
 8014458:	0801e7e0 	.word	0x0801e7e0
 801445c:	0801e56c 	.word	0x0801e56c
 8014460:	2000f1e4 	.word	0x2000f1e4

08014464 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014464:	b5b0      	push	{r4, r5, r7, lr}
 8014466:	b086      	sub	sp, #24
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014472:	e03e      	b.n	80144f2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	4618      	mov	r0, r3
 8014484:	f7fc fea2 	bl	80111cc <pbuf_clen>
 8014488:	4603      	mov	r3, r0
 801448a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014492:	8a7a      	ldrh	r2, [r7, #18]
 8014494:	429a      	cmp	r2, r3
 8014496:	d906      	bls.n	80144a6 <tcp_free_acked_segments+0x42>
 8014498:	4b2a      	ldr	r3, [pc, #168]	; (8014544 <tcp_free_acked_segments+0xe0>)
 801449a:	f240 4257 	movw	r2, #1111	; 0x457
 801449e:	492a      	ldr	r1, [pc, #168]	; (8014548 <tcp_free_acked_segments+0xe4>)
 80144a0:	482a      	ldr	r0, [pc, #168]	; (801454c <tcp_free_acked_segments+0xe8>)
 80144a2:	f006 fb15 	bl	801aad0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80144ac:	8a7b      	ldrh	r3, [r7, #18]
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	b29a      	uxth	r2, r3
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	891a      	ldrh	r2, [r3, #8]
 80144bc:	4b24      	ldr	r3, [pc, #144]	; (8014550 <tcp_free_acked_segments+0xec>)
 80144be:	881b      	ldrh	r3, [r3, #0]
 80144c0:	4413      	add	r3, r2
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	4b22      	ldr	r3, [pc, #136]	; (8014550 <tcp_free_acked_segments+0xec>)
 80144c6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80144c8:	6978      	ldr	r0, [r7, #20]
 80144ca:	f7fe f9da 	bl	8012882 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00c      	beq.n	80144f2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d109      	bne.n	80144f2 <tcp_free_acked_segments+0x8e>
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d106      	bne.n	80144f2 <tcp_free_acked_segments+0x8e>
 80144e4:	4b17      	ldr	r3, [pc, #92]	; (8014544 <tcp_free_acked_segments+0xe0>)
 80144e6:	f240 4261 	movw	r2, #1121	; 0x461
 80144ea:	491a      	ldr	r1, [pc, #104]	; (8014554 <tcp_free_acked_segments+0xf0>)
 80144ec:	4817      	ldr	r0, [pc, #92]	; (801454c <tcp_free_acked_segments+0xe8>)
 80144ee:	f006 faef 	bl	801aad0 <iprintf>
  while (seg_list != NULL &&
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d020      	beq.n	801453a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	4618      	mov	r0, r3
 8014500:	f7fa ff13 	bl	800f32a <lwip_htonl>
 8014504:	4604      	mov	r4, r0
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	891b      	ldrh	r3, [r3, #8]
 801450a:	461d      	mov	r5, r3
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	899b      	ldrh	r3, [r3, #12]
 8014512:	b29b      	uxth	r3, r3
 8014514:	4618      	mov	r0, r3
 8014516:	f7fa fef3 	bl	800f300 <lwip_htons>
 801451a:	4603      	mov	r3, r0
 801451c:	b2db      	uxtb	r3, r3
 801451e:	f003 0303 	and.w	r3, r3, #3
 8014522:	2b00      	cmp	r3, #0
 8014524:	d001      	beq.n	801452a <tcp_free_acked_segments+0xc6>
 8014526:	2301      	movs	r3, #1
 8014528:	e000      	b.n	801452c <tcp_free_acked_segments+0xc8>
 801452a:	2300      	movs	r3, #0
 801452c:	442b      	add	r3, r5
 801452e:	18e2      	adds	r2, r4, r3
 8014530:	4b09      	ldr	r3, [pc, #36]	; (8014558 <tcp_free_acked_segments+0xf4>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014536:	2b00      	cmp	r3, #0
 8014538:	dd9c      	ble.n	8014474 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801453a:	68bb      	ldr	r3, [r7, #8]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bdb0      	pop	{r4, r5, r7, pc}
 8014544:	0801e520 	.word	0x0801e520
 8014548:	0801e808 	.word	0x0801e808
 801454c:	0801e56c 	.word	0x0801e56c
 8014550:	2000f1ec 	.word	0x2000f1ec
 8014554:	0801e830 	.word	0x0801e830
 8014558:	2000f1e8 	.word	0x2000f1e8

0801455c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801455c:	b5b0      	push	{r4, r5, r7, lr}
 801455e:	b094      	sub	sp, #80	; 0x50
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014564:	2300      	movs	r3, #0
 8014566:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <tcp_receive+0x20>
 801456e:	4b91      	ldr	r3, [pc, #580]	; (80147b4 <tcp_receive+0x258>)
 8014570:	f240 427b 	movw	r2, #1147	; 0x47b
 8014574:	4990      	ldr	r1, [pc, #576]	; (80147b8 <tcp_receive+0x25c>)
 8014576:	4891      	ldr	r0, [pc, #580]	; (80147bc <tcp_receive+0x260>)
 8014578:	f006 faaa 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	7d1b      	ldrb	r3, [r3, #20]
 8014580:	2b03      	cmp	r3, #3
 8014582:	d806      	bhi.n	8014592 <tcp_receive+0x36>
 8014584:	4b8b      	ldr	r3, [pc, #556]	; (80147b4 <tcp_receive+0x258>)
 8014586:	f240 427c 	movw	r2, #1148	; 0x47c
 801458a:	498d      	ldr	r1, [pc, #564]	; (80147c0 <tcp_receive+0x264>)
 801458c:	488b      	ldr	r0, [pc, #556]	; (80147bc <tcp_receive+0x260>)
 801458e:	f006 fa9f 	bl	801aad0 <iprintf>

  if (flags & TCP_ACK) {
 8014592:	4b8c      	ldr	r3, [pc, #560]	; (80147c4 <tcp_receive+0x268>)
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	f003 0310 	and.w	r3, r3, #16
 801459a:	2b00      	cmp	r3, #0
 801459c:	f000 8264 	beq.w	8014a68 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80145a6:	461a      	mov	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80145ac:	4413      	add	r3, r2
 80145ae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80145b4:	4b84      	ldr	r3, [pc, #528]	; (80147c8 <tcp_receive+0x26c>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	1ad3      	subs	r3, r2, r3
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	db1b      	blt.n	80145f6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80145c2:	4b81      	ldr	r3, [pc, #516]	; (80147c8 <tcp_receive+0x26c>)
 80145c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d106      	bne.n	80145d8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80145ce:	4b7f      	ldr	r3, [pc, #508]	; (80147cc <tcp_receive+0x270>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	1ad3      	subs	r3, r2, r3
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	db0e      	blt.n	80145f6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80145dc:	4b7b      	ldr	r3, [pc, #492]	; (80147cc <tcp_receive+0x270>)
 80145de:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d125      	bne.n	8014630 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80145e4:	4b7a      	ldr	r3, [pc, #488]	; (80147d0 <tcp_receive+0x274>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	89db      	ldrh	r3, [r3, #14]
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d91c      	bls.n	8014630 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80145f6:	4b76      	ldr	r3, [pc, #472]	; (80147d0 <tcp_receive+0x274>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	89db      	ldrh	r3, [r3, #14]
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014610:	429a      	cmp	r2, r3
 8014612:	d205      	bcs.n	8014620 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014620:	4b69      	ldr	r3, [pc, #420]	; (80147c8 <tcp_receive+0x26c>)
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014628:	4b68      	ldr	r3, [pc, #416]	; (80147cc <tcp_receive+0x270>)
 801462a:	681a      	ldr	r2, [r3, #0]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014630:	4b66      	ldr	r3, [pc, #408]	; (80147cc <tcp_receive+0x270>)
 8014632:	681a      	ldr	r2, [r3, #0]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014638:	1ad3      	subs	r3, r2, r3
 801463a:	2b00      	cmp	r3, #0
 801463c:	dc58      	bgt.n	80146f0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801463e:	4b65      	ldr	r3, [pc, #404]	; (80147d4 <tcp_receive+0x278>)
 8014640:	881b      	ldrh	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d14b      	bne.n	80146de <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014650:	4413      	add	r3, r2
 8014652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014654:	429a      	cmp	r2, r3
 8014656:	d142      	bne.n	80146de <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801465e:	2b00      	cmp	r3, #0
 8014660:	db3d      	blt.n	80146de <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014666:	4b59      	ldr	r3, [pc, #356]	; (80147cc <tcp_receive+0x270>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	429a      	cmp	r2, r3
 801466c:	d137      	bne.n	80146de <tcp_receive+0x182>
              found_dupack = 1;
 801466e:	2301      	movs	r3, #1
 8014670:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014678:	2bff      	cmp	r3, #255	; 0xff
 801467a:	d007      	beq.n	801468c <tcp_receive+0x130>
                ++pcb->dupacks;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014682:	3301      	adds	r3, #1
 8014684:	b2da      	uxtb	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014692:	2b03      	cmp	r3, #3
 8014694:	d91b      	bls.n	80146ce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a0:	4413      	add	r3, r2
 80146a2:	b29a      	uxth	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d30a      	bcc.n	80146c4 <tcp_receive+0x168>
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146b8:	4413      	add	r3, r2
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80146c2:	e004      	b.n	80146ce <tcp_receive+0x172>
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d902      	bls.n	80146de <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f001 feed 	bl	80164b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80146de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	f040 8161 	bne.w	80149a8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2200      	movs	r2, #0
 80146ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80146ee:	e15b      	b.n	80149a8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80146f0:	4b36      	ldr	r3, [pc, #216]	; (80147cc <tcp_receive+0x270>)
 80146f2:	681a      	ldr	r2, [r3, #0]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146f8:	1ad3      	subs	r3, r2, r3
 80146fa:	3b01      	subs	r3, #1
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f2c0 814e 	blt.w	801499e <tcp_receive+0x442>
 8014702:	4b32      	ldr	r3, [pc, #200]	; (80147cc <tcp_receive+0x270>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801470a:	1ad3      	subs	r3, r2, r3
 801470c:	2b00      	cmp	r3, #0
 801470e:	f300 8146 	bgt.w	801499e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	8b5b      	ldrh	r3, [r3, #26]
 8014716:	f003 0304 	and.w	r3, r3, #4
 801471a:	2b00      	cmp	r3, #0
 801471c:	d010      	beq.n	8014740 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	8b5b      	ldrh	r3, [r3, #26]
 8014722:	f023 0304 	bic.w	r3, r3, #4
 8014726:	b29a      	uxth	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2200      	movs	r2, #0
 8014744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801474e:	10db      	asrs	r3, r3, #3
 8014750:	b21b      	sxth	r3, r3
 8014752:	b29a      	uxth	r2, r3
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801475a:	b29b      	uxth	r3, r3
 801475c:	4413      	add	r3, r2
 801475e:	b29b      	uxth	r3, r3
 8014760:	b21a      	sxth	r2, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014768:	4b18      	ldr	r3, [pc, #96]	; (80147cc <tcp_receive+0x270>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	b29a      	uxth	r2, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014772:	b29b      	uxth	r3, r3
 8014774:	1ad3      	subs	r3, r2, r3
 8014776:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014780:	4b12      	ldr	r3, [pc, #72]	; (80147cc <tcp_receive+0x270>)
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	7d1b      	ldrb	r3, [r3, #20]
 801478c:	2b03      	cmp	r3, #3
 801478e:	f240 8097 	bls.w	80148c0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801479e:	429a      	cmp	r2, r3
 80147a0:	d245      	bcs.n	801482e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	8b5b      	ldrh	r3, [r3, #26]
 80147a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d014      	beq.n	80147d8 <tcp_receive+0x27c>
 80147ae:	2301      	movs	r3, #1
 80147b0:	e013      	b.n	80147da <tcp_receive+0x27e>
 80147b2:	bf00      	nop
 80147b4:	0801e520 	.word	0x0801e520
 80147b8:	0801e850 	.word	0x0801e850
 80147bc:	0801e56c 	.word	0x0801e56c
 80147c0:	0801e86c 	.word	0x0801e86c
 80147c4:	2000f1f0 	.word	0x2000f1f0
 80147c8:	2000f1e4 	.word	0x2000f1e4
 80147cc:	2000f1e8 	.word	0x2000f1e8
 80147d0:	2000f1d4 	.word	0x2000f1d4
 80147d4:	2000f1ee 	.word	0x2000f1ee
 80147d8:	2302      	movs	r3, #2
 80147da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80147de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80147e2:	b29a      	uxth	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147e8:	fb12 f303 	smulbb	r3, r2, r3
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147f0:	4293      	cmp	r3, r2
 80147f2:	bf28      	it	cs
 80147f4:	4613      	movcs	r3, r2
 80147f6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80147fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014800:	4413      	add	r3, r2
 8014802:	b29a      	uxth	r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801480a:	429a      	cmp	r2, r3
 801480c:	d309      	bcc.n	8014822 <tcp_receive+0x2c6>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014816:	4413      	add	r3, r2
 8014818:	b29a      	uxth	r2, r3
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014820:	e04e      	b.n	80148c0 <tcp_receive+0x364>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014828:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801482c:	e048      	b.n	80148c0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014834:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014836:	4413      	add	r3, r2
 8014838:	b29a      	uxth	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014840:	429a      	cmp	r2, r3
 8014842:	d309      	bcc.n	8014858 <tcp_receive+0x2fc>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801484a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801484c:	4413      	add	r3, r2
 801484e:	b29a      	uxth	r2, r3
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014856:	e004      	b.n	8014862 <tcp_receive+0x306>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801485e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801486e:	429a      	cmp	r2, r3
 8014870:	d326      	bcc.n	80148c0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801487e:	1ad3      	subs	r3, r2, r3
 8014880:	b29a      	uxth	r2, r3
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014892:	4413      	add	r3, r2
 8014894:	b29a      	uxth	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801489c:	429a      	cmp	r2, r3
 801489e:	d30a      	bcc.n	80148b6 <tcp_receive+0x35a>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148aa:	4413      	add	r3, r2
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80148b4:	e004      	b.n	80148c0 <tcp_receive+0x364>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148c8:	4a98      	ldr	r2, [pc, #608]	; (8014b2c <tcp_receive+0x5d0>)
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7ff fdca 	bl	8014464 <tcp_free_acked_segments>
 80148d0:	4602      	mov	r2, r0
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148de:	4a94      	ldr	r2, [pc, #592]	; (8014b30 <tcp_receive+0x5d4>)
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7ff fdbf 	bl	8014464 <tcp_free_acked_segments>
 80148e6:	4602      	mov	r2, r0
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d104      	bne.n	80148fe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148fa:	861a      	strh	r2, [r3, #48]	; 0x30
 80148fc:	e002      	b.n	8014904 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	2200      	movs	r2, #0
 8014902:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2200      	movs	r2, #0
 8014908:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801490e:	2b00      	cmp	r3, #0
 8014910:	d103      	bne.n	801491a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2200      	movs	r2, #0
 8014916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014920:	4b84      	ldr	r3, [pc, #528]	; (8014b34 <tcp_receive+0x5d8>)
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	4413      	add	r3, r2
 8014926:	b29a      	uxth	r2, r3
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	8b5b      	ldrh	r3, [r3, #26]
 8014932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014936:	2b00      	cmp	r3, #0
 8014938:	d035      	beq.n	80149a6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801493e:	2b00      	cmp	r3, #0
 8014940:	d118      	bne.n	8014974 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00c      	beq.n	8014964 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014952:	68db      	ldr	r3, [r3, #12]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	4618      	mov	r0, r3
 8014958:	f7fa fce7 	bl	800f32a <lwip_htonl>
 801495c:	4603      	mov	r3, r0
 801495e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014960:	2b00      	cmp	r3, #0
 8014962:	dc20      	bgt.n	80149a6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	8b5b      	ldrh	r3, [r3, #26]
 8014968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801496c:	b29a      	uxth	r2, r3
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014972:	e018      	b.n	80149a6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	685b      	ldr	r3, [r3, #4]
 8014980:	4618      	mov	r0, r3
 8014982:	f7fa fcd2 	bl	800f32a <lwip_htonl>
 8014986:	4603      	mov	r3, r0
 8014988:	1ae3      	subs	r3, r4, r3
 801498a:	2b00      	cmp	r3, #0
 801498c:	dc0b      	bgt.n	80149a6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	8b5b      	ldrh	r3, [r3, #26]
 8014992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014996:	b29a      	uxth	r2, r3
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801499c:	e003      	b.n	80149a6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f001 ff76 	bl	8016890 <tcp_send_empty_ack>
 80149a4:	e000      	b.n	80149a8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80149a6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d05b      	beq.n	8014a68 <tcp_receive+0x50c>
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80149b4:	4b60      	ldr	r3, [pc, #384]	; (8014b38 <tcp_receive+0x5dc>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	1ad3      	subs	r3, r2, r3
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	da54      	bge.n	8014a68 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80149be:	4b5f      	ldr	r3, [pc, #380]	; (8014b3c <tcp_receive+0x5e0>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	b29a      	uxth	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80149d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80149dc:	10db      	asrs	r3, r3, #3
 80149de:	b21b      	sxth	r3, r3
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	1ad3      	subs	r3, r2, r3
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80149f6:	4413      	add	r3, r2
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	b21a      	sxth	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014a00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	da05      	bge.n	8014a14 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014a0c:	425b      	negs	r3, r3
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014a14:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014a1e:	109b      	asrs	r3, r3, #2
 8014a20:	b21b      	sxth	r3, r3
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014a32:	b29a      	uxth	r2, r3
 8014a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014a38:	4413      	add	r3, r2
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	b21a      	sxth	r2, r3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014a48:	10db      	asrs	r3, r3, #3
 8014a4a:	b21b      	sxth	r3, r3
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014a54:	b29b      	uxth	r3, r3
 8014a56:	4413      	add	r3, r2
 8014a58:	b29b      	uxth	r3, r3
 8014a5a:	b21a      	sxth	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	2200      	movs	r2, #0
 8014a66:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014a68:	4b35      	ldr	r3, [pc, #212]	; (8014b40 <tcp_receive+0x5e4>)
 8014a6a:	881b      	ldrh	r3, [r3, #0]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	f000 84e2 	beq.w	8015436 <tcp_receive+0xeda>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	7d1b      	ldrb	r3, [r3, #20]
 8014a76:	2b06      	cmp	r3, #6
 8014a78:	f200 84dd 	bhi.w	8015436 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a80:	4b30      	ldr	r3, [pc, #192]	; (8014b44 <tcp_receive+0x5e8>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	1ad3      	subs	r3, r2, r3
 8014a86:	3b01      	subs	r3, #1
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f2c0 808f 	blt.w	8014bac <tcp_receive+0x650>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a92:	4b2b      	ldr	r3, [pc, #172]	; (8014b40 <tcp_receive+0x5e4>)
 8014a94:	881b      	ldrh	r3, [r3, #0]
 8014a96:	4619      	mov	r1, r3
 8014a98:	4b2a      	ldr	r3, [pc, #168]	; (8014b44 <tcp_receive+0x5e8>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	440b      	add	r3, r1
 8014a9e:	1ad3      	subs	r3, r2, r3
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	f300 8082 	bgt.w	8014bac <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014aa8:	4b27      	ldr	r3, [pc, #156]	; (8014b48 <tcp_receive+0x5ec>)
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ab2:	4b24      	ldr	r3, [pc, #144]	; (8014b44 <tcp_receive+0x5e8>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	1ad3      	subs	r3, r2, r3
 8014ab8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014aba:	4b23      	ldr	r3, [pc, #140]	; (8014b48 <tcp_receive+0x5ec>)
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d106      	bne.n	8014ad0 <tcp_receive+0x574>
 8014ac2:	4b22      	ldr	r3, [pc, #136]	; (8014b4c <tcp_receive+0x5f0>)
 8014ac4:	f240 5294 	movw	r2, #1428	; 0x594
 8014ac8:	4921      	ldr	r1, [pc, #132]	; (8014b50 <tcp_receive+0x5f4>)
 8014aca:	4822      	ldr	r0, [pc, #136]	; (8014b54 <tcp_receive+0x5f8>)
 8014acc:	f006 f800 	bl	801aad0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d906      	bls.n	8014ae8 <tcp_receive+0x58c>
 8014ada:	4b1c      	ldr	r3, [pc, #112]	; (8014b4c <tcp_receive+0x5f0>)
 8014adc:	f240 5295 	movw	r2, #1429	; 0x595
 8014ae0:	491d      	ldr	r1, [pc, #116]	; (8014b58 <tcp_receive+0x5fc>)
 8014ae2:	481c      	ldr	r0, [pc, #112]	; (8014b54 <tcp_receive+0x5f8>)
 8014ae4:	f005 fff4 	bl	801aad0 <iprintf>
      off = (u16_t)off32;
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014aee:	4b16      	ldr	r3, [pc, #88]	; (8014b48 <tcp_receive+0x5ec>)
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	891b      	ldrh	r3, [r3, #8]
 8014af4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d906      	bls.n	8014b0a <tcp_receive+0x5ae>
 8014afc:	4b13      	ldr	r3, [pc, #76]	; (8014b4c <tcp_receive+0x5f0>)
 8014afe:	f240 5297 	movw	r2, #1431	; 0x597
 8014b02:	4916      	ldr	r1, [pc, #88]	; (8014b5c <tcp_receive+0x600>)
 8014b04:	4813      	ldr	r0, [pc, #76]	; (8014b54 <tcp_receive+0x5f8>)
 8014b06:	f005 ffe3 	bl	801aad0 <iprintf>
      inseg.len -= off;
 8014b0a:	4b0f      	ldr	r3, [pc, #60]	; (8014b48 <tcp_receive+0x5ec>)
 8014b0c:	891a      	ldrh	r2, [r3, #8]
 8014b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	4b0c      	ldr	r3, [pc, #48]	; (8014b48 <tcp_receive+0x5ec>)
 8014b18:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014b1a:	4b0b      	ldr	r3, [pc, #44]	; (8014b48 <tcp_receive+0x5ec>)
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	891a      	ldrh	r2, [r3, #8]
 8014b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b24:	1ad3      	subs	r3, r2, r3
 8014b26:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014b28:	e02a      	b.n	8014b80 <tcp_receive+0x624>
 8014b2a:	bf00      	nop
 8014b2c:	0801e888 	.word	0x0801e888
 8014b30:	0801e890 	.word	0x0801e890
 8014b34:	2000f1ec 	.word	0x2000f1ec
 8014b38:	2000f1e8 	.word	0x2000f1e8
 8014b3c:	2000f1ac 	.word	0x2000f1ac
 8014b40:	2000f1ee 	.word	0x2000f1ee
 8014b44:	2000f1e4 	.word	0x2000f1e4
 8014b48:	2000f1c4 	.word	0x2000f1c4
 8014b4c:	0801e520 	.word	0x0801e520
 8014b50:	0801e898 	.word	0x0801e898
 8014b54:	0801e56c 	.word	0x0801e56c
 8014b58:	0801e8a8 	.word	0x0801e8a8
 8014b5c:	0801e8b8 	.word	0x0801e8b8
        off -= p->len;
 8014b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b62:	895b      	ldrh	r3, [r3, #10]
 8014b64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b68:	1ad3      	subs	r3, r2, r3
 8014b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b72:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b76:	2200      	movs	r2, #0
 8014b78:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b82:	895b      	ldrh	r3, [r3, #10]
 8014b84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d8e9      	bhi.n	8014b60 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014b8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b90:	4619      	mov	r1, r3
 8014b92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014b94:	f7fc fa06 	bl	8010fa4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9c:	4a91      	ldr	r2, [pc, #580]	; (8014de4 <tcp_receive+0x888>)
 8014b9e:	6013      	str	r3, [r2, #0]
 8014ba0:	4b91      	ldr	r3, [pc, #580]	; (8014de8 <tcp_receive+0x88c>)
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	4a8f      	ldr	r2, [pc, #572]	; (8014de4 <tcp_receive+0x888>)
 8014ba6:	6812      	ldr	r2, [r2, #0]
 8014ba8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014baa:	e00d      	b.n	8014bc8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014bac:	4b8d      	ldr	r3, [pc, #564]	; (8014de4 <tcp_receive+0x888>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bb4:	1ad3      	subs	r3, r2, r3
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	da06      	bge.n	8014bc8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	8b5b      	ldrh	r3, [r3, #26]
 8014bbe:	f043 0302 	orr.w	r3, r3, #2
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014bc8:	4b86      	ldr	r3, [pc, #536]	; (8014de4 <tcp_receive+0x888>)
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd0:	1ad3      	subs	r3, r2, r3
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f2c0 842a 	blt.w	801542c <tcp_receive+0xed0>
 8014bd8:	4b82      	ldr	r3, [pc, #520]	; (8014de4 <tcp_receive+0x888>)
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014be0:	6879      	ldr	r1, [r7, #4]
 8014be2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014be4:	440b      	add	r3, r1
 8014be6:	1ad3      	subs	r3, r2, r3
 8014be8:	3301      	adds	r3, #1
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	f300 841e 	bgt.w	801542c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bf4:	4b7b      	ldr	r3, [pc, #492]	; (8014de4 <tcp_receive+0x888>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	f040 829a 	bne.w	8015132 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014bfe:	4b7a      	ldr	r3, [pc, #488]	; (8014de8 <tcp_receive+0x88c>)
 8014c00:	891c      	ldrh	r4, [r3, #8]
 8014c02:	4b79      	ldr	r3, [pc, #484]	; (8014de8 <tcp_receive+0x88c>)
 8014c04:	68db      	ldr	r3, [r3, #12]
 8014c06:	899b      	ldrh	r3, [r3, #12]
 8014c08:	b29b      	uxth	r3, r3
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fa fb78 	bl	800f300 <lwip_htons>
 8014c10:	4603      	mov	r3, r0
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	f003 0303 	and.w	r3, r3, #3
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d001      	beq.n	8014c20 <tcp_receive+0x6c4>
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	e000      	b.n	8014c22 <tcp_receive+0x6c6>
 8014c20:	2300      	movs	r3, #0
 8014c22:	4423      	add	r3, r4
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	4b71      	ldr	r3, [pc, #452]	; (8014dec <tcp_receive+0x890>)
 8014c28:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c2e:	4b6f      	ldr	r3, [pc, #444]	; (8014dec <tcp_receive+0x890>)
 8014c30:	881b      	ldrh	r3, [r3, #0]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d275      	bcs.n	8014d22 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014c36:	4b6c      	ldr	r3, [pc, #432]	; (8014de8 <tcp_receive+0x88c>)
 8014c38:	68db      	ldr	r3, [r3, #12]
 8014c3a:	899b      	ldrh	r3, [r3, #12]
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fa fb5e 	bl	800f300 <lwip_htons>
 8014c44:	4603      	mov	r3, r0
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	f003 0301 	and.w	r3, r3, #1
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d01f      	beq.n	8014c90 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014c50:	4b65      	ldr	r3, [pc, #404]	; (8014de8 <tcp_receive+0x88c>)
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	899b      	ldrh	r3, [r3, #12]
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	b21b      	sxth	r3, r3
 8014c5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014c5e:	b21c      	sxth	r4, r3
 8014c60:	4b61      	ldr	r3, [pc, #388]	; (8014de8 <tcp_receive+0x88c>)
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	899b      	ldrh	r3, [r3, #12]
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7fa fb49 	bl	800f300 <lwip_htons>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7fa fb40 	bl	800f300 <lwip_htons>
 8014c80:	4603      	mov	r3, r0
 8014c82:	b21b      	sxth	r3, r3
 8014c84:	4323      	orrs	r3, r4
 8014c86:	b21a      	sxth	r2, r3
 8014c88:	4b57      	ldr	r3, [pc, #348]	; (8014de8 <tcp_receive+0x88c>)
 8014c8a:	68db      	ldr	r3, [r3, #12]
 8014c8c:	b292      	uxth	r2, r2
 8014c8e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c94:	4b54      	ldr	r3, [pc, #336]	; (8014de8 <tcp_receive+0x88c>)
 8014c96:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014c98:	4b53      	ldr	r3, [pc, #332]	; (8014de8 <tcp_receive+0x88c>)
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	899b      	ldrh	r3, [r3, #12]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fa fb2d 	bl	800f300 <lwip_htons>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	f003 0302 	and.w	r3, r3, #2
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d005      	beq.n	8014cbe <tcp_receive+0x762>
            inseg.len -= 1;
 8014cb2:	4b4d      	ldr	r3, [pc, #308]	; (8014de8 <tcp_receive+0x88c>)
 8014cb4:	891b      	ldrh	r3, [r3, #8]
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	4b4b      	ldr	r3, [pc, #300]	; (8014de8 <tcp_receive+0x88c>)
 8014cbc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014cbe:	4b4a      	ldr	r3, [pc, #296]	; (8014de8 <tcp_receive+0x88c>)
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	4a49      	ldr	r2, [pc, #292]	; (8014de8 <tcp_receive+0x88c>)
 8014cc4:	8912      	ldrh	r2, [r2, #8]
 8014cc6:	4611      	mov	r1, r2
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7fc f86b 	bl	8010da4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014cce:	4b46      	ldr	r3, [pc, #280]	; (8014de8 <tcp_receive+0x88c>)
 8014cd0:	891c      	ldrh	r4, [r3, #8]
 8014cd2:	4b45      	ldr	r3, [pc, #276]	; (8014de8 <tcp_receive+0x88c>)
 8014cd4:	68db      	ldr	r3, [r3, #12]
 8014cd6:	899b      	ldrh	r3, [r3, #12]
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fa fb10 	bl	800f300 <lwip_htons>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	b2db      	uxtb	r3, r3
 8014ce4:	f003 0303 	and.w	r3, r3, #3
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d001      	beq.n	8014cf0 <tcp_receive+0x794>
 8014cec:	2301      	movs	r3, #1
 8014cee:	e000      	b.n	8014cf2 <tcp_receive+0x796>
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	4423      	add	r3, r4
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	4b3d      	ldr	r3, [pc, #244]	; (8014dec <tcp_receive+0x890>)
 8014cf8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014cfa:	4b3c      	ldr	r3, [pc, #240]	; (8014dec <tcp_receive+0x890>)
 8014cfc:	881b      	ldrh	r3, [r3, #0]
 8014cfe:	461a      	mov	r2, r3
 8014d00:	4b38      	ldr	r3, [pc, #224]	; (8014de4 <tcp_receive+0x888>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	441a      	add	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d0a:	6879      	ldr	r1, [r7, #4]
 8014d0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014d0e:	440b      	add	r3, r1
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d006      	beq.n	8014d22 <tcp_receive+0x7c6>
 8014d14:	4b36      	ldr	r3, [pc, #216]	; (8014df0 <tcp_receive+0x894>)
 8014d16:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014d1a:	4936      	ldr	r1, [pc, #216]	; (8014df4 <tcp_receive+0x898>)
 8014d1c:	4836      	ldr	r0, [pc, #216]	; (8014df8 <tcp_receive+0x89c>)
 8014d1e:	f005 fed7 	bl	801aad0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f000 80e7 	beq.w	8014efa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014d2c:	4b2e      	ldr	r3, [pc, #184]	; (8014de8 <tcp_receive+0x88c>)
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	899b      	ldrh	r3, [r3, #12]
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7fa fae3 	bl	800f300 <lwip_htons>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	b2db      	uxtb	r3, r3
 8014d3e:	f003 0301 	and.w	r3, r3, #1
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d010      	beq.n	8014d68 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014d46:	e00a      	b.n	8014d5e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d4c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d52:	681a      	ldr	r2, [r3, #0]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014d58:	68f8      	ldr	r0, [r7, #12]
 8014d5a:	f7fd fd92 	bl	8012882 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1f0      	bne.n	8014d48 <tcp_receive+0x7ec>
 8014d66:	e0c8      	b.n	8014efa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014d6e:	e052      	b.n	8014e16 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	899b      	ldrh	r3, [r3, #12]
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7fa fac1 	bl	800f300 <lwip_htons>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	f003 0301 	and.w	r3, r3, #1
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d03d      	beq.n	8014e06 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014d8a:	4b17      	ldr	r3, [pc, #92]	; (8014de8 <tcp_receive+0x88c>)
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	899b      	ldrh	r3, [r3, #12]
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7fa fab4 	bl	800f300 <lwip_htons>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d130      	bne.n	8014e06 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014da4:	4b10      	ldr	r3, [pc, #64]	; (8014de8 <tcp_receive+0x88c>)
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	899b      	ldrh	r3, [r3, #12]
 8014daa:	b29c      	uxth	r4, r3
 8014dac:	2001      	movs	r0, #1
 8014dae:	f7fa faa7 	bl	800f300 <lwip_htons>
 8014db2:	4603      	mov	r3, r0
 8014db4:	461a      	mov	r2, r3
 8014db6:	4b0c      	ldr	r3, [pc, #48]	; (8014de8 <tcp_receive+0x88c>)
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	4322      	orrs	r2, r4
 8014dbc:	b292      	uxth	r2, r2
 8014dbe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014dc0:	4b09      	ldr	r3, [pc, #36]	; (8014de8 <tcp_receive+0x88c>)
 8014dc2:	891c      	ldrh	r4, [r3, #8]
 8014dc4:	4b08      	ldr	r3, [pc, #32]	; (8014de8 <tcp_receive+0x88c>)
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	899b      	ldrh	r3, [r3, #12]
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7fa fa97 	bl	800f300 <lwip_htons>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	f003 0303 	and.w	r3, r3, #3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00e      	beq.n	8014dfc <tcp_receive+0x8a0>
 8014dde:	2301      	movs	r3, #1
 8014de0:	e00d      	b.n	8014dfe <tcp_receive+0x8a2>
 8014de2:	bf00      	nop
 8014de4:	2000f1e4 	.word	0x2000f1e4
 8014de8:	2000f1c4 	.word	0x2000f1c4
 8014dec:	2000f1ee 	.word	0x2000f1ee
 8014df0:	0801e520 	.word	0x0801e520
 8014df4:	0801e8c8 	.word	0x0801e8c8
 8014df8:	0801e56c 	.word	0x0801e56c
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	4423      	add	r3, r4
 8014e00:	b29a      	uxth	r2, r3
 8014e02:	4b98      	ldr	r3, [pc, #608]	; (8015064 <tcp_receive+0xb08>)
 8014e04:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e08:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014e10:	6938      	ldr	r0, [r7, #16]
 8014e12:	f7fd fd36 	bl	8012882 <tcp_seg_free>
            while (next &&
 8014e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d00e      	beq.n	8014e3a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014e1c:	4b91      	ldr	r3, [pc, #580]	; (8015064 <tcp_receive+0xb08>)
 8014e1e:	881b      	ldrh	r3, [r3, #0]
 8014e20:	461a      	mov	r2, r3
 8014e22:	4b91      	ldr	r3, [pc, #580]	; (8015068 <tcp_receive+0xb0c>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	441a      	add	r2, r3
 8014e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014e30:	8909      	ldrh	r1, [r1, #8]
 8014e32:	440b      	add	r3, r1
 8014e34:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	da9a      	bge.n	8014d70 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d059      	beq.n	8014ef4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014e40:	4b88      	ldr	r3, [pc, #544]	; (8015064 <tcp_receive+0xb08>)
 8014e42:	881b      	ldrh	r3, [r3, #0]
 8014e44:	461a      	mov	r2, r3
 8014e46:	4b88      	ldr	r3, [pc, #544]	; (8015068 <tcp_receive+0xb0c>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	441a      	add	r2, r3
 8014e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	685b      	ldr	r3, [r3, #4]
 8014e52:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	dd4d      	ble.n	8014ef4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e5a:	68db      	ldr	r3, [r3, #12]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	4b81      	ldr	r3, [pc, #516]	; (8015068 <tcp_receive+0xb0c>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	1ad3      	subs	r3, r2, r3
 8014e68:	b29a      	uxth	r2, r3
 8014e6a:	4b80      	ldr	r3, [pc, #512]	; (801506c <tcp_receive+0xb10>)
 8014e6c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014e6e:	4b7f      	ldr	r3, [pc, #508]	; (801506c <tcp_receive+0xb10>)
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	899b      	ldrh	r3, [r3, #12]
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fa fa42 	bl	800f300 <lwip_htons>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	b2db      	uxtb	r3, r3
 8014e80:	f003 0302 	and.w	r3, r3, #2
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d005      	beq.n	8014e94 <tcp_receive+0x938>
                inseg.len -= 1;
 8014e88:	4b78      	ldr	r3, [pc, #480]	; (801506c <tcp_receive+0xb10>)
 8014e8a:	891b      	ldrh	r3, [r3, #8]
 8014e8c:	3b01      	subs	r3, #1
 8014e8e:	b29a      	uxth	r2, r3
 8014e90:	4b76      	ldr	r3, [pc, #472]	; (801506c <tcp_receive+0xb10>)
 8014e92:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014e94:	4b75      	ldr	r3, [pc, #468]	; (801506c <tcp_receive+0xb10>)
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	4a74      	ldr	r2, [pc, #464]	; (801506c <tcp_receive+0xb10>)
 8014e9a:	8912      	ldrh	r2, [r2, #8]
 8014e9c:	4611      	mov	r1, r2
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fb ff80 	bl	8010da4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014ea4:	4b71      	ldr	r3, [pc, #452]	; (801506c <tcp_receive+0xb10>)
 8014ea6:	891c      	ldrh	r4, [r3, #8]
 8014ea8:	4b70      	ldr	r3, [pc, #448]	; (801506c <tcp_receive+0xb10>)
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	899b      	ldrh	r3, [r3, #12]
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fa fa25 	bl	800f300 <lwip_htons>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	f003 0303 	and.w	r3, r3, #3
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <tcp_receive+0x96a>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	e000      	b.n	8014ec8 <tcp_receive+0x96c>
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4423      	add	r3, r4
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	4b65      	ldr	r3, [pc, #404]	; (8015064 <tcp_receive+0xb08>)
 8014ece:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014ed0:	4b64      	ldr	r3, [pc, #400]	; (8015064 <tcp_receive+0xb08>)
 8014ed2:	881b      	ldrh	r3, [r3, #0]
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	4b64      	ldr	r3, [pc, #400]	; (8015068 <tcp_receive+0xb0c>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	441a      	add	r2, r3
 8014edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ede:	68db      	ldr	r3, [r3, #12]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	d006      	beq.n	8014ef4 <tcp_receive+0x998>
 8014ee6:	4b62      	ldr	r3, [pc, #392]	; (8015070 <tcp_receive+0xb14>)
 8014ee8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014eec:	4961      	ldr	r1, [pc, #388]	; (8015074 <tcp_receive+0xb18>)
 8014eee:	4862      	ldr	r0, [pc, #392]	; (8015078 <tcp_receive+0xb1c>)
 8014ef0:	f005 fdee 	bl	801aad0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ef8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014efa:	4b5a      	ldr	r3, [pc, #360]	; (8015064 <tcp_receive+0xb08>)
 8014efc:	881b      	ldrh	r3, [r3, #0]
 8014efe:	461a      	mov	r2, r3
 8014f00:	4b59      	ldr	r3, [pc, #356]	; (8015068 <tcp_receive+0xb0c>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	441a      	add	r2, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014f0e:	4b55      	ldr	r3, [pc, #340]	; (8015064 <tcp_receive+0xb08>)
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d206      	bcs.n	8014f24 <tcp_receive+0x9c8>
 8014f16:	4b56      	ldr	r3, [pc, #344]	; (8015070 <tcp_receive+0xb14>)
 8014f18:	f240 6207 	movw	r2, #1543	; 0x607
 8014f1c:	4957      	ldr	r1, [pc, #348]	; (801507c <tcp_receive+0xb20>)
 8014f1e:	4856      	ldr	r0, [pc, #344]	; (8015078 <tcp_receive+0xb1c>)
 8014f20:	f005 fdd6 	bl	801aad0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014f28:	4b4e      	ldr	r3, [pc, #312]	; (8015064 <tcp_receive+0xb08>)
 8014f2a:	881b      	ldrh	r3, [r3, #0]
 8014f2c:	1ad3      	subs	r3, r2, r3
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f7fc ffc5 	bl	8011ec4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014f3a:	4b4c      	ldr	r3, [pc, #304]	; (801506c <tcp_receive+0xb10>)
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	891b      	ldrh	r3, [r3, #8]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d006      	beq.n	8014f52 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014f44:	4b49      	ldr	r3, [pc, #292]	; (801506c <tcp_receive+0xb10>)
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	4a4d      	ldr	r2, [pc, #308]	; (8015080 <tcp_receive+0xb24>)
 8014f4a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014f4c:	4b47      	ldr	r3, [pc, #284]	; (801506c <tcp_receive+0xb10>)
 8014f4e:	2200      	movs	r2, #0
 8014f50:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014f52:	4b46      	ldr	r3, [pc, #280]	; (801506c <tcp_receive+0xb10>)
 8014f54:	68db      	ldr	r3, [r3, #12]
 8014f56:	899b      	ldrh	r3, [r3, #12]
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7fa f9d0 	bl	800f300 <lwip_htons>
 8014f60:	4603      	mov	r3, r0
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	f003 0301 	and.w	r3, r3, #1
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f000 80b8 	beq.w	80150de <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014f6e:	4b45      	ldr	r3, [pc, #276]	; (8015084 <tcp_receive+0xb28>)
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	f043 0320 	orr.w	r3, r3, #32
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	4b42      	ldr	r3, [pc, #264]	; (8015084 <tcp_receive+0xb28>)
 8014f7a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014f7c:	e0af      	b.n	80150de <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f82:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	4a36      	ldr	r2, [pc, #216]	; (8015068 <tcp_receive+0xb0c>)
 8014f8e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	891b      	ldrh	r3, [r3, #8]
 8014f94:	461c      	mov	r4, r3
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	899b      	ldrh	r3, [r3, #12]
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fa f9ae 	bl	800f300 <lwip_htons>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	f003 0303 	and.w	r3, r3, #3
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d001      	beq.n	8014fb4 <tcp_receive+0xa58>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	e000      	b.n	8014fb6 <tcp_receive+0xa5a>
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	191a      	adds	r2, r3, r4
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fbc:	441a      	add	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014fc6:	461c      	mov	r4, r3
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	891b      	ldrh	r3, [r3, #8]
 8014fcc:	461d      	mov	r5, r3
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	899b      	ldrh	r3, [r3, #12]
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7fa f992 	bl	800f300 <lwip_htons>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	f003 0303 	and.w	r3, r3, #3
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d001      	beq.n	8014fec <tcp_receive+0xa90>
 8014fe8:	2301      	movs	r3, #1
 8014fea:	e000      	b.n	8014fee <tcp_receive+0xa92>
 8014fec:	2300      	movs	r3, #0
 8014fee:	442b      	add	r3, r5
 8014ff0:	429c      	cmp	r4, r3
 8014ff2:	d206      	bcs.n	8015002 <tcp_receive+0xaa6>
 8014ff4:	4b1e      	ldr	r3, [pc, #120]	; (8015070 <tcp_receive+0xb14>)
 8014ff6:	f240 622b 	movw	r2, #1579	; 0x62b
 8014ffa:	4923      	ldr	r1, [pc, #140]	; (8015088 <tcp_receive+0xb2c>)
 8014ffc:	481e      	ldr	r0, [pc, #120]	; (8015078 <tcp_receive+0xb1c>)
 8014ffe:	f005 fd67 	bl	801aad0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	891b      	ldrh	r3, [r3, #8]
 8015006:	461c      	mov	r4, r3
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	68db      	ldr	r3, [r3, #12]
 801500c:	899b      	ldrh	r3, [r3, #12]
 801500e:	b29b      	uxth	r3, r3
 8015010:	4618      	mov	r0, r3
 8015012:	f7fa f975 	bl	800f300 <lwip_htons>
 8015016:	4603      	mov	r3, r0
 8015018:	b2db      	uxtb	r3, r3
 801501a:	f003 0303 	and.w	r3, r3, #3
 801501e:	2b00      	cmp	r3, #0
 8015020:	d001      	beq.n	8015026 <tcp_receive+0xaca>
 8015022:	2301      	movs	r3, #1
 8015024:	e000      	b.n	8015028 <tcp_receive+0xacc>
 8015026:	2300      	movs	r3, #0
 8015028:	1919      	adds	r1, r3, r4
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801502e:	b28b      	uxth	r3, r1
 8015030:	1ad3      	subs	r3, r2, r3
 8015032:	b29a      	uxth	r2, r3
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f7fc ff43 	bl	8011ec4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	891b      	ldrh	r3, [r3, #8]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d028      	beq.n	801509a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015048:	4b0d      	ldr	r3, [pc, #52]	; (8015080 <tcp_receive+0xb24>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d01d      	beq.n	801508c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015050:	4b0b      	ldr	r3, [pc, #44]	; (8015080 <tcp_receive+0xb24>)
 8015052:	681a      	ldr	r2, [r3, #0]
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	4619      	mov	r1, r3
 801505a:	4610      	mov	r0, r2
 801505c:	f7fc f8f6 	bl	801124c <pbuf_cat>
 8015060:	e018      	b.n	8015094 <tcp_receive+0xb38>
 8015062:	bf00      	nop
 8015064:	2000f1ee 	.word	0x2000f1ee
 8015068:	2000f1e4 	.word	0x2000f1e4
 801506c:	2000f1c4 	.word	0x2000f1c4
 8015070:	0801e520 	.word	0x0801e520
 8015074:	0801e900 	.word	0x0801e900
 8015078:	0801e56c 	.word	0x0801e56c
 801507c:	0801e93c 	.word	0x0801e93c
 8015080:	2000f1f4 	.word	0x2000f1f4
 8015084:	2000f1f1 	.word	0x2000f1f1
 8015088:	0801e95c 	.word	0x0801e95c
            } else {
              recv_data = cseg->p;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4a70      	ldr	r2, [pc, #448]	; (8015254 <tcp_receive+0xcf8>)
 8015092:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	2200      	movs	r2, #0
 8015098:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	899b      	ldrh	r3, [r3, #12]
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fa f92c 	bl	800f300 <lwip_htons>
 80150a8:	4603      	mov	r3, r0
 80150aa:	b2db      	uxtb	r3, r3
 80150ac:	f003 0301 	and.w	r3, r3, #1
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d00d      	beq.n	80150d0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80150b4:	4b68      	ldr	r3, [pc, #416]	; (8015258 <tcp_receive+0xcfc>)
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	f043 0320 	orr.w	r3, r3, #32
 80150bc:	b2da      	uxtb	r2, r3
 80150be:	4b66      	ldr	r3, [pc, #408]	; (8015258 <tcp_receive+0xcfc>)
 80150c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	7d1b      	ldrb	r3, [r3, #20]
 80150c6:	2b04      	cmp	r3, #4
 80150c8:	d102      	bne.n	80150d0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2207      	movs	r2, #7
 80150ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80150d8:	68b8      	ldr	r0, [r7, #8]
 80150da:	f7fd fbd2 	bl	8012882 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d008      	beq.n	80150f8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	685a      	ldr	r2, [r3, #4]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80150f2:	429a      	cmp	r2, r3
 80150f4:	f43f af43 	beq.w	8014f7e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	8b5b      	ldrh	r3, [r3, #26]
 80150fc:	f003 0301 	and.w	r3, r3, #1
 8015100:	2b00      	cmp	r3, #0
 8015102:	d00e      	beq.n	8015122 <tcp_receive+0xbc6>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	8b5b      	ldrh	r3, [r3, #26]
 8015108:	f023 0301 	bic.w	r3, r3, #1
 801510c:	b29a      	uxth	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	835a      	strh	r2, [r3, #26]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	8b5b      	ldrh	r3, [r3, #26]
 8015116:	f043 0302 	orr.w	r3, r3, #2
 801511a:	b29a      	uxth	r2, r3
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015120:	e188      	b.n	8015434 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	8b5b      	ldrh	r3, [r3, #26]
 8015126:	f043 0301 	orr.w	r3, r3, #1
 801512a:	b29a      	uxth	r2, r3
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015130:	e180      	b.n	8015434 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015136:	2b00      	cmp	r3, #0
 8015138:	d106      	bne.n	8015148 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801513a:	4848      	ldr	r0, [pc, #288]	; (801525c <tcp_receive+0xd00>)
 801513c:	f7fd fbba 	bl	80128b4 <tcp_seg_copy>
 8015140:	4602      	mov	r2, r0
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	675a      	str	r2, [r3, #116]	; 0x74
 8015146:	e16d      	b.n	8015424 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015148:	2300      	movs	r3, #0
 801514a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015150:	63bb      	str	r3, [r7, #56]	; 0x38
 8015152:	e157      	b.n	8015404 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015156:	68db      	ldr	r3, [r3, #12]
 8015158:	685a      	ldr	r2, [r3, #4]
 801515a:	4b41      	ldr	r3, [pc, #260]	; (8015260 <tcp_receive+0xd04>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	429a      	cmp	r2, r3
 8015160:	d11d      	bne.n	801519e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015162:	4b3e      	ldr	r3, [pc, #248]	; (801525c <tcp_receive+0xd00>)
 8015164:	891a      	ldrh	r2, [r3, #8]
 8015166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015168:	891b      	ldrh	r3, [r3, #8]
 801516a:	429a      	cmp	r2, r3
 801516c:	f240 814f 	bls.w	801540e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015170:	483a      	ldr	r0, [pc, #232]	; (801525c <tcp_receive+0xd00>)
 8015172:	f7fd fb9f 	bl	80128b4 <tcp_seg_copy>
 8015176:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	2b00      	cmp	r3, #0
 801517c:	f000 8149 	beq.w	8015412 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8015180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015182:	2b00      	cmp	r3, #0
 8015184:	d003      	beq.n	801518e <tcp_receive+0xc32>
                    prev->next = cseg;
 8015186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015188:	697a      	ldr	r2, [r7, #20]
 801518a:	601a      	str	r2, [r3, #0]
 801518c:	e002      	b.n	8015194 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	697a      	ldr	r2, [r7, #20]
 8015192:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015196:	6978      	ldr	r0, [r7, #20]
 8015198:	f7ff f8dc 	bl	8014354 <tcp_oos_insert_segment>
                }
                break;
 801519c:	e139      	b.n	8015412 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d117      	bne.n	80151d4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80151a4:	4b2e      	ldr	r3, [pc, #184]	; (8015260 <tcp_receive+0xd04>)
 80151a6:	681a      	ldr	r2, [r3, #0]
 80151a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	1ad3      	subs	r3, r2, r3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	da57      	bge.n	8015264 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80151b4:	4829      	ldr	r0, [pc, #164]	; (801525c <tcp_receive+0xd00>)
 80151b6:	f7fd fb7d 	bl	80128b4 <tcp_seg_copy>
 80151ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80151bc:	69bb      	ldr	r3, [r7, #24]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	f000 8129 	beq.w	8015416 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	69ba      	ldr	r2, [r7, #24]
 80151c8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80151ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80151cc:	69b8      	ldr	r0, [r7, #24]
 80151ce:	f7ff f8c1 	bl	8014354 <tcp_oos_insert_segment>
                  }
                  break;
 80151d2:	e120      	b.n	8015416 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80151d4:	4b22      	ldr	r3, [pc, #136]	; (8015260 <tcp_receive+0xd04>)
 80151d6:	681a      	ldr	r2, [r3, #0]
 80151d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	1ad3      	subs	r3, r2, r3
 80151e0:	3b01      	subs	r3, #1
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	db3e      	blt.n	8015264 <tcp_receive+0xd08>
 80151e6:	4b1e      	ldr	r3, [pc, #120]	; (8015260 <tcp_receive+0xd04>)
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	3301      	adds	r3, #1
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	dc35      	bgt.n	8015264 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80151f8:	4818      	ldr	r0, [pc, #96]	; (801525c <tcp_receive+0xd00>)
 80151fa:	f7fd fb5b 	bl	80128b4 <tcp_seg_copy>
 80151fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 8109 	beq.w	801541a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801520a:	68db      	ldr	r3, [r3, #12]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015210:	8912      	ldrh	r2, [r2, #8]
 8015212:	441a      	add	r2, r3
 8015214:	4b12      	ldr	r3, [pc, #72]	; (8015260 <tcp_receive+0xd04>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	1ad3      	subs	r3, r2, r3
 801521a:	2b00      	cmp	r3, #0
 801521c:	dd12      	ble.n	8015244 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801521e:	4b10      	ldr	r3, [pc, #64]	; (8015260 <tcp_receive+0xd04>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	b29a      	uxth	r2, r3
 8015224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	685b      	ldr	r3, [r3, #4]
 801522a:	b29b      	uxth	r3, r3
 801522c:	1ad3      	subs	r3, r2, r3
 801522e:	b29a      	uxth	r2, r3
 8015230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015232:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015236:	685a      	ldr	r2, [r3, #4]
 8015238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801523a:	891b      	ldrh	r3, [r3, #8]
 801523c:	4619      	mov	r1, r3
 801523e:	4610      	mov	r0, r2
 8015240:	f7fb fdb0 	bl	8010da4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015246:	69fa      	ldr	r2, [r7, #28]
 8015248:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801524a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801524c:	69f8      	ldr	r0, [r7, #28]
 801524e:	f7ff f881 	bl	8014354 <tcp_oos_insert_segment>
                  }
                  break;
 8015252:	e0e2      	b.n	801541a <tcp_receive+0xebe>
 8015254:	2000f1f4 	.word	0x2000f1f4
 8015258:	2000f1f1 	.word	0x2000f1f1
 801525c:	2000f1c4 	.word	0x2000f1c4
 8015260:	2000f1e4 	.word	0x2000f1e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015266:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	f040 80c6 	bne.w	80153fe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015272:	4b80      	ldr	r3, [pc, #512]	; (8015474 <tcp_receive+0xf18>)
 8015274:	681a      	ldr	r2, [r3, #0]
 8015276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015278:	68db      	ldr	r3, [r3, #12]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801527e:	2b00      	cmp	r3, #0
 8015280:	f340 80bd 	ble.w	80153fe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	899b      	ldrh	r3, [r3, #12]
 801528a:	b29b      	uxth	r3, r3
 801528c:	4618      	mov	r0, r3
 801528e:	f7fa f837 	bl	800f300 <lwip_htons>
 8015292:	4603      	mov	r3, r0
 8015294:	b2db      	uxtb	r3, r3
 8015296:	f003 0301 	and.w	r3, r3, #1
 801529a:	2b00      	cmp	r3, #0
 801529c:	f040 80bf 	bne.w	801541e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80152a0:	4875      	ldr	r0, [pc, #468]	; (8015478 <tcp_receive+0xf1c>)
 80152a2:	f7fd fb07 	bl	80128b4 <tcp_seg_copy>
 80152a6:	4602      	mov	r2, r0
 80152a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80152ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	f000 80b6 	beq.w	8015422 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80152b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	685b      	ldr	r3, [r3, #4]
 80152bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80152be:	8912      	ldrh	r2, [r2, #8]
 80152c0:	441a      	add	r2, r3
 80152c2:	4b6c      	ldr	r3, [pc, #432]	; (8015474 <tcp_receive+0xf18>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	dd12      	ble.n	80152f2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80152cc:	4b69      	ldr	r3, [pc, #420]	; (8015474 <tcp_receive+0xf18>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	b29a      	uxth	r2, r3
 80152d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	b29a      	uxth	r2, r3
 80152de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80152e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e4:	685a      	ldr	r2, [r3, #4]
 80152e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e8:	891b      	ldrh	r3, [r3, #8]
 80152ea:	4619      	mov	r1, r3
 80152ec:	4610      	mov	r0, r2
 80152ee:	f7fb fd59 	bl	8010da4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80152f2:	4b62      	ldr	r3, [pc, #392]	; (801547c <tcp_receive+0xf20>)
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	461a      	mov	r2, r3
 80152f8:	4b5e      	ldr	r3, [pc, #376]	; (8015474 <tcp_receive+0xf18>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	441a      	add	r2, r3
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015302:	6879      	ldr	r1, [r7, #4]
 8015304:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015306:	440b      	add	r3, r1
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	2b00      	cmp	r3, #0
 801530c:	f340 8089 	ble.w	8015422 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	899b      	ldrh	r3, [r3, #12]
 8015318:	b29b      	uxth	r3, r3
 801531a:	4618      	mov	r0, r3
 801531c:	f7f9 fff0 	bl	800f300 <lwip_htons>
 8015320:	4603      	mov	r3, r0
 8015322:	b2db      	uxtb	r3, r3
 8015324:	f003 0301 	and.w	r3, r3, #1
 8015328:	2b00      	cmp	r3, #0
 801532a:	d022      	beq.n	8015372 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	68db      	ldr	r3, [r3, #12]
 8015332:	899b      	ldrh	r3, [r3, #12]
 8015334:	b29b      	uxth	r3, r3
 8015336:	b21b      	sxth	r3, r3
 8015338:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801533c:	b21c      	sxth	r4, r3
 801533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	899b      	ldrh	r3, [r3, #12]
 8015346:	b29b      	uxth	r3, r3
 8015348:	4618      	mov	r0, r3
 801534a:	f7f9 ffd9 	bl	800f300 <lwip_htons>
 801534e:	4603      	mov	r3, r0
 8015350:	b2db      	uxtb	r3, r3
 8015352:	b29b      	uxth	r3, r3
 8015354:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015358:	b29b      	uxth	r3, r3
 801535a:	4618      	mov	r0, r3
 801535c:	f7f9 ffd0 	bl	800f300 <lwip_htons>
 8015360:	4603      	mov	r3, r0
 8015362:	b21b      	sxth	r3, r3
 8015364:	4323      	orrs	r3, r4
 8015366:	b21a      	sxth	r2, r3
 8015368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	68db      	ldr	r3, [r3, #12]
 801536e:	b292      	uxth	r2, r2
 8015370:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015376:	b29a      	uxth	r2, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801537c:	4413      	add	r3, r2
 801537e:	b299      	uxth	r1, r3
 8015380:	4b3c      	ldr	r3, [pc, #240]	; (8015474 <tcp_receive+0xf18>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	b29a      	uxth	r2, r3
 8015386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	1a8a      	subs	r2, r1, r2
 801538c:	b292      	uxth	r2, r2
 801538e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	685a      	ldr	r2, [r3, #4]
 8015396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	891b      	ldrh	r3, [r3, #8]
 801539c:	4619      	mov	r1, r3
 801539e:	4610      	mov	r0, r2
 80153a0:	f7fb fd00 	bl	8010da4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80153a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	891c      	ldrh	r4, [r3, #8]
 80153aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	68db      	ldr	r3, [r3, #12]
 80153b0:	899b      	ldrh	r3, [r3, #12]
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7f9 ffa3 	bl	800f300 <lwip_htons>
 80153ba:	4603      	mov	r3, r0
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	f003 0303 	and.w	r3, r3, #3
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d001      	beq.n	80153ca <tcp_receive+0xe6e>
 80153c6:	2301      	movs	r3, #1
 80153c8:	e000      	b.n	80153cc <tcp_receive+0xe70>
 80153ca:	2300      	movs	r3, #0
 80153cc:	4423      	add	r3, r4
 80153ce:	b29a      	uxth	r2, r3
 80153d0:	4b2a      	ldr	r3, [pc, #168]	; (801547c <tcp_receive+0xf20>)
 80153d2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80153d4:	4b29      	ldr	r3, [pc, #164]	; (801547c <tcp_receive+0xf20>)
 80153d6:	881b      	ldrh	r3, [r3, #0]
 80153d8:	461a      	mov	r2, r3
 80153da:	4b26      	ldr	r3, [pc, #152]	; (8015474 <tcp_receive+0xf18>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	441a      	add	r2, r3
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153e4:	6879      	ldr	r1, [r7, #4]
 80153e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80153e8:	440b      	add	r3, r1
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d019      	beq.n	8015422 <tcp_receive+0xec6>
 80153ee:	4b24      	ldr	r3, [pc, #144]	; (8015480 <tcp_receive+0xf24>)
 80153f0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80153f4:	4923      	ldr	r1, [pc, #140]	; (8015484 <tcp_receive+0xf28>)
 80153f6:	4824      	ldr	r0, [pc, #144]	; (8015488 <tcp_receive+0xf2c>)
 80153f8:	f005 fb6a 	bl	801aad0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80153fc:	e011      	b.n	8015422 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80153fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	63bb      	str	r3, [r7, #56]	; 0x38
 8015404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015406:	2b00      	cmp	r3, #0
 8015408:	f47f aea4 	bne.w	8015154 <tcp_receive+0xbf8>
 801540c:	e00a      	b.n	8015424 <tcp_receive+0xec8>
                break;
 801540e:	bf00      	nop
 8015410:	e008      	b.n	8015424 <tcp_receive+0xec8>
                break;
 8015412:	bf00      	nop
 8015414:	e006      	b.n	8015424 <tcp_receive+0xec8>
                  break;
 8015416:	bf00      	nop
 8015418:	e004      	b.n	8015424 <tcp_receive+0xec8>
                  break;
 801541a:	bf00      	nop
 801541c:	e002      	b.n	8015424 <tcp_receive+0xec8>
                  break;
 801541e:	bf00      	nop
 8015420:	e000      	b.n	8015424 <tcp_receive+0xec8>
                break;
 8015422:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f001 fa33 	bl	8016890 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801542a:	e003      	b.n	8015434 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f001 fa2f 	bl	8016890 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015432:	e01a      	b.n	801546a <tcp_receive+0xf0e>
 8015434:	e019      	b.n	801546a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015436:	4b0f      	ldr	r3, [pc, #60]	; (8015474 <tcp_receive+0xf18>)
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801543e:	1ad3      	subs	r3, r2, r3
 8015440:	2b00      	cmp	r3, #0
 8015442:	db0a      	blt.n	801545a <tcp_receive+0xefe>
 8015444:	4b0b      	ldr	r3, [pc, #44]	; (8015474 <tcp_receive+0xf18>)
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801544c:	6879      	ldr	r1, [r7, #4]
 801544e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015450:	440b      	add	r3, r1
 8015452:	1ad3      	subs	r3, r2, r3
 8015454:	3301      	adds	r3, #1
 8015456:	2b00      	cmp	r3, #0
 8015458:	dd07      	ble.n	801546a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	8b5b      	ldrh	r3, [r3, #26]
 801545e:	f043 0302 	orr.w	r3, r3, #2
 8015462:	b29a      	uxth	r2, r3
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015468:	e7ff      	b.n	801546a <tcp_receive+0xf0e>
 801546a:	bf00      	nop
 801546c:	3750      	adds	r7, #80	; 0x50
 801546e:	46bd      	mov	sp, r7
 8015470:	bdb0      	pop	{r4, r5, r7, pc}
 8015472:	bf00      	nop
 8015474:	2000f1e4 	.word	0x2000f1e4
 8015478:	2000f1c4 	.word	0x2000f1c4
 801547c:	2000f1ee 	.word	0x2000f1ee
 8015480:	0801e520 	.word	0x0801e520
 8015484:	0801e8c8 	.word	0x0801e8c8
 8015488:	0801e56c 	.word	0x0801e56c

0801548c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015492:	4b15      	ldr	r3, [pc, #84]	; (80154e8 <tcp_get_next_optbyte+0x5c>)
 8015494:	881b      	ldrh	r3, [r3, #0]
 8015496:	1c5a      	adds	r2, r3, #1
 8015498:	b291      	uxth	r1, r2
 801549a:	4a13      	ldr	r2, [pc, #76]	; (80154e8 <tcp_get_next_optbyte+0x5c>)
 801549c:	8011      	strh	r1, [r2, #0]
 801549e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80154a0:	4b12      	ldr	r3, [pc, #72]	; (80154ec <tcp_get_next_optbyte+0x60>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d004      	beq.n	80154b2 <tcp_get_next_optbyte+0x26>
 80154a8:	4b11      	ldr	r3, [pc, #68]	; (80154f0 <tcp_get_next_optbyte+0x64>)
 80154aa:	881b      	ldrh	r3, [r3, #0]
 80154ac:	88fa      	ldrh	r2, [r7, #6]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d208      	bcs.n	80154c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80154b2:	4b10      	ldr	r3, [pc, #64]	; (80154f4 <tcp_get_next_optbyte+0x68>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	3314      	adds	r3, #20
 80154b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80154ba:	88fb      	ldrh	r3, [r7, #6]
 80154bc:	683a      	ldr	r2, [r7, #0]
 80154be:	4413      	add	r3, r2
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	e00b      	b.n	80154dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80154c4:	88fb      	ldrh	r3, [r7, #6]
 80154c6:	b2da      	uxtb	r2, r3
 80154c8:	4b09      	ldr	r3, [pc, #36]	; (80154f0 <tcp_get_next_optbyte+0x64>)
 80154ca:	881b      	ldrh	r3, [r3, #0]
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	1ad3      	subs	r3, r2, r3
 80154d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80154d2:	4b06      	ldr	r3, [pc, #24]	; (80154ec <tcp_get_next_optbyte+0x60>)
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	797b      	ldrb	r3, [r7, #5]
 80154d8:	4413      	add	r3, r2
 80154da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80154dc:	4618      	mov	r0, r3
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr
 80154e8:	2000f1e0 	.word	0x2000f1e0
 80154ec:	2000f1dc 	.word	0x2000f1dc
 80154f0:	2000f1da 	.word	0x2000f1da
 80154f4:	2000f1d4 	.word	0x2000f1d4

080154f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d106      	bne.n	8015514 <tcp_parseopt+0x1c>
 8015506:	4b32      	ldr	r3, [pc, #200]	; (80155d0 <tcp_parseopt+0xd8>)
 8015508:	f240 727d 	movw	r2, #1917	; 0x77d
 801550c:	4931      	ldr	r1, [pc, #196]	; (80155d4 <tcp_parseopt+0xdc>)
 801550e:	4832      	ldr	r0, [pc, #200]	; (80155d8 <tcp_parseopt+0xe0>)
 8015510:	f005 fade 	bl	801aad0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015514:	4b31      	ldr	r3, [pc, #196]	; (80155dc <tcp_parseopt+0xe4>)
 8015516:	881b      	ldrh	r3, [r3, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d055      	beq.n	80155c8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801551c:	4b30      	ldr	r3, [pc, #192]	; (80155e0 <tcp_parseopt+0xe8>)
 801551e:	2200      	movs	r2, #0
 8015520:	801a      	strh	r2, [r3, #0]
 8015522:	e045      	b.n	80155b0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015524:	f7ff ffb2 	bl	801548c <tcp_get_next_optbyte>
 8015528:	4603      	mov	r3, r0
 801552a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801552c:	7bfb      	ldrb	r3, [r7, #15]
 801552e:	2b02      	cmp	r3, #2
 8015530:	d006      	beq.n	8015540 <tcp_parseopt+0x48>
 8015532:	2b02      	cmp	r3, #2
 8015534:	dc2b      	bgt.n	801558e <tcp_parseopt+0x96>
 8015536:	2b00      	cmp	r3, #0
 8015538:	d041      	beq.n	80155be <tcp_parseopt+0xc6>
 801553a:	2b01      	cmp	r3, #1
 801553c:	d127      	bne.n	801558e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801553e:	e037      	b.n	80155b0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015540:	f7ff ffa4 	bl	801548c <tcp_get_next_optbyte>
 8015544:	4603      	mov	r3, r0
 8015546:	2b04      	cmp	r3, #4
 8015548:	d13b      	bne.n	80155c2 <tcp_parseopt+0xca>
 801554a:	4b25      	ldr	r3, [pc, #148]	; (80155e0 <tcp_parseopt+0xe8>)
 801554c:	881b      	ldrh	r3, [r3, #0]
 801554e:	3301      	adds	r3, #1
 8015550:	4a22      	ldr	r2, [pc, #136]	; (80155dc <tcp_parseopt+0xe4>)
 8015552:	8812      	ldrh	r2, [r2, #0]
 8015554:	4293      	cmp	r3, r2
 8015556:	da34      	bge.n	80155c2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015558:	f7ff ff98 	bl	801548c <tcp_get_next_optbyte>
 801555c:	4603      	mov	r3, r0
 801555e:	b29b      	uxth	r3, r3
 8015560:	021b      	lsls	r3, r3, #8
 8015562:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015564:	f7ff ff92 	bl	801548c <tcp_get_next_optbyte>
 8015568:	4603      	mov	r3, r0
 801556a:	b29a      	uxth	r2, r3
 801556c:	89bb      	ldrh	r3, [r7, #12]
 801556e:	4313      	orrs	r3, r2
 8015570:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015572:	89bb      	ldrh	r3, [r7, #12]
 8015574:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015578:	d804      	bhi.n	8015584 <tcp_parseopt+0x8c>
 801557a:	89bb      	ldrh	r3, [r7, #12]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d001      	beq.n	8015584 <tcp_parseopt+0x8c>
 8015580:	89ba      	ldrh	r2, [r7, #12]
 8015582:	e001      	b.n	8015588 <tcp_parseopt+0x90>
 8015584:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801558c:	e010      	b.n	80155b0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801558e:	f7ff ff7d 	bl	801548c <tcp_get_next_optbyte>
 8015592:	4603      	mov	r3, r0
 8015594:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015596:	7afb      	ldrb	r3, [r7, #11]
 8015598:	2b01      	cmp	r3, #1
 801559a:	d914      	bls.n	80155c6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801559c:	7afb      	ldrb	r3, [r7, #11]
 801559e:	b29a      	uxth	r2, r3
 80155a0:	4b0f      	ldr	r3, [pc, #60]	; (80155e0 <tcp_parseopt+0xe8>)
 80155a2:	881b      	ldrh	r3, [r3, #0]
 80155a4:	4413      	add	r3, r2
 80155a6:	b29b      	uxth	r3, r3
 80155a8:	3b02      	subs	r3, #2
 80155aa:	b29a      	uxth	r2, r3
 80155ac:	4b0c      	ldr	r3, [pc, #48]	; (80155e0 <tcp_parseopt+0xe8>)
 80155ae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80155b0:	4b0b      	ldr	r3, [pc, #44]	; (80155e0 <tcp_parseopt+0xe8>)
 80155b2:	881a      	ldrh	r2, [r3, #0]
 80155b4:	4b09      	ldr	r3, [pc, #36]	; (80155dc <tcp_parseopt+0xe4>)
 80155b6:	881b      	ldrh	r3, [r3, #0]
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d3b3      	bcc.n	8015524 <tcp_parseopt+0x2c>
 80155bc:	e004      	b.n	80155c8 <tcp_parseopt+0xd0>
          return;
 80155be:	bf00      	nop
 80155c0:	e002      	b.n	80155c8 <tcp_parseopt+0xd0>
            return;
 80155c2:	bf00      	nop
 80155c4:	e000      	b.n	80155c8 <tcp_parseopt+0xd0>
            return;
 80155c6:	bf00      	nop
      }
    }
  }
}
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	0801e520 	.word	0x0801e520
 80155d4:	0801e984 	.word	0x0801e984
 80155d8:	0801e56c 	.word	0x0801e56c
 80155dc:	2000f1d8 	.word	0x2000f1d8
 80155e0:	2000f1e0 	.word	0x2000f1e0

080155e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80155e4:	b480      	push	{r7}
 80155e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80155e8:	4b05      	ldr	r3, [pc, #20]	; (8015600 <tcp_trigger_input_pcb_close+0x1c>)
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	f043 0310 	orr.w	r3, r3, #16
 80155f0:	b2da      	uxtb	r2, r3
 80155f2:	4b03      	ldr	r3, [pc, #12]	; (8015600 <tcp_trigger_input_pcb_close+0x1c>)
 80155f4:	701a      	strb	r2, [r3, #0]
}
 80155f6:	bf00      	nop
 80155f8:	46bd      	mov	sp, r7
 80155fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fe:	4770      	bx	lr
 8015600:	2000f1f1 	.word	0x2000f1f1

08015604 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b084      	sub	sp, #16
 8015608:	af00      	add	r7, sp, #0
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d00a      	beq.n	801562c <tcp_route+0x28>
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	7a1b      	ldrb	r3, [r3, #8]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d006      	beq.n	801562c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	7a1b      	ldrb	r3, [r3, #8]
 8015622:	4618      	mov	r0, r3
 8015624:	f7fb f9b6 	bl	8010994 <netif_get_by_index>
 8015628:	4603      	mov	r3, r0
 801562a:	e003      	b.n	8015634 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f003 f965 	bl	80188fc <ip4_route>
 8015632:	4603      	mov	r3, r0
  }
}
 8015634:	4618      	mov	r0, r3
 8015636:	3710      	adds	r7, #16
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801563c:	b590      	push	{r4, r7, lr}
 801563e:	b087      	sub	sp, #28
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	603b      	str	r3, [r7, #0]
 8015648:	4613      	mov	r3, r2
 801564a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d105      	bne.n	801565e <tcp_create_segment+0x22>
 8015652:	4b44      	ldr	r3, [pc, #272]	; (8015764 <tcp_create_segment+0x128>)
 8015654:	22a3      	movs	r2, #163	; 0xa3
 8015656:	4944      	ldr	r1, [pc, #272]	; (8015768 <tcp_create_segment+0x12c>)
 8015658:	4844      	ldr	r0, [pc, #272]	; (801576c <tcp_create_segment+0x130>)
 801565a:	f005 fa39 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d105      	bne.n	8015670 <tcp_create_segment+0x34>
 8015664:	4b3f      	ldr	r3, [pc, #252]	; (8015764 <tcp_create_segment+0x128>)
 8015666:	22a4      	movs	r2, #164	; 0xa4
 8015668:	4941      	ldr	r1, [pc, #260]	; (8015770 <tcp_create_segment+0x134>)
 801566a:	4840      	ldr	r0, [pc, #256]	; (801576c <tcp_create_segment+0x130>)
 801566c:	f005 fa30 	bl	801aad0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015670:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	b2db      	uxtb	r3, r3
 8015678:	f003 0304 	and.w	r3, r3, #4
 801567c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801567e:	2003      	movs	r0, #3
 8015680:	f7fa fde0 	bl	8010244 <memp_malloc>
 8015684:	6138      	str	r0, [r7, #16]
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d104      	bne.n	8015696 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801568c:	68b8      	ldr	r0, [r7, #8]
 801568e:	f7fb fd0f 	bl	80110b0 <pbuf_free>
    return NULL;
 8015692:	2300      	movs	r3, #0
 8015694:	e061      	b.n	801575a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801569c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	2200      	movs	r2, #0
 80156a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	68ba      	ldr	r2, [r7, #8]
 80156a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	891a      	ldrh	r2, [r3, #8]
 80156ae:	7dfb      	ldrb	r3, [r7, #23]
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d205      	bcs.n	80156c2 <tcp_create_segment+0x86>
 80156b6:	4b2b      	ldr	r3, [pc, #172]	; (8015764 <tcp_create_segment+0x128>)
 80156b8:	22b0      	movs	r2, #176	; 0xb0
 80156ba:	492e      	ldr	r1, [pc, #184]	; (8015774 <tcp_create_segment+0x138>)
 80156bc:	482b      	ldr	r0, [pc, #172]	; (801576c <tcp_create_segment+0x130>)
 80156be:	f005 fa07 	bl	801aad0 <iprintf>
  seg->len = p->tot_len - optlen;
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	891a      	ldrh	r2, [r3, #8]
 80156c6:	7dfb      	ldrb	r3, [r7, #23]
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80156d2:	2114      	movs	r1, #20
 80156d4:	68b8      	ldr	r0, [r7, #8]
 80156d6:	f7fb fc55 	bl	8010f84 <pbuf_add_header>
 80156da:	4603      	mov	r3, r0
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d004      	beq.n	80156ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80156e0:	6938      	ldr	r0, [r7, #16]
 80156e2:	f7fd f8ce 	bl	8012882 <tcp_seg_free>
    return NULL;
 80156e6:	2300      	movs	r3, #0
 80156e8:	e037      	b.n	801575a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	685a      	ldr	r2, [r3, #4]
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	8ada      	ldrh	r2, [r3, #22]
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	68dc      	ldr	r4, [r3, #12]
 80156fc:	4610      	mov	r0, r2
 80156fe:	f7f9 fdff 	bl	800f300 <lwip_htons>
 8015702:	4603      	mov	r3, r0
 8015704:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	8b1a      	ldrh	r2, [r3, #24]
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	68dc      	ldr	r4, [r3, #12]
 801570e:	4610      	mov	r0, r2
 8015710:	f7f9 fdf6 	bl	800f300 <lwip_htons>
 8015714:	4603      	mov	r3, r0
 8015716:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	68dc      	ldr	r4, [r3, #12]
 801571c:	6838      	ldr	r0, [r7, #0]
 801571e:	f7f9 fe04 	bl	800f32a <lwip_htonl>
 8015722:	4603      	mov	r3, r0
 8015724:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015726:	7dfb      	ldrb	r3, [r7, #23]
 8015728:	089b      	lsrs	r3, r3, #2
 801572a:	b2db      	uxtb	r3, r3
 801572c:	b29b      	uxth	r3, r3
 801572e:	3305      	adds	r3, #5
 8015730:	b29b      	uxth	r3, r3
 8015732:	031b      	lsls	r3, r3, #12
 8015734:	b29a      	uxth	r2, r3
 8015736:	79fb      	ldrb	r3, [r7, #7]
 8015738:	b29b      	uxth	r3, r3
 801573a:	4313      	orrs	r3, r2
 801573c:	b29a      	uxth	r2, r3
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	68dc      	ldr	r4, [r3, #12]
 8015742:	4610      	mov	r0, r2
 8015744:	f7f9 fddc 	bl	800f300 <lwip_htons>
 8015748:	4603      	mov	r3, r0
 801574a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	68db      	ldr	r3, [r3, #12]
 8015750:	2200      	movs	r2, #0
 8015752:	749a      	strb	r2, [r3, #18]
 8015754:	2200      	movs	r2, #0
 8015756:	74da      	strb	r2, [r3, #19]
  return seg;
 8015758:	693b      	ldr	r3, [r7, #16]
}
 801575a:	4618      	mov	r0, r3
 801575c:	371c      	adds	r7, #28
 801575e:	46bd      	mov	sp, r7
 8015760:	bd90      	pop	{r4, r7, pc}
 8015762:	bf00      	nop
 8015764:	0801e9a0 	.word	0x0801e9a0
 8015768:	0801e9d4 	.word	0x0801e9d4
 801576c:	0801e9f4 	.word	0x0801e9f4
 8015770:	0801ea1c 	.word	0x0801ea1c
 8015774:	0801ea40 	.word	0x0801ea40

08015778 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015778:	b590      	push	{r4, r7, lr}
 801577a:	b08b      	sub	sp, #44	; 0x2c
 801577c:	af02      	add	r7, sp, #8
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	460b      	mov	r3, r1
 8015782:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015784:	2300      	movs	r3, #0
 8015786:	61fb      	str	r3, [r7, #28]
 8015788:	2300      	movs	r3, #0
 801578a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801578c:	2300      	movs	r3, #0
 801578e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d106      	bne.n	80157a4 <tcp_split_unsent_seg+0x2c>
 8015796:	4b95      	ldr	r3, [pc, #596]	; (80159ec <tcp_split_unsent_seg+0x274>)
 8015798:	f240 324b 	movw	r2, #843	; 0x34b
 801579c:	4994      	ldr	r1, [pc, #592]	; (80159f0 <tcp_split_unsent_seg+0x278>)
 801579e:	4895      	ldr	r0, [pc, #596]	; (80159f4 <tcp_split_unsent_seg+0x27c>)
 80157a0:	f005 f996 	bl	801aad0 <iprintf>

  useg = pcb->unsent;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d102      	bne.n	80157b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80157b0:	f04f 33ff 	mov.w	r3, #4294967295
 80157b4:	e116      	b.n	80159e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80157b6:	887b      	ldrh	r3, [r7, #2]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d109      	bne.n	80157d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80157bc:	4b8b      	ldr	r3, [pc, #556]	; (80159ec <tcp_split_unsent_seg+0x274>)
 80157be:	f240 3253 	movw	r2, #851	; 0x353
 80157c2:	498d      	ldr	r1, [pc, #564]	; (80159f8 <tcp_split_unsent_seg+0x280>)
 80157c4:	488b      	ldr	r0, [pc, #556]	; (80159f4 <tcp_split_unsent_seg+0x27c>)
 80157c6:	f005 f983 	bl	801aad0 <iprintf>
    return ERR_VAL;
 80157ca:	f06f 0305 	mvn.w	r3, #5
 80157ce:	e109      	b.n	80159e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	891b      	ldrh	r3, [r3, #8]
 80157d4:	887a      	ldrh	r2, [r7, #2]
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d301      	bcc.n	80157de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80157da:	2300      	movs	r3, #0
 80157dc:	e102      	b.n	80159e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157e2:	887a      	ldrh	r2, [r7, #2]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d906      	bls.n	80157f6 <tcp_split_unsent_seg+0x7e>
 80157e8:	4b80      	ldr	r3, [pc, #512]	; (80159ec <tcp_split_unsent_seg+0x274>)
 80157ea:	f240 325b 	movw	r2, #859	; 0x35b
 80157ee:	4983      	ldr	r1, [pc, #524]	; (80159fc <tcp_split_unsent_seg+0x284>)
 80157f0:	4880      	ldr	r0, [pc, #512]	; (80159f4 <tcp_split_unsent_seg+0x27c>)
 80157f2:	f005 f96d 	bl	801aad0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	891b      	ldrh	r3, [r3, #8]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d106      	bne.n	801580c <tcp_split_unsent_seg+0x94>
 80157fe:	4b7b      	ldr	r3, [pc, #492]	; (80159ec <tcp_split_unsent_seg+0x274>)
 8015800:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015804:	497e      	ldr	r1, [pc, #504]	; (8015a00 <tcp_split_unsent_seg+0x288>)
 8015806:	487b      	ldr	r0, [pc, #492]	; (80159f4 <tcp_split_unsent_seg+0x27c>)
 8015808:	f005 f962 	bl	801aad0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	7a9b      	ldrb	r3, [r3, #10]
 8015810:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015812:	7bfb      	ldrb	r3, [r7, #15]
 8015814:	009b      	lsls	r3, r3, #2
 8015816:	b2db      	uxtb	r3, r3
 8015818:	f003 0304 	and.w	r3, r3, #4
 801581c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	891a      	ldrh	r2, [r3, #8]
 8015822:	887b      	ldrh	r3, [r7, #2]
 8015824:	1ad3      	subs	r3, r2, r3
 8015826:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015828:	7bbb      	ldrb	r3, [r7, #14]
 801582a:	b29a      	uxth	r2, r3
 801582c:	89bb      	ldrh	r3, [r7, #12]
 801582e:	4413      	add	r3, r2
 8015830:	b29b      	uxth	r3, r3
 8015832:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015836:	4619      	mov	r1, r3
 8015838:	2036      	movs	r0, #54	; 0x36
 801583a:	f7fb f955 	bl	8010ae8 <pbuf_alloc>
 801583e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	2b00      	cmp	r3, #0
 8015844:	f000 80b7 	beq.w	80159b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	891a      	ldrh	r2, [r3, #8]
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	891b      	ldrh	r3, [r3, #8]
 8015852:	1ad3      	subs	r3, r2, r3
 8015854:	b29a      	uxth	r2, r3
 8015856:	887b      	ldrh	r3, [r7, #2]
 8015858:	4413      	add	r3, r2
 801585a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	6858      	ldr	r0, [r3, #4]
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	685a      	ldr	r2, [r3, #4]
 8015864:	7bbb      	ldrb	r3, [r7, #14]
 8015866:	18d1      	adds	r1, r2, r3
 8015868:	897b      	ldrh	r3, [r7, #10]
 801586a:	89ba      	ldrh	r2, [r7, #12]
 801586c:	f7fb fe26 	bl	80114bc <pbuf_copy_partial>
 8015870:	4603      	mov	r3, r0
 8015872:	461a      	mov	r2, r3
 8015874:	89bb      	ldrh	r3, [r7, #12]
 8015876:	4293      	cmp	r3, r2
 8015878:	f040 809f 	bne.w	80159ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	899b      	ldrh	r3, [r3, #12]
 8015882:	b29b      	uxth	r3, r3
 8015884:	4618      	mov	r0, r3
 8015886:	f7f9 fd3b 	bl	800f300 <lwip_htons>
 801588a:	4603      	mov	r3, r0
 801588c:	b2db      	uxtb	r3, r3
 801588e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015892:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015894:	2300      	movs	r3, #0
 8015896:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015898:	7efb      	ldrb	r3, [r7, #27]
 801589a:	f003 0308 	and.w	r3, r3, #8
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d007      	beq.n	80158b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80158a2:	7efb      	ldrb	r3, [r7, #27]
 80158a4:	f023 0308 	bic.w	r3, r3, #8
 80158a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80158aa:	7ebb      	ldrb	r3, [r7, #26]
 80158ac:	f043 0308 	orr.w	r3, r3, #8
 80158b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80158b2:	7efb      	ldrb	r3, [r7, #27]
 80158b4:	f003 0301 	and.w	r3, r3, #1
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d007      	beq.n	80158cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80158bc:	7efb      	ldrb	r3, [r7, #27]
 80158be:	f023 0301 	bic.w	r3, r3, #1
 80158c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80158c4:	7ebb      	ldrb	r3, [r7, #26]
 80158c6:	f043 0301 	orr.w	r3, r3, #1
 80158ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7f9 fd29 	bl	800f32a <lwip_htonl>
 80158d8:	4602      	mov	r2, r0
 80158da:	887b      	ldrh	r3, [r7, #2]
 80158dc:	18d1      	adds	r1, r2, r3
 80158de:	7eba      	ldrb	r2, [r7, #26]
 80158e0:	7bfb      	ldrb	r3, [r7, #15]
 80158e2:	9300      	str	r3, [sp, #0]
 80158e4:	460b      	mov	r3, r1
 80158e6:	6939      	ldr	r1, [r7, #16]
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff fea7 	bl	801563c <tcp_create_segment>
 80158ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80158f0:	69fb      	ldr	r3, [r7, #28]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d063      	beq.n	80159be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7fb fc66 	bl	80111cc <pbuf_clen>
 8015900:	4603      	mov	r3, r0
 8015902:	461a      	mov	r2, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801590a:	1a9b      	subs	r3, r3, r2
 801590c:	b29a      	uxth	r2, r3
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	6858      	ldr	r0, [r3, #4]
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	891a      	ldrh	r2, [r3, #8]
 801591e:	89bb      	ldrh	r3, [r7, #12]
 8015920:	1ad3      	subs	r3, r2, r3
 8015922:	b29b      	uxth	r3, r3
 8015924:	4619      	mov	r1, r3
 8015926:	f7fb fa3d 	bl	8010da4 <pbuf_realloc>
  useg->len -= remainder;
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	891a      	ldrh	r2, [r3, #8]
 801592e:	89bb      	ldrh	r3, [r7, #12]
 8015930:	1ad3      	subs	r3, r2, r3
 8015932:	b29a      	uxth	r2, r3
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	899b      	ldrh	r3, [r3, #12]
 801593e:	b29c      	uxth	r4, r3
 8015940:	7efb      	ldrb	r3, [r7, #27]
 8015942:	b29b      	uxth	r3, r3
 8015944:	4618      	mov	r0, r3
 8015946:	f7f9 fcdb 	bl	800f300 <lwip_htons>
 801594a:	4603      	mov	r3, r0
 801594c:	461a      	mov	r2, r3
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	68db      	ldr	r3, [r3, #12]
 8015952:	4322      	orrs	r2, r4
 8015954:	b292      	uxth	r2, r2
 8015956:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	f7fb fc35 	bl	80111cc <pbuf_clen>
 8015962:	4603      	mov	r3, r0
 8015964:	461a      	mov	r2, r3
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801596c:	4413      	add	r3, r2
 801596e:	b29a      	uxth	r2, r3
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	4618      	mov	r0, r3
 801597c:	f7fb fc26 	bl	80111cc <pbuf_clen>
 8015980:	4603      	mov	r3, r0
 8015982:	461a      	mov	r2, r3
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801598a:	4413      	add	r3, r2
 801598c:	b29a      	uxth	r2, r3
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	681a      	ldr	r2, [r3, #0]
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	69fa      	ldr	r2, [r7, #28]
 80159a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d103      	bne.n	80159b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	2200      	movs	r2, #0
 80159ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80159b2:	2300      	movs	r3, #0
 80159b4:	e016      	b.n	80159e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80159b6:	bf00      	nop
 80159b8:	e002      	b.n	80159c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80159ba:	bf00      	nop
 80159bc:	e000      	b.n	80159c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80159be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d006      	beq.n	80159d4 <tcp_split_unsent_seg+0x25c>
 80159c6:	4b09      	ldr	r3, [pc, #36]	; (80159ec <tcp_split_unsent_seg+0x274>)
 80159c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80159cc:	490d      	ldr	r1, [pc, #52]	; (8015a04 <tcp_split_unsent_seg+0x28c>)
 80159ce:	4809      	ldr	r0, [pc, #36]	; (80159f4 <tcp_split_unsent_seg+0x27c>)
 80159d0:	f005 f87e 	bl	801aad0 <iprintf>
  if (p != NULL) {
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d002      	beq.n	80159e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80159da:	6938      	ldr	r0, [r7, #16]
 80159dc:	f7fb fb68 	bl	80110b0 <pbuf_free>
  }

  return ERR_MEM;
 80159e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3724      	adds	r7, #36	; 0x24
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd90      	pop	{r4, r7, pc}
 80159ec:	0801e9a0 	.word	0x0801e9a0
 80159f0:	0801ed34 	.word	0x0801ed34
 80159f4:	0801e9f4 	.word	0x0801e9f4
 80159f8:	0801ed58 	.word	0x0801ed58
 80159fc:	0801ed7c 	.word	0x0801ed7c
 8015a00:	0801ed8c 	.word	0x0801ed8c
 8015a04:	0801ed9c 	.word	0x0801ed9c

08015a08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015a08:	b590      	push	{r4, r7, lr}
 8015a0a:	b085      	sub	sp, #20
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d106      	bne.n	8015a24 <tcp_send_fin+0x1c>
 8015a16:	4b21      	ldr	r3, [pc, #132]	; (8015a9c <tcp_send_fin+0x94>)
 8015a18:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015a1c:	4920      	ldr	r1, [pc, #128]	; (8015aa0 <tcp_send_fin+0x98>)
 8015a1e:	4821      	ldr	r0, [pc, #132]	; (8015aa4 <tcp_send_fin+0x9c>)
 8015a20:	f005 f856 	bl	801aad0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d02e      	beq.n	8015a8a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a30:	60fb      	str	r3, [r7, #12]
 8015a32:	e002      	b.n	8015a3a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d1f8      	bne.n	8015a34 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	68db      	ldr	r3, [r3, #12]
 8015a46:	899b      	ldrh	r3, [r3, #12]
 8015a48:	b29b      	uxth	r3, r3
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7f9 fc58 	bl	800f300 <lwip_htons>
 8015a50:	4603      	mov	r3, r0
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	f003 0307 	and.w	r3, r3, #7
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d116      	bne.n	8015a8a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	68db      	ldr	r3, [r3, #12]
 8015a60:	899b      	ldrh	r3, [r3, #12]
 8015a62:	b29c      	uxth	r4, r3
 8015a64:	2001      	movs	r0, #1
 8015a66:	f7f9 fc4b 	bl	800f300 <lwip_htons>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	4322      	orrs	r2, r4
 8015a74:	b292      	uxth	r2, r2
 8015a76:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	8b5b      	ldrh	r3, [r3, #26]
 8015a7c:	f043 0320 	orr.w	r3, r3, #32
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015a86:	2300      	movs	r3, #0
 8015a88:	e004      	b.n	8015a94 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015a8a:	2101      	movs	r1, #1
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	f000 f80b 	bl	8015aa8 <tcp_enqueue_flags>
 8015a92:	4603      	mov	r3, r0
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3714      	adds	r7, #20
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd90      	pop	{r4, r7, pc}
 8015a9c:	0801e9a0 	.word	0x0801e9a0
 8015aa0:	0801eda8 	.word	0x0801eda8
 8015aa4:	0801e9f4 	.word	0x0801e9f4

08015aa8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08a      	sub	sp, #40	; 0x28
 8015aac:	af02      	add	r7, sp, #8
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015abc:	78fb      	ldrb	r3, [r7, #3]
 8015abe:	f003 0303 	and.w	r3, r3, #3
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d106      	bne.n	8015ad4 <tcp_enqueue_flags+0x2c>
 8015ac6:	4b67      	ldr	r3, [pc, #412]	; (8015c64 <tcp_enqueue_flags+0x1bc>)
 8015ac8:	f240 4211 	movw	r2, #1041	; 0x411
 8015acc:	4966      	ldr	r1, [pc, #408]	; (8015c68 <tcp_enqueue_flags+0x1c0>)
 8015ace:	4867      	ldr	r0, [pc, #412]	; (8015c6c <tcp_enqueue_flags+0x1c4>)
 8015ad0:	f004 fffe 	bl	801aad0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d106      	bne.n	8015ae8 <tcp_enqueue_flags+0x40>
 8015ada:	4b62      	ldr	r3, [pc, #392]	; (8015c64 <tcp_enqueue_flags+0x1bc>)
 8015adc:	f240 4213 	movw	r2, #1043	; 0x413
 8015ae0:	4963      	ldr	r1, [pc, #396]	; (8015c70 <tcp_enqueue_flags+0x1c8>)
 8015ae2:	4862      	ldr	r0, [pc, #392]	; (8015c6c <tcp_enqueue_flags+0x1c4>)
 8015ae4:	f004 fff4 	bl	801aad0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015ae8:	78fb      	ldrb	r3, [r7, #3]
 8015aea:	f003 0302 	and.w	r3, r3, #2
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d001      	beq.n	8015af6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015af2:	2301      	movs	r3, #1
 8015af4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015af6:	7ffb      	ldrb	r3, [r7, #31]
 8015af8:	009b      	lsls	r3, r3, #2
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	f003 0304 	and.w	r3, r3, #4
 8015b00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015b02:	7dfb      	ldrb	r3, [r7, #23]
 8015b04:	b29b      	uxth	r3, r3
 8015b06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b0a:	4619      	mov	r1, r3
 8015b0c:	2036      	movs	r0, #54	; 0x36
 8015b0e:	f7fa ffeb 	bl	8010ae8 <pbuf_alloc>
 8015b12:	6138      	str	r0, [r7, #16]
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d109      	bne.n	8015b2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	8b5b      	ldrh	r3, [r3, #26]
 8015b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015b28:	f04f 33ff 	mov.w	r3, #4294967295
 8015b2c:	e095      	b.n	8015c5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	895a      	ldrh	r2, [r3, #10]
 8015b32:	7dfb      	ldrb	r3, [r7, #23]
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d206      	bcs.n	8015b48 <tcp_enqueue_flags+0xa0>
 8015b3a:	4b4a      	ldr	r3, [pc, #296]	; (8015c64 <tcp_enqueue_flags+0x1bc>)
 8015b3c:	f240 4239 	movw	r2, #1081	; 0x439
 8015b40:	494c      	ldr	r1, [pc, #304]	; (8015c74 <tcp_enqueue_flags+0x1cc>)
 8015b42:	484a      	ldr	r0, [pc, #296]	; (8015c6c <tcp_enqueue_flags+0x1c4>)
 8015b44:	f004 ffc4 	bl	801aad0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015b4c:	78fa      	ldrb	r2, [r7, #3]
 8015b4e:	7ffb      	ldrb	r3, [r7, #31]
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	460b      	mov	r3, r1
 8015b54:	6939      	ldr	r1, [r7, #16]
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	f7ff fd70 	bl	801563c <tcp_create_segment>
 8015b5c:	60f8      	str	r0, [r7, #12]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d109      	bne.n	8015b78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	8b5b      	ldrh	r3, [r3, #26]
 8015b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b6c:	b29a      	uxth	r2, r3
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015b72:	f04f 33ff 	mov.w	r3, #4294967295
 8015b76:	e070      	b.n	8015c5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	f003 0303 	and.w	r3, r3, #3
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d006      	beq.n	8015b92 <tcp_enqueue_flags+0xea>
 8015b84:	4b37      	ldr	r3, [pc, #220]	; (8015c64 <tcp_enqueue_flags+0x1bc>)
 8015b86:	f240 4242 	movw	r2, #1090	; 0x442
 8015b8a:	493b      	ldr	r1, [pc, #236]	; (8015c78 <tcp_enqueue_flags+0x1d0>)
 8015b8c:	4837      	ldr	r0, [pc, #220]	; (8015c6c <tcp_enqueue_flags+0x1c4>)
 8015b8e:	f004 ff9f 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	891b      	ldrh	r3, [r3, #8]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d006      	beq.n	8015ba8 <tcp_enqueue_flags+0x100>
 8015b9a:	4b32      	ldr	r3, [pc, #200]	; (8015c64 <tcp_enqueue_flags+0x1bc>)
 8015b9c:	f240 4243 	movw	r2, #1091	; 0x443
 8015ba0:	4936      	ldr	r1, [pc, #216]	; (8015c7c <tcp_enqueue_flags+0x1d4>)
 8015ba2:	4832      	ldr	r0, [pc, #200]	; (8015c6c <tcp_enqueue_flags+0x1c4>)
 8015ba4:	f004 ff94 	bl	801aad0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d103      	bne.n	8015bb8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	68fa      	ldr	r2, [r7, #12]
 8015bb4:	66da      	str	r2, [r3, #108]	; 0x6c
 8015bb6:	e00d      	b.n	8015bd4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bbc:	61bb      	str	r3, [r7, #24]
 8015bbe:	e002      	b.n	8015bc6 <tcp_enqueue_flags+0x11e>
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	61bb      	str	r3, [r7, #24]
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d1f8      	bne.n	8015bc0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	68fa      	ldr	r2, [r7, #12]
 8015bd2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015bdc:	78fb      	ldrb	r3, [r7, #3]
 8015bde:	f003 0302 	and.w	r3, r3, #2
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d104      	bne.n	8015bf0 <tcp_enqueue_flags+0x148>
 8015be6:	78fb      	ldrb	r3, [r7, #3]
 8015be8:	f003 0301 	and.w	r3, r3, #1
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d004      	beq.n	8015bfa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bf4:	1c5a      	adds	r2, r3, #1
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015bfa:	78fb      	ldrb	r3, [r7, #3]
 8015bfc:	f003 0301 	and.w	r3, r3, #1
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d006      	beq.n	8015c12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	8b5b      	ldrh	r3, [r3, #26]
 8015c08:	f043 0320 	orr.w	r3, r3, #32
 8015c0c:	b29a      	uxth	r2, r3
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fb fad8 	bl	80111cc <pbuf_clen>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	461a      	mov	r2, r3
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c26:	4413      	add	r3, r2
 8015c28:	b29a      	uxth	r2, r3
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d00e      	beq.n	8015c58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d10a      	bne.n	8015c58 <tcp_enqueue_flags+0x1b0>
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d106      	bne.n	8015c58 <tcp_enqueue_flags+0x1b0>
 8015c4a:	4b06      	ldr	r3, [pc, #24]	; (8015c64 <tcp_enqueue_flags+0x1bc>)
 8015c4c:	f240 4265 	movw	r2, #1125	; 0x465
 8015c50:	490b      	ldr	r1, [pc, #44]	; (8015c80 <tcp_enqueue_flags+0x1d8>)
 8015c52:	4806      	ldr	r0, [pc, #24]	; (8015c6c <tcp_enqueue_flags+0x1c4>)
 8015c54:	f004 ff3c 	bl	801aad0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015c58:	2300      	movs	r3, #0
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3720      	adds	r7, #32
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}
 8015c62:	bf00      	nop
 8015c64:	0801e9a0 	.word	0x0801e9a0
 8015c68:	0801edc4 	.word	0x0801edc4
 8015c6c:	0801e9f4 	.word	0x0801e9f4
 8015c70:	0801ee1c 	.word	0x0801ee1c
 8015c74:	0801ee3c 	.word	0x0801ee3c
 8015c78:	0801ee78 	.word	0x0801ee78
 8015c7c:	0801ee90 	.word	0x0801ee90
 8015c80:	0801eebc 	.word	0x0801eebc

08015c84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015c84:	b5b0      	push	{r4, r5, r7, lr}
 8015c86:	b08a      	sub	sp, #40	; 0x28
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <tcp_output+0x1c>
 8015c92:	4b8a      	ldr	r3, [pc, #552]	; (8015ebc <tcp_output+0x238>)
 8015c94:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015c98:	4989      	ldr	r1, [pc, #548]	; (8015ec0 <tcp_output+0x23c>)
 8015c9a:	488a      	ldr	r0, [pc, #552]	; (8015ec4 <tcp_output+0x240>)
 8015c9c:	f004 ff18 	bl	801aad0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7d1b      	ldrb	r3, [r3, #20]
 8015ca4:	2b01      	cmp	r3, #1
 8015ca6:	d106      	bne.n	8015cb6 <tcp_output+0x32>
 8015ca8:	4b84      	ldr	r3, [pc, #528]	; (8015ebc <tcp_output+0x238>)
 8015caa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015cae:	4986      	ldr	r1, [pc, #536]	; (8015ec8 <tcp_output+0x244>)
 8015cb0:	4884      	ldr	r0, [pc, #528]	; (8015ec4 <tcp_output+0x240>)
 8015cb2:	f004 ff0d 	bl	801aad0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015cb6:	4b85      	ldr	r3, [pc, #532]	; (8015ecc <tcp_output+0x248>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d101      	bne.n	8015cc4 <tcp_output+0x40>
    return ERR_OK;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	e1ce      	b.n	8016062 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015cd0:	4293      	cmp	r3, r2
 8015cd2:	bf28      	it	cs
 8015cd4:	4613      	movcs	r3, r2
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cde:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d10b      	bne.n	8015cfe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	8b5b      	ldrh	r3, [r3, #26]
 8015cea:	f003 0302 	and.w	r3, r3, #2
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f000 81aa 	beq.w	8016048 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f000 fdcb 	bl	8016890 <tcp_send_empty_ack>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	e1b1      	b.n	8016062 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015cfe:	6879      	ldr	r1, [r7, #4]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	3304      	adds	r3, #4
 8015d04:	461a      	mov	r2, r3
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f7ff fc7c 	bl	8015604 <tcp_route>
 8015d0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d102      	bne.n	8015d1a <tcp_output+0x96>
    return ERR_RTE;
 8015d14:	f06f 0303 	mvn.w	r3, #3
 8015d18:	e1a3      	b.n	8016062 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d003      	beq.n	8015d28 <tcp_output+0xa4>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d111      	bne.n	8015d4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015d28:	697b      	ldr	r3, [r7, #20]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d002      	beq.n	8015d34 <tcp_output+0xb0>
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	3304      	adds	r3, #4
 8015d32:	e000      	b.n	8015d36 <tcp_output+0xb2>
 8015d34:	2300      	movs	r3, #0
 8015d36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d102      	bne.n	8015d44 <tcp_output+0xc0>
      return ERR_RTE;
 8015d3e:	f06f 0303 	mvn.w	r3, #3
 8015d42:	e18e      	b.n	8016062 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	681a      	ldr	r2, [r3, #0]
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7f9 fae9 	bl	800f32a <lwip_htonl>
 8015d58:	4602      	mov	r2, r0
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d5e:	1ad3      	subs	r3, r2, r3
 8015d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d62:	8912      	ldrh	r2, [r2, #8]
 8015d64:	4413      	add	r3, r2
 8015d66:	69ba      	ldr	r2, [r7, #24]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d227      	bcs.n	8015dbc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d72:	461a      	mov	r2, r3
 8015d74:	69bb      	ldr	r3, [r7, #24]
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d114      	bne.n	8015da4 <tcp_output+0x120>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d110      	bne.n	8015da4 <tcp_output+0x120>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d10b      	bne.n	8015da4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2201      	movs	r2, #1
 8015d98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	8b5b      	ldrh	r3, [r3, #26]
 8015da8:	f003 0302 	and.w	r3, r3, #2
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f000 814d 	beq.w	801604c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f000 fd6c 	bl	8016890 <tcp_send_empty_ack>
 8015db8:	4603      	mov	r3, r0
 8015dba:	e152      	b.n	8016062 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015dca:	6a3b      	ldr	r3, [r7, #32]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	f000 811c 	beq.w	801600a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015dd2:	e002      	b.n	8015dda <tcp_output+0x156>
 8015dd4:	6a3b      	ldr	r3, [r7, #32]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	623b      	str	r3, [r7, #32]
 8015dda:	6a3b      	ldr	r3, [r7, #32]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d1f8      	bne.n	8015dd4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015de2:	e112      	b.n	801600a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	899b      	ldrh	r3, [r3, #12]
 8015dea:	b29b      	uxth	r3, r3
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7f9 fa87 	bl	800f300 <lwip_htons>
 8015df2:	4603      	mov	r3, r0
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	f003 0304 	and.w	r3, r3, #4
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d006      	beq.n	8015e0c <tcp_output+0x188>
 8015dfe:	4b2f      	ldr	r3, [pc, #188]	; (8015ebc <tcp_output+0x238>)
 8015e00:	f240 5236 	movw	r2, #1334	; 0x536
 8015e04:	4932      	ldr	r1, [pc, #200]	; (8015ed0 <tcp_output+0x24c>)
 8015e06:	482f      	ldr	r0, [pc, #188]	; (8015ec4 <tcp_output+0x240>)
 8015e08:	f004 fe62 	bl	801aad0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d01f      	beq.n	8015e54 <tcp_output+0x1d0>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	8b5b      	ldrh	r3, [r3, #26]
 8015e18:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d119      	bne.n	8015e54 <tcp_output+0x1d0>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d00b      	beq.n	8015e40 <tcp_output+0x1bc>
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d110      	bne.n	8015e54 <tcp_output+0x1d0>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e36:	891a      	ldrh	r2, [r3, #8]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d209      	bcs.n	8015e54 <tcp_output+0x1d0>
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d004      	beq.n	8015e54 <tcp_output+0x1d0>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e50:	2b08      	cmp	r3, #8
 8015e52:	d901      	bls.n	8015e58 <tcp_output+0x1d4>
 8015e54:	2301      	movs	r3, #1
 8015e56:	e000      	b.n	8015e5a <tcp_output+0x1d6>
 8015e58:	2300      	movs	r3, #0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d106      	bne.n	8015e6c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	8b5b      	ldrh	r3, [r3, #26]
 8015e62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	f000 80e4 	beq.w	8016034 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	7d1b      	ldrb	r3, [r3, #20]
 8015e70:	2b02      	cmp	r3, #2
 8015e72:	d00d      	beq.n	8015e90 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e76:	68db      	ldr	r3, [r3, #12]
 8015e78:	899b      	ldrh	r3, [r3, #12]
 8015e7a:	b29c      	uxth	r4, r3
 8015e7c:	2010      	movs	r0, #16
 8015e7e:	f7f9 fa3f 	bl	800f300 <lwip_htons>
 8015e82:	4603      	mov	r3, r0
 8015e84:	461a      	mov	r2, r3
 8015e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e88:	68db      	ldr	r3, [r3, #12]
 8015e8a:	4322      	orrs	r2, r4
 8015e8c:	b292      	uxth	r2, r2
 8015e8e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015e90:	697a      	ldr	r2, [r7, #20]
 8015e92:	6879      	ldr	r1, [r7, #4]
 8015e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e96:	f000 f909 	bl	80160ac <tcp_output_segment>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d016      	beq.n	8015ed4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	8b5b      	ldrh	r3, [r3, #26]
 8015eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015eae:	b29a      	uxth	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	835a      	strh	r2, [r3, #26]
      return err;
 8015eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015eb8:	e0d3      	b.n	8016062 <tcp_output+0x3de>
 8015eba:	bf00      	nop
 8015ebc:	0801e9a0 	.word	0x0801e9a0
 8015ec0:	0801eee4 	.word	0x0801eee4
 8015ec4:	0801e9f4 	.word	0x0801e9f4
 8015ec8:	0801eefc 	.word	0x0801eefc
 8015ecc:	2000f1f8 	.word	0x2000f1f8
 8015ed0:	0801ef24 	.word	0x0801ef24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	7d1b      	ldrb	r3, [r3, #20]
 8015ee0:	2b02      	cmp	r3, #2
 8015ee2:	d006      	beq.n	8015ef2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	8b5b      	ldrh	r3, [r3, #26]
 8015ee8:	f023 0303 	bic.w	r3, r3, #3
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef4:	68db      	ldr	r3, [r3, #12]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7f9 fa16 	bl	800f32a <lwip_htonl>
 8015efe:	4604      	mov	r4, r0
 8015f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f02:	891b      	ldrh	r3, [r3, #8]
 8015f04:	461d      	mov	r5, r3
 8015f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f08:	68db      	ldr	r3, [r3, #12]
 8015f0a:	899b      	ldrh	r3, [r3, #12]
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f9 f9f6 	bl	800f300 <lwip_htons>
 8015f14:	4603      	mov	r3, r0
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	f003 0303 	and.w	r3, r3, #3
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d001      	beq.n	8015f24 <tcp_output+0x2a0>
 8015f20:	2301      	movs	r3, #1
 8015f22:	e000      	b.n	8015f26 <tcp_output+0x2a2>
 8015f24:	2300      	movs	r3, #0
 8015f26:	442b      	add	r3, r5
 8015f28:	4423      	add	r3, r4
 8015f2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	1ad3      	subs	r3, r2, r3
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	da02      	bge.n	8015f3e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f40:	891b      	ldrh	r3, [r3, #8]
 8015f42:	461c      	mov	r4, r3
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	68db      	ldr	r3, [r3, #12]
 8015f48:	899b      	ldrh	r3, [r3, #12]
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7f9 f9d7 	bl	800f300 <lwip_htons>
 8015f52:	4603      	mov	r3, r0
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	f003 0303 	and.w	r3, r3, #3
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d001      	beq.n	8015f62 <tcp_output+0x2de>
 8015f5e:	2301      	movs	r3, #1
 8015f60:	e000      	b.n	8015f64 <tcp_output+0x2e0>
 8015f62:	2300      	movs	r3, #0
 8015f64:	4423      	add	r3, r4
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d049      	beq.n	8015ffe <tcp_output+0x37a>
      seg->next = NULL;
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d105      	bne.n	8015f84 <tcp_output+0x300>
        pcb->unacked = seg;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f7c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f80:	623b      	str	r3, [r7, #32]
 8015f82:	e03f      	b.n	8016004 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f9 f9cd 	bl	800f32a <lwip_htonl>
 8015f90:	4604      	mov	r4, r0
 8015f92:	6a3b      	ldr	r3, [r7, #32]
 8015f94:	68db      	ldr	r3, [r3, #12]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f9 f9c6 	bl	800f32a <lwip_htonl>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	1ae3      	subs	r3, r4, r3
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	da24      	bge.n	8015ff0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	3370      	adds	r3, #112	; 0x70
 8015faa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015fac:	e002      	b.n	8015fb4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015fae:	69fb      	ldr	r3, [r7, #28]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015fb4:	69fb      	ldr	r3, [r7, #28]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d011      	beq.n	8015fe0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015fbc:	69fb      	ldr	r3, [r7, #28]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	68db      	ldr	r3, [r3, #12]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7f9 f9b0 	bl	800f32a <lwip_htonl>
 8015fca:	4604      	mov	r4, r0
 8015fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fce:	68db      	ldr	r3, [r3, #12]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7f9 f9a9 	bl	800f32a <lwip_htonl>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	dbe6      	blt.n	8015fae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015fe0:	69fb      	ldr	r3, [r7, #28]
 8015fe2:	681a      	ldr	r2, [r3, #0]
 8015fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fec:	601a      	str	r2, [r3, #0]
 8015fee:	e009      	b.n	8016004 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015ff0:	6a3b      	ldr	r3, [r7, #32]
 8015ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ff4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015ff6:	6a3b      	ldr	r3, [r7, #32]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	623b      	str	r3, [r7, #32]
 8015ffc:	e002      	b.n	8016004 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016000:	f7fc fc3f 	bl	8012882 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016008:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801600c:	2b00      	cmp	r3, #0
 801600e:	d012      	beq.n	8016036 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016012:	68db      	ldr	r3, [r3, #12]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	4618      	mov	r0, r3
 8016018:	f7f9 f987 	bl	800f32a <lwip_htonl>
 801601c:	4602      	mov	r2, r0
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016022:	1ad3      	subs	r3, r2, r3
 8016024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016026:	8912      	ldrh	r2, [r2, #8]
 8016028:	4413      	add	r3, r2
  while (seg != NULL &&
 801602a:	69ba      	ldr	r2, [r7, #24]
 801602c:	429a      	cmp	r2, r3
 801602e:	f4bf aed9 	bcs.w	8015de4 <tcp_output+0x160>
 8016032:	e000      	b.n	8016036 <tcp_output+0x3b2>
      break;
 8016034:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801603a:	2b00      	cmp	r3, #0
 801603c:	d108      	bne.n	8016050 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2200      	movs	r2, #0
 8016042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016046:	e004      	b.n	8016052 <tcp_output+0x3ce>
    goto output_done;
 8016048:	bf00      	nop
 801604a:	e002      	b.n	8016052 <tcp_output+0x3ce>
    goto output_done;
 801604c:	bf00      	nop
 801604e:	e000      	b.n	8016052 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016050:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	8b5b      	ldrh	r3, [r3, #26]
 8016056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801605a:	b29a      	uxth	r2, r3
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016060:	2300      	movs	r3, #0
}
 8016062:	4618      	mov	r0, r3
 8016064:	3728      	adds	r7, #40	; 0x28
 8016066:	46bd      	mov	sp, r7
 8016068:	bdb0      	pop	{r4, r5, r7, pc}
 801606a:	bf00      	nop

0801606c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d106      	bne.n	8016088 <tcp_output_segment_busy+0x1c>
 801607a:	4b09      	ldr	r3, [pc, #36]	; (80160a0 <tcp_output_segment_busy+0x34>)
 801607c:	f240 529a 	movw	r2, #1434	; 0x59a
 8016080:	4908      	ldr	r1, [pc, #32]	; (80160a4 <tcp_output_segment_busy+0x38>)
 8016082:	4809      	ldr	r0, [pc, #36]	; (80160a8 <tcp_output_segment_busy+0x3c>)
 8016084:	f004 fd24 	bl	801aad0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	685b      	ldr	r3, [r3, #4]
 801608c:	7b9b      	ldrb	r3, [r3, #14]
 801608e:	2b01      	cmp	r3, #1
 8016090:	d001      	beq.n	8016096 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016092:	2301      	movs	r3, #1
 8016094:	e000      	b.n	8016098 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016096:	2300      	movs	r3, #0
}
 8016098:	4618      	mov	r0, r3
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	0801e9a0 	.word	0x0801e9a0
 80160a4:	0801ef3c 	.word	0x0801ef3c
 80160a8:	0801e9f4 	.word	0x0801e9f4

080160ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80160ac:	b5b0      	push	{r4, r5, r7, lr}
 80160ae:	b08c      	sub	sp, #48	; 0x30
 80160b0:	af04      	add	r7, sp, #16
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d106      	bne.n	80160cc <tcp_output_segment+0x20>
 80160be:	4b64      	ldr	r3, [pc, #400]	; (8016250 <tcp_output_segment+0x1a4>)
 80160c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80160c4:	4963      	ldr	r1, [pc, #396]	; (8016254 <tcp_output_segment+0x1a8>)
 80160c6:	4864      	ldr	r0, [pc, #400]	; (8016258 <tcp_output_segment+0x1ac>)
 80160c8:	f004 fd02 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d106      	bne.n	80160e0 <tcp_output_segment+0x34>
 80160d2:	4b5f      	ldr	r3, [pc, #380]	; (8016250 <tcp_output_segment+0x1a4>)
 80160d4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80160d8:	4960      	ldr	r1, [pc, #384]	; (801625c <tcp_output_segment+0x1b0>)
 80160da:	485f      	ldr	r0, [pc, #380]	; (8016258 <tcp_output_segment+0x1ac>)
 80160dc:	f004 fcf8 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d106      	bne.n	80160f4 <tcp_output_segment+0x48>
 80160e6:	4b5a      	ldr	r3, [pc, #360]	; (8016250 <tcp_output_segment+0x1a4>)
 80160e8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80160ec:	495c      	ldr	r1, [pc, #368]	; (8016260 <tcp_output_segment+0x1b4>)
 80160ee:	485a      	ldr	r0, [pc, #360]	; (8016258 <tcp_output_segment+0x1ac>)
 80160f0:	f004 fcee 	bl	801aad0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f7ff ffb9 	bl	801606c <tcp_output_segment_busy>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d001      	beq.n	8016104 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016100:	2300      	movs	r3, #0
 8016102:	e0a1      	b.n	8016248 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	68dc      	ldr	r4, [r3, #12]
 801610c:	4610      	mov	r0, r2
 801610e:	f7f9 f90c 	bl	800f32a <lwip_htonl>
 8016112:	4603      	mov	r3, r0
 8016114:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	68dc      	ldr	r4, [r3, #12]
 801611e:	4610      	mov	r0, r2
 8016120:	f7f9 f8ee 	bl	800f300 <lwip_htons>
 8016124:	4603      	mov	r3, r0
 8016126:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016130:	441a      	add	r2, r3
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	68db      	ldr	r3, [r3, #12]
 801613a:	3314      	adds	r3, #20
 801613c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	7a9b      	ldrb	r3, [r3, #10]
 8016142:	f003 0301 	and.w	r3, r3, #1
 8016146:	2b00      	cmp	r3, #0
 8016148:	d015      	beq.n	8016176 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	3304      	adds	r3, #4
 801614e:	461a      	mov	r2, r3
 8016150:	6879      	ldr	r1, [r7, #4]
 8016152:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016156:	f7fc fe8b 	bl	8012e70 <tcp_eff_send_mss_netif>
 801615a:	4603      	mov	r3, r0
 801615c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801615e:	8b7b      	ldrh	r3, [r7, #26]
 8016160:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016164:	4618      	mov	r0, r3
 8016166:	f7f9 f8e0 	bl	800f32a <lwip_htonl>
 801616a:	4602      	mov	r2, r0
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016170:	69fb      	ldr	r3, [r7, #28]
 8016172:	3304      	adds	r3, #4
 8016174:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801617c:	2b00      	cmp	r3, #0
 801617e:	da02      	bge.n	8016186 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	2200      	movs	r2, #0
 8016184:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801618a:	2b00      	cmp	r3, #0
 801618c:	d10c      	bne.n	80161a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801618e:	4b35      	ldr	r3, [pc, #212]	; (8016264 <tcp_output_segment+0x1b8>)
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	68db      	ldr	r3, [r3, #12]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	4618      	mov	r0, r3
 801619e:	f7f9 f8c4 	bl	800f32a <lwip_htonl>
 80161a2:	4602      	mov	r2, r0
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	68da      	ldr	r2, [r3, #12]
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	685b      	ldr	r3, [r3, #4]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	1ad3      	subs	r3, r2, r3
 80161b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	8959      	ldrh	r1, [r3, #10]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	8b3a      	ldrh	r2, [r7, #24]
 80161c2:	1a8a      	subs	r2, r1, r2
 80161c4:	b292      	uxth	r2, r2
 80161c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	8919      	ldrh	r1, [r3, #8]
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	685b      	ldr	r3, [r3, #4]
 80161d2:	8b3a      	ldrh	r2, [r7, #24]
 80161d4:	1a8a      	subs	r2, r1, r2
 80161d6:	b292      	uxth	r2, r2
 80161d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	68fa      	ldr	r2, [r7, #12]
 80161e0:	68d2      	ldr	r2, [r2, #12]
 80161e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	68db      	ldr	r3, [r3, #12]
 80161e8:	2200      	movs	r2, #0
 80161ea:	741a      	strb	r2, [r3, #16]
 80161ec:	2200      	movs	r2, #0
 80161ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	68da      	ldr	r2, [r3, #12]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	7a9b      	ldrb	r3, [r3, #10]
 80161f8:	f003 0301 	and.w	r3, r3, #1
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d001      	beq.n	8016204 <tcp_output_segment+0x158>
 8016200:	2318      	movs	r3, #24
 8016202:	e000      	b.n	8016206 <tcp_output_segment+0x15a>
 8016204:	2314      	movs	r3, #20
 8016206:	4413      	add	r3, r2
 8016208:	69fa      	ldr	r2, [r7, #28]
 801620a:	429a      	cmp	r2, r3
 801620c:	d006      	beq.n	801621c <tcp_output_segment+0x170>
 801620e:	4b10      	ldr	r3, [pc, #64]	; (8016250 <tcp_output_segment+0x1a4>)
 8016210:	f240 621c 	movw	r2, #1564	; 0x61c
 8016214:	4914      	ldr	r1, [pc, #80]	; (8016268 <tcp_output_segment+0x1bc>)
 8016216:	4810      	ldr	r0, [pc, #64]	; (8016258 <tcp_output_segment+0x1ac>)
 8016218:	f004 fc5a 	bl	801aad0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	6858      	ldr	r0, [r3, #4]
 8016220:	68b9      	ldr	r1, [r7, #8]
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	1d1c      	adds	r4, r3, #4
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	7add      	ldrb	r5, [r3, #11]
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	7a9b      	ldrb	r3, [r3, #10]
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	9202      	str	r2, [sp, #8]
 8016232:	2206      	movs	r2, #6
 8016234:	9201      	str	r2, [sp, #4]
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	462b      	mov	r3, r5
 801623a:	4622      	mov	r2, r4
 801623c:	f002 fd1c 	bl	8018c78 <ip4_output_if>
 8016240:	4603      	mov	r3, r0
 8016242:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3720      	adds	r7, #32
 801624c:	46bd      	mov	sp, r7
 801624e:	bdb0      	pop	{r4, r5, r7, pc}
 8016250:	0801e9a0 	.word	0x0801e9a0
 8016254:	0801ef64 	.word	0x0801ef64
 8016258:	0801e9f4 	.word	0x0801e9f4
 801625c:	0801ef84 	.word	0x0801ef84
 8016260:	0801efa4 	.word	0x0801efa4
 8016264:	2000f1ac 	.word	0x2000f1ac
 8016268:	0801efc8 	.word	0x0801efc8

0801626c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801626c:	b5b0      	push	{r4, r5, r7, lr}
 801626e:	b084      	sub	sp, #16
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d106      	bne.n	8016288 <tcp_rexmit_rto_prepare+0x1c>
 801627a:	4b31      	ldr	r3, [pc, #196]	; (8016340 <tcp_rexmit_rto_prepare+0xd4>)
 801627c:	f240 6263 	movw	r2, #1635	; 0x663
 8016280:	4930      	ldr	r1, [pc, #192]	; (8016344 <tcp_rexmit_rto_prepare+0xd8>)
 8016282:	4831      	ldr	r0, [pc, #196]	; (8016348 <tcp_rexmit_rto_prepare+0xdc>)
 8016284:	f004 fc24 	bl	801aad0 <iprintf>

  if (pcb->unacked == NULL) {
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801628c:	2b00      	cmp	r3, #0
 801628e:	d102      	bne.n	8016296 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016290:	f06f 0305 	mvn.w	r3, #5
 8016294:	e050      	b.n	8016338 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801629a:	60fb      	str	r3, [r7, #12]
 801629c:	e00b      	b.n	80162b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801629e:	68f8      	ldr	r0, [r7, #12]
 80162a0:	f7ff fee4 	bl	801606c <tcp_output_segment_busy>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d002      	beq.n	80162b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80162aa:	f06f 0305 	mvn.w	r3, #5
 80162ae:	e043      	b.n	8016338 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	60fb      	str	r3, [r7, #12]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d1ef      	bne.n	801629e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80162be:	68f8      	ldr	r0, [r7, #12]
 80162c0:	f7ff fed4 	bl	801606c <tcp_output_segment_busy>
 80162c4:	4603      	mov	r3, r0
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d002      	beq.n	80162d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80162ca:	f06f 0305 	mvn.w	r3, #5
 80162ce:	e033      	b.n	8016338 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2200      	movs	r2, #0
 80162e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	8b5b      	ldrh	r3, [r3, #26]
 80162ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7f9 f815 	bl	800f32a <lwip_htonl>
 8016300:	4604      	mov	r4, r0
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	891b      	ldrh	r3, [r3, #8]
 8016306:	461d      	mov	r5, r3
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	68db      	ldr	r3, [r3, #12]
 801630c:	899b      	ldrh	r3, [r3, #12]
 801630e:	b29b      	uxth	r3, r3
 8016310:	4618      	mov	r0, r3
 8016312:	f7f8 fff5 	bl	800f300 <lwip_htons>
 8016316:	4603      	mov	r3, r0
 8016318:	b2db      	uxtb	r3, r3
 801631a:	f003 0303 	and.w	r3, r3, #3
 801631e:	2b00      	cmp	r3, #0
 8016320:	d001      	beq.n	8016326 <tcp_rexmit_rto_prepare+0xba>
 8016322:	2301      	movs	r3, #1
 8016324:	e000      	b.n	8016328 <tcp_rexmit_rto_prepare+0xbc>
 8016326:	2300      	movs	r3, #0
 8016328:	442b      	add	r3, r5
 801632a:	18e2      	adds	r2, r4, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2200      	movs	r2, #0
 8016334:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016336:	2300      	movs	r3, #0
}
 8016338:	4618      	mov	r0, r3
 801633a:	3710      	adds	r7, #16
 801633c:	46bd      	mov	sp, r7
 801633e:	bdb0      	pop	{r4, r5, r7, pc}
 8016340:	0801e9a0 	.word	0x0801e9a0
 8016344:	0801efdc 	.word	0x0801efdc
 8016348:	0801e9f4 	.word	0x0801e9f4

0801634c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d106      	bne.n	8016368 <tcp_rexmit_rto_commit+0x1c>
 801635a:	4b0d      	ldr	r3, [pc, #52]	; (8016390 <tcp_rexmit_rto_commit+0x44>)
 801635c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016360:	490c      	ldr	r1, [pc, #48]	; (8016394 <tcp_rexmit_rto_commit+0x48>)
 8016362:	480d      	ldr	r0, [pc, #52]	; (8016398 <tcp_rexmit_rto_commit+0x4c>)
 8016364:	f004 fbb4 	bl	801aad0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801636e:	2bff      	cmp	r3, #255	; 0xff
 8016370:	d007      	beq.n	8016382 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016378:	3301      	adds	r3, #1
 801637a:	b2da      	uxtb	r2, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f7ff fc7e 	bl	8015c84 <tcp_output>
}
 8016388:	bf00      	nop
 801638a:	3708      	adds	r7, #8
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	0801e9a0 	.word	0x0801e9a0
 8016394:	0801f000 	.word	0x0801f000
 8016398:	0801e9f4 	.word	0x0801e9f4

0801639c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b082      	sub	sp, #8
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d106      	bne.n	80163b8 <tcp_rexmit_rto+0x1c>
 80163aa:	4b0a      	ldr	r3, [pc, #40]	; (80163d4 <tcp_rexmit_rto+0x38>)
 80163ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80163b0:	4909      	ldr	r1, [pc, #36]	; (80163d8 <tcp_rexmit_rto+0x3c>)
 80163b2:	480a      	ldr	r0, [pc, #40]	; (80163dc <tcp_rexmit_rto+0x40>)
 80163b4:	f004 fb8c 	bl	801aad0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7ff ff57 	bl	801626c <tcp_rexmit_rto_prepare>
 80163be:	4603      	mov	r3, r0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d102      	bne.n	80163ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f7ff ffc1 	bl	801634c <tcp_rexmit_rto_commit>
  }
}
 80163ca:	bf00      	nop
 80163cc:	3708      	adds	r7, #8
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	0801e9a0 	.word	0x0801e9a0
 80163d8:	0801f024 	.word	0x0801f024
 80163dc:	0801e9f4 	.word	0x0801e9f4

080163e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80163e0:	b590      	push	{r4, r7, lr}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d106      	bne.n	80163fc <tcp_rexmit+0x1c>
 80163ee:	4b2f      	ldr	r3, [pc, #188]	; (80164ac <tcp_rexmit+0xcc>)
 80163f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80163f4:	492e      	ldr	r1, [pc, #184]	; (80164b0 <tcp_rexmit+0xd0>)
 80163f6:	482f      	ldr	r0, [pc, #188]	; (80164b4 <tcp_rexmit+0xd4>)
 80163f8:	f004 fb6a 	bl	801aad0 <iprintf>

  if (pcb->unacked == NULL) {
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016400:	2b00      	cmp	r3, #0
 8016402:	d102      	bne.n	801640a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016404:	f06f 0305 	mvn.w	r3, #5
 8016408:	e04c      	b.n	80164a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801640e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016410:	68b8      	ldr	r0, [r7, #8]
 8016412:	f7ff fe2b 	bl	801606c <tcp_output_segment_busy>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d002      	beq.n	8016422 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801641c:	f06f 0305 	mvn.w	r3, #5
 8016420:	e040      	b.n	80164a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	336c      	adds	r3, #108	; 0x6c
 801642e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016430:	e002      	b.n	8016438 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d011      	beq.n	8016464 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	68db      	ldr	r3, [r3, #12]
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	4618      	mov	r0, r3
 801644a:	f7f8 ff6e 	bl	800f32a <lwip_htonl>
 801644e:	4604      	mov	r4, r0
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	4618      	mov	r0, r3
 8016458:	f7f8 ff67 	bl	800f32a <lwip_htonl>
 801645c:	4603      	mov	r3, r0
 801645e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016460:	2b00      	cmp	r3, #0
 8016462:	dbe6      	blt.n	8016432 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	68ba      	ldr	r2, [r7, #8]
 8016470:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d103      	bne.n	8016482 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2200      	movs	r2, #0
 801647e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016488:	2bff      	cmp	r3, #255	; 0xff
 801648a:	d007      	beq.n	801649c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016492:	3301      	adds	r3, #1
 8016494:	b2da      	uxtb	r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2200      	movs	r2, #0
 80164a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80164a2:	2300      	movs	r3, #0
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3714      	adds	r7, #20
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd90      	pop	{r4, r7, pc}
 80164ac:	0801e9a0 	.word	0x0801e9a0
 80164b0:	0801f040 	.word	0x0801f040
 80164b4:	0801e9f4 	.word	0x0801e9f4

080164b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d106      	bne.n	80164d4 <tcp_rexmit_fast+0x1c>
 80164c6:	4b2a      	ldr	r3, [pc, #168]	; (8016570 <tcp_rexmit_fast+0xb8>)
 80164c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80164cc:	4929      	ldr	r1, [pc, #164]	; (8016574 <tcp_rexmit_fast+0xbc>)
 80164ce:	482a      	ldr	r0, [pc, #168]	; (8016578 <tcp_rexmit_fast+0xc0>)
 80164d0:	f004 fafe 	bl	801aad0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d044      	beq.n	8016566 <tcp_rexmit_fast+0xae>
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	8b5b      	ldrh	r3, [r3, #26]
 80164e0:	f003 0304 	and.w	r3, r3, #4
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d13e      	bne.n	8016566 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f7ff ff79 	bl	80163e0 <tcp_rexmit>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d138      	bne.n	8016566 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016500:	4293      	cmp	r3, r2
 8016502:	bf28      	it	cs
 8016504:	4613      	movcs	r3, r2
 8016506:	b29b      	uxth	r3, r3
 8016508:	0fda      	lsrs	r2, r3, #31
 801650a:	4413      	add	r3, r2
 801650c:	105b      	asrs	r3, r3, #1
 801650e:	b29a      	uxth	r2, r3
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801651c:	461a      	mov	r2, r3
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016522:	005b      	lsls	r3, r3, #1
 8016524:	429a      	cmp	r2, r3
 8016526:	d206      	bcs.n	8016536 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	b29a      	uxth	r2, r3
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016540:	4619      	mov	r1, r3
 8016542:	0049      	lsls	r1, r1, #1
 8016544:	440b      	add	r3, r1
 8016546:	b29b      	uxth	r3, r3
 8016548:	4413      	add	r3, r2
 801654a:	b29a      	uxth	r2, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	8b5b      	ldrh	r3, [r3, #26]
 8016556:	f043 0304 	orr.w	r3, r3, #4
 801655a:	b29a      	uxth	r2, r3
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2200      	movs	r2, #0
 8016564:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016566:	bf00      	nop
 8016568:	3708      	adds	r7, #8
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	0801e9a0 	.word	0x0801e9a0
 8016574:	0801f058 	.word	0x0801f058
 8016578:	0801e9f4 	.word	0x0801e9f4

0801657c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b086      	sub	sp, #24
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	607b      	str	r3, [r7, #4]
 8016586:	460b      	mov	r3, r1
 8016588:	817b      	strh	r3, [r7, #10]
 801658a:	4613      	mov	r3, r2
 801658c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801658e:	897a      	ldrh	r2, [r7, #10]
 8016590:	893b      	ldrh	r3, [r7, #8]
 8016592:	4413      	add	r3, r2
 8016594:	b29b      	uxth	r3, r3
 8016596:	3314      	adds	r3, #20
 8016598:	b29b      	uxth	r3, r3
 801659a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801659e:	4619      	mov	r1, r3
 80165a0:	2022      	movs	r0, #34	; 0x22
 80165a2:	f7fa faa1 	bl	8010ae8 <pbuf_alloc>
 80165a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d04d      	beq.n	801664a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80165ae:	897b      	ldrh	r3, [r7, #10]
 80165b0:	3313      	adds	r3, #19
 80165b2:	697a      	ldr	r2, [r7, #20]
 80165b4:	8952      	ldrh	r2, [r2, #10]
 80165b6:	4293      	cmp	r3, r2
 80165b8:	db06      	blt.n	80165c8 <tcp_output_alloc_header_common+0x4c>
 80165ba:	4b26      	ldr	r3, [pc, #152]	; (8016654 <tcp_output_alloc_header_common+0xd8>)
 80165bc:	f240 7223 	movw	r2, #1827	; 0x723
 80165c0:	4925      	ldr	r1, [pc, #148]	; (8016658 <tcp_output_alloc_header_common+0xdc>)
 80165c2:	4826      	ldr	r0, [pc, #152]	; (801665c <tcp_output_alloc_header_common+0xe0>)
 80165c4:	f004 fa84 	bl	801aad0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	685b      	ldr	r3, [r3, #4]
 80165cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80165ce:	8c3b      	ldrh	r3, [r7, #32]
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f8 fe95 	bl	800f300 <lwip_htons>
 80165d6:	4603      	mov	r3, r0
 80165d8:	461a      	mov	r2, r3
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80165de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7f8 fe8d 	bl	800f300 <lwip_htons>
 80165e6:	4603      	mov	r3, r0
 80165e8:	461a      	mov	r2, r3
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80165ee:	693b      	ldr	r3, [r7, #16]
 80165f0:	687a      	ldr	r2, [r7, #4]
 80165f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f7f8 fe98 	bl	800f32a <lwip_htonl>
 80165fa:	4602      	mov	r2, r0
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016600:	897b      	ldrh	r3, [r7, #10]
 8016602:	089b      	lsrs	r3, r3, #2
 8016604:	b29b      	uxth	r3, r3
 8016606:	3305      	adds	r3, #5
 8016608:	b29b      	uxth	r3, r3
 801660a:	031b      	lsls	r3, r3, #12
 801660c:	b29a      	uxth	r2, r3
 801660e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016612:	b29b      	uxth	r3, r3
 8016614:	4313      	orrs	r3, r2
 8016616:	b29b      	uxth	r3, r3
 8016618:	4618      	mov	r0, r3
 801661a:	f7f8 fe71 	bl	800f300 <lwip_htons>
 801661e:	4603      	mov	r3, r0
 8016620:	461a      	mov	r2, r3
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016626:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016628:	4618      	mov	r0, r3
 801662a:	f7f8 fe69 	bl	800f300 <lwip_htons>
 801662e:	4603      	mov	r3, r0
 8016630:	461a      	mov	r2, r3
 8016632:	693b      	ldr	r3, [r7, #16]
 8016634:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	2200      	movs	r2, #0
 801663a:	741a      	strb	r2, [r3, #16]
 801663c:	2200      	movs	r2, #0
 801663e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	2200      	movs	r2, #0
 8016644:	749a      	strb	r2, [r3, #18]
 8016646:	2200      	movs	r2, #0
 8016648:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801664a:	697b      	ldr	r3, [r7, #20]
}
 801664c:	4618      	mov	r0, r3
 801664e:	3718      	adds	r7, #24
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}
 8016654:	0801e9a0 	.word	0x0801e9a0
 8016658:	0801f078 	.word	0x0801f078
 801665c:	0801e9f4 	.word	0x0801e9f4

08016660 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016660:	b5b0      	push	{r4, r5, r7, lr}
 8016662:	b08a      	sub	sp, #40	; 0x28
 8016664:	af04      	add	r7, sp, #16
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	607b      	str	r3, [r7, #4]
 801666a:	460b      	mov	r3, r1
 801666c:	817b      	strh	r3, [r7, #10]
 801666e:	4613      	mov	r3, r2
 8016670:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d106      	bne.n	8016686 <tcp_output_alloc_header+0x26>
 8016678:	4b15      	ldr	r3, [pc, #84]	; (80166d0 <tcp_output_alloc_header+0x70>)
 801667a:	f240 7242 	movw	r2, #1858	; 0x742
 801667e:	4915      	ldr	r1, [pc, #84]	; (80166d4 <tcp_output_alloc_header+0x74>)
 8016680:	4815      	ldr	r0, [pc, #84]	; (80166d8 <tcp_output_alloc_header+0x78>)
 8016682:	f004 fa25 	bl	801aad0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	8adb      	ldrh	r3, [r3, #22]
 801668e:	68fa      	ldr	r2, [r7, #12]
 8016690:	8b12      	ldrh	r2, [r2, #24]
 8016692:	68f9      	ldr	r1, [r7, #12]
 8016694:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016696:	893d      	ldrh	r5, [r7, #8]
 8016698:	897c      	ldrh	r4, [r7, #10]
 801669a:	9103      	str	r1, [sp, #12]
 801669c:	2110      	movs	r1, #16
 801669e:	9102      	str	r1, [sp, #8]
 80166a0:	9201      	str	r2, [sp, #4]
 80166a2:	9300      	str	r3, [sp, #0]
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	462a      	mov	r2, r5
 80166a8:	4621      	mov	r1, r4
 80166aa:	f7ff ff67 	bl	801657c <tcp_output_alloc_header_common>
 80166ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d006      	beq.n	80166c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ba:	68fa      	ldr	r2, [r7, #12]
 80166bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80166be:	441a      	add	r2, r3
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80166c4:	697b      	ldr	r3, [r7, #20]
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3718      	adds	r7, #24
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bdb0      	pop	{r4, r5, r7, pc}
 80166ce:	bf00      	nop
 80166d0:	0801e9a0 	.word	0x0801e9a0
 80166d4:	0801f0a8 	.word	0x0801f0a8
 80166d8:	0801e9f4 	.word	0x0801e9f4

080166dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b088      	sub	sp, #32
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	60f8      	str	r0, [r7, #12]
 80166e4:	60b9      	str	r1, [r7, #8]
 80166e6:	4611      	mov	r1, r2
 80166e8:	461a      	mov	r2, r3
 80166ea:	460b      	mov	r3, r1
 80166ec:	71fb      	strb	r3, [r7, #7]
 80166ee:	4613      	mov	r3, r2
 80166f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80166f2:	2300      	movs	r3, #0
 80166f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80166f6:	68bb      	ldr	r3, [r7, #8]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d106      	bne.n	801670a <tcp_output_fill_options+0x2e>
 80166fc:	4b12      	ldr	r3, [pc, #72]	; (8016748 <tcp_output_fill_options+0x6c>)
 80166fe:	f240 7256 	movw	r2, #1878	; 0x756
 8016702:	4912      	ldr	r1, [pc, #72]	; (801674c <tcp_output_fill_options+0x70>)
 8016704:	4812      	ldr	r0, [pc, #72]	; (8016750 <tcp_output_fill_options+0x74>)
 8016706:	f004 f9e3 	bl	801aad0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	3314      	adds	r3, #20
 8016714:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016716:	8bfb      	ldrh	r3, [r7, #30]
 8016718:	009b      	lsls	r3, r3, #2
 801671a:	461a      	mov	r2, r3
 801671c:	79fb      	ldrb	r3, [r7, #7]
 801671e:	009b      	lsls	r3, r3, #2
 8016720:	f003 0304 	and.w	r3, r3, #4
 8016724:	4413      	add	r3, r2
 8016726:	3314      	adds	r3, #20
 8016728:	69ba      	ldr	r2, [r7, #24]
 801672a:	4413      	add	r3, r2
 801672c:	697a      	ldr	r2, [r7, #20]
 801672e:	429a      	cmp	r2, r3
 8016730:	d006      	beq.n	8016740 <tcp_output_fill_options+0x64>
 8016732:	4b05      	ldr	r3, [pc, #20]	; (8016748 <tcp_output_fill_options+0x6c>)
 8016734:	f240 7275 	movw	r2, #1909	; 0x775
 8016738:	4906      	ldr	r1, [pc, #24]	; (8016754 <tcp_output_fill_options+0x78>)
 801673a:	4805      	ldr	r0, [pc, #20]	; (8016750 <tcp_output_fill_options+0x74>)
 801673c:	f004 f9c8 	bl	801aad0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016740:	bf00      	nop
 8016742:	3720      	adds	r7, #32
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}
 8016748:	0801e9a0 	.word	0x0801e9a0
 801674c:	0801f0d0 	.word	0x0801f0d0
 8016750:	0801e9f4 	.word	0x0801e9f4
 8016754:	0801efc8 	.word	0x0801efc8

08016758 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b08a      	sub	sp, #40	; 0x28
 801675c:	af04      	add	r7, sp, #16
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	607a      	str	r2, [r7, #4]
 8016764:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d106      	bne.n	801677a <tcp_output_control_segment+0x22>
 801676c:	4b1c      	ldr	r3, [pc, #112]	; (80167e0 <tcp_output_control_segment+0x88>)
 801676e:	f240 7287 	movw	r2, #1927	; 0x787
 8016772:	491c      	ldr	r1, [pc, #112]	; (80167e4 <tcp_output_control_segment+0x8c>)
 8016774:	481c      	ldr	r0, [pc, #112]	; (80167e8 <tcp_output_control_segment+0x90>)
 8016776:	f004 f9ab 	bl	801aad0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801677a:	683a      	ldr	r2, [r7, #0]
 801677c:	6879      	ldr	r1, [r7, #4]
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	f7fe ff40 	bl	8015604 <tcp_route>
 8016784:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d102      	bne.n	8016792 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801678c:	23fc      	movs	r3, #252	; 0xfc
 801678e:	75fb      	strb	r3, [r7, #23]
 8016790:	e01c      	b.n	80167cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d006      	beq.n	80167a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	7adb      	ldrb	r3, [r3, #11]
 801679c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	7a9b      	ldrb	r3, [r3, #10]
 80167a2:	757b      	strb	r3, [r7, #21]
 80167a4:	e003      	b.n	80167ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80167a6:	23ff      	movs	r3, #255	; 0xff
 80167a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80167aa:	2300      	movs	r3, #0
 80167ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80167ae:	7dba      	ldrb	r2, [r7, #22]
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	9302      	str	r3, [sp, #8]
 80167b4:	2306      	movs	r3, #6
 80167b6:	9301      	str	r3, [sp, #4]
 80167b8:	7d7b      	ldrb	r3, [r7, #21]
 80167ba:	9300      	str	r3, [sp, #0]
 80167bc:	4613      	mov	r3, r2
 80167be:	683a      	ldr	r2, [r7, #0]
 80167c0:	6879      	ldr	r1, [r7, #4]
 80167c2:	68b8      	ldr	r0, [r7, #8]
 80167c4:	f002 fa58 	bl	8018c78 <ip4_output_if>
 80167c8:	4603      	mov	r3, r0
 80167ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80167cc:	68b8      	ldr	r0, [r7, #8]
 80167ce:	f7fa fc6f 	bl	80110b0 <pbuf_free>
  return err;
 80167d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3718      	adds	r7, #24
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	bf00      	nop
 80167e0:	0801e9a0 	.word	0x0801e9a0
 80167e4:	0801f0f8 	.word	0x0801f0f8
 80167e8:	0801e9f4 	.word	0x0801e9f4

080167ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80167ec:	b590      	push	{r4, r7, lr}
 80167ee:	b08b      	sub	sp, #44	; 0x2c
 80167f0:	af04      	add	r7, sp, #16
 80167f2:	60f8      	str	r0, [r7, #12]
 80167f4:	60b9      	str	r1, [r7, #8]
 80167f6:	607a      	str	r2, [r7, #4]
 80167f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d106      	bne.n	801680e <tcp_rst+0x22>
 8016800:	4b1f      	ldr	r3, [pc, #124]	; (8016880 <tcp_rst+0x94>)
 8016802:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016806:	491f      	ldr	r1, [pc, #124]	; (8016884 <tcp_rst+0x98>)
 8016808:	481f      	ldr	r0, [pc, #124]	; (8016888 <tcp_rst+0x9c>)
 801680a:	f004 f961 	bl	801aad0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016810:	2b00      	cmp	r3, #0
 8016812:	d106      	bne.n	8016822 <tcp_rst+0x36>
 8016814:	4b1a      	ldr	r3, [pc, #104]	; (8016880 <tcp_rst+0x94>)
 8016816:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801681a:	491c      	ldr	r1, [pc, #112]	; (801688c <tcp_rst+0xa0>)
 801681c:	481a      	ldr	r0, [pc, #104]	; (8016888 <tcp_rst+0x9c>)
 801681e:	f004 f957 	bl	801aad0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016822:	2300      	movs	r3, #0
 8016824:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016826:	f246 0308 	movw	r3, #24584	; 0x6008
 801682a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801682c:	7dfb      	ldrb	r3, [r7, #23]
 801682e:	b29c      	uxth	r4, r3
 8016830:	68b8      	ldr	r0, [r7, #8]
 8016832:	f7f8 fd7a 	bl	800f32a <lwip_htonl>
 8016836:	4602      	mov	r2, r0
 8016838:	8abb      	ldrh	r3, [r7, #20]
 801683a:	9303      	str	r3, [sp, #12]
 801683c:	2314      	movs	r3, #20
 801683e:	9302      	str	r3, [sp, #8]
 8016840:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	4613      	mov	r3, r2
 801684a:	2200      	movs	r2, #0
 801684c:	4621      	mov	r1, r4
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f7ff fe94 	bl	801657c <tcp_output_alloc_header_common>
 8016854:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016856:	693b      	ldr	r3, [r7, #16]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d00c      	beq.n	8016876 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801685c:	7dfb      	ldrb	r3, [r7, #23]
 801685e:	2200      	movs	r2, #0
 8016860:	6939      	ldr	r1, [r7, #16]
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	f7ff ff3a 	bl	80166dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801686a:	683a      	ldr	r2, [r7, #0]
 801686c:	6939      	ldr	r1, [r7, #16]
 801686e:	68f8      	ldr	r0, [r7, #12]
 8016870:	f7ff ff72 	bl	8016758 <tcp_output_control_segment>
 8016874:	e000      	b.n	8016878 <tcp_rst+0x8c>
    return;
 8016876:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016878:	371c      	adds	r7, #28
 801687a:	46bd      	mov	sp, r7
 801687c:	bd90      	pop	{r4, r7, pc}
 801687e:	bf00      	nop
 8016880:	0801e9a0 	.word	0x0801e9a0
 8016884:	0801f124 	.word	0x0801f124
 8016888:	0801e9f4 	.word	0x0801e9f4
 801688c:	0801f140 	.word	0x0801f140

08016890 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016890:	b590      	push	{r4, r7, lr}
 8016892:	b087      	sub	sp, #28
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016898:	2300      	movs	r3, #0
 801689a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801689c:	2300      	movs	r3, #0
 801689e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d106      	bne.n	80168b4 <tcp_send_empty_ack+0x24>
 80168a6:	4b28      	ldr	r3, [pc, #160]	; (8016948 <tcp_send_empty_ack+0xb8>)
 80168a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80168ac:	4927      	ldr	r1, [pc, #156]	; (801694c <tcp_send_empty_ack+0xbc>)
 80168ae:	4828      	ldr	r0, [pc, #160]	; (8016950 <tcp_send_empty_ack+0xc0>)
 80168b0:	f004 f90e 	bl	801aad0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80168b4:	7dfb      	ldrb	r3, [r7, #23]
 80168b6:	009b      	lsls	r3, r3, #2
 80168b8:	b2db      	uxtb	r3, r3
 80168ba:	f003 0304 	and.w	r3, r3, #4
 80168be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80168c0:	7d7b      	ldrb	r3, [r7, #21]
 80168c2:	b29c      	uxth	r4, r3
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7f8 fd2e 	bl	800f32a <lwip_htonl>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2200      	movs	r2, #0
 80168d2:	4621      	mov	r1, r4
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f7ff fec3 	bl	8016660 <tcp_output_alloc_header>
 80168da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80168dc:	693b      	ldr	r3, [r7, #16]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d109      	bne.n	80168f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	8b5b      	ldrh	r3, [r3, #26]
 80168e6:	f043 0303 	orr.w	r3, r3, #3
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80168f0:	f06f 0301 	mvn.w	r3, #1
 80168f4:	e023      	b.n	801693e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80168f6:	7dbb      	ldrb	r3, [r7, #22]
 80168f8:	7dfa      	ldrb	r2, [r7, #23]
 80168fa:	6939      	ldr	r1, [r7, #16]
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f7ff feed 	bl	80166dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016902:	687a      	ldr	r2, [r7, #4]
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	3304      	adds	r3, #4
 8016908:	6939      	ldr	r1, [r7, #16]
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f7ff ff24 	bl	8016758 <tcp_output_control_segment>
 8016910:	4603      	mov	r3, r0
 8016912:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d007      	beq.n	801692c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	8b5b      	ldrh	r3, [r3, #26]
 8016920:	f043 0303 	orr.w	r3, r3, #3
 8016924:	b29a      	uxth	r2, r3
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	835a      	strh	r2, [r3, #26]
 801692a:	e006      	b.n	801693a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	8b5b      	ldrh	r3, [r3, #26]
 8016930:	f023 0303 	bic.w	r3, r3, #3
 8016934:	b29a      	uxth	r2, r3
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801693a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801693e:	4618      	mov	r0, r3
 8016940:	371c      	adds	r7, #28
 8016942:	46bd      	mov	sp, r7
 8016944:	bd90      	pop	{r4, r7, pc}
 8016946:	bf00      	nop
 8016948:	0801e9a0 	.word	0x0801e9a0
 801694c:	0801f15c 	.word	0x0801f15c
 8016950:	0801e9f4 	.word	0x0801e9f4

08016954 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016954:	b590      	push	{r4, r7, lr}
 8016956:	b087      	sub	sp, #28
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801695c:	2300      	movs	r3, #0
 801695e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d106      	bne.n	8016974 <tcp_keepalive+0x20>
 8016966:	4b18      	ldr	r3, [pc, #96]	; (80169c8 <tcp_keepalive+0x74>)
 8016968:	f640 0224 	movw	r2, #2084	; 0x824
 801696c:	4917      	ldr	r1, [pc, #92]	; (80169cc <tcp_keepalive+0x78>)
 801696e:	4818      	ldr	r0, [pc, #96]	; (80169d0 <tcp_keepalive+0x7c>)
 8016970:	f004 f8ae 	bl	801aad0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016974:	7dfb      	ldrb	r3, [r7, #23]
 8016976:	b29c      	uxth	r4, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801697c:	3b01      	subs	r3, #1
 801697e:	4618      	mov	r0, r3
 8016980:	f7f8 fcd3 	bl	800f32a <lwip_htonl>
 8016984:	4603      	mov	r3, r0
 8016986:	2200      	movs	r2, #0
 8016988:	4621      	mov	r1, r4
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f7ff fe68 	bl	8016660 <tcp_output_alloc_header>
 8016990:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d102      	bne.n	801699e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016998:	f04f 33ff 	mov.w	r3, #4294967295
 801699c:	e010      	b.n	80169c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801699e:	7dfb      	ldrb	r3, [r7, #23]
 80169a0:	2200      	movs	r2, #0
 80169a2:	6939      	ldr	r1, [r7, #16]
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f7ff fe99 	bl	80166dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80169aa:	687a      	ldr	r2, [r7, #4]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	3304      	adds	r3, #4
 80169b0:	6939      	ldr	r1, [r7, #16]
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f7ff fed0 	bl	8016758 <tcp_output_control_segment>
 80169b8:	4603      	mov	r3, r0
 80169ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80169bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	371c      	adds	r7, #28
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd90      	pop	{r4, r7, pc}
 80169c8:	0801e9a0 	.word	0x0801e9a0
 80169cc:	0801f17c 	.word	0x0801f17c
 80169d0:	0801e9f4 	.word	0x0801e9f4

080169d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80169d4:	b590      	push	{r4, r7, lr}
 80169d6:	b08b      	sub	sp, #44	; 0x2c
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80169dc:	2300      	movs	r3, #0
 80169de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d106      	bne.n	80169f6 <tcp_zero_window_probe+0x22>
 80169e8:	4b4c      	ldr	r3, [pc, #304]	; (8016b1c <tcp_zero_window_probe+0x148>)
 80169ea:	f640 024f 	movw	r2, #2127	; 0x84f
 80169ee:	494c      	ldr	r1, [pc, #304]	; (8016b20 <tcp_zero_window_probe+0x14c>)
 80169f0:	484c      	ldr	r0, [pc, #304]	; (8016b24 <tcp_zero_window_probe+0x150>)
 80169f2:	f004 f86d 	bl	801aad0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80169fc:	6a3b      	ldr	r3, [r7, #32]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d101      	bne.n	8016a06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016a02:	2300      	movs	r3, #0
 8016a04:	e086      	b.n	8016b14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016a0c:	2bff      	cmp	r3, #255	; 0xff
 8016a0e:	d007      	beq.n	8016a20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016a16:	3301      	adds	r3, #1
 8016a18:	b2da      	uxtb	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016a20:	6a3b      	ldr	r3, [r7, #32]
 8016a22:	68db      	ldr	r3, [r3, #12]
 8016a24:	899b      	ldrh	r3, [r3, #12]
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7f8 fc69 	bl	800f300 <lwip_htons>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	f003 0301 	and.w	r3, r3, #1
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d005      	beq.n	8016a46 <tcp_zero_window_probe+0x72>
 8016a3a:	6a3b      	ldr	r3, [r7, #32]
 8016a3c:	891b      	ldrh	r3, [r3, #8]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d101      	bne.n	8016a46 <tcp_zero_window_probe+0x72>
 8016a42:	2301      	movs	r3, #1
 8016a44:	e000      	b.n	8016a48 <tcp_zero_window_probe+0x74>
 8016a46:	2300      	movs	r3, #0
 8016a48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016a4a:	7ffb      	ldrb	r3, [r7, #31]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	bf0c      	ite	eq
 8016a50:	2301      	moveq	r3, #1
 8016a52:	2300      	movne	r3, #0
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a5c:	b299      	uxth	r1, r3
 8016a5e:	6a3b      	ldr	r3, [r7, #32]
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	8bba      	ldrh	r2, [r7, #28]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7ff fdfa 	bl	8016660 <tcp_output_alloc_header>
 8016a6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016a6e:	69bb      	ldr	r3, [r7, #24]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d102      	bne.n	8016a7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016a74:	f04f 33ff 	mov.w	r3, #4294967295
 8016a78:	e04c      	b.n	8016b14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016a80:	7ffb      	ldrb	r3, [r7, #31]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d011      	beq.n	8016aaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	899b      	ldrh	r3, [r3, #12]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	b21b      	sxth	r3, r3
 8016a8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016a92:	b21c      	sxth	r4, r3
 8016a94:	2011      	movs	r0, #17
 8016a96:	f7f8 fc33 	bl	800f300 <lwip_htons>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	b21b      	sxth	r3, r3
 8016a9e:	4323      	orrs	r3, r4
 8016aa0:	b21b      	sxth	r3, r3
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	819a      	strh	r2, [r3, #12]
 8016aa8:	e010      	b.n	8016acc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016aaa:	69bb      	ldr	r3, [r7, #24]
 8016aac:	685b      	ldr	r3, [r3, #4]
 8016aae:	3314      	adds	r3, #20
 8016ab0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016ab2:	6a3b      	ldr	r3, [r7, #32]
 8016ab4:	6858      	ldr	r0, [r3, #4]
 8016ab6:	6a3b      	ldr	r3, [r7, #32]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	891a      	ldrh	r2, [r3, #8]
 8016abc:	6a3b      	ldr	r3, [r7, #32]
 8016abe:	891b      	ldrh	r3, [r3, #8]
 8016ac0:	1ad3      	subs	r3, r2, r3
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	6939      	ldr	r1, [r7, #16]
 8016ac8:	f7fa fcf8 	bl	80114bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016acc:	6a3b      	ldr	r3, [r7, #32]
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f8 fc29 	bl	800f32a <lwip_htonl>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	3301      	adds	r3, #1
 8016adc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	1ad3      	subs	r3, r2, r3
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	da02      	bge.n	8016af0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	68fa      	ldr	r2, [r7, #12]
 8016aee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016af4:	2200      	movs	r2, #0
 8016af6:	69b9      	ldr	r1, [r7, #24]
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f7ff fdef 	bl	80166dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	3304      	adds	r3, #4
 8016b04:	69b9      	ldr	r1, [r7, #24]
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f7ff fe26 	bl	8016758 <tcp_output_control_segment>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	372c      	adds	r7, #44	; 0x2c
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd90      	pop	{r4, r7, pc}
 8016b1c:	0801e9a0 	.word	0x0801e9a0
 8016b20:	0801f198 	.word	0x0801f198
 8016b24:	0801e9f4 	.word	0x0801e9f4

08016b28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016b30:	f7fa ff0c 	bl	801194c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016b34:	4b0a      	ldr	r3, [pc, #40]	; (8016b60 <tcpip_tcp_timer+0x38>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d103      	bne.n	8016b44 <tcpip_tcp_timer+0x1c>
 8016b3c:	4b09      	ldr	r3, [pc, #36]	; (8016b64 <tcpip_tcp_timer+0x3c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d005      	beq.n	8016b50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016b44:	2200      	movs	r2, #0
 8016b46:	4908      	ldr	r1, [pc, #32]	; (8016b68 <tcpip_tcp_timer+0x40>)
 8016b48:	20fa      	movs	r0, #250	; 0xfa
 8016b4a:	f000 f8f3 	bl	8016d34 <sys_timeout>
 8016b4e:	e003      	b.n	8016b58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016b50:	4b06      	ldr	r3, [pc, #24]	; (8016b6c <tcpip_tcp_timer+0x44>)
 8016b52:	2200      	movs	r2, #0
 8016b54:	601a      	str	r2, [r3, #0]
  }
}
 8016b56:	bf00      	nop
 8016b58:	bf00      	nop
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}
 8016b60:	2000f1b8 	.word	0x2000f1b8
 8016b64:	2000f1bc 	.word	0x2000f1bc
 8016b68:	08016b29 	.word	0x08016b29
 8016b6c:	2000f204 	.word	0x2000f204

08016b70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016b74:	4b0a      	ldr	r3, [pc, #40]	; (8016ba0 <tcp_timer_needed+0x30>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10f      	bne.n	8016b9c <tcp_timer_needed+0x2c>
 8016b7c:	4b09      	ldr	r3, [pc, #36]	; (8016ba4 <tcp_timer_needed+0x34>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d103      	bne.n	8016b8c <tcp_timer_needed+0x1c>
 8016b84:	4b08      	ldr	r3, [pc, #32]	; (8016ba8 <tcp_timer_needed+0x38>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d007      	beq.n	8016b9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016b8c:	4b04      	ldr	r3, [pc, #16]	; (8016ba0 <tcp_timer_needed+0x30>)
 8016b8e:	2201      	movs	r2, #1
 8016b90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016b92:	2200      	movs	r2, #0
 8016b94:	4905      	ldr	r1, [pc, #20]	; (8016bac <tcp_timer_needed+0x3c>)
 8016b96:	20fa      	movs	r0, #250	; 0xfa
 8016b98:	f000 f8cc 	bl	8016d34 <sys_timeout>
  }
}
 8016b9c:	bf00      	nop
 8016b9e:	bd80      	pop	{r7, pc}
 8016ba0:	2000f204 	.word	0x2000f204
 8016ba4:	2000f1b8 	.word	0x2000f1b8
 8016ba8:	2000f1bc 	.word	0x2000f1bc
 8016bac:	08016b29 	.word	0x08016b29

08016bb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b086      	sub	sp, #24
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016bbc:	200a      	movs	r0, #10
 8016bbe:	f7f9 fb41 	bl	8010244 <memp_malloc>
 8016bc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d109      	bne.n	8016bde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d151      	bne.n	8016c74 <sys_timeout_abs+0xc4>
 8016bd0:	4b2a      	ldr	r3, [pc, #168]	; (8016c7c <sys_timeout_abs+0xcc>)
 8016bd2:	22be      	movs	r2, #190	; 0xbe
 8016bd4:	492a      	ldr	r1, [pc, #168]	; (8016c80 <sys_timeout_abs+0xd0>)
 8016bd6:	482b      	ldr	r0, [pc, #172]	; (8016c84 <sys_timeout_abs+0xd4>)
 8016bd8:	f003 ff7a 	bl	801aad0 <iprintf>
    return;
 8016bdc:	e04a      	b.n	8016c74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	2200      	movs	r2, #0
 8016be2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016bf0:	693b      	ldr	r3, [r7, #16]
 8016bf2:	68fa      	ldr	r2, [r7, #12]
 8016bf4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016bf6:	4b24      	ldr	r3, [pc, #144]	; (8016c88 <sys_timeout_abs+0xd8>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d103      	bne.n	8016c06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016bfe:	4a22      	ldr	r2, [pc, #136]	; (8016c88 <sys_timeout_abs+0xd8>)
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	6013      	str	r3, [r2, #0]
    return;
 8016c04:	e037      	b.n	8016c76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	685a      	ldr	r2, [r3, #4]
 8016c0a:	4b1f      	ldr	r3, [pc, #124]	; (8016c88 <sys_timeout_abs+0xd8>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	685b      	ldr	r3, [r3, #4]
 8016c10:	1ad3      	subs	r3, r2, r3
 8016c12:	0fdb      	lsrs	r3, r3, #31
 8016c14:	f003 0301 	and.w	r3, r3, #1
 8016c18:	b2db      	uxtb	r3, r3
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d007      	beq.n	8016c2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016c1e:	4b1a      	ldr	r3, [pc, #104]	; (8016c88 <sys_timeout_abs+0xd8>)
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016c26:	4a18      	ldr	r2, [pc, #96]	; (8016c88 <sys_timeout_abs+0xd8>)
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	6013      	str	r3, [r2, #0]
 8016c2c:	e023      	b.n	8016c76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016c2e:	4b16      	ldr	r3, [pc, #88]	; (8016c88 <sys_timeout_abs+0xd8>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	617b      	str	r3, [r7, #20]
 8016c34:	e01a      	b.n	8016c6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d00b      	beq.n	8016c56 <sys_timeout_abs+0xa6>
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	685a      	ldr	r2, [r3, #4]
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	1ad3      	subs	r3, r2, r3
 8016c4a:	0fdb      	lsrs	r3, r3, #31
 8016c4c:	f003 0301 	and.w	r3, r3, #1
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d007      	beq.n	8016c66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	693a      	ldr	r2, [r7, #16]
 8016c62:	601a      	str	r2, [r3, #0]
        break;
 8016c64:	e007      	b.n	8016c76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	617b      	str	r3, [r7, #20]
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d1e1      	bne.n	8016c36 <sys_timeout_abs+0x86>
 8016c72:	e000      	b.n	8016c76 <sys_timeout_abs+0xc6>
    return;
 8016c74:	bf00      	nop
      }
    }
  }
}
 8016c76:	3718      	adds	r7, #24
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	0801f1bc 	.word	0x0801f1bc
 8016c80:	0801f1f0 	.word	0x0801f1f0
 8016c84:	0801f230 	.word	0x0801f230
 8016c88:	2000f1fc 	.word	0x2000f1fc

08016c8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b086      	sub	sp, #24
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	685b      	ldr	r3, [r3, #4]
 8016c9c:	4798      	blx	r3

  now = sys_now();
 8016c9e:	f7f4 fcc6 	bl	800b62e <sys_now>
 8016ca2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	681a      	ldr	r2, [r3, #0]
 8016ca8:	4b0f      	ldr	r3, [pc, #60]	; (8016ce8 <lwip_cyclic_timer+0x5c>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	4413      	add	r3, r2
 8016cae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016cb0:	68fa      	ldr	r2, [r7, #12]
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	1ad3      	subs	r3, r2, r3
 8016cb6:	0fdb      	lsrs	r3, r3, #31
 8016cb8:	f003 0301 	and.w	r3, r3, #1
 8016cbc:	b2db      	uxtb	r3, r3
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d009      	beq.n	8016cd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	4413      	add	r3, r2
 8016cca:	687a      	ldr	r2, [r7, #4]
 8016ccc:	4907      	ldr	r1, [pc, #28]	; (8016cec <lwip_cyclic_timer+0x60>)
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff ff6e 	bl	8016bb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016cd4:	e004      	b.n	8016ce0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016cd6:	687a      	ldr	r2, [r7, #4]
 8016cd8:	4904      	ldr	r1, [pc, #16]	; (8016cec <lwip_cyclic_timer+0x60>)
 8016cda:	68f8      	ldr	r0, [r7, #12]
 8016cdc:	f7ff ff68 	bl	8016bb0 <sys_timeout_abs>
}
 8016ce0:	bf00      	nop
 8016ce2:	3718      	adds	r7, #24
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	2000f200 	.word	0x2000f200
 8016cec:	08016c8d 	.word	0x08016c8d

08016cf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	607b      	str	r3, [r7, #4]
 8016cfa:	e00e      	b.n	8016d1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016cfc:	4a0b      	ldr	r2, [pc, #44]	; (8016d2c <sys_timeouts_init+0x3c>)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	00db      	lsls	r3, r3, #3
 8016d08:	4a08      	ldr	r2, [pc, #32]	; (8016d2c <sys_timeouts_init+0x3c>)
 8016d0a:	4413      	add	r3, r2
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	4908      	ldr	r1, [pc, #32]	; (8016d30 <sys_timeouts_init+0x40>)
 8016d10:	f000 f810 	bl	8016d34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	3301      	adds	r3, #1
 8016d18:	607b      	str	r3, [r7, #4]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2b03      	cmp	r3, #3
 8016d1e:	d9ed      	bls.n	8016cfc <sys_timeouts_init+0xc>
  }
}
 8016d20:	bf00      	nop
 8016d22:	bf00      	nop
 8016d24:	3708      	adds	r7, #8
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	bf00      	nop
 8016d2c:	0801fe00 	.word	0x0801fe00
 8016d30:	08016c8d 	.word	0x08016c8d

08016d34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b086      	sub	sp, #24
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	60f8      	str	r0, [r7, #12]
 8016d3c:	60b9      	str	r1, [r7, #8]
 8016d3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016d46:	d306      	bcc.n	8016d56 <sys_timeout+0x22>
 8016d48:	4b0a      	ldr	r3, [pc, #40]	; (8016d74 <sys_timeout+0x40>)
 8016d4a:	f240 1229 	movw	r2, #297	; 0x129
 8016d4e:	490a      	ldr	r1, [pc, #40]	; (8016d78 <sys_timeout+0x44>)
 8016d50:	480a      	ldr	r0, [pc, #40]	; (8016d7c <sys_timeout+0x48>)
 8016d52:	f003 febd 	bl	801aad0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016d56:	f7f4 fc6a 	bl	800b62e <sys_now>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	4413      	add	r3, r2
 8016d60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016d62:	687a      	ldr	r2, [r7, #4]
 8016d64:	68b9      	ldr	r1, [r7, #8]
 8016d66:	6978      	ldr	r0, [r7, #20]
 8016d68:	f7ff ff22 	bl	8016bb0 <sys_timeout_abs>
#endif
}
 8016d6c:	bf00      	nop
 8016d6e:	3718      	adds	r7, #24
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	0801f1bc 	.word	0x0801f1bc
 8016d78:	0801f258 	.word	0x0801f258
 8016d7c:	0801f230 	.word	0x0801f230

08016d80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b084      	sub	sp, #16
 8016d84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016d86:	f7f4 fc52 	bl	800b62e <sys_now>
 8016d8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016d8c:	4b17      	ldr	r3, [pc, #92]	; (8016dec <sys_check_timeouts+0x6c>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d022      	beq.n	8016dde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	685b      	ldr	r3, [r3, #4]
 8016d9c:	68fa      	ldr	r2, [r7, #12]
 8016d9e:	1ad3      	subs	r3, r2, r3
 8016da0:	0fdb      	lsrs	r3, r3, #31
 8016da2:	f003 0301 	and.w	r3, r3, #1
 8016da6:	b2db      	uxtb	r3, r3
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d11a      	bne.n	8016de2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	4a0e      	ldr	r2, [pc, #56]	; (8016dec <sys_check_timeouts+0x6c>)
 8016db2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	68db      	ldr	r3, [r3, #12]
 8016dbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	4a0a      	ldr	r2, [pc, #40]	; (8016df0 <sys_check_timeouts+0x70>)
 8016dc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016dc8:	68b9      	ldr	r1, [r7, #8]
 8016dca:	200a      	movs	r0, #10
 8016dcc:	f7f9 fab0 	bl	8010330 <memp_free>
    if (handler != NULL) {
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d0da      	beq.n	8016d8c <sys_check_timeouts+0xc>
      handler(arg);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	6838      	ldr	r0, [r7, #0]
 8016dda:	4798      	blx	r3
  do {
 8016ddc:	e7d6      	b.n	8016d8c <sys_check_timeouts+0xc>
      return;
 8016dde:	bf00      	nop
 8016de0:	e000      	b.n	8016de4 <sys_check_timeouts+0x64>
      return;
 8016de2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016de4:	3710      	adds	r7, #16
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop
 8016dec:	2000f1fc 	.word	0x2000f1fc
 8016df0:	2000f200 	.word	0x2000f200

08016df4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b082      	sub	sp, #8
 8016df8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016dfa:	4b16      	ldr	r3, [pc, #88]	; (8016e54 <sys_timeouts_sleeptime+0x60>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d102      	bne.n	8016e08 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016e02:	f04f 33ff 	mov.w	r3, #4294967295
 8016e06:	e020      	b.n	8016e4a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016e08:	f7f4 fc11 	bl	800b62e <sys_now>
 8016e0c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016e0e:	4b11      	ldr	r3, [pc, #68]	; (8016e54 <sys_timeouts_sleeptime+0x60>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	685a      	ldr	r2, [r3, #4]
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	1ad3      	subs	r3, r2, r3
 8016e18:	0fdb      	lsrs	r3, r3, #31
 8016e1a:	f003 0301 	and.w	r3, r3, #1
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d001      	beq.n	8016e28 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016e24:	2300      	movs	r3, #0
 8016e26:	e010      	b.n	8016e4a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016e28:	4b0a      	ldr	r3, [pc, #40]	; (8016e54 <sys_timeouts_sleeptime+0x60>)
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	685a      	ldr	r2, [r3, #4]
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	1ad3      	subs	r3, r2, r3
 8016e32:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	da06      	bge.n	8016e48 <sys_timeouts_sleeptime+0x54>
 8016e3a:	4b07      	ldr	r3, [pc, #28]	; (8016e58 <sys_timeouts_sleeptime+0x64>)
 8016e3c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016e40:	4906      	ldr	r1, [pc, #24]	; (8016e5c <sys_timeouts_sleeptime+0x68>)
 8016e42:	4807      	ldr	r0, [pc, #28]	; (8016e60 <sys_timeouts_sleeptime+0x6c>)
 8016e44:	f003 fe44 	bl	801aad0 <iprintf>
    return ret;
 8016e48:	683b      	ldr	r3, [r7, #0]
  }
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	2000f1fc 	.word	0x2000f1fc
 8016e58:	0801f1bc 	.word	0x0801f1bc
 8016e5c:	0801f290 	.word	0x0801f290
 8016e60:	0801f230 	.word	0x0801f230

08016e64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016e68:	f003 f840 	bl	8019eec <rand>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	b29b      	uxth	r3, r3
 8016e70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016e7a:	b29a      	uxth	r2, r3
 8016e7c:	4b01      	ldr	r3, [pc, #4]	; (8016e84 <udp_init+0x20>)
 8016e7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016e80:	bf00      	nop
 8016e82:	bd80      	pop	{r7, pc}
 8016e84:	20000040 	.word	0x20000040

08016e88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016e88:	b480      	push	{r7}
 8016e8a:	b083      	sub	sp, #12
 8016e8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016e92:	4b17      	ldr	r3, [pc, #92]	; (8016ef0 <udp_new_port+0x68>)
 8016e94:	881b      	ldrh	r3, [r3, #0]
 8016e96:	1c5a      	adds	r2, r3, #1
 8016e98:	b291      	uxth	r1, r2
 8016e9a:	4a15      	ldr	r2, [pc, #84]	; (8016ef0 <udp_new_port+0x68>)
 8016e9c:	8011      	strh	r1, [r2, #0]
 8016e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	d103      	bne.n	8016eae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016ea6:	4b12      	ldr	r3, [pc, #72]	; (8016ef0 <udp_new_port+0x68>)
 8016ea8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016eac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016eae:	4b11      	ldr	r3, [pc, #68]	; (8016ef4 <udp_new_port+0x6c>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	603b      	str	r3, [r7, #0]
 8016eb4:	e011      	b.n	8016eda <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	8a5a      	ldrh	r2, [r3, #18]
 8016eba:	4b0d      	ldr	r3, [pc, #52]	; (8016ef0 <udp_new_port+0x68>)
 8016ebc:	881b      	ldrh	r3, [r3, #0]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d108      	bne.n	8016ed4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016ec2:	88fb      	ldrh	r3, [r7, #6]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	80fb      	strh	r3, [r7, #6]
 8016ec8:	88fb      	ldrh	r3, [r7, #6]
 8016eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016ece:	d3e0      	bcc.n	8016e92 <udp_new_port+0xa>
        return 0;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	e007      	b.n	8016ee4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	68db      	ldr	r3, [r3, #12]
 8016ed8:	603b      	str	r3, [r7, #0]
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d1ea      	bne.n	8016eb6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016ee0:	4b03      	ldr	r3, [pc, #12]	; (8016ef0 <udp_new_port+0x68>)
 8016ee2:	881b      	ldrh	r3, [r3, #0]
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	370c      	adds	r7, #12
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eee:	4770      	bx	lr
 8016ef0:	20000040 	.word	0x20000040
 8016ef4:	2000f208 	.word	0x2000f208

08016ef8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	4613      	mov	r3, r2
 8016f04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d105      	bne.n	8016f18 <udp_input_local_match+0x20>
 8016f0c:	4b27      	ldr	r3, [pc, #156]	; (8016fac <udp_input_local_match+0xb4>)
 8016f0e:	2287      	movs	r2, #135	; 0x87
 8016f10:	4927      	ldr	r1, [pc, #156]	; (8016fb0 <udp_input_local_match+0xb8>)
 8016f12:	4828      	ldr	r0, [pc, #160]	; (8016fb4 <udp_input_local_match+0xbc>)
 8016f14:	f003 fddc 	bl	801aad0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d105      	bne.n	8016f2a <udp_input_local_match+0x32>
 8016f1e:	4b23      	ldr	r3, [pc, #140]	; (8016fac <udp_input_local_match+0xb4>)
 8016f20:	2288      	movs	r2, #136	; 0x88
 8016f22:	4925      	ldr	r1, [pc, #148]	; (8016fb8 <udp_input_local_match+0xc0>)
 8016f24:	4823      	ldr	r0, [pc, #140]	; (8016fb4 <udp_input_local_match+0xbc>)
 8016f26:	f003 fdd3 	bl	801aad0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	7a1b      	ldrb	r3, [r3, #8]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d00b      	beq.n	8016f4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	7a1a      	ldrb	r2, [r3, #8]
 8016f36:	4b21      	ldr	r3, [pc, #132]	; (8016fbc <udp_input_local_match+0xc4>)
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016f3e:	3301      	adds	r3, #1
 8016f40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d001      	beq.n	8016f4a <udp_input_local_match+0x52>
    return 0;
 8016f46:	2300      	movs	r3, #0
 8016f48:	e02b      	b.n	8016fa2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016f4a:	79fb      	ldrb	r3, [r7, #7]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d018      	beq.n	8016f82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d013      	beq.n	8016f7e <udp_input_local_match+0x86>
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d00f      	beq.n	8016f7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016f5e:	4b17      	ldr	r3, [pc, #92]	; (8016fbc <udp_input_local_match+0xc4>)
 8016f60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f66:	d00a      	beq.n	8016f7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	681a      	ldr	r2, [r3, #0]
 8016f6c:	4b13      	ldr	r3, [pc, #76]	; (8016fbc <udp_input_local_match+0xc4>)
 8016f6e:	695b      	ldr	r3, [r3, #20]
 8016f70:	405a      	eors	r2, r3
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	3308      	adds	r3, #8
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d110      	bne.n	8016fa0 <udp_input_local_match+0xa8>
          return 1;
 8016f7e:	2301      	movs	r3, #1
 8016f80:	e00f      	b.n	8016fa2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d009      	beq.n	8016f9c <udp_input_local_match+0xa4>
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d005      	beq.n	8016f9c <udp_input_local_match+0xa4>
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	4b09      	ldr	r3, [pc, #36]	; (8016fbc <udp_input_local_match+0xc4>)
 8016f96:	695b      	ldr	r3, [r3, #20]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d101      	bne.n	8016fa0 <udp_input_local_match+0xa8>
        return 1;
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	e000      	b.n	8016fa2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016fa0:	2300      	movs	r3, #0
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3710      	adds	r7, #16
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	0801f2a4 	.word	0x0801f2a4
 8016fb0:	0801f2d4 	.word	0x0801f2d4
 8016fb4:	0801f2f8 	.word	0x0801f2f8
 8016fb8:	0801f320 	.word	0x0801f320
 8016fbc:	2000972c 	.word	0x2000972c

08016fc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016fc0:	b590      	push	{r4, r7, lr}
 8016fc2:	b08d      	sub	sp, #52	; 0x34
 8016fc4:	af02      	add	r7, sp, #8
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d105      	bne.n	8016fe0 <udp_input+0x20>
 8016fd4:	4b7c      	ldr	r3, [pc, #496]	; (80171c8 <udp_input+0x208>)
 8016fd6:	22cf      	movs	r2, #207	; 0xcf
 8016fd8:	497c      	ldr	r1, [pc, #496]	; (80171cc <udp_input+0x20c>)
 8016fda:	487d      	ldr	r0, [pc, #500]	; (80171d0 <udp_input+0x210>)
 8016fdc:	f003 fd78 	bl	801aad0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d105      	bne.n	8016ff2 <udp_input+0x32>
 8016fe6:	4b78      	ldr	r3, [pc, #480]	; (80171c8 <udp_input+0x208>)
 8016fe8:	22d0      	movs	r2, #208	; 0xd0
 8016fea:	497a      	ldr	r1, [pc, #488]	; (80171d4 <udp_input+0x214>)
 8016fec:	4878      	ldr	r0, [pc, #480]	; (80171d0 <udp_input+0x210>)
 8016fee:	f003 fd6f 	bl	801aad0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	895b      	ldrh	r3, [r3, #10]
 8016ff6:	2b07      	cmp	r3, #7
 8016ff8:	d803      	bhi.n	8017002 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f7fa f858 	bl	80110b0 <pbuf_free>
    goto end;
 8017000:	e0de      	b.n	80171c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017008:	4b73      	ldr	r3, [pc, #460]	; (80171d8 <udp_input+0x218>)
 801700a:	695b      	ldr	r3, [r3, #20]
 801700c:	4a72      	ldr	r2, [pc, #456]	; (80171d8 <udp_input+0x218>)
 801700e:	6812      	ldr	r2, [r2, #0]
 8017010:	4611      	mov	r1, r2
 8017012:	4618      	mov	r0, r3
 8017014:	f001 ff08 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 8017018:	4603      	mov	r3, r0
 801701a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	881b      	ldrh	r3, [r3, #0]
 8017020:	b29b      	uxth	r3, r3
 8017022:	4618      	mov	r0, r3
 8017024:	f7f8 f96c 	bl	800f300 <lwip_htons>
 8017028:	4603      	mov	r3, r0
 801702a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	885b      	ldrh	r3, [r3, #2]
 8017030:	b29b      	uxth	r3, r3
 8017032:	4618      	mov	r0, r3
 8017034:	f7f8 f964 	bl	800f300 <lwip_htons>
 8017038:	4603      	mov	r3, r0
 801703a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801703c:	2300      	movs	r3, #0
 801703e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017040:	2300      	movs	r3, #0
 8017042:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017044:	2300      	movs	r3, #0
 8017046:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017048:	4b64      	ldr	r3, [pc, #400]	; (80171dc <udp_input+0x21c>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	627b      	str	r3, [r7, #36]	; 0x24
 801704e:	e054      	b.n	80170fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	8a5b      	ldrh	r3, [r3, #18]
 8017054:	89fa      	ldrh	r2, [r7, #14]
 8017056:	429a      	cmp	r2, r3
 8017058:	d14a      	bne.n	80170f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801705a:	7cfb      	ldrb	r3, [r7, #19]
 801705c:	461a      	mov	r2, r3
 801705e:	6839      	ldr	r1, [r7, #0]
 8017060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017062:	f7ff ff49 	bl	8016ef8 <udp_input_local_match>
 8017066:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017068:	2b00      	cmp	r3, #0
 801706a:	d041      	beq.n	80170f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	7c1b      	ldrb	r3, [r3, #16]
 8017070:	f003 0304 	and.w	r3, r3, #4
 8017074:	2b00      	cmp	r3, #0
 8017076:	d11d      	bne.n	80170b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017078:	69fb      	ldr	r3, [r7, #28]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d102      	bne.n	8017084 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017080:	61fb      	str	r3, [r7, #28]
 8017082:	e017      	b.n	80170b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017084:	7cfb      	ldrb	r3, [r7, #19]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d014      	beq.n	80170b4 <udp_input+0xf4>
 801708a:	4b53      	ldr	r3, [pc, #332]	; (80171d8 <udp_input+0x218>)
 801708c:	695b      	ldr	r3, [r3, #20]
 801708e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017092:	d10f      	bne.n	80170b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017094:	69fb      	ldr	r3, [r7, #28]
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	3304      	adds	r3, #4
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d008      	beq.n	80170b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80170a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	3304      	adds	r3, #4
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	429a      	cmp	r2, r3
 80170ae:	d101      	bne.n	80170b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80170b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80170b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b6:	8a9b      	ldrh	r3, [r3, #20]
 80170b8:	8a3a      	ldrh	r2, [r7, #16]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d118      	bne.n	80170f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80170be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d005      	beq.n	80170d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80170c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c8:	685a      	ldr	r2, [r3, #4]
 80170ca:	4b43      	ldr	r3, [pc, #268]	; (80171d8 <udp_input+0x218>)
 80170cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d10e      	bne.n	80170f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80170d2:	6a3b      	ldr	r3, [r7, #32]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d014      	beq.n	8017102 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80170d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170da:	68da      	ldr	r2, [r3, #12]
 80170dc:	6a3b      	ldr	r3, [r7, #32]
 80170de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80170e0:	4b3e      	ldr	r3, [pc, #248]	; (80171dc <udp_input+0x21c>)
 80170e2:	681a      	ldr	r2, [r3, #0]
 80170e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80170e8:	4a3c      	ldr	r2, [pc, #240]	; (80171dc <udp_input+0x21c>)
 80170ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80170ee:	e008      	b.n	8017102 <udp_input+0x142>
      }
    }

    prev = pcb;
 80170f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80170f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	627b      	str	r3, [r7, #36]	; 0x24
 80170fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d1a7      	bne.n	8017050 <udp_input+0x90>
 8017100:	e000      	b.n	8017104 <udp_input+0x144>
        break;
 8017102:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017106:	2b00      	cmp	r3, #0
 8017108:	d101      	bne.n	801710e <udp_input+0x14e>
    pcb = uncon_pcb;
 801710a:	69fb      	ldr	r3, [r7, #28]
 801710c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017110:	2b00      	cmp	r3, #0
 8017112:	d002      	beq.n	801711a <udp_input+0x15a>
    for_us = 1;
 8017114:	2301      	movs	r3, #1
 8017116:	76fb      	strb	r3, [r7, #27]
 8017118:	e00a      	b.n	8017130 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	3304      	adds	r3, #4
 801711e:	681a      	ldr	r2, [r3, #0]
 8017120:	4b2d      	ldr	r3, [pc, #180]	; (80171d8 <udp_input+0x218>)
 8017122:	695b      	ldr	r3, [r3, #20]
 8017124:	429a      	cmp	r2, r3
 8017126:	bf0c      	ite	eq
 8017128:	2301      	moveq	r3, #1
 801712a:	2300      	movne	r3, #0
 801712c:	b2db      	uxtb	r3, r3
 801712e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017130:	7efb      	ldrb	r3, [r7, #27]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d041      	beq.n	80171ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017136:	2108      	movs	r1, #8
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f7f9 ff33 	bl	8010fa4 <pbuf_remove_header>
 801713e:	4603      	mov	r3, r0
 8017140:	2b00      	cmp	r3, #0
 8017142:	d00a      	beq.n	801715a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017144:	4b20      	ldr	r3, [pc, #128]	; (80171c8 <udp_input+0x208>)
 8017146:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801714a:	4925      	ldr	r1, [pc, #148]	; (80171e0 <udp_input+0x220>)
 801714c:	4820      	ldr	r0, [pc, #128]	; (80171d0 <udp_input+0x210>)
 801714e:	f003 fcbf 	bl	801aad0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7f9 ffac 	bl	80110b0 <pbuf_free>
      goto end;
 8017158:	e032      	b.n	80171c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	2b00      	cmp	r3, #0
 801715e:	d012      	beq.n	8017186 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017162:	699b      	ldr	r3, [r3, #24]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d00a      	beq.n	801717e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716a:	699c      	ldr	r4, [r3, #24]
 801716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716e:	69d8      	ldr	r0, [r3, #28]
 8017170:	8a3b      	ldrh	r3, [r7, #16]
 8017172:	9300      	str	r3, [sp, #0]
 8017174:	4b1b      	ldr	r3, [pc, #108]	; (80171e4 <udp_input+0x224>)
 8017176:	687a      	ldr	r2, [r7, #4]
 8017178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801717a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801717c:	e021      	b.n	80171c2 <udp_input+0x202>
        pbuf_free(p);
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f7f9 ff96 	bl	80110b0 <pbuf_free>
        goto end;
 8017184:	e01c      	b.n	80171c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017186:	7cfb      	ldrb	r3, [r7, #19]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d112      	bne.n	80171b2 <udp_input+0x1f2>
 801718c:	4b12      	ldr	r3, [pc, #72]	; (80171d8 <udp_input+0x218>)
 801718e:	695b      	ldr	r3, [r3, #20]
 8017190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017194:	2be0      	cmp	r3, #224	; 0xe0
 8017196:	d00c      	beq.n	80171b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017198:	4b0f      	ldr	r3, [pc, #60]	; (80171d8 <udp_input+0x218>)
 801719a:	899b      	ldrh	r3, [r3, #12]
 801719c:	3308      	adds	r3, #8
 801719e:	b29b      	uxth	r3, r3
 80171a0:	b21b      	sxth	r3, r3
 80171a2:	4619      	mov	r1, r3
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	f7f9 ff70 	bl	801108a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80171aa:	2103      	movs	r1, #3
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f001 fb1b 	bl	80187e8 <icmp_dest_unreach>
      pbuf_free(p);
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f7f9 ff7c 	bl	80110b0 <pbuf_free>
  return;
 80171b8:	e003      	b.n	80171c2 <udp_input+0x202>
    pbuf_free(p);
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f7f9 ff78 	bl	80110b0 <pbuf_free>
  return;
 80171c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80171c2:	372c      	adds	r7, #44	; 0x2c
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd90      	pop	{r4, r7, pc}
 80171c8:	0801f2a4 	.word	0x0801f2a4
 80171cc:	0801f348 	.word	0x0801f348
 80171d0:	0801f2f8 	.word	0x0801f2f8
 80171d4:	0801f360 	.word	0x0801f360
 80171d8:	2000972c 	.word	0x2000972c
 80171dc:	2000f208 	.word	0x2000f208
 80171e0:	0801f37c 	.word	0x0801f37c
 80171e4:	2000973c 	.word	0x2000973c

080171e8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b088      	sub	sp, #32
 80171ec:	af02      	add	r7, sp, #8
 80171ee:	60f8      	str	r0, [r7, #12]
 80171f0:	60b9      	str	r1, [r7, #8]
 80171f2:	607a      	str	r2, [r7, #4]
 80171f4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d109      	bne.n	8017210 <udp_sendto+0x28>
 80171fc:	4b23      	ldr	r3, [pc, #140]	; (801728c <udp_sendto+0xa4>)
 80171fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017202:	4923      	ldr	r1, [pc, #140]	; (8017290 <udp_sendto+0xa8>)
 8017204:	4823      	ldr	r0, [pc, #140]	; (8017294 <udp_sendto+0xac>)
 8017206:	f003 fc63 	bl	801aad0 <iprintf>
 801720a:	f06f 030f 	mvn.w	r3, #15
 801720e:	e038      	b.n	8017282 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d109      	bne.n	801722a <udp_sendto+0x42>
 8017216:	4b1d      	ldr	r3, [pc, #116]	; (801728c <udp_sendto+0xa4>)
 8017218:	f240 2219 	movw	r2, #537	; 0x219
 801721c:	491e      	ldr	r1, [pc, #120]	; (8017298 <udp_sendto+0xb0>)
 801721e:	481d      	ldr	r0, [pc, #116]	; (8017294 <udp_sendto+0xac>)
 8017220:	f003 fc56 	bl	801aad0 <iprintf>
 8017224:	f06f 030f 	mvn.w	r3, #15
 8017228:	e02b      	b.n	8017282 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d109      	bne.n	8017244 <udp_sendto+0x5c>
 8017230:	4b16      	ldr	r3, [pc, #88]	; (801728c <udp_sendto+0xa4>)
 8017232:	f240 221a 	movw	r2, #538	; 0x21a
 8017236:	4919      	ldr	r1, [pc, #100]	; (801729c <udp_sendto+0xb4>)
 8017238:	4816      	ldr	r0, [pc, #88]	; (8017294 <udp_sendto+0xac>)
 801723a:	f003 fc49 	bl	801aad0 <iprintf>
 801723e:	f06f 030f 	mvn.w	r3, #15
 8017242:	e01e      	b.n	8017282 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	7a1b      	ldrb	r3, [r3, #8]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d006      	beq.n	801725a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	7a1b      	ldrb	r3, [r3, #8]
 8017250:	4618      	mov	r0, r3
 8017252:	f7f9 fb9f 	bl	8010994 <netif_get_by_index>
 8017256:	6178      	str	r0, [r7, #20]
 8017258:	e003      	b.n	8017262 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f001 fb4e 	bl	80188fc <ip4_route>
 8017260:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d102      	bne.n	801726e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017268:	f06f 0303 	mvn.w	r3, #3
 801726c:	e009      	b.n	8017282 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801726e:	887a      	ldrh	r2, [r7, #2]
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	9300      	str	r3, [sp, #0]
 8017274:	4613      	mov	r3, r2
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	68b9      	ldr	r1, [r7, #8]
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	f000 f810 	bl	80172a0 <udp_sendto_if>
 8017280:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017282:	4618      	mov	r0, r3
 8017284:	3718      	adds	r7, #24
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	0801f2a4 	.word	0x0801f2a4
 8017290:	0801f3c8 	.word	0x0801f3c8
 8017294:	0801f2f8 	.word	0x0801f2f8
 8017298:	0801f3e0 	.word	0x0801f3e0
 801729c:	0801f3fc 	.word	0x0801f3fc

080172a0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b088      	sub	sp, #32
 80172a4:	af02      	add	r7, sp, #8
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d109      	bne.n	80172c8 <udp_sendto_if+0x28>
 80172b4:	4b2e      	ldr	r3, [pc, #184]	; (8017370 <udp_sendto_if+0xd0>)
 80172b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80172ba:	492e      	ldr	r1, [pc, #184]	; (8017374 <udp_sendto_if+0xd4>)
 80172bc:	482e      	ldr	r0, [pc, #184]	; (8017378 <udp_sendto_if+0xd8>)
 80172be:	f003 fc07 	bl	801aad0 <iprintf>
 80172c2:	f06f 030f 	mvn.w	r3, #15
 80172c6:	e04f      	b.n	8017368 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d109      	bne.n	80172e2 <udp_sendto_if+0x42>
 80172ce:	4b28      	ldr	r3, [pc, #160]	; (8017370 <udp_sendto_if+0xd0>)
 80172d0:	f240 2281 	movw	r2, #641	; 0x281
 80172d4:	4929      	ldr	r1, [pc, #164]	; (801737c <udp_sendto_if+0xdc>)
 80172d6:	4828      	ldr	r0, [pc, #160]	; (8017378 <udp_sendto_if+0xd8>)
 80172d8:	f003 fbfa 	bl	801aad0 <iprintf>
 80172dc:	f06f 030f 	mvn.w	r3, #15
 80172e0:	e042      	b.n	8017368 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d109      	bne.n	80172fc <udp_sendto_if+0x5c>
 80172e8:	4b21      	ldr	r3, [pc, #132]	; (8017370 <udp_sendto_if+0xd0>)
 80172ea:	f240 2282 	movw	r2, #642	; 0x282
 80172ee:	4924      	ldr	r1, [pc, #144]	; (8017380 <udp_sendto_if+0xe0>)
 80172f0:	4821      	ldr	r0, [pc, #132]	; (8017378 <udp_sendto_if+0xd8>)
 80172f2:	f003 fbed 	bl	801aad0 <iprintf>
 80172f6:	f06f 030f 	mvn.w	r3, #15
 80172fa:	e035      	b.n	8017368 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80172fc:	6a3b      	ldr	r3, [r7, #32]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d109      	bne.n	8017316 <udp_sendto_if+0x76>
 8017302:	4b1b      	ldr	r3, [pc, #108]	; (8017370 <udp_sendto_if+0xd0>)
 8017304:	f240 2283 	movw	r2, #643	; 0x283
 8017308:	491e      	ldr	r1, [pc, #120]	; (8017384 <udp_sendto_if+0xe4>)
 801730a:	481b      	ldr	r0, [pc, #108]	; (8017378 <udp_sendto_if+0xd8>)
 801730c:	f003 fbe0 	bl	801aad0 <iprintf>
 8017310:	f06f 030f 	mvn.w	r3, #15
 8017314:	e028      	b.n	8017368 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d009      	beq.n	8017330 <udp_sendto_if+0x90>
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d005      	beq.n	8017330 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801732c:	2be0      	cmp	r3, #224	; 0xe0
 801732e:	d103      	bne.n	8017338 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017330:	6a3b      	ldr	r3, [r7, #32]
 8017332:	3304      	adds	r3, #4
 8017334:	617b      	str	r3, [r7, #20]
 8017336:	e00b      	b.n	8017350 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	681a      	ldr	r2, [r3, #0]
 801733c:	6a3b      	ldr	r3, [r7, #32]
 801733e:	3304      	adds	r3, #4
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	429a      	cmp	r2, r3
 8017344:	d002      	beq.n	801734c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017346:	f06f 0303 	mvn.w	r3, #3
 801734a:	e00d      	b.n	8017368 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017350:	887a      	ldrh	r2, [r7, #2]
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	9301      	str	r3, [sp, #4]
 8017356:	6a3b      	ldr	r3, [r7, #32]
 8017358:	9300      	str	r3, [sp, #0]
 801735a:	4613      	mov	r3, r2
 801735c:	687a      	ldr	r2, [r7, #4]
 801735e:	68b9      	ldr	r1, [r7, #8]
 8017360:	68f8      	ldr	r0, [r7, #12]
 8017362:	f000 f811 	bl	8017388 <udp_sendto_if_src>
 8017366:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017368:	4618      	mov	r0, r3
 801736a:	3718      	adds	r7, #24
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}
 8017370:	0801f2a4 	.word	0x0801f2a4
 8017374:	0801f418 	.word	0x0801f418
 8017378:	0801f2f8 	.word	0x0801f2f8
 801737c:	0801f434 	.word	0x0801f434
 8017380:	0801f450 	.word	0x0801f450
 8017384:	0801f470 	.word	0x0801f470

08017388 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b08c      	sub	sp, #48	; 0x30
 801738c:	af04      	add	r7, sp, #16
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	607a      	str	r2, [r7, #4]
 8017394:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d109      	bne.n	80173b0 <udp_sendto_if_src+0x28>
 801739c:	4b65      	ldr	r3, [pc, #404]	; (8017534 <udp_sendto_if_src+0x1ac>)
 801739e:	f240 22d1 	movw	r2, #721	; 0x2d1
 80173a2:	4965      	ldr	r1, [pc, #404]	; (8017538 <udp_sendto_if_src+0x1b0>)
 80173a4:	4865      	ldr	r0, [pc, #404]	; (801753c <udp_sendto_if_src+0x1b4>)
 80173a6:	f003 fb93 	bl	801aad0 <iprintf>
 80173aa:	f06f 030f 	mvn.w	r3, #15
 80173ae:	e0bc      	b.n	801752a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d109      	bne.n	80173ca <udp_sendto_if_src+0x42>
 80173b6:	4b5f      	ldr	r3, [pc, #380]	; (8017534 <udp_sendto_if_src+0x1ac>)
 80173b8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80173bc:	4960      	ldr	r1, [pc, #384]	; (8017540 <udp_sendto_if_src+0x1b8>)
 80173be:	485f      	ldr	r0, [pc, #380]	; (801753c <udp_sendto_if_src+0x1b4>)
 80173c0:	f003 fb86 	bl	801aad0 <iprintf>
 80173c4:	f06f 030f 	mvn.w	r3, #15
 80173c8:	e0af      	b.n	801752a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d109      	bne.n	80173e4 <udp_sendto_if_src+0x5c>
 80173d0:	4b58      	ldr	r3, [pc, #352]	; (8017534 <udp_sendto_if_src+0x1ac>)
 80173d2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80173d6:	495b      	ldr	r1, [pc, #364]	; (8017544 <udp_sendto_if_src+0x1bc>)
 80173d8:	4858      	ldr	r0, [pc, #352]	; (801753c <udp_sendto_if_src+0x1b4>)
 80173da:	f003 fb79 	bl	801aad0 <iprintf>
 80173de:	f06f 030f 	mvn.w	r3, #15
 80173e2:	e0a2      	b.n	801752a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80173e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d109      	bne.n	80173fe <udp_sendto_if_src+0x76>
 80173ea:	4b52      	ldr	r3, [pc, #328]	; (8017534 <udp_sendto_if_src+0x1ac>)
 80173ec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80173f0:	4955      	ldr	r1, [pc, #340]	; (8017548 <udp_sendto_if_src+0x1c0>)
 80173f2:	4852      	ldr	r0, [pc, #328]	; (801753c <udp_sendto_if_src+0x1b4>)
 80173f4:	f003 fb6c 	bl	801aad0 <iprintf>
 80173f8:	f06f 030f 	mvn.w	r3, #15
 80173fc:	e095      	b.n	801752a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80173fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017400:	2b00      	cmp	r3, #0
 8017402:	d109      	bne.n	8017418 <udp_sendto_if_src+0x90>
 8017404:	4b4b      	ldr	r3, [pc, #300]	; (8017534 <udp_sendto_if_src+0x1ac>)
 8017406:	f240 22d5 	movw	r2, #725	; 0x2d5
 801740a:	4950      	ldr	r1, [pc, #320]	; (801754c <udp_sendto_if_src+0x1c4>)
 801740c:	484b      	ldr	r0, [pc, #300]	; (801753c <udp_sendto_if_src+0x1b4>)
 801740e:	f003 fb5f 	bl	801aad0 <iprintf>
 8017412:	f06f 030f 	mvn.w	r3, #15
 8017416:	e088      	b.n	801752a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	8a5b      	ldrh	r3, [r3, #18]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d10f      	bne.n	8017440 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017420:	68f9      	ldr	r1, [r7, #12]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	8a5b      	ldrh	r3, [r3, #18]
 8017426:	461a      	mov	r2, r3
 8017428:	68f8      	ldr	r0, [r7, #12]
 801742a:	f000 f893 	bl	8017554 <udp_bind>
 801742e:	4603      	mov	r3, r0
 8017430:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017432:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d002      	beq.n	8017440 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801743a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801743e:	e074      	b.n	801752a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	891b      	ldrh	r3, [r3, #8]
 8017444:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017448:	4293      	cmp	r3, r2
 801744a:	d902      	bls.n	8017452 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801744c:	f04f 33ff 	mov.w	r3, #4294967295
 8017450:	e06b      	b.n	801752a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017452:	2108      	movs	r1, #8
 8017454:	68b8      	ldr	r0, [r7, #8]
 8017456:	f7f9 fd95 	bl	8010f84 <pbuf_add_header>
 801745a:	4603      	mov	r3, r0
 801745c:	2b00      	cmp	r3, #0
 801745e:	d015      	beq.n	801748c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017460:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017464:	2108      	movs	r1, #8
 8017466:	2022      	movs	r0, #34	; 0x22
 8017468:	f7f9 fb3e 	bl	8010ae8 <pbuf_alloc>
 801746c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801746e:	69fb      	ldr	r3, [r7, #28]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d102      	bne.n	801747a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017474:	f04f 33ff 	mov.w	r3, #4294967295
 8017478:	e057      	b.n	801752a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	891b      	ldrh	r3, [r3, #8]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d006      	beq.n	8017490 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017482:	68b9      	ldr	r1, [r7, #8]
 8017484:	69f8      	ldr	r0, [r7, #28]
 8017486:	f7f9 ff37 	bl	80112f8 <pbuf_chain>
 801748a:	e001      	b.n	8017490 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	895b      	ldrh	r3, [r3, #10]
 8017494:	2b07      	cmp	r3, #7
 8017496:	d806      	bhi.n	80174a6 <udp_sendto_if_src+0x11e>
 8017498:	4b26      	ldr	r3, [pc, #152]	; (8017534 <udp_sendto_if_src+0x1ac>)
 801749a:	f240 320d 	movw	r2, #781	; 0x30d
 801749e:	492c      	ldr	r1, [pc, #176]	; (8017550 <udp_sendto_if_src+0x1c8>)
 80174a0:	4826      	ldr	r0, [pc, #152]	; (801753c <udp_sendto_if_src+0x1b4>)
 80174a2:	f003 fb15 	bl	801aad0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	8a5b      	ldrh	r3, [r3, #18]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f7 ff25 	bl	800f300 <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	461a      	mov	r2, r3
 80174ba:	697b      	ldr	r3, [r7, #20]
 80174bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80174be:	887b      	ldrh	r3, [r7, #2]
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7f7 ff1d 	bl	800f300 <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	461a      	mov	r2, r3
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	2200      	movs	r2, #0
 80174d2:	719a      	strb	r2, [r3, #6]
 80174d4:	2200      	movs	r2, #0
 80174d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80174d8:	69fb      	ldr	r3, [r7, #28]
 80174da:	891b      	ldrh	r3, [r3, #8]
 80174dc:	4618      	mov	r0, r3
 80174de:	f7f7 ff0f 	bl	800f300 <lwip_htons>
 80174e2:	4603      	mov	r3, r0
 80174e4:	461a      	mov	r2, r3
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80174ea:	2311      	movs	r3, #17
 80174ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	7adb      	ldrb	r3, [r3, #11]
 80174f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	7a9b      	ldrb	r3, [r3, #10]
 80174f8:	7cb9      	ldrb	r1, [r7, #18]
 80174fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174fc:	9202      	str	r2, [sp, #8]
 80174fe:	7cfa      	ldrb	r2, [r7, #19]
 8017500:	9201      	str	r2, [sp, #4]
 8017502:	9300      	str	r3, [sp, #0]
 8017504:	460b      	mov	r3, r1
 8017506:	687a      	ldr	r2, [r7, #4]
 8017508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801750a:	69f8      	ldr	r0, [r7, #28]
 801750c:	f001 fbde 	bl	8018ccc <ip4_output_if_src>
 8017510:	4603      	mov	r3, r0
 8017512:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017514:	69fa      	ldr	r2, [r7, #28]
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	429a      	cmp	r2, r3
 801751a:	d004      	beq.n	8017526 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801751c:	69f8      	ldr	r0, [r7, #28]
 801751e:	f7f9 fdc7 	bl	80110b0 <pbuf_free>
    q = NULL;
 8017522:	2300      	movs	r3, #0
 8017524:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017526:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801752a:	4618      	mov	r0, r3
 801752c:	3720      	adds	r7, #32
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	0801f2a4 	.word	0x0801f2a4
 8017538:	0801f490 	.word	0x0801f490
 801753c:	0801f2f8 	.word	0x0801f2f8
 8017540:	0801f4b0 	.word	0x0801f4b0
 8017544:	0801f4d0 	.word	0x0801f4d0
 8017548:	0801f4f4 	.word	0x0801f4f4
 801754c:	0801f518 	.word	0x0801f518
 8017550:	0801f53c 	.word	0x0801f53c

08017554 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b086      	sub	sp, #24
 8017558:	af00      	add	r7, sp, #0
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	4613      	mov	r3, r2
 8017560:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d101      	bne.n	801756c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017568:	4b39      	ldr	r3, [pc, #228]	; (8017650 <udp_bind+0xfc>)
 801756a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d109      	bne.n	8017586 <udp_bind+0x32>
 8017572:	4b38      	ldr	r3, [pc, #224]	; (8017654 <udp_bind+0x100>)
 8017574:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017578:	4937      	ldr	r1, [pc, #220]	; (8017658 <udp_bind+0x104>)
 801757a:	4838      	ldr	r0, [pc, #224]	; (801765c <udp_bind+0x108>)
 801757c:	f003 faa8 	bl	801aad0 <iprintf>
 8017580:	f06f 030f 	mvn.w	r3, #15
 8017584:	e060      	b.n	8017648 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017586:	2300      	movs	r3, #0
 8017588:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801758a:	4b35      	ldr	r3, [pc, #212]	; (8017660 <udp_bind+0x10c>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	617b      	str	r3, [r7, #20]
 8017590:	e009      	b.n	80175a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017592:	68fa      	ldr	r2, [r7, #12]
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	429a      	cmp	r2, r3
 8017598:	d102      	bne.n	80175a0 <udp_bind+0x4c>
      rebind = 1;
 801759a:	2301      	movs	r3, #1
 801759c:	74fb      	strb	r3, [r7, #19]
      break;
 801759e:	e005      	b.n	80175ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80175a0:	697b      	ldr	r3, [r7, #20]
 80175a2:	68db      	ldr	r3, [r3, #12]
 80175a4:	617b      	str	r3, [r7, #20]
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d1f2      	bne.n	8017592 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80175ac:	88fb      	ldrh	r3, [r7, #6]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d109      	bne.n	80175c6 <udp_bind+0x72>
    port = udp_new_port();
 80175b2:	f7ff fc69 	bl	8016e88 <udp_new_port>
 80175b6:	4603      	mov	r3, r0
 80175b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80175ba:	88fb      	ldrh	r3, [r7, #6]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d12c      	bne.n	801761a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80175c0:	f06f 0307 	mvn.w	r3, #7
 80175c4:	e040      	b.n	8017648 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80175c6:	4b26      	ldr	r3, [pc, #152]	; (8017660 <udp_bind+0x10c>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	617b      	str	r3, [r7, #20]
 80175cc:	e022      	b.n	8017614 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80175ce:	68fa      	ldr	r2, [r7, #12]
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d01b      	beq.n	801760e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	8a5b      	ldrh	r3, [r3, #18]
 80175da:	88fa      	ldrh	r2, [r7, #6]
 80175dc:	429a      	cmp	r2, r3
 80175de:	d116      	bne.n	801760e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	681a      	ldr	r2, [r3, #0]
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d00d      	beq.n	8017608 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80175ec:	68bb      	ldr	r3, [r7, #8]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d00a      	beq.n	8017608 <udp_bind+0xb4>
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d006      	beq.n	8017608 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80175fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d003      	beq.n	8017608 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d102      	bne.n	801760e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017608:	f06f 0307 	mvn.w	r3, #7
 801760c:	e01c      	b.n	8017648 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	68db      	ldr	r3, [r3, #12]
 8017612:	617b      	str	r3, [r7, #20]
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d1d9      	bne.n	80175ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d002      	beq.n	8017626 <udp_bind+0xd2>
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	e000      	b.n	8017628 <udp_bind+0xd4>
 8017626:	2300      	movs	r3, #0
 8017628:	68fa      	ldr	r2, [r7, #12]
 801762a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	88fa      	ldrh	r2, [r7, #6]
 8017630:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017632:	7cfb      	ldrb	r3, [r7, #19]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d106      	bne.n	8017646 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017638:	4b09      	ldr	r3, [pc, #36]	; (8017660 <udp_bind+0x10c>)
 801763a:	681a      	ldr	r2, [r3, #0]
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017640:	4a07      	ldr	r2, [pc, #28]	; (8017660 <udp_bind+0x10c>)
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017646:	2300      	movs	r3, #0
}
 8017648:	4618      	mov	r0, r3
 801764a:	3718      	adds	r7, #24
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}
 8017650:	0801fe20 	.word	0x0801fe20
 8017654:	0801f2a4 	.word	0x0801f2a4
 8017658:	0801f56c 	.word	0x0801f56c
 801765c:	0801f2f8 	.word	0x0801f2f8
 8017660:	2000f208 	.word	0x2000f208

08017664 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b084      	sub	sp, #16
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d107      	bne.n	8017682 <udp_remove+0x1e>
 8017672:	4b19      	ldr	r3, [pc, #100]	; (80176d8 <udp_remove+0x74>)
 8017674:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017678:	4918      	ldr	r1, [pc, #96]	; (80176dc <udp_remove+0x78>)
 801767a:	4819      	ldr	r0, [pc, #100]	; (80176e0 <udp_remove+0x7c>)
 801767c:	f003 fa28 	bl	801aad0 <iprintf>
 8017680:	e026      	b.n	80176d0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017682:	4b18      	ldr	r3, [pc, #96]	; (80176e4 <udp_remove+0x80>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	429a      	cmp	r2, r3
 801768a:	d105      	bne.n	8017698 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801768c:	4b15      	ldr	r3, [pc, #84]	; (80176e4 <udp_remove+0x80>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	68db      	ldr	r3, [r3, #12]
 8017692:	4a14      	ldr	r2, [pc, #80]	; (80176e4 <udp_remove+0x80>)
 8017694:	6013      	str	r3, [r2, #0]
 8017696:	e017      	b.n	80176c8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017698:	4b12      	ldr	r3, [pc, #72]	; (80176e4 <udp_remove+0x80>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	60fb      	str	r3, [r7, #12]
 801769e:	e010      	b.n	80176c2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	68db      	ldr	r3, [r3, #12]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d009      	beq.n	80176bc <udp_remove+0x58>
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	68db      	ldr	r3, [r3, #12]
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d104      	bne.n	80176bc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	68da      	ldr	r2, [r3, #12]
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	60da      	str	r2, [r3, #12]
        break;
 80176ba:	e005      	b.n	80176c8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	60fb      	str	r3, [r7, #12]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d1eb      	bne.n	80176a0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80176c8:	6879      	ldr	r1, [r7, #4]
 80176ca:	2000      	movs	r0, #0
 80176cc:	f7f8 fe30 	bl	8010330 <memp_free>
}
 80176d0:	3710      	adds	r7, #16
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	0801f2a4 	.word	0x0801f2a4
 80176dc:	0801f5f0 	.word	0x0801f5f0
 80176e0:	0801f2f8 	.word	0x0801f2f8
 80176e4:	2000f208 	.word	0x2000f208

080176e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80176e8:	b480      	push	{r7}
 80176ea:	b085      	sub	sp, #20
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d01e      	beq.n	8017736 <udp_netif_ip_addr_changed+0x4e>
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d01a      	beq.n	8017736 <udp_netif_ip_addr_changed+0x4e>
 8017700:	683b      	ldr	r3, [r7, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d017      	beq.n	8017736 <udp_netif_ip_addr_changed+0x4e>
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d013      	beq.n	8017736 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801770e:	4b0d      	ldr	r3, [pc, #52]	; (8017744 <udp_netif_ip_addr_changed+0x5c>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	60fb      	str	r3, [r7, #12]
 8017714:	e00c      	b.n	8017730 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	429a      	cmp	r2, r3
 8017720:	d103      	bne.n	801772a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	681a      	ldr	r2, [r3, #0]
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	68db      	ldr	r3, [r3, #12]
 801772e:	60fb      	str	r3, [r7, #12]
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d1ef      	bne.n	8017716 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017736:	bf00      	nop
 8017738:	3714      	adds	r7, #20
 801773a:	46bd      	mov	sp, r7
 801773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017740:	4770      	bx	lr
 8017742:	bf00      	nop
 8017744:	2000f208 	.word	0x2000f208

08017748 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b082      	sub	sp, #8
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017750:	4915      	ldr	r1, [pc, #84]	; (80177a8 <etharp_free_entry+0x60>)
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	4613      	mov	r3, r2
 8017756:	005b      	lsls	r3, r3, #1
 8017758:	4413      	add	r3, r2
 801775a:	00db      	lsls	r3, r3, #3
 801775c:	440b      	add	r3, r1
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d013      	beq.n	801778c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017764:	4910      	ldr	r1, [pc, #64]	; (80177a8 <etharp_free_entry+0x60>)
 8017766:	687a      	ldr	r2, [r7, #4]
 8017768:	4613      	mov	r3, r2
 801776a:	005b      	lsls	r3, r3, #1
 801776c:	4413      	add	r3, r2
 801776e:	00db      	lsls	r3, r3, #3
 8017770:	440b      	add	r3, r1
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	4618      	mov	r0, r3
 8017776:	f7f9 fc9b 	bl	80110b0 <pbuf_free>
    arp_table[i].q = NULL;
 801777a:	490b      	ldr	r1, [pc, #44]	; (80177a8 <etharp_free_entry+0x60>)
 801777c:	687a      	ldr	r2, [r7, #4]
 801777e:	4613      	mov	r3, r2
 8017780:	005b      	lsls	r3, r3, #1
 8017782:	4413      	add	r3, r2
 8017784:	00db      	lsls	r3, r3, #3
 8017786:	440b      	add	r3, r1
 8017788:	2200      	movs	r2, #0
 801778a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801778c:	4906      	ldr	r1, [pc, #24]	; (80177a8 <etharp_free_entry+0x60>)
 801778e:	687a      	ldr	r2, [r7, #4]
 8017790:	4613      	mov	r3, r2
 8017792:	005b      	lsls	r3, r3, #1
 8017794:	4413      	add	r3, r2
 8017796:	00db      	lsls	r3, r3, #3
 8017798:	440b      	add	r3, r1
 801779a:	3314      	adds	r3, #20
 801779c:	2200      	movs	r2, #0
 801779e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80177a0:	bf00      	nop
 80177a2:	3708      	adds	r7, #8
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}
 80177a8:	2000f20c 	.word	0x2000f20c

080177ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b082      	sub	sp, #8
 80177b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177b2:	2300      	movs	r3, #0
 80177b4:	607b      	str	r3, [r7, #4]
 80177b6:	e096      	b.n	80178e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80177b8:	494f      	ldr	r1, [pc, #316]	; (80178f8 <etharp_tmr+0x14c>)
 80177ba:	687a      	ldr	r2, [r7, #4]
 80177bc:	4613      	mov	r3, r2
 80177be:	005b      	lsls	r3, r3, #1
 80177c0:	4413      	add	r3, r2
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	440b      	add	r3, r1
 80177c6:	3314      	adds	r3, #20
 80177c8:	781b      	ldrb	r3, [r3, #0]
 80177ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80177cc:	78fb      	ldrb	r3, [r7, #3]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	f000 8086 	beq.w	80178e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80177d4:	4948      	ldr	r1, [pc, #288]	; (80178f8 <etharp_tmr+0x14c>)
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	4613      	mov	r3, r2
 80177da:	005b      	lsls	r3, r3, #1
 80177dc:	4413      	add	r3, r2
 80177de:	00db      	lsls	r3, r3, #3
 80177e0:	440b      	add	r3, r1
 80177e2:	3312      	adds	r3, #18
 80177e4:	881b      	ldrh	r3, [r3, #0]
 80177e6:	3301      	adds	r3, #1
 80177e8:	b298      	uxth	r0, r3
 80177ea:	4943      	ldr	r1, [pc, #268]	; (80178f8 <etharp_tmr+0x14c>)
 80177ec:	687a      	ldr	r2, [r7, #4]
 80177ee:	4613      	mov	r3, r2
 80177f0:	005b      	lsls	r3, r3, #1
 80177f2:	4413      	add	r3, r2
 80177f4:	00db      	lsls	r3, r3, #3
 80177f6:	440b      	add	r3, r1
 80177f8:	3312      	adds	r3, #18
 80177fa:	4602      	mov	r2, r0
 80177fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80177fe:	493e      	ldr	r1, [pc, #248]	; (80178f8 <etharp_tmr+0x14c>)
 8017800:	687a      	ldr	r2, [r7, #4]
 8017802:	4613      	mov	r3, r2
 8017804:	005b      	lsls	r3, r3, #1
 8017806:	4413      	add	r3, r2
 8017808:	00db      	lsls	r3, r3, #3
 801780a:	440b      	add	r3, r1
 801780c:	3312      	adds	r3, #18
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017814:	d215      	bcs.n	8017842 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017816:	4938      	ldr	r1, [pc, #224]	; (80178f8 <etharp_tmr+0x14c>)
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	4613      	mov	r3, r2
 801781c:	005b      	lsls	r3, r3, #1
 801781e:	4413      	add	r3, r2
 8017820:	00db      	lsls	r3, r3, #3
 8017822:	440b      	add	r3, r1
 8017824:	3314      	adds	r3, #20
 8017826:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017828:	2b01      	cmp	r3, #1
 801782a:	d10e      	bne.n	801784a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801782c:	4932      	ldr	r1, [pc, #200]	; (80178f8 <etharp_tmr+0x14c>)
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	4613      	mov	r3, r2
 8017832:	005b      	lsls	r3, r3, #1
 8017834:	4413      	add	r3, r2
 8017836:	00db      	lsls	r3, r3, #3
 8017838:	440b      	add	r3, r1
 801783a:	3312      	adds	r3, #18
 801783c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801783e:	2b04      	cmp	r3, #4
 8017840:	d903      	bls.n	801784a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f7ff ff80 	bl	8017748 <etharp_free_entry>
 8017848:	e04a      	b.n	80178e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801784a:	492b      	ldr	r1, [pc, #172]	; (80178f8 <etharp_tmr+0x14c>)
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	4613      	mov	r3, r2
 8017850:	005b      	lsls	r3, r3, #1
 8017852:	4413      	add	r3, r2
 8017854:	00db      	lsls	r3, r3, #3
 8017856:	440b      	add	r3, r1
 8017858:	3314      	adds	r3, #20
 801785a:	781b      	ldrb	r3, [r3, #0]
 801785c:	2b03      	cmp	r3, #3
 801785e:	d10a      	bne.n	8017876 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017860:	4925      	ldr	r1, [pc, #148]	; (80178f8 <etharp_tmr+0x14c>)
 8017862:	687a      	ldr	r2, [r7, #4]
 8017864:	4613      	mov	r3, r2
 8017866:	005b      	lsls	r3, r3, #1
 8017868:	4413      	add	r3, r2
 801786a:	00db      	lsls	r3, r3, #3
 801786c:	440b      	add	r3, r1
 801786e:	3314      	adds	r3, #20
 8017870:	2204      	movs	r2, #4
 8017872:	701a      	strb	r2, [r3, #0]
 8017874:	e034      	b.n	80178e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017876:	4920      	ldr	r1, [pc, #128]	; (80178f8 <etharp_tmr+0x14c>)
 8017878:	687a      	ldr	r2, [r7, #4]
 801787a:	4613      	mov	r3, r2
 801787c:	005b      	lsls	r3, r3, #1
 801787e:	4413      	add	r3, r2
 8017880:	00db      	lsls	r3, r3, #3
 8017882:	440b      	add	r3, r1
 8017884:	3314      	adds	r3, #20
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2b04      	cmp	r3, #4
 801788a:	d10a      	bne.n	80178a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801788c:	491a      	ldr	r1, [pc, #104]	; (80178f8 <etharp_tmr+0x14c>)
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	4613      	mov	r3, r2
 8017892:	005b      	lsls	r3, r3, #1
 8017894:	4413      	add	r3, r2
 8017896:	00db      	lsls	r3, r3, #3
 8017898:	440b      	add	r3, r1
 801789a:	3314      	adds	r3, #20
 801789c:	2202      	movs	r2, #2
 801789e:	701a      	strb	r2, [r3, #0]
 80178a0:	e01e      	b.n	80178e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80178a2:	4915      	ldr	r1, [pc, #84]	; (80178f8 <etharp_tmr+0x14c>)
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	4613      	mov	r3, r2
 80178a8:	005b      	lsls	r3, r3, #1
 80178aa:	4413      	add	r3, r2
 80178ac:	00db      	lsls	r3, r3, #3
 80178ae:	440b      	add	r3, r1
 80178b0:	3314      	adds	r3, #20
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	2b01      	cmp	r3, #1
 80178b6:	d113      	bne.n	80178e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80178b8:	490f      	ldr	r1, [pc, #60]	; (80178f8 <etharp_tmr+0x14c>)
 80178ba:	687a      	ldr	r2, [r7, #4]
 80178bc:	4613      	mov	r3, r2
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	4413      	add	r3, r2
 80178c2:	00db      	lsls	r3, r3, #3
 80178c4:	440b      	add	r3, r1
 80178c6:	3308      	adds	r3, #8
 80178c8:	6818      	ldr	r0, [r3, #0]
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	4613      	mov	r3, r2
 80178ce:	005b      	lsls	r3, r3, #1
 80178d0:	4413      	add	r3, r2
 80178d2:	00db      	lsls	r3, r3, #3
 80178d4:	4a08      	ldr	r2, [pc, #32]	; (80178f8 <etharp_tmr+0x14c>)
 80178d6:	4413      	add	r3, r2
 80178d8:	3304      	adds	r3, #4
 80178da:	4619      	mov	r1, r3
 80178dc:	f000 fe6e 	bl	80185bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	3301      	adds	r3, #1
 80178e4:	607b      	str	r3, [r7, #4]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2b09      	cmp	r3, #9
 80178ea:	f77f af65 	ble.w	80177b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80178ee:	bf00      	nop
 80178f0:	bf00      	nop
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	2000f20c 	.word	0x2000f20c

080178fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b08a      	sub	sp, #40	; 0x28
 8017900:	af00      	add	r7, sp, #0
 8017902:	60f8      	str	r0, [r7, #12]
 8017904:	460b      	mov	r3, r1
 8017906:	607a      	str	r2, [r7, #4]
 8017908:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801790a:	230a      	movs	r3, #10
 801790c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801790e:	230a      	movs	r3, #10
 8017910:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017912:	230a      	movs	r3, #10
 8017914:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017916:	2300      	movs	r3, #0
 8017918:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801791a:	230a      	movs	r3, #10
 801791c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801791e:	2300      	movs	r3, #0
 8017920:	83bb      	strh	r3, [r7, #28]
 8017922:	2300      	movs	r3, #0
 8017924:	837b      	strh	r3, [r7, #26]
 8017926:	2300      	movs	r3, #0
 8017928:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801792a:	2300      	movs	r3, #0
 801792c:	843b      	strh	r3, [r7, #32]
 801792e:	e0ae      	b.n	8017a8e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017934:	49a6      	ldr	r1, [pc, #664]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017936:	4613      	mov	r3, r2
 8017938:	005b      	lsls	r3, r3, #1
 801793a:	4413      	add	r3, r2
 801793c:	00db      	lsls	r3, r3, #3
 801793e:	440b      	add	r3, r1
 8017940:	3314      	adds	r3, #20
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017946:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801794a:	2b0a      	cmp	r3, #10
 801794c:	d105      	bne.n	801795a <etharp_find_entry+0x5e>
 801794e:	7dfb      	ldrb	r3, [r7, #23]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d102      	bne.n	801795a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017954:	8c3b      	ldrh	r3, [r7, #32]
 8017956:	847b      	strh	r3, [r7, #34]	; 0x22
 8017958:	e095      	b.n	8017a86 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801795a:	7dfb      	ldrb	r3, [r7, #23]
 801795c:	2b00      	cmp	r3, #0
 801795e:	f000 8092 	beq.w	8017a86 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017962:	7dfb      	ldrb	r3, [r7, #23]
 8017964:	2b01      	cmp	r3, #1
 8017966:	d009      	beq.n	801797c <etharp_find_entry+0x80>
 8017968:	7dfb      	ldrb	r3, [r7, #23]
 801796a:	2b01      	cmp	r3, #1
 801796c:	d806      	bhi.n	801797c <etharp_find_entry+0x80>
 801796e:	4b99      	ldr	r3, [pc, #612]	; (8017bd4 <etharp_find_entry+0x2d8>)
 8017970:	f240 1223 	movw	r2, #291	; 0x123
 8017974:	4998      	ldr	r1, [pc, #608]	; (8017bd8 <etharp_find_entry+0x2dc>)
 8017976:	4899      	ldr	r0, [pc, #612]	; (8017bdc <etharp_find_entry+0x2e0>)
 8017978:	f003 f8aa 	bl	801aad0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d020      	beq.n	80179c4 <etharp_find_entry+0xc8>
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	6819      	ldr	r1, [r3, #0]
 8017986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801798a:	4891      	ldr	r0, [pc, #580]	; (8017bd0 <etharp_find_entry+0x2d4>)
 801798c:	4613      	mov	r3, r2
 801798e:	005b      	lsls	r3, r3, #1
 8017990:	4413      	add	r3, r2
 8017992:	00db      	lsls	r3, r3, #3
 8017994:	4403      	add	r3, r0
 8017996:	3304      	adds	r3, #4
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	4299      	cmp	r1, r3
 801799c:	d112      	bne.n	80179c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d00c      	beq.n	80179be <etharp_find_entry+0xc2>
 80179a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179a8:	4989      	ldr	r1, [pc, #548]	; (8017bd0 <etharp_find_entry+0x2d4>)
 80179aa:	4613      	mov	r3, r2
 80179ac:	005b      	lsls	r3, r3, #1
 80179ae:	4413      	add	r3, r2
 80179b0:	00db      	lsls	r3, r3, #3
 80179b2:	440b      	add	r3, r1
 80179b4:	3308      	adds	r3, #8
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d102      	bne.n	80179c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80179be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80179c2:	e100      	b.n	8017bc6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80179c4:	7dfb      	ldrb	r3, [r7, #23]
 80179c6:	2b01      	cmp	r3, #1
 80179c8:	d140      	bne.n	8017a4c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80179ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179ce:	4980      	ldr	r1, [pc, #512]	; (8017bd0 <etharp_find_entry+0x2d4>)
 80179d0:	4613      	mov	r3, r2
 80179d2:	005b      	lsls	r3, r3, #1
 80179d4:	4413      	add	r3, r2
 80179d6:	00db      	lsls	r3, r3, #3
 80179d8:	440b      	add	r3, r1
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d01a      	beq.n	8017a16 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80179e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179e4:	497a      	ldr	r1, [pc, #488]	; (8017bd0 <etharp_find_entry+0x2d4>)
 80179e6:	4613      	mov	r3, r2
 80179e8:	005b      	lsls	r3, r3, #1
 80179ea:	4413      	add	r3, r2
 80179ec:	00db      	lsls	r3, r3, #3
 80179ee:	440b      	add	r3, r1
 80179f0:	3312      	adds	r3, #18
 80179f2:	881b      	ldrh	r3, [r3, #0]
 80179f4:	8bba      	ldrh	r2, [r7, #28]
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d845      	bhi.n	8017a86 <etharp_find_entry+0x18a>
            old_queue = i;
 80179fa:	8c3b      	ldrh	r3, [r7, #32]
 80179fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80179fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a02:	4973      	ldr	r1, [pc, #460]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017a04:	4613      	mov	r3, r2
 8017a06:	005b      	lsls	r3, r3, #1
 8017a08:	4413      	add	r3, r2
 8017a0a:	00db      	lsls	r3, r3, #3
 8017a0c:	440b      	add	r3, r1
 8017a0e:	3312      	adds	r3, #18
 8017a10:	881b      	ldrh	r3, [r3, #0]
 8017a12:	83bb      	strh	r3, [r7, #28]
 8017a14:	e037      	b.n	8017a86 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a1a:	496d      	ldr	r1, [pc, #436]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017a1c:	4613      	mov	r3, r2
 8017a1e:	005b      	lsls	r3, r3, #1
 8017a20:	4413      	add	r3, r2
 8017a22:	00db      	lsls	r3, r3, #3
 8017a24:	440b      	add	r3, r1
 8017a26:	3312      	adds	r3, #18
 8017a28:	881b      	ldrh	r3, [r3, #0]
 8017a2a:	8b7a      	ldrh	r2, [r7, #26]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d82a      	bhi.n	8017a86 <etharp_find_entry+0x18a>
            old_pending = i;
 8017a30:	8c3b      	ldrh	r3, [r7, #32]
 8017a32:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017a34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a38:	4965      	ldr	r1, [pc, #404]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017a3a:	4613      	mov	r3, r2
 8017a3c:	005b      	lsls	r3, r3, #1
 8017a3e:	4413      	add	r3, r2
 8017a40:	00db      	lsls	r3, r3, #3
 8017a42:	440b      	add	r3, r1
 8017a44:	3312      	adds	r3, #18
 8017a46:	881b      	ldrh	r3, [r3, #0]
 8017a48:	837b      	strh	r3, [r7, #26]
 8017a4a:	e01c      	b.n	8017a86 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017a4c:	7dfb      	ldrb	r3, [r7, #23]
 8017a4e:	2b01      	cmp	r3, #1
 8017a50:	d919      	bls.n	8017a86 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a56:	495e      	ldr	r1, [pc, #376]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017a58:	4613      	mov	r3, r2
 8017a5a:	005b      	lsls	r3, r3, #1
 8017a5c:	4413      	add	r3, r2
 8017a5e:	00db      	lsls	r3, r3, #3
 8017a60:	440b      	add	r3, r1
 8017a62:	3312      	adds	r3, #18
 8017a64:	881b      	ldrh	r3, [r3, #0]
 8017a66:	8b3a      	ldrh	r2, [r7, #24]
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d80c      	bhi.n	8017a86 <etharp_find_entry+0x18a>
            old_stable = i;
 8017a6c:	8c3b      	ldrh	r3, [r7, #32]
 8017a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a74:	4956      	ldr	r1, [pc, #344]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017a76:	4613      	mov	r3, r2
 8017a78:	005b      	lsls	r3, r3, #1
 8017a7a:	4413      	add	r3, r2
 8017a7c:	00db      	lsls	r3, r3, #3
 8017a7e:	440b      	add	r3, r1
 8017a80:	3312      	adds	r3, #18
 8017a82:	881b      	ldrh	r3, [r3, #0]
 8017a84:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a86:	8c3b      	ldrh	r3, [r7, #32]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	843b      	strh	r3, [r7, #32]
 8017a8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017a92:	2b09      	cmp	r3, #9
 8017a94:	f77f af4c 	ble.w	8017930 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017a98:	7afb      	ldrb	r3, [r7, #11]
 8017a9a:	f003 0302 	and.w	r3, r3, #2
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d108      	bne.n	8017ab4 <etharp_find_entry+0x1b8>
 8017aa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017aa6:	2b0a      	cmp	r3, #10
 8017aa8:	d107      	bne.n	8017aba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017aaa:	7afb      	ldrb	r3, [r7, #11]
 8017aac:	f003 0301 	and.w	r3, r3, #1
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d102      	bne.n	8017aba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab8:	e085      	b.n	8017bc6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017aba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017abe:	2b09      	cmp	r3, #9
 8017ac0:	dc02      	bgt.n	8017ac8 <etharp_find_entry+0x1cc>
    i = empty;
 8017ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ac4:	843b      	strh	r3, [r7, #32]
 8017ac6:	e039      	b.n	8017b3c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017ac8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017acc:	2b09      	cmp	r3, #9
 8017ace:	dc14      	bgt.n	8017afa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ad2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ad8:	493d      	ldr	r1, [pc, #244]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017ada:	4613      	mov	r3, r2
 8017adc:	005b      	lsls	r3, r3, #1
 8017ade:	4413      	add	r3, r2
 8017ae0:	00db      	lsls	r3, r3, #3
 8017ae2:	440b      	add	r3, r1
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d018      	beq.n	8017b1c <etharp_find_entry+0x220>
 8017aea:	4b3a      	ldr	r3, [pc, #232]	; (8017bd4 <etharp_find_entry+0x2d8>)
 8017aec:	f240 126d 	movw	r2, #365	; 0x16d
 8017af0:	493b      	ldr	r1, [pc, #236]	; (8017be0 <etharp_find_entry+0x2e4>)
 8017af2:	483a      	ldr	r0, [pc, #232]	; (8017bdc <etharp_find_entry+0x2e0>)
 8017af4:	f002 ffec 	bl	801aad0 <iprintf>
 8017af8:	e010      	b.n	8017b1c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017afa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017afe:	2b09      	cmp	r3, #9
 8017b00:	dc02      	bgt.n	8017b08 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017b04:	843b      	strh	r3, [r7, #32]
 8017b06:	e009      	b.n	8017b1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017b08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017b0c:	2b09      	cmp	r3, #9
 8017b0e:	dc02      	bgt.n	8017b16 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017b10:	8bfb      	ldrh	r3, [r7, #30]
 8017b12:	843b      	strh	r3, [r7, #32]
 8017b14:	e002      	b.n	8017b1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017b16:	f04f 33ff 	mov.w	r3, #4294967295
 8017b1a:	e054      	b.n	8017bc6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017b1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b20:	2b09      	cmp	r3, #9
 8017b22:	dd06      	ble.n	8017b32 <etharp_find_entry+0x236>
 8017b24:	4b2b      	ldr	r3, [pc, #172]	; (8017bd4 <etharp_find_entry+0x2d8>)
 8017b26:	f240 127f 	movw	r2, #383	; 0x17f
 8017b2a:	492e      	ldr	r1, [pc, #184]	; (8017be4 <etharp_find_entry+0x2e8>)
 8017b2c:	482b      	ldr	r0, [pc, #172]	; (8017bdc <etharp_find_entry+0x2e0>)
 8017b2e:	f002 ffcf 	bl	801aad0 <iprintf>
    etharp_free_entry(i);
 8017b32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7ff fe06 	bl	8017748 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017b3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017b40:	2b09      	cmp	r3, #9
 8017b42:	dd06      	ble.n	8017b52 <etharp_find_entry+0x256>
 8017b44:	4b23      	ldr	r3, [pc, #140]	; (8017bd4 <etharp_find_entry+0x2d8>)
 8017b46:	f240 1283 	movw	r2, #387	; 0x183
 8017b4a:	4926      	ldr	r1, [pc, #152]	; (8017be4 <etharp_find_entry+0x2e8>)
 8017b4c:	4823      	ldr	r0, [pc, #140]	; (8017bdc <etharp_find_entry+0x2e0>)
 8017b4e:	f002 ffbf 	bl	801aad0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017b52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b56:	491e      	ldr	r1, [pc, #120]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017b58:	4613      	mov	r3, r2
 8017b5a:	005b      	lsls	r3, r3, #1
 8017b5c:	4413      	add	r3, r2
 8017b5e:	00db      	lsls	r3, r3, #3
 8017b60:	440b      	add	r3, r1
 8017b62:	3314      	adds	r3, #20
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d006      	beq.n	8017b78 <etharp_find_entry+0x27c>
 8017b6a:	4b1a      	ldr	r3, [pc, #104]	; (8017bd4 <etharp_find_entry+0x2d8>)
 8017b6c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017b70:	491d      	ldr	r1, [pc, #116]	; (8017be8 <etharp_find_entry+0x2ec>)
 8017b72:	481a      	ldr	r0, [pc, #104]	; (8017bdc <etharp_find_entry+0x2e0>)
 8017b74:	f002 ffac 	bl	801aad0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d00b      	beq.n	8017b96 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017b7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	6819      	ldr	r1, [r3, #0]
 8017b86:	4812      	ldr	r0, [pc, #72]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017b88:	4613      	mov	r3, r2
 8017b8a:	005b      	lsls	r3, r3, #1
 8017b8c:	4413      	add	r3, r2
 8017b8e:	00db      	lsls	r3, r3, #3
 8017b90:	4403      	add	r3, r0
 8017b92:	3304      	adds	r3, #4
 8017b94:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017b96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b9a:	490d      	ldr	r1, [pc, #52]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	005b      	lsls	r3, r3, #1
 8017ba0:	4413      	add	r3, r2
 8017ba2:	00db      	lsls	r3, r3, #3
 8017ba4:	440b      	add	r3, r1
 8017ba6:	3312      	adds	r3, #18
 8017ba8:	2200      	movs	r2, #0
 8017baa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bb0:	4907      	ldr	r1, [pc, #28]	; (8017bd0 <etharp_find_entry+0x2d4>)
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	005b      	lsls	r3, r3, #1
 8017bb6:	4413      	add	r3, r2
 8017bb8:	00db      	lsls	r3, r3, #3
 8017bba:	440b      	add	r3, r1
 8017bbc:	3308      	adds	r3, #8
 8017bbe:	687a      	ldr	r2, [r7, #4]
 8017bc0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017bc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	3728      	adds	r7, #40	; 0x28
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	2000f20c 	.word	0x2000f20c
 8017bd4:	0801f608 	.word	0x0801f608
 8017bd8:	0801f640 	.word	0x0801f640
 8017bdc:	0801f680 	.word	0x0801f680
 8017be0:	0801f6a8 	.word	0x0801f6a8
 8017be4:	0801f6c0 	.word	0x0801f6c0
 8017be8:	0801f6d4 	.word	0x0801f6d4

08017bec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b088      	sub	sp, #32
 8017bf0:	af02      	add	r7, sp, #8
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]
 8017bf8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c00:	2b06      	cmp	r3, #6
 8017c02:	d006      	beq.n	8017c12 <etharp_update_arp_entry+0x26>
 8017c04:	4b48      	ldr	r3, [pc, #288]	; (8017d28 <etharp_update_arp_entry+0x13c>)
 8017c06:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017c0a:	4948      	ldr	r1, [pc, #288]	; (8017d2c <etharp_update_arp_entry+0x140>)
 8017c0c:	4848      	ldr	r0, [pc, #288]	; (8017d30 <etharp_update_arp_entry+0x144>)
 8017c0e:	f002 ff5f 	bl	801aad0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d012      	beq.n	8017c3e <etharp_update_arp_entry+0x52>
 8017c18:	68bb      	ldr	r3, [r7, #8]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d00e      	beq.n	8017c3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	68f9      	ldr	r1, [r7, #12]
 8017c26:	4618      	mov	r0, r3
 8017c28:	f001 f8fe 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 8017c2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d105      	bne.n	8017c3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c3a:	2be0      	cmp	r3, #224	; 0xe0
 8017c3c:	d102      	bne.n	8017c44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017c3e:	f06f 030f 	mvn.w	r3, #15
 8017c42:	e06c      	b.n	8017d1e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017c44:	78fb      	ldrb	r3, [r7, #3]
 8017c46:	68fa      	ldr	r2, [r7, #12]
 8017c48:	4619      	mov	r1, r3
 8017c4a:	68b8      	ldr	r0, [r7, #8]
 8017c4c:	f7ff fe56 	bl	80178fc <etharp_find_entry>
 8017c50:	4603      	mov	r3, r0
 8017c52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017c54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	da02      	bge.n	8017c62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017c5c:	8afb      	ldrh	r3, [r7, #22]
 8017c5e:	b25b      	sxtb	r3, r3
 8017c60:	e05d      	b.n	8017d1e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017c62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c66:	4933      	ldr	r1, [pc, #204]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017c68:	4613      	mov	r3, r2
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	4413      	add	r3, r2
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	440b      	add	r3, r1
 8017c72:	3314      	adds	r3, #20
 8017c74:	2202      	movs	r2, #2
 8017c76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017c78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c7c:	492d      	ldr	r1, [pc, #180]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017c7e:	4613      	mov	r3, r2
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	4413      	add	r3, r2
 8017c84:	00db      	lsls	r3, r3, #3
 8017c86:	440b      	add	r3, r1
 8017c88:	3308      	adds	r3, #8
 8017c8a:	68fa      	ldr	r2, [r7, #12]
 8017c8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017c8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c92:	4613      	mov	r3, r2
 8017c94:	005b      	lsls	r3, r3, #1
 8017c96:	4413      	add	r3, r2
 8017c98:	00db      	lsls	r3, r3, #3
 8017c9a:	3308      	adds	r3, #8
 8017c9c:	4a25      	ldr	r2, [pc, #148]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017c9e:	4413      	add	r3, r2
 8017ca0:	3304      	adds	r3, #4
 8017ca2:	2206      	movs	r2, #6
 8017ca4:	6879      	ldr	r1, [r7, #4]
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f003 f8c5 	bl	801ae36 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017cac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cb0:	4920      	ldr	r1, [pc, #128]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017cb2:	4613      	mov	r3, r2
 8017cb4:	005b      	lsls	r3, r3, #1
 8017cb6:	4413      	add	r3, r2
 8017cb8:	00db      	lsls	r3, r3, #3
 8017cba:	440b      	add	r3, r1
 8017cbc:	3312      	adds	r3, #18
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017cc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cc6:	491b      	ldr	r1, [pc, #108]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017cc8:	4613      	mov	r3, r2
 8017cca:	005b      	lsls	r3, r3, #1
 8017ccc:	4413      	add	r3, r2
 8017cce:	00db      	lsls	r3, r3, #3
 8017cd0:	440b      	add	r3, r1
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d021      	beq.n	8017d1c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017cd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cdc:	4915      	ldr	r1, [pc, #84]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017cde:	4613      	mov	r3, r2
 8017ce0:	005b      	lsls	r3, r3, #1
 8017ce2:	4413      	add	r3, r2
 8017ce4:	00db      	lsls	r3, r3, #3
 8017ce6:	440b      	add	r3, r1
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017cec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017cf0:	4910      	ldr	r1, [pc, #64]	; (8017d34 <etharp_update_arp_entry+0x148>)
 8017cf2:	4613      	mov	r3, r2
 8017cf4:	005b      	lsls	r3, r3, #1
 8017cf6:	4413      	add	r3, r2
 8017cf8:	00db      	lsls	r3, r3, #3
 8017cfa:	440b      	add	r3, r1
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017d0a:	9300      	str	r3, [sp, #0]
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6939      	ldr	r1, [r7, #16]
 8017d10:	68f8      	ldr	r0, [r7, #12]
 8017d12:	f001 ff97 	bl	8019c44 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017d16:	6938      	ldr	r0, [r7, #16]
 8017d18:	f7f9 f9ca 	bl	80110b0 <pbuf_free>
  }
  return ERR_OK;
 8017d1c:	2300      	movs	r3, #0
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3718      	adds	r7, #24
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}
 8017d26:	bf00      	nop
 8017d28:	0801f608 	.word	0x0801f608
 8017d2c:	0801f700 	.word	0x0801f700
 8017d30:	0801f680 	.word	0x0801f680
 8017d34:	2000f20c 	.word	0x2000f20c

08017d38 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b084      	sub	sp, #16
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d40:	2300      	movs	r3, #0
 8017d42:	60fb      	str	r3, [r7, #12]
 8017d44:	e01e      	b.n	8017d84 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017d46:	4913      	ldr	r1, [pc, #76]	; (8017d94 <etharp_cleanup_netif+0x5c>)
 8017d48:	68fa      	ldr	r2, [r7, #12]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	005b      	lsls	r3, r3, #1
 8017d4e:	4413      	add	r3, r2
 8017d50:	00db      	lsls	r3, r3, #3
 8017d52:	440b      	add	r3, r1
 8017d54:	3314      	adds	r3, #20
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017d5a:	7afb      	ldrb	r3, [r7, #11]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00e      	beq.n	8017d7e <etharp_cleanup_netif+0x46>
 8017d60:	490c      	ldr	r1, [pc, #48]	; (8017d94 <etharp_cleanup_netif+0x5c>)
 8017d62:	68fa      	ldr	r2, [r7, #12]
 8017d64:	4613      	mov	r3, r2
 8017d66:	005b      	lsls	r3, r3, #1
 8017d68:	4413      	add	r3, r2
 8017d6a:	00db      	lsls	r3, r3, #3
 8017d6c:	440b      	add	r3, r1
 8017d6e:	3308      	adds	r3, #8
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	687a      	ldr	r2, [r7, #4]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d102      	bne.n	8017d7e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017d78:	68f8      	ldr	r0, [r7, #12]
 8017d7a:	f7ff fce5 	bl	8017748 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	3301      	adds	r3, #1
 8017d82:	60fb      	str	r3, [r7, #12]
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	2b09      	cmp	r3, #9
 8017d88:	dddd      	ble.n	8017d46 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017d8a:	bf00      	nop
 8017d8c:	bf00      	nop
 8017d8e:	3710      	adds	r7, #16
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	2000f20c 	.word	0x2000f20c

08017d98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017d98:	b5b0      	push	{r4, r5, r7, lr}
 8017d9a:	b08a      	sub	sp, #40	; 0x28
 8017d9c:	af04      	add	r7, sp, #16
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017da2:	683b      	ldr	r3, [r7, #0]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d107      	bne.n	8017db8 <etharp_input+0x20>
 8017da8:	4b3d      	ldr	r3, [pc, #244]	; (8017ea0 <etharp_input+0x108>)
 8017daa:	f240 228a 	movw	r2, #650	; 0x28a
 8017dae:	493d      	ldr	r1, [pc, #244]	; (8017ea4 <etharp_input+0x10c>)
 8017db0:	483d      	ldr	r0, [pc, #244]	; (8017ea8 <etharp_input+0x110>)
 8017db2:	f002 fe8d 	bl	801aad0 <iprintf>
 8017db6:	e06f      	b.n	8017e98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	685b      	ldr	r3, [r3, #4]
 8017dbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017dbe:	693b      	ldr	r3, [r7, #16]
 8017dc0:	881b      	ldrh	r3, [r3, #0]
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017dc8:	d10c      	bne.n	8017de4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017dce:	2b06      	cmp	r3, #6
 8017dd0:	d108      	bne.n	8017de4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017dd6:	2b04      	cmp	r3, #4
 8017dd8:	d104      	bne.n	8017de4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	885b      	ldrh	r3, [r3, #2]
 8017dde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017de0:	2b08      	cmp	r3, #8
 8017de2:	d003      	beq.n	8017dec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017de4:	6878      	ldr	r0, [r7, #4]
 8017de6:	f7f9 f963 	bl	80110b0 <pbuf_free>
    return;
 8017dea:	e055      	b.n	8017e98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017dec:	693b      	ldr	r3, [r7, #16]
 8017dee:	330e      	adds	r3, #14
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	3318      	adds	r3, #24
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017dfc:	683b      	ldr	r3, [r7, #0]
 8017dfe:	3304      	adds	r3, #4
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d102      	bne.n	8017e0c <etharp_input+0x74>
    for_us = 0;
 8017e06:	2300      	movs	r3, #0
 8017e08:	75fb      	strb	r3, [r7, #23]
 8017e0a:	e009      	b.n	8017e20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017e0c:	68ba      	ldr	r2, [r7, #8]
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	3304      	adds	r3, #4
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	bf0c      	ite	eq
 8017e18:	2301      	moveq	r3, #1
 8017e1a:	2300      	movne	r3, #0
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	f103 0208 	add.w	r2, r3, #8
 8017e26:	7dfb      	ldrb	r3, [r7, #23]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d001      	beq.n	8017e30 <etharp_input+0x98>
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	e000      	b.n	8017e32 <etharp_input+0x9a>
 8017e30:	2302      	movs	r3, #2
 8017e32:	f107 010c 	add.w	r1, r7, #12
 8017e36:	6838      	ldr	r0, [r7, #0]
 8017e38:	f7ff fed8 	bl	8017bec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	88db      	ldrh	r3, [r3, #6]
 8017e40:	b29b      	uxth	r3, r3
 8017e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017e46:	d003      	beq.n	8017e50 <etharp_input+0xb8>
 8017e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e4c:	d01e      	beq.n	8017e8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017e4e:	e020      	b.n	8017e92 <etharp_input+0xfa>
      if (for_us) {
 8017e50:	7dfb      	ldrb	r3, [r7, #23]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d01c      	beq.n	8017e90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017e56:	683b      	ldr	r3, [r7, #0]
 8017e58:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017e62:	683b      	ldr	r3, [r7, #0]
 8017e64:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017e6c:	693a      	ldr	r2, [r7, #16]
 8017e6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017e70:	2102      	movs	r1, #2
 8017e72:	9103      	str	r1, [sp, #12]
 8017e74:	f107 010c 	add.w	r1, r7, #12
 8017e78:	9102      	str	r1, [sp, #8]
 8017e7a:	9201      	str	r2, [sp, #4]
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	462b      	mov	r3, r5
 8017e80:	4622      	mov	r2, r4
 8017e82:	4601      	mov	r1, r0
 8017e84:	6838      	ldr	r0, [r7, #0]
 8017e86:	f000 faeb 	bl	8018460 <etharp_raw>
      break;
 8017e8a:	e001      	b.n	8017e90 <etharp_input+0xf8>
      break;
 8017e8c:	bf00      	nop
 8017e8e:	e000      	b.n	8017e92 <etharp_input+0xfa>
      break;
 8017e90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f7f9 f90c 	bl	80110b0 <pbuf_free>
}
 8017e98:	3718      	adds	r7, #24
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	0801f608 	.word	0x0801f608
 8017ea4:	0801f758 	.word	0x0801f758
 8017ea8:	0801f680 	.word	0x0801f680

08017eac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b086      	sub	sp, #24
 8017eb0:	af02      	add	r7, sp, #8
 8017eb2:	60f8      	str	r0, [r7, #12]
 8017eb4:	60b9      	str	r1, [r7, #8]
 8017eb6:	4613      	mov	r3, r2
 8017eb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017eba:	79fa      	ldrb	r2, [r7, #7]
 8017ebc:	4944      	ldr	r1, [pc, #272]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	4413      	add	r3, r2
 8017ec4:	00db      	lsls	r3, r3, #3
 8017ec6:	440b      	add	r3, r1
 8017ec8:	3314      	adds	r3, #20
 8017eca:	781b      	ldrb	r3, [r3, #0]
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d806      	bhi.n	8017ede <etharp_output_to_arp_index+0x32>
 8017ed0:	4b40      	ldr	r3, [pc, #256]	; (8017fd4 <etharp_output_to_arp_index+0x128>)
 8017ed2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017ed6:	4940      	ldr	r1, [pc, #256]	; (8017fd8 <etharp_output_to_arp_index+0x12c>)
 8017ed8:	4840      	ldr	r0, [pc, #256]	; (8017fdc <etharp_output_to_arp_index+0x130>)
 8017eda:	f002 fdf9 	bl	801aad0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017ede:	79fa      	ldrb	r2, [r7, #7]
 8017ee0:	493b      	ldr	r1, [pc, #236]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	005b      	lsls	r3, r3, #1
 8017ee6:	4413      	add	r3, r2
 8017ee8:	00db      	lsls	r3, r3, #3
 8017eea:	440b      	add	r3, r1
 8017eec:	3314      	adds	r3, #20
 8017eee:	781b      	ldrb	r3, [r3, #0]
 8017ef0:	2b02      	cmp	r3, #2
 8017ef2:	d153      	bne.n	8017f9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017ef4:	79fa      	ldrb	r2, [r7, #7]
 8017ef6:	4936      	ldr	r1, [pc, #216]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017ef8:	4613      	mov	r3, r2
 8017efa:	005b      	lsls	r3, r3, #1
 8017efc:	4413      	add	r3, r2
 8017efe:	00db      	lsls	r3, r3, #3
 8017f00:	440b      	add	r3, r1
 8017f02:	3312      	adds	r3, #18
 8017f04:	881b      	ldrh	r3, [r3, #0]
 8017f06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017f0a:	d919      	bls.n	8017f40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017f0c:	79fa      	ldrb	r2, [r7, #7]
 8017f0e:	4613      	mov	r3, r2
 8017f10:	005b      	lsls	r3, r3, #1
 8017f12:	4413      	add	r3, r2
 8017f14:	00db      	lsls	r3, r3, #3
 8017f16:	4a2e      	ldr	r2, [pc, #184]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017f18:	4413      	add	r3, r2
 8017f1a:	3304      	adds	r3, #4
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	68f8      	ldr	r0, [r7, #12]
 8017f20:	f000 fb4c 	bl	80185bc <etharp_request>
 8017f24:	4603      	mov	r3, r0
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d138      	bne.n	8017f9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017f2a:	79fa      	ldrb	r2, [r7, #7]
 8017f2c:	4928      	ldr	r1, [pc, #160]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017f2e:	4613      	mov	r3, r2
 8017f30:	005b      	lsls	r3, r3, #1
 8017f32:	4413      	add	r3, r2
 8017f34:	00db      	lsls	r3, r3, #3
 8017f36:	440b      	add	r3, r1
 8017f38:	3314      	adds	r3, #20
 8017f3a:	2203      	movs	r2, #3
 8017f3c:	701a      	strb	r2, [r3, #0]
 8017f3e:	e02d      	b.n	8017f9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017f40:	79fa      	ldrb	r2, [r7, #7]
 8017f42:	4923      	ldr	r1, [pc, #140]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017f44:	4613      	mov	r3, r2
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	4413      	add	r3, r2
 8017f4a:	00db      	lsls	r3, r3, #3
 8017f4c:	440b      	add	r3, r1
 8017f4e:	3312      	adds	r3, #18
 8017f50:	881b      	ldrh	r3, [r3, #0]
 8017f52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017f56:	d321      	bcc.n	8017f9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017f58:	79fa      	ldrb	r2, [r7, #7]
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	005b      	lsls	r3, r3, #1
 8017f5e:	4413      	add	r3, r2
 8017f60:	00db      	lsls	r3, r3, #3
 8017f62:	4a1b      	ldr	r2, [pc, #108]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017f64:	4413      	add	r3, r2
 8017f66:	1d19      	adds	r1, r3, #4
 8017f68:	79fa      	ldrb	r2, [r7, #7]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	005b      	lsls	r3, r3, #1
 8017f6e:	4413      	add	r3, r2
 8017f70:	00db      	lsls	r3, r3, #3
 8017f72:	3308      	adds	r3, #8
 8017f74:	4a16      	ldr	r2, [pc, #88]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017f76:	4413      	add	r3, r2
 8017f78:	3304      	adds	r3, #4
 8017f7a:	461a      	mov	r2, r3
 8017f7c:	68f8      	ldr	r0, [r7, #12]
 8017f7e:	f000 fafb 	bl	8018578 <etharp_request_dst>
 8017f82:	4603      	mov	r3, r0
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d109      	bne.n	8017f9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017f88:	79fa      	ldrb	r2, [r7, #7]
 8017f8a:	4911      	ldr	r1, [pc, #68]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	005b      	lsls	r3, r3, #1
 8017f90:	4413      	add	r3, r2
 8017f92:	00db      	lsls	r3, r3, #3
 8017f94:	440b      	add	r3, r1
 8017f96:	3314      	adds	r3, #20
 8017f98:	2203      	movs	r2, #3
 8017f9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017fa2:	79fa      	ldrb	r2, [r7, #7]
 8017fa4:	4613      	mov	r3, r2
 8017fa6:	005b      	lsls	r3, r3, #1
 8017fa8:	4413      	add	r3, r2
 8017faa:	00db      	lsls	r3, r3, #3
 8017fac:	3308      	adds	r3, #8
 8017fae:	4a08      	ldr	r2, [pc, #32]	; (8017fd0 <etharp_output_to_arp_index+0x124>)
 8017fb0:	4413      	add	r3, r2
 8017fb2:	3304      	adds	r3, #4
 8017fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017fb8:	9200      	str	r2, [sp, #0]
 8017fba:	460a      	mov	r2, r1
 8017fbc:	68b9      	ldr	r1, [r7, #8]
 8017fbe:	68f8      	ldr	r0, [r7, #12]
 8017fc0:	f001 fe40 	bl	8019c44 <ethernet_output>
 8017fc4:	4603      	mov	r3, r0
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3710      	adds	r7, #16
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	2000f20c 	.word	0x2000f20c
 8017fd4:	0801f608 	.word	0x0801f608
 8017fd8:	0801f778 	.word	0x0801f778
 8017fdc:	0801f680 	.word	0x0801f680

08017fe0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08a      	sub	sp, #40	; 0x28
 8017fe4:	af02      	add	r7, sp, #8
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d106      	bne.n	8018004 <etharp_output+0x24>
 8017ff6:	4b73      	ldr	r3, [pc, #460]	; (80181c4 <etharp_output+0x1e4>)
 8017ff8:	f240 321e 	movw	r2, #798	; 0x31e
 8017ffc:	4972      	ldr	r1, [pc, #456]	; (80181c8 <etharp_output+0x1e8>)
 8017ffe:	4873      	ldr	r0, [pc, #460]	; (80181cc <etharp_output+0x1ec>)
 8018000:	f002 fd66 	bl	801aad0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d106      	bne.n	8018018 <etharp_output+0x38>
 801800a:	4b6e      	ldr	r3, [pc, #440]	; (80181c4 <etharp_output+0x1e4>)
 801800c:	f240 321f 	movw	r2, #799	; 0x31f
 8018010:	496f      	ldr	r1, [pc, #444]	; (80181d0 <etharp_output+0x1f0>)
 8018012:	486e      	ldr	r0, [pc, #440]	; (80181cc <etharp_output+0x1ec>)
 8018014:	f002 fd5c 	bl	801aad0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d106      	bne.n	801802c <etharp_output+0x4c>
 801801e:	4b69      	ldr	r3, [pc, #420]	; (80181c4 <etharp_output+0x1e4>)
 8018020:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018024:	496b      	ldr	r1, [pc, #428]	; (80181d4 <etharp_output+0x1f4>)
 8018026:	4869      	ldr	r0, [pc, #420]	; (80181cc <etharp_output+0x1ec>)
 8018028:	f002 fd52 	bl	801aad0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	68f9      	ldr	r1, [r7, #12]
 8018032:	4618      	mov	r0, r3
 8018034:	f000 fef8 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 8018038:	4603      	mov	r3, r0
 801803a:	2b00      	cmp	r3, #0
 801803c:	d002      	beq.n	8018044 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801803e:	4b66      	ldr	r3, [pc, #408]	; (80181d8 <etharp_output+0x1f8>)
 8018040:	61fb      	str	r3, [r7, #28]
 8018042:	e0af      	b.n	80181a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801804c:	2be0      	cmp	r3, #224	; 0xe0
 801804e:	d118      	bne.n	8018082 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018050:	2301      	movs	r3, #1
 8018052:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018054:	2300      	movs	r3, #0
 8018056:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018058:	235e      	movs	r3, #94	; 0x5e
 801805a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	3301      	adds	r3, #1
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018066:	b2db      	uxtb	r3, r3
 8018068:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	3302      	adds	r3, #2
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	3303      	adds	r3, #3
 8018076:	781b      	ldrb	r3, [r3, #0]
 8018078:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801807a:	f107 0310 	add.w	r3, r7, #16
 801807e:	61fb      	str	r3, [r7, #28]
 8018080:	e090      	b.n	80181a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681a      	ldr	r2, [r3, #0]
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	3304      	adds	r3, #4
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	405a      	eors	r2, r3
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	3308      	adds	r3, #8
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	4013      	ands	r3, r2
 8018096:	2b00      	cmp	r3, #0
 8018098:	d012      	beq.n	80180c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80180a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80180a4:	4293      	cmp	r3, r2
 80180a6:	d00b      	beq.n	80180c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	330c      	adds	r3, #12
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d003      	beq.n	80180ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	330c      	adds	r3, #12
 80180b6:	61bb      	str	r3, [r7, #24]
 80180b8:	e002      	b.n	80180c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80180ba:	f06f 0303 	mvn.w	r3, #3
 80180be:	e07d      	b.n	80181bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80180c0:	4b46      	ldr	r3, [pc, #280]	; (80181dc <etharp_output+0x1fc>)
 80180c2:	781b      	ldrb	r3, [r3, #0]
 80180c4:	4619      	mov	r1, r3
 80180c6:	4a46      	ldr	r2, [pc, #280]	; (80181e0 <etharp_output+0x200>)
 80180c8:	460b      	mov	r3, r1
 80180ca:	005b      	lsls	r3, r3, #1
 80180cc:	440b      	add	r3, r1
 80180ce:	00db      	lsls	r3, r3, #3
 80180d0:	4413      	add	r3, r2
 80180d2:	3314      	adds	r3, #20
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	d925      	bls.n	8018126 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80180da:	4b40      	ldr	r3, [pc, #256]	; (80181dc <etharp_output+0x1fc>)
 80180dc:	781b      	ldrb	r3, [r3, #0]
 80180de:	4619      	mov	r1, r3
 80180e0:	4a3f      	ldr	r2, [pc, #252]	; (80181e0 <etharp_output+0x200>)
 80180e2:	460b      	mov	r3, r1
 80180e4:	005b      	lsls	r3, r3, #1
 80180e6:	440b      	add	r3, r1
 80180e8:	00db      	lsls	r3, r3, #3
 80180ea:	4413      	add	r3, r2
 80180ec:	3308      	adds	r3, #8
 80180ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80180f0:	68fa      	ldr	r2, [r7, #12]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d117      	bne.n	8018126 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80180f6:	69bb      	ldr	r3, [r7, #24]
 80180f8:	681a      	ldr	r2, [r3, #0]
 80180fa:	4b38      	ldr	r3, [pc, #224]	; (80181dc <etharp_output+0x1fc>)
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	4618      	mov	r0, r3
 8018100:	4937      	ldr	r1, [pc, #220]	; (80181e0 <etharp_output+0x200>)
 8018102:	4603      	mov	r3, r0
 8018104:	005b      	lsls	r3, r3, #1
 8018106:	4403      	add	r3, r0
 8018108:	00db      	lsls	r3, r3, #3
 801810a:	440b      	add	r3, r1
 801810c:	3304      	adds	r3, #4
 801810e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018110:	429a      	cmp	r2, r3
 8018112:	d108      	bne.n	8018126 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018114:	4b31      	ldr	r3, [pc, #196]	; (80181dc <etharp_output+0x1fc>)
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	461a      	mov	r2, r3
 801811a:	68b9      	ldr	r1, [r7, #8]
 801811c:	68f8      	ldr	r0, [r7, #12]
 801811e:	f7ff fec5 	bl	8017eac <etharp_output_to_arp_index>
 8018122:	4603      	mov	r3, r0
 8018124:	e04a      	b.n	80181bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018126:	2300      	movs	r3, #0
 8018128:	75fb      	strb	r3, [r7, #23]
 801812a:	e031      	b.n	8018190 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801812c:	7dfa      	ldrb	r2, [r7, #23]
 801812e:	492c      	ldr	r1, [pc, #176]	; (80181e0 <etharp_output+0x200>)
 8018130:	4613      	mov	r3, r2
 8018132:	005b      	lsls	r3, r3, #1
 8018134:	4413      	add	r3, r2
 8018136:	00db      	lsls	r3, r3, #3
 8018138:	440b      	add	r3, r1
 801813a:	3314      	adds	r3, #20
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	2b01      	cmp	r3, #1
 8018140:	d923      	bls.n	801818a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018142:	7dfa      	ldrb	r2, [r7, #23]
 8018144:	4926      	ldr	r1, [pc, #152]	; (80181e0 <etharp_output+0x200>)
 8018146:	4613      	mov	r3, r2
 8018148:	005b      	lsls	r3, r3, #1
 801814a:	4413      	add	r3, r2
 801814c:	00db      	lsls	r3, r3, #3
 801814e:	440b      	add	r3, r1
 8018150:	3308      	adds	r3, #8
 8018152:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018154:	68fa      	ldr	r2, [r7, #12]
 8018156:	429a      	cmp	r2, r3
 8018158:	d117      	bne.n	801818a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801815a:	69bb      	ldr	r3, [r7, #24]
 801815c:	6819      	ldr	r1, [r3, #0]
 801815e:	7dfa      	ldrb	r2, [r7, #23]
 8018160:	481f      	ldr	r0, [pc, #124]	; (80181e0 <etharp_output+0x200>)
 8018162:	4613      	mov	r3, r2
 8018164:	005b      	lsls	r3, r3, #1
 8018166:	4413      	add	r3, r2
 8018168:	00db      	lsls	r3, r3, #3
 801816a:	4403      	add	r3, r0
 801816c:	3304      	adds	r3, #4
 801816e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018170:	4299      	cmp	r1, r3
 8018172:	d10a      	bne.n	801818a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018174:	4a19      	ldr	r2, [pc, #100]	; (80181dc <etharp_output+0x1fc>)
 8018176:	7dfb      	ldrb	r3, [r7, #23]
 8018178:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801817a:	7dfb      	ldrb	r3, [r7, #23]
 801817c:	461a      	mov	r2, r3
 801817e:	68b9      	ldr	r1, [r7, #8]
 8018180:	68f8      	ldr	r0, [r7, #12]
 8018182:	f7ff fe93 	bl	8017eac <etharp_output_to_arp_index>
 8018186:	4603      	mov	r3, r0
 8018188:	e018      	b.n	80181bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801818a:	7dfb      	ldrb	r3, [r7, #23]
 801818c:	3301      	adds	r3, #1
 801818e:	75fb      	strb	r3, [r7, #23]
 8018190:	7dfb      	ldrb	r3, [r7, #23]
 8018192:	2b09      	cmp	r3, #9
 8018194:	d9ca      	bls.n	801812c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018196:	68ba      	ldr	r2, [r7, #8]
 8018198:	69b9      	ldr	r1, [r7, #24]
 801819a:	68f8      	ldr	r0, [r7, #12]
 801819c:	f000 f822 	bl	80181e4 <etharp_query>
 80181a0:	4603      	mov	r3, r0
 80181a2:	e00b      	b.n	80181bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80181aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80181ae:	9300      	str	r3, [sp, #0]
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	68b9      	ldr	r1, [r7, #8]
 80181b4:	68f8      	ldr	r0, [r7, #12]
 80181b6:	f001 fd45 	bl	8019c44 <ethernet_output>
 80181ba:	4603      	mov	r3, r0
}
 80181bc:	4618      	mov	r0, r3
 80181be:	3720      	adds	r7, #32
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}
 80181c4:	0801f608 	.word	0x0801f608
 80181c8:	0801f758 	.word	0x0801f758
 80181cc:	0801f680 	.word	0x0801f680
 80181d0:	0801f7a8 	.word	0x0801f7a8
 80181d4:	0801f748 	.word	0x0801f748
 80181d8:	0801fe24 	.word	0x0801fe24
 80181dc:	2000f2fc 	.word	0x2000f2fc
 80181e0:	2000f20c 	.word	0x2000f20c

080181e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b08c      	sub	sp, #48	; 0x30
 80181e8:	af02      	add	r7, sp, #8
 80181ea:	60f8      	str	r0, [r7, #12]
 80181ec:	60b9      	str	r1, [r7, #8]
 80181ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	332a      	adds	r3, #42	; 0x2a
 80181f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80181f6:	23ff      	movs	r3, #255	; 0xff
 80181f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80181fc:	2300      	movs	r3, #0
 80181fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018200:	68bb      	ldr	r3, [r7, #8]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	68f9      	ldr	r1, [r7, #12]
 8018206:	4618      	mov	r0, r3
 8018208:	f000 fe0e 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 801820c:	4603      	mov	r3, r0
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10c      	bne.n	801822c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018212:	68bb      	ldr	r3, [r7, #8]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801821a:	2be0      	cmp	r3, #224	; 0xe0
 801821c:	d006      	beq.n	801822c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801821e:	68bb      	ldr	r3, [r7, #8]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d003      	beq.n	801822c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d102      	bne.n	8018232 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801822c:	f06f 030f 	mvn.w	r3, #15
 8018230:	e101      	b.n	8018436 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018232:	68fa      	ldr	r2, [r7, #12]
 8018234:	2101      	movs	r1, #1
 8018236:	68b8      	ldr	r0, [r7, #8]
 8018238:	f7ff fb60 	bl	80178fc <etharp_find_entry>
 801823c:	4603      	mov	r3, r0
 801823e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018244:	2b00      	cmp	r3, #0
 8018246:	da02      	bge.n	801824e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018248:	8a7b      	ldrh	r3, [r7, #18]
 801824a:	b25b      	sxtb	r3, r3
 801824c:	e0f3      	b.n	8018436 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801824e:	8a7b      	ldrh	r3, [r7, #18]
 8018250:	2b7e      	cmp	r3, #126	; 0x7e
 8018252:	d906      	bls.n	8018262 <etharp_query+0x7e>
 8018254:	4b7a      	ldr	r3, [pc, #488]	; (8018440 <etharp_query+0x25c>)
 8018256:	f240 32c1 	movw	r2, #961	; 0x3c1
 801825a:	497a      	ldr	r1, [pc, #488]	; (8018444 <etharp_query+0x260>)
 801825c:	487a      	ldr	r0, [pc, #488]	; (8018448 <etharp_query+0x264>)
 801825e:	f002 fc37 	bl	801aad0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018262:	8a7b      	ldrh	r3, [r7, #18]
 8018264:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018266:	7c7a      	ldrb	r2, [r7, #17]
 8018268:	4978      	ldr	r1, [pc, #480]	; (801844c <etharp_query+0x268>)
 801826a:	4613      	mov	r3, r2
 801826c:	005b      	lsls	r3, r3, #1
 801826e:	4413      	add	r3, r2
 8018270:	00db      	lsls	r3, r3, #3
 8018272:	440b      	add	r3, r1
 8018274:	3314      	adds	r3, #20
 8018276:	781b      	ldrb	r3, [r3, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d115      	bne.n	80182a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801827c:	2301      	movs	r3, #1
 801827e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018280:	7c7a      	ldrb	r2, [r7, #17]
 8018282:	4972      	ldr	r1, [pc, #456]	; (801844c <etharp_query+0x268>)
 8018284:	4613      	mov	r3, r2
 8018286:	005b      	lsls	r3, r3, #1
 8018288:	4413      	add	r3, r2
 801828a:	00db      	lsls	r3, r3, #3
 801828c:	440b      	add	r3, r1
 801828e:	3314      	adds	r3, #20
 8018290:	2201      	movs	r2, #1
 8018292:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018294:	7c7a      	ldrb	r2, [r7, #17]
 8018296:	496d      	ldr	r1, [pc, #436]	; (801844c <etharp_query+0x268>)
 8018298:	4613      	mov	r3, r2
 801829a:	005b      	lsls	r3, r3, #1
 801829c:	4413      	add	r3, r2
 801829e:	00db      	lsls	r3, r3, #3
 80182a0:	440b      	add	r3, r1
 80182a2:	3308      	adds	r3, #8
 80182a4:	68fa      	ldr	r2, [r7, #12]
 80182a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80182a8:	7c7a      	ldrb	r2, [r7, #17]
 80182aa:	4968      	ldr	r1, [pc, #416]	; (801844c <etharp_query+0x268>)
 80182ac:	4613      	mov	r3, r2
 80182ae:	005b      	lsls	r3, r3, #1
 80182b0:	4413      	add	r3, r2
 80182b2:	00db      	lsls	r3, r3, #3
 80182b4:	440b      	add	r3, r1
 80182b6:	3314      	adds	r3, #20
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	2b01      	cmp	r3, #1
 80182bc:	d011      	beq.n	80182e2 <etharp_query+0xfe>
 80182be:	7c7a      	ldrb	r2, [r7, #17]
 80182c0:	4962      	ldr	r1, [pc, #392]	; (801844c <etharp_query+0x268>)
 80182c2:	4613      	mov	r3, r2
 80182c4:	005b      	lsls	r3, r3, #1
 80182c6:	4413      	add	r3, r2
 80182c8:	00db      	lsls	r3, r3, #3
 80182ca:	440b      	add	r3, r1
 80182cc:	3314      	adds	r3, #20
 80182ce:	781b      	ldrb	r3, [r3, #0]
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d806      	bhi.n	80182e2 <etharp_query+0xfe>
 80182d4:	4b5a      	ldr	r3, [pc, #360]	; (8018440 <etharp_query+0x25c>)
 80182d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80182da:	495d      	ldr	r1, [pc, #372]	; (8018450 <etharp_query+0x26c>)
 80182dc:	485a      	ldr	r0, [pc, #360]	; (8018448 <etharp_query+0x264>)
 80182de:	f002 fbf7 	bl	801aad0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80182e2:	6a3b      	ldr	r3, [r7, #32]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d102      	bne.n	80182ee <etharp_query+0x10a>
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d10c      	bne.n	8018308 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80182ee:	68b9      	ldr	r1, [r7, #8]
 80182f0:	68f8      	ldr	r0, [r7, #12]
 80182f2:	f000 f963 	bl	80185bc <etharp_request>
 80182f6:	4603      	mov	r3, r0
 80182f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d102      	bne.n	8018308 <etharp_query+0x124>
      return result;
 8018302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018306:	e096      	b.n	8018436 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d106      	bne.n	801831c <etharp_query+0x138>
 801830e:	4b4c      	ldr	r3, [pc, #304]	; (8018440 <etharp_query+0x25c>)
 8018310:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018314:	494f      	ldr	r1, [pc, #316]	; (8018454 <etharp_query+0x270>)
 8018316:	484c      	ldr	r0, [pc, #304]	; (8018448 <etharp_query+0x264>)
 8018318:	f002 fbda 	bl	801aad0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801831c:	7c7a      	ldrb	r2, [r7, #17]
 801831e:	494b      	ldr	r1, [pc, #300]	; (801844c <etharp_query+0x268>)
 8018320:	4613      	mov	r3, r2
 8018322:	005b      	lsls	r3, r3, #1
 8018324:	4413      	add	r3, r2
 8018326:	00db      	lsls	r3, r3, #3
 8018328:	440b      	add	r3, r1
 801832a:	3314      	adds	r3, #20
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	2b01      	cmp	r3, #1
 8018330:	d917      	bls.n	8018362 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018332:	4a49      	ldr	r2, [pc, #292]	; (8018458 <etharp_query+0x274>)
 8018334:	7c7b      	ldrb	r3, [r7, #17]
 8018336:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018338:	7c7a      	ldrb	r2, [r7, #17]
 801833a:	4613      	mov	r3, r2
 801833c:	005b      	lsls	r3, r3, #1
 801833e:	4413      	add	r3, r2
 8018340:	00db      	lsls	r3, r3, #3
 8018342:	3308      	adds	r3, #8
 8018344:	4a41      	ldr	r2, [pc, #260]	; (801844c <etharp_query+0x268>)
 8018346:	4413      	add	r3, r2
 8018348:	3304      	adds	r3, #4
 801834a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801834e:	9200      	str	r2, [sp, #0]
 8018350:	697a      	ldr	r2, [r7, #20]
 8018352:	6879      	ldr	r1, [r7, #4]
 8018354:	68f8      	ldr	r0, [r7, #12]
 8018356:	f001 fc75 	bl	8019c44 <ethernet_output>
 801835a:	4603      	mov	r3, r0
 801835c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018360:	e067      	b.n	8018432 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018362:	7c7a      	ldrb	r2, [r7, #17]
 8018364:	4939      	ldr	r1, [pc, #228]	; (801844c <etharp_query+0x268>)
 8018366:	4613      	mov	r3, r2
 8018368:	005b      	lsls	r3, r3, #1
 801836a:	4413      	add	r3, r2
 801836c:	00db      	lsls	r3, r3, #3
 801836e:	440b      	add	r3, r1
 8018370:	3314      	adds	r3, #20
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	2b01      	cmp	r3, #1
 8018376:	d15c      	bne.n	8018432 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018378:	2300      	movs	r3, #0
 801837a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018380:	e01c      	b.n	80183bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018382:	69fb      	ldr	r3, [r7, #28]
 8018384:	895a      	ldrh	r2, [r3, #10]
 8018386:	69fb      	ldr	r3, [r7, #28]
 8018388:	891b      	ldrh	r3, [r3, #8]
 801838a:	429a      	cmp	r2, r3
 801838c:	d10a      	bne.n	80183a4 <etharp_query+0x1c0>
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d006      	beq.n	80183a4 <etharp_query+0x1c0>
 8018396:	4b2a      	ldr	r3, [pc, #168]	; (8018440 <etharp_query+0x25c>)
 8018398:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801839c:	492f      	ldr	r1, [pc, #188]	; (801845c <etharp_query+0x278>)
 801839e:	482a      	ldr	r0, [pc, #168]	; (8018448 <etharp_query+0x264>)
 80183a0:	f002 fb96 	bl	801aad0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80183a4:	69fb      	ldr	r3, [r7, #28]
 80183a6:	7b1b      	ldrb	r3, [r3, #12]
 80183a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d002      	beq.n	80183b6 <etharp_query+0x1d2>
        copy_needed = 1;
 80183b0:	2301      	movs	r3, #1
 80183b2:	61bb      	str	r3, [r7, #24]
        break;
 80183b4:	e005      	b.n	80183c2 <etharp_query+0x1de>
      }
      p = p->next;
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80183bc:	69fb      	ldr	r3, [r7, #28]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d1df      	bne.n	8018382 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d007      	beq.n	80183d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80183c8:	687a      	ldr	r2, [r7, #4]
 80183ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 80183ce:	200e      	movs	r0, #14
 80183d0:	f7f9 fa1e 	bl	8011810 <pbuf_clone>
 80183d4:	61f8      	str	r0, [r7, #28]
 80183d6:	e004      	b.n	80183e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80183dc:	69f8      	ldr	r0, [r7, #28]
 80183de:	f7f8 ff0d 	bl	80111fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80183e2:	69fb      	ldr	r3, [r7, #28]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d021      	beq.n	801842c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80183e8:	7c7a      	ldrb	r2, [r7, #17]
 80183ea:	4918      	ldr	r1, [pc, #96]	; (801844c <etharp_query+0x268>)
 80183ec:	4613      	mov	r3, r2
 80183ee:	005b      	lsls	r3, r3, #1
 80183f0:	4413      	add	r3, r2
 80183f2:	00db      	lsls	r3, r3, #3
 80183f4:	440b      	add	r3, r1
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d00a      	beq.n	8018412 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80183fc:	7c7a      	ldrb	r2, [r7, #17]
 80183fe:	4913      	ldr	r1, [pc, #76]	; (801844c <etharp_query+0x268>)
 8018400:	4613      	mov	r3, r2
 8018402:	005b      	lsls	r3, r3, #1
 8018404:	4413      	add	r3, r2
 8018406:	00db      	lsls	r3, r3, #3
 8018408:	440b      	add	r3, r1
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	4618      	mov	r0, r3
 801840e:	f7f8 fe4f 	bl	80110b0 <pbuf_free>
      }
      arp_table[i].q = p;
 8018412:	7c7a      	ldrb	r2, [r7, #17]
 8018414:	490d      	ldr	r1, [pc, #52]	; (801844c <etharp_query+0x268>)
 8018416:	4613      	mov	r3, r2
 8018418:	005b      	lsls	r3, r3, #1
 801841a:	4413      	add	r3, r2
 801841c:	00db      	lsls	r3, r3, #3
 801841e:	440b      	add	r3, r1
 8018420:	69fa      	ldr	r2, [r7, #28]
 8018422:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018424:	2300      	movs	r3, #0
 8018426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801842a:	e002      	b.n	8018432 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801842c:	23ff      	movs	r3, #255	; 0xff
 801842e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018436:	4618      	mov	r0, r3
 8018438:	3728      	adds	r7, #40	; 0x28
 801843a:	46bd      	mov	sp, r7
 801843c:	bd80      	pop	{r7, pc}
 801843e:	bf00      	nop
 8018440:	0801f608 	.word	0x0801f608
 8018444:	0801f7b4 	.word	0x0801f7b4
 8018448:	0801f680 	.word	0x0801f680
 801844c:	2000f20c 	.word	0x2000f20c
 8018450:	0801f7c4 	.word	0x0801f7c4
 8018454:	0801f7a8 	.word	0x0801f7a8
 8018458:	2000f2fc 	.word	0x2000f2fc
 801845c:	0801f7ec 	.word	0x0801f7ec

08018460 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b08a      	sub	sp, #40	; 0x28
 8018464:	af02      	add	r7, sp, #8
 8018466:	60f8      	str	r0, [r7, #12]
 8018468:	60b9      	str	r1, [r7, #8]
 801846a:	607a      	str	r2, [r7, #4]
 801846c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801846e:	2300      	movs	r3, #0
 8018470:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d106      	bne.n	8018486 <etharp_raw+0x26>
 8018478:	4b3a      	ldr	r3, [pc, #232]	; (8018564 <etharp_raw+0x104>)
 801847a:	f240 4257 	movw	r2, #1111	; 0x457
 801847e:	493a      	ldr	r1, [pc, #232]	; (8018568 <etharp_raw+0x108>)
 8018480:	483a      	ldr	r0, [pc, #232]	; (801856c <etharp_raw+0x10c>)
 8018482:	f002 fb25 	bl	801aad0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801848a:	211c      	movs	r1, #28
 801848c:	200e      	movs	r0, #14
 801848e:	f7f8 fb2b 	bl	8010ae8 <pbuf_alloc>
 8018492:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018494:	69bb      	ldr	r3, [r7, #24]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d102      	bne.n	80184a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801849a:	f04f 33ff 	mov.w	r3, #4294967295
 801849e:	e05d      	b.n	801855c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80184a0:	69bb      	ldr	r3, [r7, #24]
 80184a2:	895b      	ldrh	r3, [r3, #10]
 80184a4:	2b1b      	cmp	r3, #27
 80184a6:	d806      	bhi.n	80184b6 <etharp_raw+0x56>
 80184a8:	4b2e      	ldr	r3, [pc, #184]	; (8018564 <etharp_raw+0x104>)
 80184aa:	f240 4262 	movw	r2, #1122	; 0x462
 80184ae:	4930      	ldr	r1, [pc, #192]	; (8018570 <etharp_raw+0x110>)
 80184b0:	482e      	ldr	r0, [pc, #184]	; (801856c <etharp_raw+0x10c>)
 80184b2:	f002 fb0d 	bl	801aad0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80184b6:	69bb      	ldr	r3, [r7, #24]
 80184b8:	685b      	ldr	r3, [r3, #4]
 80184ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80184bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80184be:	4618      	mov	r0, r3
 80184c0:	f7f6 ff1e 	bl	800f300 <lwip_htons>
 80184c4:	4603      	mov	r3, r0
 80184c6:	461a      	mov	r2, r3
 80184c8:	697b      	ldr	r3, [r7, #20]
 80184ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80184d2:	2b06      	cmp	r3, #6
 80184d4:	d006      	beq.n	80184e4 <etharp_raw+0x84>
 80184d6:	4b23      	ldr	r3, [pc, #140]	; (8018564 <etharp_raw+0x104>)
 80184d8:	f240 4269 	movw	r2, #1129	; 0x469
 80184dc:	4925      	ldr	r1, [pc, #148]	; (8018574 <etharp_raw+0x114>)
 80184de:	4823      	ldr	r0, [pc, #140]	; (801856c <etharp_raw+0x10c>)
 80184e0:	f002 faf6 	bl	801aad0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	3308      	adds	r3, #8
 80184e8:	2206      	movs	r2, #6
 80184ea:	6839      	ldr	r1, [r7, #0]
 80184ec:	4618      	mov	r0, r3
 80184ee:	f002 fca2 	bl	801ae36 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80184f2:	697b      	ldr	r3, [r7, #20]
 80184f4:	3312      	adds	r3, #18
 80184f6:	2206      	movs	r2, #6
 80184f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80184fa:	4618      	mov	r0, r3
 80184fc:	f002 fc9b 	bl	801ae36 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018500:	697b      	ldr	r3, [r7, #20]
 8018502:	330e      	adds	r3, #14
 8018504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018506:	6812      	ldr	r2, [r2, #0]
 8018508:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	3318      	adds	r3, #24
 801850e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018510:	6812      	ldr	r2, [r2, #0]
 8018512:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018514:	697b      	ldr	r3, [r7, #20]
 8018516:	2200      	movs	r2, #0
 8018518:	701a      	strb	r2, [r3, #0]
 801851a:	2200      	movs	r2, #0
 801851c:	f042 0201 	orr.w	r2, r2, #1
 8018520:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	2200      	movs	r2, #0
 8018526:	f042 0208 	orr.w	r2, r2, #8
 801852a:	709a      	strb	r2, [r3, #2]
 801852c:	2200      	movs	r2, #0
 801852e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018530:	697b      	ldr	r3, [r7, #20]
 8018532:	2206      	movs	r2, #6
 8018534:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018536:	697b      	ldr	r3, [r7, #20]
 8018538:	2204      	movs	r2, #4
 801853a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801853c:	f640 0306 	movw	r3, #2054	; 0x806
 8018540:	9300      	str	r3, [sp, #0]
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	68ba      	ldr	r2, [r7, #8]
 8018546:	69b9      	ldr	r1, [r7, #24]
 8018548:	68f8      	ldr	r0, [r7, #12]
 801854a:	f001 fb7b 	bl	8019c44 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801854e:	69b8      	ldr	r0, [r7, #24]
 8018550:	f7f8 fdae 	bl	80110b0 <pbuf_free>
  p = NULL;
 8018554:	2300      	movs	r3, #0
 8018556:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018558:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801855c:	4618      	mov	r0, r3
 801855e:	3720      	adds	r7, #32
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}
 8018564:	0801f608 	.word	0x0801f608
 8018568:	0801f758 	.word	0x0801f758
 801856c:	0801f680 	.word	0x0801f680
 8018570:	0801f808 	.word	0x0801f808
 8018574:	0801f83c 	.word	0x0801f83c

08018578 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b088      	sub	sp, #32
 801857c:	af04      	add	r7, sp, #16
 801857e:	60f8      	str	r0, [r7, #12]
 8018580:	60b9      	str	r1, [r7, #8]
 8018582:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018594:	2201      	movs	r2, #1
 8018596:	9203      	str	r2, [sp, #12]
 8018598:	68ba      	ldr	r2, [r7, #8]
 801859a:	9202      	str	r2, [sp, #8]
 801859c:	4a06      	ldr	r2, [pc, #24]	; (80185b8 <etharp_request_dst+0x40>)
 801859e:	9201      	str	r2, [sp, #4]
 80185a0:	9300      	str	r3, [sp, #0]
 80185a2:	4603      	mov	r3, r0
 80185a4:	687a      	ldr	r2, [r7, #4]
 80185a6:	68f8      	ldr	r0, [r7, #12]
 80185a8:	f7ff ff5a 	bl	8018460 <etharp_raw>
 80185ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	3710      	adds	r7, #16
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	bf00      	nop
 80185b8:	0801fe2c 	.word	0x0801fe2c

080185bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
 80185c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80185c6:	4a05      	ldr	r2, [pc, #20]	; (80185dc <etharp_request+0x20>)
 80185c8:	6839      	ldr	r1, [r7, #0]
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f7ff ffd4 	bl	8018578 <etharp_request_dst>
 80185d0:	4603      	mov	r3, r0
}
 80185d2:	4618      	mov	r0, r3
 80185d4:	3708      	adds	r7, #8
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bd80      	pop	{r7, pc}
 80185da:	bf00      	nop
 80185dc:	0801fe24 	.word	0x0801fe24

080185e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b08e      	sub	sp, #56	; 0x38
 80185e4:	af04      	add	r7, sp, #16
 80185e6:	6078      	str	r0, [r7, #4]
 80185e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80185ea:	4b79      	ldr	r3, [pc, #484]	; (80187d0 <icmp_input+0x1f0>)
 80185ec:	689b      	ldr	r3, [r3, #8]
 80185ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80185f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f2:	781b      	ldrb	r3, [r3, #0]
 80185f4:	f003 030f 	and.w	r3, r3, #15
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	009b      	lsls	r3, r3, #2
 80185fc:	b2db      	uxtb	r3, r3
 80185fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018602:	2b13      	cmp	r3, #19
 8018604:	f240 80cd 	bls.w	80187a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	895b      	ldrh	r3, [r3, #10]
 801860c:	2b03      	cmp	r3, #3
 801860e:	f240 80ca 	bls.w	80187a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	685b      	ldr	r3, [r3, #4]
 8018616:	781b      	ldrb	r3, [r3, #0]
 8018618:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801861c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018620:	2b00      	cmp	r3, #0
 8018622:	f000 80b7 	beq.w	8018794 <icmp_input+0x1b4>
 8018626:	2b08      	cmp	r3, #8
 8018628:	f040 80b7 	bne.w	801879a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801862c:	4b69      	ldr	r3, [pc, #420]	; (80187d4 <icmp_input+0x1f4>)
 801862e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018630:	4b67      	ldr	r3, [pc, #412]	; (80187d0 <icmp_input+0x1f0>)
 8018632:	695b      	ldr	r3, [r3, #20]
 8018634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018638:	2be0      	cmp	r3, #224	; 0xe0
 801863a:	f000 80bb 	beq.w	80187b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801863e:	4b64      	ldr	r3, [pc, #400]	; (80187d0 <icmp_input+0x1f0>)
 8018640:	695b      	ldr	r3, [r3, #20]
 8018642:	4a63      	ldr	r2, [pc, #396]	; (80187d0 <icmp_input+0x1f0>)
 8018644:	6812      	ldr	r2, [r2, #0]
 8018646:	4611      	mov	r1, r2
 8018648:	4618      	mov	r0, r3
 801864a:	f000 fbed 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 801864e:	4603      	mov	r3, r0
 8018650:	2b00      	cmp	r3, #0
 8018652:	f040 80b1 	bne.w	80187b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	891b      	ldrh	r3, [r3, #8]
 801865a:	2b07      	cmp	r3, #7
 801865c:	f240 80a5 	bls.w	80187aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018662:	330e      	adds	r3, #14
 8018664:	4619      	mov	r1, r3
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	f7f8 fc8c 	bl	8010f84 <pbuf_add_header>
 801866c:	4603      	mov	r3, r0
 801866e:	2b00      	cmp	r3, #0
 8018670:	d04b      	beq.n	801870a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	891a      	ldrh	r2, [r3, #8]
 8018676:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018678:	4413      	add	r3, r2
 801867a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	891b      	ldrh	r3, [r3, #8]
 8018680:	8b7a      	ldrh	r2, [r7, #26]
 8018682:	429a      	cmp	r2, r3
 8018684:	f0c0 809a 	bcc.w	80187bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018688:	8b7b      	ldrh	r3, [r7, #26]
 801868a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801868e:	4619      	mov	r1, r3
 8018690:	200e      	movs	r0, #14
 8018692:	f7f8 fa29 	bl	8010ae8 <pbuf_alloc>
 8018696:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018698:	697b      	ldr	r3, [r7, #20]
 801869a:	2b00      	cmp	r3, #0
 801869c:	f000 8090 	beq.w	80187c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	895b      	ldrh	r3, [r3, #10]
 80186a4:	461a      	mov	r2, r3
 80186a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186a8:	3308      	adds	r3, #8
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d203      	bcs.n	80186b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80186ae:	6978      	ldr	r0, [r7, #20]
 80186b0:	f7f8 fcfe 	bl	80110b0 <pbuf_free>
          goto icmperr;
 80186b4:	e085      	b.n	80187c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	685b      	ldr	r3, [r3, #4]
 80186ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80186bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186be:	4618      	mov	r0, r3
 80186c0:	f002 fbb9 	bl	801ae36 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80186c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186c6:	4619      	mov	r1, r3
 80186c8:	6978      	ldr	r0, [r7, #20]
 80186ca:	f7f8 fc6b 	bl	8010fa4 <pbuf_remove_header>
 80186ce:	4603      	mov	r3, r0
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d009      	beq.n	80186e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80186d4:	4b40      	ldr	r3, [pc, #256]	; (80187d8 <icmp_input+0x1f8>)
 80186d6:	22b6      	movs	r2, #182	; 0xb6
 80186d8:	4940      	ldr	r1, [pc, #256]	; (80187dc <icmp_input+0x1fc>)
 80186da:	4841      	ldr	r0, [pc, #260]	; (80187e0 <icmp_input+0x200>)
 80186dc:	f002 f9f8 	bl	801aad0 <iprintf>
          pbuf_free(r);
 80186e0:	6978      	ldr	r0, [r7, #20]
 80186e2:	f7f8 fce5 	bl	80110b0 <pbuf_free>
          goto icmperr;
 80186e6:	e06c      	b.n	80187c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80186e8:	6879      	ldr	r1, [r7, #4]
 80186ea:	6978      	ldr	r0, [r7, #20]
 80186ec:	f7f8 fe14 	bl	8011318 <pbuf_copy>
 80186f0:	4603      	mov	r3, r0
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d003      	beq.n	80186fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80186f6:	6978      	ldr	r0, [r7, #20]
 80186f8:	f7f8 fcda 	bl	80110b0 <pbuf_free>
          goto icmperr;
 80186fc:	e061      	b.n	80187c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f7f8 fcd6 	bl	80110b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	607b      	str	r3, [r7, #4]
 8018708:	e00f      	b.n	801872a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801870a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801870c:	330e      	adds	r3, #14
 801870e:	4619      	mov	r1, r3
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f7f8 fc47 	bl	8010fa4 <pbuf_remove_header>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d006      	beq.n	801872a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801871c:	4b2e      	ldr	r3, [pc, #184]	; (80187d8 <icmp_input+0x1f8>)
 801871e:	22c7      	movs	r2, #199	; 0xc7
 8018720:	4930      	ldr	r1, [pc, #192]	; (80187e4 <icmp_input+0x204>)
 8018722:	482f      	ldr	r0, [pc, #188]	; (80187e0 <icmp_input+0x200>)
 8018724:	f002 f9d4 	bl	801aad0 <iprintf>
          goto icmperr;
 8018728:	e04b      	b.n	80187c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	685b      	ldr	r3, [r3, #4]
 801872e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018732:	4619      	mov	r1, r3
 8018734:	6878      	ldr	r0, [r7, #4]
 8018736:	f7f8 fc25 	bl	8010f84 <pbuf_add_header>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d12b      	bne.n	8018798 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	685b      	ldr	r3, [r3, #4]
 8018744:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	681a      	ldr	r2, [r3, #0]
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801874e:	4b20      	ldr	r3, [pc, #128]	; (80187d0 <icmp_input+0x1f0>)
 8018750:	691a      	ldr	r2, [r3, #16]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018756:	693b      	ldr	r3, [r7, #16]
 8018758:	2200      	movs	r2, #0
 801875a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	2200      	movs	r2, #0
 8018760:	709a      	strb	r2, [r3, #2]
 8018762:	2200      	movs	r2, #0
 8018764:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	22ff      	movs	r2, #255	; 0xff
 801876a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	2200      	movs	r2, #0
 8018770:	729a      	strb	r2, [r3, #10]
 8018772:	2200      	movs	r2, #0
 8018774:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	9302      	str	r3, [sp, #8]
 801877a:	2301      	movs	r3, #1
 801877c:	9301      	str	r3, [sp, #4]
 801877e:	2300      	movs	r3, #0
 8018780:	9300      	str	r3, [sp, #0]
 8018782:	23ff      	movs	r3, #255	; 0xff
 8018784:	2200      	movs	r2, #0
 8018786:	69f9      	ldr	r1, [r7, #28]
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f000 fa75 	bl	8018c78 <ip4_output_if>
 801878e:	4603      	mov	r3, r0
 8018790:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018792:	e001      	b.n	8018798 <icmp_input+0x1b8>
      break;
 8018794:	bf00      	nop
 8018796:	e000      	b.n	801879a <icmp_input+0x1ba>
      break;
 8018798:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801879a:	6878      	ldr	r0, [r7, #4]
 801879c:	f7f8 fc88 	bl	80110b0 <pbuf_free>
  return;
 80187a0:	e013      	b.n	80187ca <icmp_input+0x1ea>
    goto lenerr;
 80187a2:	bf00      	nop
 80187a4:	e002      	b.n	80187ac <icmp_input+0x1cc>
    goto lenerr;
 80187a6:	bf00      	nop
 80187a8:	e000      	b.n	80187ac <icmp_input+0x1cc>
        goto lenerr;
 80187aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7f8 fc7f 	bl	80110b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80187b2:	e00a      	b.n	80187ca <icmp_input+0x1ea>
        goto icmperr;
 80187b4:	bf00      	nop
 80187b6:	e004      	b.n	80187c2 <icmp_input+0x1e2>
        goto icmperr;
 80187b8:	bf00      	nop
 80187ba:	e002      	b.n	80187c2 <icmp_input+0x1e2>
          goto icmperr;
 80187bc:	bf00      	nop
 80187be:	e000      	b.n	80187c2 <icmp_input+0x1e2>
          goto icmperr;
 80187c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f7f8 fc74 	bl	80110b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80187c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80187ca:	3728      	adds	r7, #40	; 0x28
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	2000972c 	.word	0x2000972c
 80187d4:	20009740 	.word	0x20009740
 80187d8:	0801f880 	.word	0x0801f880
 80187dc:	0801f8b8 	.word	0x0801f8b8
 80187e0:	0801f8f0 	.word	0x0801f8f0
 80187e4:	0801f918 	.word	0x0801f918

080187e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b082      	sub	sp, #8
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	460b      	mov	r3, r1
 80187f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80187f4:	78fb      	ldrb	r3, [r7, #3]
 80187f6:	461a      	mov	r2, r3
 80187f8:	2103      	movs	r1, #3
 80187fa:	6878      	ldr	r0, [r7, #4]
 80187fc:	f000 f814 	bl	8018828 <icmp_send_response>
}
 8018800:	bf00      	nop
 8018802:	3708      	adds	r7, #8
 8018804:	46bd      	mov	sp, r7
 8018806:	bd80      	pop	{r7, pc}

08018808 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b082      	sub	sp, #8
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	460b      	mov	r3, r1
 8018812:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018814:	78fb      	ldrb	r3, [r7, #3]
 8018816:	461a      	mov	r2, r3
 8018818:	210b      	movs	r1, #11
 801881a:	6878      	ldr	r0, [r7, #4]
 801881c:	f000 f804 	bl	8018828 <icmp_send_response>
}
 8018820:	bf00      	nop
 8018822:	3708      	adds	r7, #8
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}

08018828 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b08c      	sub	sp, #48	; 0x30
 801882c:	af04      	add	r7, sp, #16
 801882e:	6078      	str	r0, [r7, #4]
 8018830:	460b      	mov	r3, r1
 8018832:	70fb      	strb	r3, [r7, #3]
 8018834:	4613      	mov	r3, r2
 8018836:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018838:	f44f 7220 	mov.w	r2, #640	; 0x280
 801883c:	2124      	movs	r1, #36	; 0x24
 801883e:	2022      	movs	r0, #34	; 0x22
 8018840:	f7f8 f952 	bl	8010ae8 <pbuf_alloc>
 8018844:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018846:	69fb      	ldr	r3, [r7, #28]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d04c      	beq.n	80188e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	895b      	ldrh	r3, [r3, #10]
 8018850:	2b23      	cmp	r3, #35	; 0x23
 8018852:	d806      	bhi.n	8018862 <icmp_send_response+0x3a>
 8018854:	4b26      	ldr	r3, [pc, #152]	; (80188f0 <icmp_send_response+0xc8>)
 8018856:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801885a:	4926      	ldr	r1, [pc, #152]	; (80188f4 <icmp_send_response+0xcc>)
 801885c:	4826      	ldr	r0, [pc, #152]	; (80188f8 <icmp_send_response+0xd0>)
 801885e:	f002 f937 	bl	801aad0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	685b      	ldr	r3, [r3, #4]
 8018866:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018868:	69fb      	ldr	r3, [r7, #28]
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801886e:	697b      	ldr	r3, [r7, #20]
 8018870:	78fa      	ldrb	r2, [r7, #3]
 8018872:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018874:	697b      	ldr	r3, [r7, #20]
 8018876:	78ba      	ldrb	r2, [r7, #2]
 8018878:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	2200      	movs	r2, #0
 801887e:	711a      	strb	r2, [r3, #4]
 8018880:	2200      	movs	r2, #0
 8018882:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018884:	697b      	ldr	r3, [r7, #20]
 8018886:	2200      	movs	r2, #0
 8018888:	719a      	strb	r2, [r3, #6]
 801888a:	2200      	movs	r2, #0
 801888c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	685b      	ldr	r3, [r3, #4]
 8018892:	f103 0008 	add.w	r0, r3, #8
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	685b      	ldr	r3, [r3, #4]
 801889a:	221c      	movs	r2, #28
 801889c:	4619      	mov	r1, r3
 801889e:	f002 faca 	bl	801ae36 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	68db      	ldr	r3, [r3, #12]
 80188a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80188a8:	f107 030c 	add.w	r3, r7, #12
 80188ac:	4618      	mov	r0, r3
 80188ae:	f000 f825 	bl	80188fc <ip4_route>
 80188b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80188b4:	693b      	ldr	r3, [r7, #16]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d011      	beq.n	80188de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80188ba:	697b      	ldr	r3, [r7, #20]
 80188bc:	2200      	movs	r2, #0
 80188be:	709a      	strb	r2, [r3, #2]
 80188c0:	2200      	movs	r2, #0
 80188c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80188c4:	f107 020c 	add.w	r2, r7, #12
 80188c8:	693b      	ldr	r3, [r7, #16]
 80188ca:	9302      	str	r3, [sp, #8]
 80188cc:	2301      	movs	r3, #1
 80188ce:	9301      	str	r3, [sp, #4]
 80188d0:	2300      	movs	r3, #0
 80188d2:	9300      	str	r3, [sp, #0]
 80188d4:	23ff      	movs	r3, #255	; 0xff
 80188d6:	2100      	movs	r1, #0
 80188d8:	69f8      	ldr	r0, [r7, #28]
 80188da:	f000 f9cd 	bl	8018c78 <ip4_output_if>
  }
  pbuf_free(q);
 80188de:	69f8      	ldr	r0, [r7, #28]
 80188e0:	f7f8 fbe6 	bl	80110b0 <pbuf_free>
 80188e4:	e000      	b.n	80188e8 <icmp_send_response+0xc0>
    return;
 80188e6:	bf00      	nop
}
 80188e8:	3720      	adds	r7, #32
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop
 80188f0:	0801f880 	.word	0x0801f880
 80188f4:	0801f94c 	.word	0x0801f94c
 80188f8:	0801f8f0 	.word	0x0801f8f0

080188fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80188fc:	b480      	push	{r7}
 80188fe:	b085      	sub	sp, #20
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018904:	4b33      	ldr	r3, [pc, #204]	; (80189d4 <ip4_route+0xd8>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	60fb      	str	r3, [r7, #12]
 801890a:	e036      	b.n	801897a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018912:	f003 0301 	and.w	r3, r3, #1
 8018916:	b2db      	uxtb	r3, r3
 8018918:	2b00      	cmp	r3, #0
 801891a:	d02b      	beq.n	8018974 <ip4_route+0x78>
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018922:	089b      	lsrs	r3, r3, #2
 8018924:	f003 0301 	and.w	r3, r3, #1
 8018928:	b2db      	uxtb	r3, r3
 801892a:	2b00      	cmp	r3, #0
 801892c:	d022      	beq.n	8018974 <ip4_route+0x78>
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	3304      	adds	r3, #4
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d01d      	beq.n	8018974 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	3304      	adds	r3, #4
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	405a      	eors	r2, r3
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	3308      	adds	r3, #8
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	4013      	ands	r3, r2
 801894c:	2b00      	cmp	r3, #0
 801894e:	d101      	bne.n	8018954 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	e038      	b.n	80189c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801895a:	f003 0302 	and.w	r3, r3, #2
 801895e:	2b00      	cmp	r3, #0
 8018960:	d108      	bne.n	8018974 <ip4_route+0x78>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681a      	ldr	r2, [r3, #0]
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	330c      	adds	r3, #12
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	429a      	cmp	r2, r3
 801896e:	d101      	bne.n	8018974 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	e028      	b.n	80189c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	60fb      	str	r3, [r7, #12]
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d1c5      	bne.n	801890c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018980:	4b15      	ldr	r3, [pc, #84]	; (80189d8 <ip4_route+0xdc>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d01a      	beq.n	80189be <ip4_route+0xc2>
 8018988:	4b13      	ldr	r3, [pc, #76]	; (80189d8 <ip4_route+0xdc>)
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018990:	f003 0301 	and.w	r3, r3, #1
 8018994:	2b00      	cmp	r3, #0
 8018996:	d012      	beq.n	80189be <ip4_route+0xc2>
 8018998:	4b0f      	ldr	r3, [pc, #60]	; (80189d8 <ip4_route+0xdc>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189a0:	f003 0304 	and.w	r3, r3, #4
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d00a      	beq.n	80189be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80189a8:	4b0b      	ldr	r3, [pc, #44]	; (80189d8 <ip4_route+0xdc>)
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	3304      	adds	r3, #4
 80189ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d004      	beq.n	80189be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	b2db      	uxtb	r3, r3
 80189ba:	2b7f      	cmp	r3, #127	; 0x7f
 80189bc:	d101      	bne.n	80189c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80189be:	2300      	movs	r3, #0
 80189c0:	e001      	b.n	80189c6 <ip4_route+0xca>
  }

  return netif_default;
 80189c2:	4b05      	ldr	r3, [pc, #20]	; (80189d8 <ip4_route+0xdc>)
 80189c4:	681b      	ldr	r3, [r3, #0]
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3714      	adds	r7, #20
 80189ca:	46bd      	mov	sp, r7
 80189cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d0:	4770      	bx	lr
 80189d2:	bf00      	nop
 80189d4:	2000f1a0 	.word	0x2000f1a0
 80189d8:	2000f1a4 	.word	0x2000f1a4

080189dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189ea:	f003 0301 	and.w	r3, r3, #1
 80189ee:	b2db      	uxtb	r3, r3
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d016      	beq.n	8018a22 <ip4_input_accept+0x46>
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	3304      	adds	r3, #4
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d011      	beq.n	8018a22 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80189fe:	4b0b      	ldr	r3, [pc, #44]	; (8018a2c <ip4_input_accept+0x50>)
 8018a00:	695a      	ldr	r2, [r3, #20]
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	3304      	adds	r3, #4
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d008      	beq.n	8018a1e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018a0c:	4b07      	ldr	r3, [pc, #28]	; (8018a2c <ip4_input_accept+0x50>)
 8018a0e:	695b      	ldr	r3, [r3, #20]
 8018a10:	6879      	ldr	r1, [r7, #4]
 8018a12:	4618      	mov	r0, r3
 8018a14:	f000 fa08 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 8018a18:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d001      	beq.n	8018a22 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018a1e:	2301      	movs	r3, #1
 8018a20:	e000      	b.n	8018a24 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018a22:	2300      	movs	r3, #0
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3708      	adds	r7, #8
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	2000972c 	.word	0x2000972c

08018a30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b086      	sub	sp, #24
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	685b      	ldr	r3, [r3, #4]
 8018a3e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	091b      	lsrs	r3, r3, #4
 8018a46:	b2db      	uxtb	r3, r3
 8018a48:	2b04      	cmp	r3, #4
 8018a4a:	d004      	beq.n	8018a56 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	f7f8 fb2f 	bl	80110b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018a52:	2300      	movs	r3, #0
 8018a54:	e107      	b.n	8018c66 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	781b      	ldrb	r3, [r3, #0]
 8018a5a:	f003 030f 	and.w	r3, r3, #15
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018a66:	697b      	ldr	r3, [r7, #20]
 8018a68:	885b      	ldrh	r3, [r3, #2]
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7f6 fc47 	bl	800f300 <lwip_htons>
 8018a72:	4603      	mov	r3, r0
 8018a74:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	891b      	ldrh	r3, [r3, #8]
 8018a7a:	89ba      	ldrh	r2, [r7, #12]
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d204      	bcs.n	8018a8a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018a80:	89bb      	ldrh	r3, [r7, #12]
 8018a82:	4619      	mov	r1, r3
 8018a84:	6878      	ldr	r0, [r7, #4]
 8018a86:	f7f8 f98d 	bl	8010da4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	895b      	ldrh	r3, [r3, #10]
 8018a8e:	89fa      	ldrh	r2, [r7, #14]
 8018a90:	429a      	cmp	r2, r3
 8018a92:	d807      	bhi.n	8018aa4 <ip4_input+0x74>
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	891b      	ldrh	r3, [r3, #8]
 8018a98:	89ba      	ldrh	r2, [r7, #12]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d802      	bhi.n	8018aa4 <ip4_input+0x74>
 8018a9e:	89fb      	ldrh	r3, [r7, #14]
 8018aa0:	2b13      	cmp	r3, #19
 8018aa2:	d804      	bhi.n	8018aae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f7f8 fb03 	bl	80110b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	e0db      	b.n	8018c66 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	691b      	ldr	r3, [r3, #16]
 8018ab2:	4a6f      	ldr	r2, [pc, #444]	; (8018c70 <ip4_input+0x240>)
 8018ab4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	68db      	ldr	r3, [r3, #12]
 8018aba:	4a6d      	ldr	r2, [pc, #436]	; (8018c70 <ip4_input+0x240>)
 8018abc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018abe:	4b6c      	ldr	r3, [pc, #432]	; (8018c70 <ip4_input+0x240>)
 8018ac0:	695b      	ldr	r3, [r3, #20]
 8018ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ac6:	2be0      	cmp	r3, #224	; 0xe0
 8018ac8:	d112      	bne.n	8018af0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018ad0:	f003 0301 	and.w	r3, r3, #1
 8018ad4:	b2db      	uxtb	r3, r3
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d007      	beq.n	8018aea <ip4_input+0xba>
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	3304      	adds	r3, #4
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d002      	beq.n	8018aea <ip4_input+0xba>
      netif = inp;
 8018ae4:	683b      	ldr	r3, [r7, #0]
 8018ae6:	613b      	str	r3, [r7, #16]
 8018ae8:	e02a      	b.n	8018b40 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018aea:	2300      	movs	r3, #0
 8018aec:	613b      	str	r3, [r7, #16]
 8018aee:	e027      	b.n	8018b40 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018af0:	6838      	ldr	r0, [r7, #0]
 8018af2:	f7ff ff73 	bl	80189dc <ip4_input_accept>
 8018af6:	4603      	mov	r3, r0
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d002      	beq.n	8018b02 <ip4_input+0xd2>
      netif = inp;
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	613b      	str	r3, [r7, #16]
 8018b00:	e01e      	b.n	8018b40 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018b02:	2300      	movs	r3, #0
 8018b04:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018b06:	4b5a      	ldr	r3, [pc, #360]	; (8018c70 <ip4_input+0x240>)
 8018b08:	695b      	ldr	r3, [r3, #20]
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8018b0e:	d017      	beq.n	8018b40 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018b10:	4b58      	ldr	r3, [pc, #352]	; (8018c74 <ip4_input+0x244>)
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	613b      	str	r3, [r7, #16]
 8018b16:	e00e      	b.n	8018b36 <ip4_input+0x106>
          if (netif == inp) {
 8018b18:	693a      	ldr	r2, [r7, #16]
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d006      	beq.n	8018b2e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018b20:	6938      	ldr	r0, [r7, #16]
 8018b22:	f7ff ff5b 	bl	80189dc <ip4_input_accept>
 8018b26:	4603      	mov	r3, r0
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d108      	bne.n	8018b3e <ip4_input+0x10e>
 8018b2c:	e000      	b.n	8018b30 <ip4_input+0x100>
            continue;
 8018b2e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018b30:	693b      	ldr	r3, [r7, #16]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	613b      	str	r3, [r7, #16]
 8018b36:	693b      	ldr	r3, [r7, #16]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d1ed      	bne.n	8018b18 <ip4_input+0xe8>
 8018b3c:	e000      	b.n	8018b40 <ip4_input+0x110>
            break;
 8018b3e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018b40:	4b4b      	ldr	r3, [pc, #300]	; (8018c70 <ip4_input+0x240>)
 8018b42:	691b      	ldr	r3, [r3, #16]
 8018b44:	6839      	ldr	r1, [r7, #0]
 8018b46:	4618      	mov	r0, r3
 8018b48:	f000 f96e 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d105      	bne.n	8018b5e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018b52:	4b47      	ldr	r3, [pc, #284]	; (8018c70 <ip4_input+0x240>)
 8018b54:	691b      	ldr	r3, [r3, #16]
 8018b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018b5a:	2be0      	cmp	r3, #224	; 0xe0
 8018b5c:	d104      	bne.n	8018b68 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018b5e:	6878      	ldr	r0, [r7, #4]
 8018b60:	f7f8 faa6 	bl	80110b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018b64:	2300      	movs	r3, #0
 8018b66:	e07e      	b.n	8018c66 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018b68:	693b      	ldr	r3, [r7, #16]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d104      	bne.n	8018b78 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018b6e:	6878      	ldr	r0, [r7, #4]
 8018b70:	f7f8 fa9e 	bl	80110b0 <pbuf_free>
    return ERR_OK;
 8018b74:	2300      	movs	r3, #0
 8018b76:	e076      	b.n	8018c66 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018b78:	697b      	ldr	r3, [r7, #20]
 8018b7a:	88db      	ldrh	r3, [r3, #6]
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	461a      	mov	r2, r3
 8018b80:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018b84:	4013      	ands	r3, r2
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d00b      	beq.n	8018ba2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018b8a:	6878      	ldr	r0, [r7, #4]
 8018b8c:	f000 fc92 	bl	80194b4 <ip4_reass>
 8018b90:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d101      	bne.n	8018b9c <ip4_input+0x16c>
      return ERR_OK;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	e064      	b.n	8018c66 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	685b      	ldr	r3, [r3, #4]
 8018ba0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018ba2:	4a33      	ldr	r2, [pc, #204]	; (8018c70 <ip4_input+0x240>)
 8018ba4:	693b      	ldr	r3, [r7, #16]
 8018ba6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018ba8:	4a31      	ldr	r2, [pc, #196]	; (8018c70 <ip4_input+0x240>)
 8018baa:	683b      	ldr	r3, [r7, #0]
 8018bac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018bae:	4a30      	ldr	r2, [pc, #192]	; (8018c70 <ip4_input+0x240>)
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	781b      	ldrb	r3, [r3, #0]
 8018bb8:	f003 030f 	and.w	r3, r3, #15
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	b29a      	uxth	r2, r3
 8018bc4:	4b2a      	ldr	r3, [pc, #168]	; (8018c70 <ip4_input+0x240>)
 8018bc6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018bc8:	89fb      	ldrh	r3, [r7, #14]
 8018bca:	4619      	mov	r1, r3
 8018bcc:	6878      	ldr	r0, [r7, #4]
 8018bce:	f7f8 f9e9 	bl	8010fa4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018bd2:	697b      	ldr	r3, [r7, #20]
 8018bd4:	7a5b      	ldrb	r3, [r3, #9]
 8018bd6:	2b11      	cmp	r3, #17
 8018bd8:	d006      	beq.n	8018be8 <ip4_input+0x1b8>
 8018bda:	2b11      	cmp	r3, #17
 8018bdc:	dc13      	bgt.n	8018c06 <ip4_input+0x1d6>
 8018bde:	2b01      	cmp	r3, #1
 8018be0:	d00c      	beq.n	8018bfc <ip4_input+0x1cc>
 8018be2:	2b06      	cmp	r3, #6
 8018be4:	d005      	beq.n	8018bf2 <ip4_input+0x1c2>
 8018be6:	e00e      	b.n	8018c06 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018be8:	6839      	ldr	r1, [r7, #0]
 8018bea:	6878      	ldr	r0, [r7, #4]
 8018bec:	f7fe f9e8 	bl	8016fc0 <udp_input>
        break;
 8018bf0:	e026      	b.n	8018c40 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018bf2:	6839      	ldr	r1, [r7, #0]
 8018bf4:	6878      	ldr	r0, [r7, #4]
 8018bf6:	f7fa f9f9 	bl	8012fec <tcp_input>
        break;
 8018bfa:	e021      	b.n	8018c40 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018bfc:	6839      	ldr	r1, [r7, #0]
 8018bfe:	6878      	ldr	r0, [r7, #4]
 8018c00:	f7ff fcee 	bl	80185e0 <icmp_input>
        break;
 8018c04:	e01c      	b.n	8018c40 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018c06:	4b1a      	ldr	r3, [pc, #104]	; (8018c70 <ip4_input+0x240>)
 8018c08:	695b      	ldr	r3, [r3, #20]
 8018c0a:	6939      	ldr	r1, [r7, #16]
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f000 f90b 	bl	8018e28 <ip4_addr_isbroadcast_u32>
 8018c12:	4603      	mov	r3, r0
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d10f      	bne.n	8018c38 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018c18:	4b15      	ldr	r3, [pc, #84]	; (8018c70 <ip4_input+0x240>)
 8018c1a:	695b      	ldr	r3, [r3, #20]
 8018c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018c20:	2be0      	cmp	r3, #224	; 0xe0
 8018c22:	d009      	beq.n	8018c38 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018c28:	4619      	mov	r1, r3
 8018c2a:	6878      	ldr	r0, [r7, #4]
 8018c2c:	f7f8 fa2d 	bl	801108a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018c30:	2102      	movs	r1, #2
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f7ff fdd8 	bl	80187e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018c38:	6878      	ldr	r0, [r7, #4]
 8018c3a:	f7f8 fa39 	bl	80110b0 <pbuf_free>
        break;
 8018c3e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018c40:	4b0b      	ldr	r3, [pc, #44]	; (8018c70 <ip4_input+0x240>)
 8018c42:	2200      	movs	r2, #0
 8018c44:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018c46:	4b0a      	ldr	r3, [pc, #40]	; (8018c70 <ip4_input+0x240>)
 8018c48:	2200      	movs	r2, #0
 8018c4a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018c4c:	4b08      	ldr	r3, [pc, #32]	; (8018c70 <ip4_input+0x240>)
 8018c4e:	2200      	movs	r2, #0
 8018c50:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018c52:	4b07      	ldr	r3, [pc, #28]	; (8018c70 <ip4_input+0x240>)
 8018c54:	2200      	movs	r2, #0
 8018c56:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018c58:	4b05      	ldr	r3, [pc, #20]	; (8018c70 <ip4_input+0x240>)
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018c5e:	4b04      	ldr	r3, [pc, #16]	; (8018c70 <ip4_input+0x240>)
 8018c60:	2200      	movs	r2, #0
 8018c62:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018c64:	2300      	movs	r3, #0
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	3718      	adds	r7, #24
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	2000972c 	.word	0x2000972c
 8018c74:	2000f1a0 	.word	0x2000f1a0

08018c78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b08a      	sub	sp, #40	; 0x28
 8018c7c:	af04      	add	r7, sp, #16
 8018c7e:	60f8      	str	r0, [r7, #12]
 8018c80:	60b9      	str	r1, [r7, #8]
 8018c82:	607a      	str	r2, [r7, #4]
 8018c84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d009      	beq.n	8018ca4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d003      	beq.n	8018c9e <ip4_output_if+0x26>
 8018c96:	68bb      	ldr	r3, [r7, #8]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d102      	bne.n	8018ca4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca0:	3304      	adds	r3, #4
 8018ca2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018ca4:	78fa      	ldrb	r2, [r7, #3]
 8018ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca8:	9302      	str	r3, [sp, #8]
 8018caa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018cae:	9301      	str	r3, [sp, #4]
 8018cb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018cb4:	9300      	str	r3, [sp, #0]
 8018cb6:	4613      	mov	r3, r2
 8018cb8:	687a      	ldr	r2, [r7, #4]
 8018cba:	6979      	ldr	r1, [r7, #20]
 8018cbc:	68f8      	ldr	r0, [r7, #12]
 8018cbe:	f000 f805 	bl	8018ccc <ip4_output_if_src>
 8018cc2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3718      	adds	r7, #24
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}

08018ccc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b088      	sub	sp, #32
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	60f8      	str	r0, [r7, #12]
 8018cd4:	60b9      	str	r1, [r7, #8]
 8018cd6:	607a      	str	r2, [r7, #4]
 8018cd8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	7b9b      	ldrb	r3, [r3, #14]
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d006      	beq.n	8018cf0 <ip4_output_if_src+0x24>
 8018ce2:	4b4b      	ldr	r3, [pc, #300]	; (8018e10 <ip4_output_if_src+0x144>)
 8018ce4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018ce8:	494a      	ldr	r1, [pc, #296]	; (8018e14 <ip4_output_if_src+0x148>)
 8018cea:	484b      	ldr	r0, [pc, #300]	; (8018e18 <ip4_output_if_src+0x14c>)
 8018cec:	f001 fef0 	bl	801aad0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d060      	beq.n	8018db8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018cf6:	2314      	movs	r3, #20
 8018cf8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018cfa:	2114      	movs	r1, #20
 8018cfc:	68f8      	ldr	r0, [r7, #12]
 8018cfe:	f7f8 f941 	bl	8010f84 <pbuf_add_header>
 8018d02:	4603      	mov	r3, r0
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d002      	beq.n	8018d0e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018d08:	f06f 0301 	mvn.w	r3, #1
 8018d0c:	e07c      	b.n	8018e08 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	685b      	ldr	r3, [r3, #4]
 8018d12:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	895b      	ldrh	r3, [r3, #10]
 8018d18:	2b13      	cmp	r3, #19
 8018d1a:	d806      	bhi.n	8018d2a <ip4_output_if_src+0x5e>
 8018d1c:	4b3c      	ldr	r3, [pc, #240]	; (8018e10 <ip4_output_if_src+0x144>)
 8018d1e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018d22:	493e      	ldr	r1, [pc, #248]	; (8018e1c <ip4_output_if_src+0x150>)
 8018d24:	483c      	ldr	r0, [pc, #240]	; (8018e18 <ip4_output_if_src+0x14c>)
 8018d26:	f001 fed3 	bl	801aad0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018d2a:	69fb      	ldr	r3, [r7, #28]
 8018d2c:	78fa      	ldrb	r2, [r7, #3]
 8018d2e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018d30:	69fb      	ldr	r3, [r7, #28]
 8018d32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018d36:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681a      	ldr	r2, [r3, #0]
 8018d3c:	69fb      	ldr	r3, [r7, #28]
 8018d3e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018d40:	8b7b      	ldrh	r3, [r7, #26]
 8018d42:	089b      	lsrs	r3, r3, #2
 8018d44:	b29b      	uxth	r3, r3
 8018d46:	b2db      	uxtb	r3, r3
 8018d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d4c:	b2da      	uxtb	r2, r3
 8018d4e:	69fb      	ldr	r3, [r7, #28]
 8018d50:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018d58:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	891b      	ldrh	r3, [r3, #8]
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f7f6 face 	bl	800f300 <lwip_htons>
 8018d64:	4603      	mov	r3, r0
 8018d66:	461a      	mov	r2, r3
 8018d68:	69fb      	ldr	r3, [r7, #28]
 8018d6a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018d6c:	69fb      	ldr	r3, [r7, #28]
 8018d6e:	2200      	movs	r2, #0
 8018d70:	719a      	strb	r2, [r3, #6]
 8018d72:	2200      	movs	r2, #0
 8018d74:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018d76:	4b2a      	ldr	r3, [pc, #168]	; (8018e20 <ip4_output_if_src+0x154>)
 8018d78:	881b      	ldrh	r3, [r3, #0]
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f7f6 fac0 	bl	800f300 <lwip_htons>
 8018d80:	4603      	mov	r3, r0
 8018d82:	461a      	mov	r2, r3
 8018d84:	69fb      	ldr	r3, [r7, #28]
 8018d86:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018d88:	4b25      	ldr	r3, [pc, #148]	; (8018e20 <ip4_output_if_src+0x154>)
 8018d8a:	881b      	ldrh	r3, [r3, #0]
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	b29a      	uxth	r2, r3
 8018d90:	4b23      	ldr	r3, [pc, #140]	; (8018e20 <ip4_output_if_src+0x154>)
 8018d92:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d104      	bne.n	8018da4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018d9a:	4b22      	ldr	r3, [pc, #136]	; (8018e24 <ip4_output_if_src+0x158>)
 8018d9c:	681a      	ldr	r2, [r3, #0]
 8018d9e:	69fb      	ldr	r3, [r7, #28]
 8018da0:	60da      	str	r2, [r3, #12]
 8018da2:	e003      	b.n	8018dac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	681a      	ldr	r2, [r3, #0]
 8018da8:	69fb      	ldr	r3, [r7, #28]
 8018daa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	2200      	movs	r2, #0
 8018db0:	729a      	strb	r2, [r3, #10]
 8018db2:	2200      	movs	r2, #0
 8018db4:	72da      	strb	r2, [r3, #11]
 8018db6:	e00f      	b.n	8018dd8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	895b      	ldrh	r3, [r3, #10]
 8018dbc:	2b13      	cmp	r3, #19
 8018dbe:	d802      	bhi.n	8018dc6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018dc0:	f06f 0301 	mvn.w	r3, #1
 8018dc4:	e020      	b.n	8018e08 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018dcc:	69fb      	ldr	r3, [r7, #28]
 8018dce:	691b      	ldr	r3, [r3, #16]
 8018dd0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018dd2:	f107 0314 	add.w	r3, r7, #20
 8018dd6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00c      	beq.n	8018dfa <ip4_output_if_src+0x12e>
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	891a      	ldrh	r2, [r3, #8]
 8018de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018de8:	429a      	cmp	r2, r3
 8018dea:	d906      	bls.n	8018dfa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018df0:	68f8      	ldr	r0, [r7, #12]
 8018df2:	f000 fd53 	bl	801989c <ip4_frag>
 8018df6:	4603      	mov	r3, r0
 8018df8:	e006      	b.n	8018e08 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dfc:	695b      	ldr	r3, [r3, #20]
 8018dfe:	687a      	ldr	r2, [r7, #4]
 8018e00:	68f9      	ldr	r1, [r7, #12]
 8018e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e04:	4798      	blx	r3
 8018e06:	4603      	mov	r3, r0
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3720      	adds	r7, #32
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	0801f978 	.word	0x0801f978
 8018e14:	0801f9ac 	.word	0x0801f9ac
 8018e18:	0801f9b8 	.word	0x0801f9b8
 8018e1c:	0801f9e0 	.word	0x0801f9e0
 8018e20:	2000f2fe 	.word	0x2000f2fe
 8018e24:	0801fe20 	.word	0x0801fe20

08018e28 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018e28:	b480      	push	{r7}
 8018e2a:	b085      	sub	sp, #20
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
 8018e30:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e3c:	d002      	beq.n	8018e44 <ip4_addr_isbroadcast_u32+0x1c>
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d101      	bne.n	8018e48 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018e44:	2301      	movs	r3, #1
 8018e46:	e02a      	b.n	8018e9e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018e48:	683b      	ldr	r3, [r7, #0]
 8018e4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018e4e:	f003 0302 	and.w	r3, r3, #2
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d101      	bne.n	8018e5a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018e56:	2300      	movs	r3, #0
 8018e58:	e021      	b.n	8018e9e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	3304      	adds	r3, #4
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	687a      	ldr	r2, [r7, #4]
 8018e62:	429a      	cmp	r2, r3
 8018e64:	d101      	bne.n	8018e6a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018e66:	2300      	movs	r3, #0
 8018e68:	e019      	b.n	8018e9e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018e6a:	68fa      	ldr	r2, [r7, #12]
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	3304      	adds	r3, #4
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	405a      	eors	r2, r3
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	3308      	adds	r3, #8
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	4013      	ands	r3, r2
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d10d      	bne.n	8018e9c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	3308      	adds	r3, #8
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	43da      	mvns	r2, r3
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	3308      	adds	r3, #8
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d101      	bne.n	8018e9c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018e98:	2301      	movs	r3, #1
 8018e9a:	e000      	b.n	8018e9e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018e9c:	2300      	movs	r3, #0
  }
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	3714      	adds	r7, #20
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea8:	4770      	bx	lr
	...

08018eac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018eb6:	4b12      	ldr	r3, [pc, #72]	; (8018f00 <ip_reass_tmr+0x54>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018ebc:	e018      	b.n	8018ef0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	7fdb      	ldrb	r3, [r3, #31]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d00b      	beq.n	8018ede <ip_reass_tmr+0x32>
      r->timer--;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	7fdb      	ldrb	r3, [r3, #31]
 8018eca:	3b01      	subs	r3, #1
 8018ecc:	b2da      	uxtb	r2, r3
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	60fb      	str	r3, [r7, #12]
 8018edc:	e008      	b.n	8018ef0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018ee8:	68b9      	ldr	r1, [r7, #8]
 8018eea:	6878      	ldr	r0, [r7, #4]
 8018eec:	f000 f80a 	bl	8018f04 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d1e3      	bne.n	8018ebe <ip_reass_tmr+0x12>
    }
  }
}
 8018ef6:	bf00      	nop
 8018ef8:	bf00      	nop
 8018efa:	3710      	adds	r7, #16
 8018efc:	46bd      	mov	sp, r7
 8018efe:	bd80      	pop	{r7, pc}
 8018f00:	2000f300 	.word	0x2000f300

08018f04 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b088      	sub	sp, #32
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018f12:	683a      	ldr	r2, [r7, #0]
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d105      	bne.n	8018f26 <ip_reass_free_complete_datagram+0x22>
 8018f1a:	4b45      	ldr	r3, [pc, #276]	; (8019030 <ip_reass_free_complete_datagram+0x12c>)
 8018f1c:	22ab      	movs	r2, #171	; 0xab
 8018f1e:	4945      	ldr	r1, [pc, #276]	; (8019034 <ip_reass_free_complete_datagram+0x130>)
 8018f20:	4845      	ldr	r0, [pc, #276]	; (8019038 <ip_reass_free_complete_datagram+0x134>)
 8018f22:	f001 fdd5 	bl	801aad0 <iprintf>
  if (prev != NULL) {
 8018f26:	683b      	ldr	r3, [r7, #0]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d00a      	beq.n	8018f42 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018f2c:	683b      	ldr	r3, [r7, #0]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	429a      	cmp	r2, r3
 8018f34:	d005      	beq.n	8018f42 <ip_reass_free_complete_datagram+0x3e>
 8018f36:	4b3e      	ldr	r3, [pc, #248]	; (8019030 <ip_reass_free_complete_datagram+0x12c>)
 8018f38:	22ad      	movs	r2, #173	; 0xad
 8018f3a:	4940      	ldr	r1, [pc, #256]	; (801903c <ip_reass_free_complete_datagram+0x138>)
 8018f3c:	483e      	ldr	r0, [pc, #248]	; (8019038 <ip_reass_free_complete_datagram+0x134>)
 8018f3e:	f001 fdc7 	bl	801aad0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	685b      	ldr	r3, [r3, #4]
 8018f46:	685b      	ldr	r3, [r3, #4]
 8018f48:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	889b      	ldrh	r3, [r3, #4]
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d12a      	bne.n	8018faa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	681a      	ldr	r2, [r3, #0]
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018f62:	69bb      	ldr	r3, [r7, #24]
 8018f64:	6858      	ldr	r0, [r3, #4]
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	3308      	adds	r3, #8
 8018f6a:	2214      	movs	r2, #20
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	f001 ff62 	bl	801ae36 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018f72:	2101      	movs	r1, #1
 8018f74:	69b8      	ldr	r0, [r7, #24]
 8018f76:	f7ff fc47 	bl	8018808 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018f7a:	69b8      	ldr	r0, [r7, #24]
 8018f7c:	f7f8 f926 	bl	80111cc <pbuf_clen>
 8018f80:	4603      	mov	r3, r0
 8018f82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018f84:	8bfa      	ldrh	r2, [r7, #30]
 8018f86:	8a7b      	ldrh	r3, [r7, #18]
 8018f88:	4413      	add	r3, r2
 8018f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f8e:	db05      	blt.n	8018f9c <ip_reass_free_complete_datagram+0x98>
 8018f90:	4b27      	ldr	r3, [pc, #156]	; (8019030 <ip_reass_free_complete_datagram+0x12c>)
 8018f92:	22bc      	movs	r2, #188	; 0xbc
 8018f94:	492a      	ldr	r1, [pc, #168]	; (8019040 <ip_reass_free_complete_datagram+0x13c>)
 8018f96:	4828      	ldr	r0, [pc, #160]	; (8019038 <ip_reass_free_complete_datagram+0x134>)
 8018f98:	f001 fd9a 	bl	801aad0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018f9c:	8bfa      	ldrh	r2, [r7, #30]
 8018f9e:	8a7b      	ldrh	r3, [r7, #18]
 8018fa0:	4413      	add	r3, r2
 8018fa2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018fa4:	69b8      	ldr	r0, [r7, #24]
 8018fa6:	f7f8 f883 	bl	80110b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018fb0:	e01f      	b.n	8018ff2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018fb2:	69bb      	ldr	r3, [r7, #24]
 8018fb4:	685b      	ldr	r3, [r3, #4]
 8018fb6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018fc2:	68f8      	ldr	r0, [r7, #12]
 8018fc4:	f7f8 f902 	bl	80111cc <pbuf_clen>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018fcc:	8bfa      	ldrh	r2, [r7, #30]
 8018fce:	8a7b      	ldrh	r3, [r7, #18]
 8018fd0:	4413      	add	r3, r2
 8018fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018fd6:	db05      	blt.n	8018fe4 <ip_reass_free_complete_datagram+0xe0>
 8018fd8:	4b15      	ldr	r3, [pc, #84]	; (8019030 <ip_reass_free_complete_datagram+0x12c>)
 8018fda:	22cc      	movs	r2, #204	; 0xcc
 8018fdc:	4918      	ldr	r1, [pc, #96]	; (8019040 <ip_reass_free_complete_datagram+0x13c>)
 8018fde:	4816      	ldr	r0, [pc, #88]	; (8019038 <ip_reass_free_complete_datagram+0x134>)
 8018fe0:	f001 fd76 	bl	801aad0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018fe4:	8bfa      	ldrh	r2, [r7, #30]
 8018fe6:	8a7b      	ldrh	r3, [r7, #18]
 8018fe8:	4413      	add	r3, r2
 8018fea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018fec:	68f8      	ldr	r0, [r7, #12]
 8018fee:	f7f8 f85f 	bl	80110b0 <pbuf_free>
  while (p != NULL) {
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d1dc      	bne.n	8018fb2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018ff8:	6839      	ldr	r1, [r7, #0]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f000 f8c2 	bl	8019184 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019000:	4b10      	ldr	r3, [pc, #64]	; (8019044 <ip_reass_free_complete_datagram+0x140>)
 8019002:	881b      	ldrh	r3, [r3, #0]
 8019004:	8bfa      	ldrh	r2, [r7, #30]
 8019006:	429a      	cmp	r2, r3
 8019008:	d905      	bls.n	8019016 <ip_reass_free_complete_datagram+0x112>
 801900a:	4b09      	ldr	r3, [pc, #36]	; (8019030 <ip_reass_free_complete_datagram+0x12c>)
 801900c:	22d2      	movs	r2, #210	; 0xd2
 801900e:	490e      	ldr	r1, [pc, #56]	; (8019048 <ip_reass_free_complete_datagram+0x144>)
 8019010:	4809      	ldr	r0, [pc, #36]	; (8019038 <ip_reass_free_complete_datagram+0x134>)
 8019012:	f001 fd5d 	bl	801aad0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019016:	4b0b      	ldr	r3, [pc, #44]	; (8019044 <ip_reass_free_complete_datagram+0x140>)
 8019018:	881a      	ldrh	r2, [r3, #0]
 801901a:	8bfb      	ldrh	r3, [r7, #30]
 801901c:	1ad3      	subs	r3, r2, r3
 801901e:	b29a      	uxth	r2, r3
 8019020:	4b08      	ldr	r3, [pc, #32]	; (8019044 <ip_reass_free_complete_datagram+0x140>)
 8019022:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019024:	8bfb      	ldrh	r3, [r7, #30]
}
 8019026:	4618      	mov	r0, r3
 8019028:	3720      	adds	r7, #32
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}
 801902e:	bf00      	nop
 8019030:	0801fa10 	.word	0x0801fa10
 8019034:	0801fa4c 	.word	0x0801fa4c
 8019038:	0801fa58 	.word	0x0801fa58
 801903c:	0801fa80 	.word	0x0801fa80
 8019040:	0801fa94 	.word	0x0801fa94
 8019044:	2000f304 	.word	0x2000f304
 8019048:	0801fab4 	.word	0x0801fab4

0801904c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b08a      	sub	sp, #40	; 0x28
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019056:	2300      	movs	r3, #0
 8019058:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801905a:	2300      	movs	r3, #0
 801905c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801905e:	2300      	movs	r3, #0
 8019060:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019062:	2300      	movs	r3, #0
 8019064:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019066:	2300      	movs	r3, #0
 8019068:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801906a:	4b28      	ldr	r3, [pc, #160]	; (801910c <ip_reass_remove_oldest_datagram+0xc0>)
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019070:	e030      	b.n	80190d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019074:	695a      	ldr	r2, [r3, #20]
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	68db      	ldr	r3, [r3, #12]
 801907a:	429a      	cmp	r2, r3
 801907c:	d10c      	bne.n	8019098 <ip_reass_remove_oldest_datagram+0x4c>
 801907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019080:	699a      	ldr	r2, [r3, #24]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	691b      	ldr	r3, [r3, #16]
 8019086:	429a      	cmp	r2, r3
 8019088:	d106      	bne.n	8019098 <ip_reass_remove_oldest_datagram+0x4c>
 801908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801908c:	899a      	ldrh	r2, [r3, #12]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	889b      	ldrh	r3, [r3, #4]
 8019092:	b29b      	uxth	r3, r3
 8019094:	429a      	cmp	r2, r3
 8019096:	d014      	beq.n	80190c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019098:	693b      	ldr	r3, [r7, #16]
 801909a:	3301      	adds	r3, #1
 801909c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801909e:	6a3b      	ldr	r3, [r7, #32]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d104      	bne.n	80190ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80190a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80190a8:	69fb      	ldr	r3, [r7, #28]
 80190aa:	61bb      	str	r3, [r7, #24]
 80190ac:	e009      	b.n	80190c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80190ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b0:	7fda      	ldrb	r2, [r3, #31]
 80190b2:	6a3b      	ldr	r3, [r7, #32]
 80190b4:	7fdb      	ldrb	r3, [r3, #31]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d803      	bhi.n	80190c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80190ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80190be:	69fb      	ldr	r3, [r7, #28]
 80190c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80190c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d001      	beq.n	80190ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80190ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80190ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80190d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d1cb      	bne.n	8019072 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80190da:	6a3b      	ldr	r3, [r7, #32]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d008      	beq.n	80190f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80190e0:	69b9      	ldr	r1, [r7, #24]
 80190e2:	6a38      	ldr	r0, [r7, #32]
 80190e4:	f7ff ff0e 	bl	8018f04 <ip_reass_free_complete_datagram>
 80190e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80190ea:	697a      	ldr	r2, [r7, #20]
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	4413      	add	r3, r2
 80190f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80190f2:	697a      	ldr	r2, [r7, #20]
 80190f4:	683b      	ldr	r3, [r7, #0]
 80190f6:	429a      	cmp	r2, r3
 80190f8:	da02      	bge.n	8019100 <ip_reass_remove_oldest_datagram+0xb4>
 80190fa:	693b      	ldr	r3, [r7, #16]
 80190fc:	2b01      	cmp	r3, #1
 80190fe:	dcac      	bgt.n	801905a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019100:	697b      	ldr	r3, [r7, #20]
}
 8019102:	4618      	mov	r0, r3
 8019104:	3728      	adds	r7, #40	; 0x28
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	2000f300 	.word	0x2000f300

08019110 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b084      	sub	sp, #16
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
 8019118:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801911a:	2004      	movs	r0, #4
 801911c:	f7f7 f892 	bl	8010244 <memp_malloc>
 8019120:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d110      	bne.n	801914a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019128:	6839      	ldr	r1, [r7, #0]
 801912a:	6878      	ldr	r0, [r7, #4]
 801912c:	f7ff ff8e 	bl	801904c <ip_reass_remove_oldest_datagram>
 8019130:	4602      	mov	r2, r0
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	4293      	cmp	r3, r2
 8019136:	dc03      	bgt.n	8019140 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019138:	2004      	movs	r0, #4
 801913a:	f7f7 f883 	bl	8010244 <memp_malloc>
 801913e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d101      	bne.n	801914a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019146:	2300      	movs	r3, #0
 8019148:	e016      	b.n	8019178 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801914a:	2220      	movs	r2, #32
 801914c:	2100      	movs	r1, #0
 801914e:	68f8      	ldr	r0, [r7, #12]
 8019150:	f001 fdf2 	bl	801ad38 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	220f      	movs	r2, #15
 8019158:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801915a:	4b09      	ldr	r3, [pc, #36]	; (8019180 <ip_reass_enqueue_new_datagram+0x70>)
 801915c:	681a      	ldr	r2, [r3, #0]
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019162:	4a07      	ldr	r2, [pc, #28]	; (8019180 <ip_reass_enqueue_new_datagram+0x70>)
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	3308      	adds	r3, #8
 801916c:	2214      	movs	r2, #20
 801916e:	6879      	ldr	r1, [r7, #4]
 8019170:	4618      	mov	r0, r3
 8019172:	f001 fe60 	bl	801ae36 <memcpy>
  return ipr;
 8019176:	68fb      	ldr	r3, [r7, #12]
}
 8019178:	4618      	mov	r0, r3
 801917a:	3710      	adds	r7, #16
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}
 8019180:	2000f300 	.word	0x2000f300

08019184 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b082      	sub	sp, #8
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
 801918c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801918e:	4b10      	ldr	r3, [pc, #64]	; (80191d0 <ip_reass_dequeue_datagram+0x4c>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	687a      	ldr	r2, [r7, #4]
 8019194:	429a      	cmp	r2, r3
 8019196:	d104      	bne.n	80191a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	4a0c      	ldr	r2, [pc, #48]	; (80191d0 <ip_reass_dequeue_datagram+0x4c>)
 801919e:	6013      	str	r3, [r2, #0]
 80191a0:	e00d      	b.n	80191be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d106      	bne.n	80191b6 <ip_reass_dequeue_datagram+0x32>
 80191a8:	4b0a      	ldr	r3, [pc, #40]	; (80191d4 <ip_reass_dequeue_datagram+0x50>)
 80191aa:	f240 1245 	movw	r2, #325	; 0x145
 80191ae:	490a      	ldr	r1, [pc, #40]	; (80191d8 <ip_reass_dequeue_datagram+0x54>)
 80191b0:	480a      	ldr	r0, [pc, #40]	; (80191dc <ip_reass_dequeue_datagram+0x58>)
 80191b2:	f001 fc8d 	bl	801aad0 <iprintf>
    prev->next = ipr->next;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	681a      	ldr	r2, [r3, #0]
 80191ba:	683b      	ldr	r3, [r7, #0]
 80191bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80191be:	6879      	ldr	r1, [r7, #4]
 80191c0:	2004      	movs	r0, #4
 80191c2:	f7f7 f8b5 	bl	8010330 <memp_free>
}
 80191c6:	bf00      	nop
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	2000f300 	.word	0x2000f300
 80191d4:	0801fa10 	.word	0x0801fa10
 80191d8:	0801fad8 	.word	0x0801fad8
 80191dc:	0801fa58 	.word	0x0801fa58

080191e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b08c      	sub	sp, #48	; 0x30
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	60b9      	str	r1, [r7, #8]
 80191ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80191ec:	2300      	movs	r3, #0
 80191ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80191f0:	2301      	movs	r3, #1
 80191f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80191f4:	68bb      	ldr	r3, [r7, #8]
 80191f6:	685b      	ldr	r3, [r3, #4]
 80191f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80191fa:	69fb      	ldr	r3, [r7, #28]
 80191fc:	885b      	ldrh	r3, [r3, #2]
 80191fe:	b29b      	uxth	r3, r3
 8019200:	4618      	mov	r0, r3
 8019202:	f7f6 f87d 	bl	800f300 <lwip_htons>
 8019206:	4603      	mov	r3, r0
 8019208:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801920a:	69fb      	ldr	r3, [r7, #28]
 801920c:	781b      	ldrb	r3, [r3, #0]
 801920e:	f003 030f 	and.w	r3, r3, #15
 8019212:	b2db      	uxtb	r3, r3
 8019214:	009b      	lsls	r3, r3, #2
 8019216:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019218:	7e7b      	ldrb	r3, [r7, #25]
 801921a:	b29b      	uxth	r3, r3
 801921c:	8b7a      	ldrh	r2, [r7, #26]
 801921e:	429a      	cmp	r2, r3
 8019220:	d202      	bcs.n	8019228 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019222:	f04f 33ff 	mov.w	r3, #4294967295
 8019226:	e135      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019228:	7e7b      	ldrb	r3, [r7, #25]
 801922a:	b29b      	uxth	r3, r3
 801922c:	8b7a      	ldrh	r2, [r7, #26]
 801922e:	1ad3      	subs	r3, r2, r3
 8019230:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019232:	69fb      	ldr	r3, [r7, #28]
 8019234:	88db      	ldrh	r3, [r3, #6]
 8019236:	b29b      	uxth	r3, r3
 8019238:	4618      	mov	r0, r3
 801923a:	f7f6 f861 	bl	800f300 <lwip_htons>
 801923e:	4603      	mov	r3, r0
 8019240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019244:	b29b      	uxth	r3, r3
 8019246:	00db      	lsls	r3, r3, #3
 8019248:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801924a:	68bb      	ldr	r3, [r7, #8]
 801924c:	685b      	ldr	r3, [r3, #4]
 801924e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019252:	2200      	movs	r2, #0
 8019254:	701a      	strb	r2, [r3, #0]
 8019256:	2200      	movs	r2, #0
 8019258:	705a      	strb	r2, [r3, #1]
 801925a:	2200      	movs	r2, #0
 801925c:	709a      	strb	r2, [r3, #2]
 801925e:	2200      	movs	r2, #0
 8019260:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019264:	8afa      	ldrh	r2, [r7, #22]
 8019266:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019268:	8afa      	ldrh	r2, [r7, #22]
 801926a:	8b7b      	ldrh	r3, [r7, #26]
 801926c:	4413      	add	r3, r2
 801926e:	b29a      	uxth	r2, r3
 8019270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019272:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019276:	88db      	ldrh	r3, [r3, #6]
 8019278:	b29b      	uxth	r3, r3
 801927a:	8afa      	ldrh	r2, [r7, #22]
 801927c:	429a      	cmp	r2, r3
 801927e:	d902      	bls.n	8019286 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019280:	f04f 33ff 	mov.w	r3, #4294967295
 8019284:	e106      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	627b      	str	r3, [r7, #36]	; 0x24
 801928c:	e068      	b.n	8019360 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019290:	685b      	ldr	r3, [r3, #4]
 8019292:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019296:	889b      	ldrh	r3, [r3, #4]
 8019298:	b29a      	uxth	r2, r3
 801929a:	693b      	ldr	r3, [r7, #16]
 801929c:	889b      	ldrh	r3, [r3, #4]
 801929e:	b29b      	uxth	r3, r3
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d235      	bcs.n	8019310 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80192a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80192aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d020      	beq.n	80192f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80192b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b2:	889b      	ldrh	r3, [r3, #4]
 80192b4:	b29a      	uxth	r2, r3
 80192b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192b8:	88db      	ldrh	r3, [r3, #6]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	429a      	cmp	r2, r3
 80192be:	d307      	bcc.n	80192d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80192c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c2:	88db      	ldrh	r3, [r3, #6]
 80192c4:	b29a      	uxth	r2, r3
 80192c6:	693b      	ldr	r3, [r7, #16]
 80192c8:	889b      	ldrh	r3, [r3, #4]
 80192ca:	b29b      	uxth	r3, r3
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d902      	bls.n	80192d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80192d0:	f04f 33ff 	mov.w	r3, #4294967295
 80192d4:	e0de      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80192d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d8:	68ba      	ldr	r2, [r7, #8]
 80192da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80192dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192de:	88db      	ldrh	r3, [r3, #6]
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192e4:	889b      	ldrh	r3, [r3, #4]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	429a      	cmp	r2, r3
 80192ea:	d03d      	beq.n	8019368 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80192ec:	2300      	movs	r3, #0
 80192ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80192f0:	e03a      	b.n	8019368 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80192f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192f4:	88db      	ldrh	r3, [r3, #6]
 80192f6:	b29a      	uxth	r2, r3
 80192f8:	693b      	ldr	r3, [r7, #16]
 80192fa:	889b      	ldrh	r3, [r3, #4]
 80192fc:	b29b      	uxth	r3, r3
 80192fe:	429a      	cmp	r2, r3
 8019300:	d902      	bls.n	8019308 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019302:	f04f 33ff 	mov.w	r3, #4294967295
 8019306:	e0c5      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	68ba      	ldr	r2, [r7, #8]
 801930c:	605a      	str	r2, [r3, #4]
      break;
 801930e:	e02b      	b.n	8019368 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019312:	889b      	ldrh	r3, [r3, #4]
 8019314:	b29a      	uxth	r2, r3
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	889b      	ldrh	r3, [r3, #4]
 801931a:	b29b      	uxth	r3, r3
 801931c:	429a      	cmp	r2, r3
 801931e:	d102      	bne.n	8019326 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019320:	f04f 33ff 	mov.w	r3, #4294967295
 8019324:	e0b6      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019328:	889b      	ldrh	r3, [r3, #4]
 801932a:	b29a      	uxth	r2, r3
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	88db      	ldrh	r3, [r3, #6]
 8019330:	b29b      	uxth	r3, r3
 8019332:	429a      	cmp	r2, r3
 8019334:	d202      	bcs.n	801933c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019336:	f04f 33ff 	mov.w	r3, #4294967295
 801933a:	e0ab      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933e:	2b00      	cmp	r3, #0
 8019340:	d009      	beq.n	8019356 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019344:	88db      	ldrh	r3, [r3, #6]
 8019346:	b29a      	uxth	r2, r3
 8019348:	693b      	ldr	r3, [r7, #16]
 801934a:	889b      	ldrh	r3, [r3, #4]
 801934c:	b29b      	uxth	r3, r3
 801934e:	429a      	cmp	r2, r3
 8019350:	d001      	beq.n	8019356 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019352:	2300      	movs	r3, #0
 8019354:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801935c:	693b      	ldr	r3, [r7, #16]
 801935e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019362:	2b00      	cmp	r3, #0
 8019364:	d193      	bne.n	801928e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019366:	e000      	b.n	801936a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019368:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801936c:	2b00      	cmp	r3, #0
 801936e:	d12d      	bne.n	80193cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019372:	2b00      	cmp	r3, #0
 8019374:	d01c      	beq.n	80193b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019378:	88db      	ldrh	r3, [r3, #6]
 801937a:	b29a      	uxth	r2, r3
 801937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937e:	889b      	ldrh	r3, [r3, #4]
 8019380:	b29b      	uxth	r3, r3
 8019382:	429a      	cmp	r2, r3
 8019384:	d906      	bls.n	8019394 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019386:	4b45      	ldr	r3, [pc, #276]	; (801949c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019388:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801938c:	4944      	ldr	r1, [pc, #272]	; (80194a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801938e:	4845      	ldr	r0, [pc, #276]	; (80194a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019390:	f001 fb9e 	bl	801aad0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019396:	68ba      	ldr	r2, [r7, #8]
 8019398:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801939c:	88db      	ldrh	r3, [r3, #6]
 801939e:	b29a      	uxth	r2, r3
 80193a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193a2:	889b      	ldrh	r3, [r3, #4]
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d010      	beq.n	80193cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80193aa:	2300      	movs	r3, #0
 80193ac:	623b      	str	r3, [r7, #32]
 80193ae:	e00d      	b.n	80193cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d006      	beq.n	80193c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80193b8:	4b38      	ldr	r3, [pc, #224]	; (801949c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80193ba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80193be:	493a      	ldr	r1, [pc, #232]	; (80194a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80193c0:	4838      	ldr	r0, [pc, #224]	; (80194a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80193c2:	f001 fb85 	bl	801aad0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	68ba      	ldr	r2, [r7, #8]
 80193ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d105      	bne.n	80193de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	7f9b      	ldrb	r3, [r3, #30]
 80193d6:	f003 0301 	and.w	r3, r3, #1
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d059      	beq.n	8019492 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80193de:	6a3b      	ldr	r3, [r7, #32]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d04f      	beq.n	8019484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	685b      	ldr	r3, [r3, #4]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d006      	beq.n	80193fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	685b      	ldr	r3, [r3, #4]
 80193f0:	685b      	ldr	r3, [r3, #4]
 80193f2:	889b      	ldrh	r3, [r3, #4]
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d002      	beq.n	8019400 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80193fa:	2300      	movs	r3, #0
 80193fc:	623b      	str	r3, [r7, #32]
 80193fe:	e041      	b.n	8019484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019402:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801940a:	e012      	b.n	8019432 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801940e:	685b      	ldr	r3, [r3, #4]
 8019410:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019414:	88db      	ldrh	r3, [r3, #6]
 8019416:	b29a      	uxth	r2, r3
 8019418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801941a:	889b      	ldrh	r3, [r3, #4]
 801941c:	b29b      	uxth	r3, r3
 801941e:	429a      	cmp	r2, r3
 8019420:	d002      	beq.n	8019428 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019422:	2300      	movs	r3, #0
 8019424:	623b      	str	r3, [r7, #32]
            break;
 8019426:	e007      	b.n	8019438 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801942a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019434:	2b00      	cmp	r3, #0
 8019436:	d1e9      	bne.n	801940c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019438:	6a3b      	ldr	r3, [r7, #32]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d022      	beq.n	8019484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d106      	bne.n	8019454 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019446:	4b15      	ldr	r3, [pc, #84]	; (801949c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019448:	f240 12df 	movw	r2, #479	; 0x1df
 801944c:	4917      	ldr	r1, [pc, #92]	; (80194ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801944e:	4815      	ldr	r0, [pc, #84]	; (80194a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019450:	f001 fb3e 	bl	801aad0 <iprintf>
          LWIP_ASSERT("sanity check",
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	685b      	ldr	r3, [r3, #4]
 8019458:	685b      	ldr	r3, [r3, #4]
 801945a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801945c:	429a      	cmp	r2, r3
 801945e:	d106      	bne.n	801946e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019460:	4b0e      	ldr	r3, [pc, #56]	; (801949c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019462:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019466:	4911      	ldr	r1, [pc, #68]	; (80194ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019468:	480e      	ldr	r0, [pc, #56]	; (80194a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801946a:	f001 fb31 	bl	801aad0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d006      	beq.n	8019484 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019476:	4b09      	ldr	r3, [pc, #36]	; (801949c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019478:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801947c:	490c      	ldr	r1, [pc, #48]	; (80194b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801947e:	4809      	ldr	r0, [pc, #36]	; (80194a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019480:	f001 fb26 	bl	801aad0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019484:	6a3b      	ldr	r3, [r7, #32]
 8019486:	2b00      	cmp	r3, #0
 8019488:	bf14      	ite	ne
 801948a:	2301      	movne	r3, #1
 801948c:	2300      	moveq	r3, #0
 801948e:	b2db      	uxtb	r3, r3
 8019490:	e000      	b.n	8019494 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019492:	2300      	movs	r3, #0
}
 8019494:	4618      	mov	r0, r3
 8019496:	3730      	adds	r7, #48	; 0x30
 8019498:	46bd      	mov	sp, r7
 801949a:	bd80      	pop	{r7, pc}
 801949c:	0801fa10 	.word	0x0801fa10
 80194a0:	0801faf4 	.word	0x0801faf4
 80194a4:	0801fa58 	.word	0x0801fa58
 80194a8:	0801fb14 	.word	0x0801fb14
 80194ac:	0801fb4c 	.word	0x0801fb4c
 80194b0:	0801fb5c 	.word	0x0801fb5c

080194b4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b08e      	sub	sp, #56	; 0x38
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80194c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194c4:	781b      	ldrb	r3, [r3, #0]
 80194c6:	f003 030f 	and.w	r3, r3, #15
 80194ca:	b2db      	uxtb	r3, r3
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	2b14      	cmp	r3, #20
 80194d2:	f040 8171 	bne.w	80197b8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80194d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d8:	88db      	ldrh	r3, [r3, #6]
 80194da:	b29b      	uxth	r3, r3
 80194dc:	4618      	mov	r0, r3
 80194de:	f7f5 ff0f 	bl	800f300 <lwip_htons>
 80194e2:	4603      	mov	r3, r0
 80194e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	00db      	lsls	r3, r3, #3
 80194ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80194ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f0:	885b      	ldrh	r3, [r3, #2]
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7f5 ff03 	bl	800f300 <lwip_htons>
 80194fa:	4603      	mov	r3, r0
 80194fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80194fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	f003 030f 	and.w	r3, r3, #15
 8019506:	b2db      	uxtb	r3, r3
 8019508:	009b      	lsls	r3, r3, #2
 801950a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801950e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019512:	b29b      	uxth	r3, r3
 8019514:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019516:	429a      	cmp	r2, r3
 8019518:	f0c0 8150 	bcc.w	80197bc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801951c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019520:	b29b      	uxth	r3, r3
 8019522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019524:	1ad3      	subs	r3, r2, r3
 8019526:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f7f7 fe4f 	bl	80111cc <pbuf_clen>
 801952e:	4603      	mov	r3, r0
 8019530:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019532:	4b8c      	ldr	r3, [pc, #560]	; (8019764 <ip4_reass+0x2b0>)
 8019534:	881b      	ldrh	r3, [r3, #0]
 8019536:	461a      	mov	r2, r3
 8019538:	8c3b      	ldrh	r3, [r7, #32]
 801953a:	4413      	add	r3, r2
 801953c:	2b0a      	cmp	r3, #10
 801953e:	dd10      	ble.n	8019562 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019540:	8c3b      	ldrh	r3, [r7, #32]
 8019542:	4619      	mov	r1, r3
 8019544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019546:	f7ff fd81 	bl	801904c <ip_reass_remove_oldest_datagram>
 801954a:	4603      	mov	r3, r0
 801954c:	2b00      	cmp	r3, #0
 801954e:	f000 8137 	beq.w	80197c0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019552:	4b84      	ldr	r3, [pc, #528]	; (8019764 <ip4_reass+0x2b0>)
 8019554:	881b      	ldrh	r3, [r3, #0]
 8019556:	461a      	mov	r2, r3
 8019558:	8c3b      	ldrh	r3, [r7, #32]
 801955a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801955c:	2b0a      	cmp	r3, #10
 801955e:	f300 812f 	bgt.w	80197c0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019562:	4b81      	ldr	r3, [pc, #516]	; (8019768 <ip4_reass+0x2b4>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	633b      	str	r3, [r7, #48]	; 0x30
 8019568:	e015      	b.n	8019596 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801956c:	695a      	ldr	r2, [r3, #20]
 801956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019570:	68db      	ldr	r3, [r3, #12]
 8019572:	429a      	cmp	r2, r3
 8019574:	d10c      	bne.n	8019590 <ip4_reass+0xdc>
 8019576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019578:	699a      	ldr	r2, [r3, #24]
 801957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957c:	691b      	ldr	r3, [r3, #16]
 801957e:	429a      	cmp	r2, r3
 8019580:	d106      	bne.n	8019590 <ip4_reass+0xdc>
 8019582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019584:	899a      	ldrh	r2, [r3, #12]
 8019586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019588:	889b      	ldrh	r3, [r3, #4]
 801958a:	b29b      	uxth	r3, r3
 801958c:	429a      	cmp	r2, r3
 801958e:	d006      	beq.n	801959e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	633b      	str	r3, [r7, #48]	; 0x30
 8019596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019598:	2b00      	cmp	r3, #0
 801959a:	d1e6      	bne.n	801956a <ip4_reass+0xb6>
 801959c:	e000      	b.n	80195a0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801959e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80195a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d109      	bne.n	80195ba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80195a6:	8c3b      	ldrh	r3, [r7, #32]
 80195a8:	4619      	mov	r1, r3
 80195aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195ac:	f7ff fdb0 	bl	8019110 <ip_reass_enqueue_new_datagram>
 80195b0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80195b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d11c      	bne.n	80195f2 <ip4_reass+0x13e>
      goto nullreturn;
 80195b8:	e105      	b.n	80197c6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80195ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195bc:	88db      	ldrh	r3, [r3, #6]
 80195be:	b29b      	uxth	r3, r3
 80195c0:	4618      	mov	r0, r3
 80195c2:	f7f5 fe9d 	bl	800f300 <lwip_htons>
 80195c6:	4603      	mov	r3, r0
 80195c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d110      	bne.n	80195f2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80195d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195d2:	89db      	ldrh	r3, [r3, #14]
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7f5 fe93 	bl	800f300 <lwip_htons>
 80195da:	4603      	mov	r3, r0
 80195dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d006      	beq.n	80195f2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80195e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e6:	3308      	adds	r3, #8
 80195e8:	2214      	movs	r2, #20
 80195ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80195ec:	4618      	mov	r0, r3
 80195ee:	f001 fc22 	bl	801ae36 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80195f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195f4:	88db      	ldrh	r3, [r3, #6]
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	f003 0320 	and.w	r3, r3, #32
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	bf0c      	ite	eq
 8019600:	2301      	moveq	r3, #1
 8019602:	2300      	movne	r3, #0
 8019604:	b2db      	uxtb	r3, r3
 8019606:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019608:	69fb      	ldr	r3, [r7, #28]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d00e      	beq.n	801962c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801960e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019612:	4413      	add	r3, r2
 8019614:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019616:	8b7a      	ldrh	r2, [r7, #26]
 8019618:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801961a:	429a      	cmp	r2, r3
 801961c:	f0c0 80a0 	bcc.w	8019760 <ip4_reass+0x2ac>
 8019620:	8b7b      	ldrh	r3, [r7, #26]
 8019622:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019626:	4293      	cmp	r3, r2
 8019628:	f200 809a 	bhi.w	8019760 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801962c:	69fa      	ldr	r2, [r7, #28]
 801962e:	6879      	ldr	r1, [r7, #4]
 8019630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019632:	f7ff fdd5 	bl	80191e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8019636:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019638:	697b      	ldr	r3, [r7, #20]
 801963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801963e:	f000 809b 	beq.w	8019778 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019642:	4b48      	ldr	r3, [pc, #288]	; (8019764 <ip4_reass+0x2b0>)
 8019644:	881a      	ldrh	r2, [r3, #0]
 8019646:	8c3b      	ldrh	r3, [r7, #32]
 8019648:	4413      	add	r3, r2
 801964a:	b29a      	uxth	r2, r3
 801964c:	4b45      	ldr	r3, [pc, #276]	; (8019764 <ip4_reass+0x2b0>)
 801964e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019650:	69fb      	ldr	r3, [r7, #28]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d00d      	beq.n	8019672 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019656:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801965a:	4413      	add	r3, r2
 801965c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019660:	8a7a      	ldrh	r2, [r7, #18]
 8019662:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019666:	7f9b      	ldrb	r3, [r3, #30]
 8019668:	f043 0301 	orr.w	r3, r3, #1
 801966c:	b2da      	uxtb	r2, r3
 801966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019670:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019672:	697b      	ldr	r3, [r7, #20]
 8019674:	2b01      	cmp	r3, #1
 8019676:	d171      	bne.n	801975c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801967a:	8b9b      	ldrh	r3, [r3, #28]
 801967c:	3314      	adds	r3, #20
 801967e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019682:	685b      	ldr	r3, [r3, #4]
 8019684:	685b      	ldr	r3, [r3, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	685b      	ldr	r3, [r3, #4]
 8019690:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019694:	3308      	adds	r3, #8
 8019696:	2214      	movs	r2, #20
 8019698:	4619      	mov	r1, r3
 801969a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801969c:	f001 fbcb 	bl	801ae36 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80196a0:	8a3b      	ldrh	r3, [r7, #16]
 80196a2:	4618      	mov	r0, r3
 80196a4:	f7f5 fe2c 	bl	800f300 <lwip_htons>
 80196a8:	4603      	mov	r3, r0
 80196aa:	461a      	mov	r2, r3
 80196ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80196b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196b2:	2200      	movs	r2, #0
 80196b4:	719a      	strb	r2, [r3, #6]
 80196b6:	2200      	movs	r2, #0
 80196b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80196ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196bc:	2200      	movs	r2, #0
 80196be:	729a      	strb	r2, [r3, #10]
 80196c0:	2200      	movs	r2, #0
 80196c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80196c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196c6:	685b      	ldr	r3, [r3, #4]
 80196c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80196ca:	e00d      	b.n	80196e8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80196cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ce:	685b      	ldr	r3, [r3, #4]
 80196d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80196d2:	2114      	movs	r1, #20
 80196d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80196d6:	f7f7 fc65 	bl	8010fa4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80196da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80196dc:	6878      	ldr	r0, [r7, #4]
 80196de:	f7f7 fdb5 	bl	801124c <pbuf_cat>
      r = iprh->next_pbuf;
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80196e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d1ee      	bne.n	80196cc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80196ee:	4b1e      	ldr	r3, [pc, #120]	; (8019768 <ip4_reass+0x2b4>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d102      	bne.n	80196fe <ip4_reass+0x24a>
      ipr_prev = NULL;
 80196f8:	2300      	movs	r3, #0
 80196fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196fc:	e010      	b.n	8019720 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80196fe:	4b1a      	ldr	r3, [pc, #104]	; (8019768 <ip4_reass+0x2b4>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019704:	e007      	b.n	8019716 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801970c:	429a      	cmp	r2, r3
 801970e:	d006      	beq.n	801971e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019718:	2b00      	cmp	r3, #0
 801971a:	d1f4      	bne.n	8019706 <ip4_reass+0x252>
 801971c:	e000      	b.n	8019720 <ip4_reass+0x26c>
          break;
 801971e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019724:	f7ff fd2e 	bl	8019184 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019728:	6878      	ldr	r0, [r7, #4]
 801972a:	f7f7 fd4f 	bl	80111cc <pbuf_clen>
 801972e:	4603      	mov	r3, r0
 8019730:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019732:	4b0c      	ldr	r3, [pc, #48]	; (8019764 <ip4_reass+0x2b0>)
 8019734:	881b      	ldrh	r3, [r3, #0]
 8019736:	8c3a      	ldrh	r2, [r7, #32]
 8019738:	429a      	cmp	r2, r3
 801973a:	d906      	bls.n	801974a <ip4_reass+0x296>
 801973c:	4b0b      	ldr	r3, [pc, #44]	; (801976c <ip4_reass+0x2b8>)
 801973e:	f240 229b 	movw	r2, #667	; 0x29b
 8019742:	490b      	ldr	r1, [pc, #44]	; (8019770 <ip4_reass+0x2bc>)
 8019744:	480b      	ldr	r0, [pc, #44]	; (8019774 <ip4_reass+0x2c0>)
 8019746:	f001 f9c3 	bl	801aad0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801974a:	4b06      	ldr	r3, [pc, #24]	; (8019764 <ip4_reass+0x2b0>)
 801974c:	881a      	ldrh	r2, [r3, #0]
 801974e:	8c3b      	ldrh	r3, [r7, #32]
 8019750:	1ad3      	subs	r3, r2, r3
 8019752:	b29a      	uxth	r2, r3
 8019754:	4b03      	ldr	r3, [pc, #12]	; (8019764 <ip4_reass+0x2b0>)
 8019756:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	e038      	b.n	80197ce <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801975c:	2300      	movs	r3, #0
 801975e:	e036      	b.n	80197ce <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019760:	bf00      	nop
 8019762:	e00a      	b.n	801977a <ip4_reass+0x2c6>
 8019764:	2000f304 	.word	0x2000f304
 8019768:	2000f300 	.word	0x2000f300
 801976c:	0801fa10 	.word	0x0801fa10
 8019770:	0801fb80 	.word	0x0801fb80
 8019774:	0801fa58 	.word	0x0801fa58
    goto nullreturn_ipr;
 8019778:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801977c:	2b00      	cmp	r3, #0
 801977e:	d106      	bne.n	801978e <ip4_reass+0x2da>
 8019780:	4b15      	ldr	r3, [pc, #84]	; (80197d8 <ip4_reass+0x324>)
 8019782:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019786:	4915      	ldr	r1, [pc, #84]	; (80197dc <ip4_reass+0x328>)
 8019788:	4815      	ldr	r0, [pc, #84]	; (80197e0 <ip4_reass+0x32c>)
 801978a:	f001 f9a1 	bl	801aad0 <iprintf>
  if (ipr->p == NULL) {
 801978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019790:	685b      	ldr	r3, [r3, #4]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d116      	bne.n	80197c4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019796:	4b13      	ldr	r3, [pc, #76]	; (80197e4 <ip4_reass+0x330>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801979c:	429a      	cmp	r2, r3
 801979e:	d006      	beq.n	80197ae <ip4_reass+0x2fa>
 80197a0:	4b0d      	ldr	r3, [pc, #52]	; (80197d8 <ip4_reass+0x324>)
 80197a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80197a6:	4910      	ldr	r1, [pc, #64]	; (80197e8 <ip4_reass+0x334>)
 80197a8:	480d      	ldr	r0, [pc, #52]	; (80197e0 <ip4_reass+0x32c>)
 80197aa:	f001 f991 	bl	801aad0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80197ae:	2100      	movs	r1, #0
 80197b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80197b2:	f7ff fce7 	bl	8019184 <ip_reass_dequeue_datagram>
 80197b6:	e006      	b.n	80197c6 <ip4_reass+0x312>
    goto nullreturn;
 80197b8:	bf00      	nop
 80197ba:	e004      	b.n	80197c6 <ip4_reass+0x312>
    goto nullreturn;
 80197bc:	bf00      	nop
 80197be:	e002      	b.n	80197c6 <ip4_reass+0x312>
      goto nullreturn;
 80197c0:	bf00      	nop
 80197c2:	e000      	b.n	80197c6 <ip4_reass+0x312>
  }

nullreturn:
 80197c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80197c6:	6878      	ldr	r0, [r7, #4]
 80197c8:	f7f7 fc72 	bl	80110b0 <pbuf_free>
  return NULL;
 80197cc:	2300      	movs	r3, #0
}
 80197ce:	4618      	mov	r0, r3
 80197d0:	3738      	adds	r7, #56	; 0x38
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	0801fa10 	.word	0x0801fa10
 80197dc:	0801fb9c 	.word	0x0801fb9c
 80197e0:	0801fa58 	.word	0x0801fa58
 80197e4:	2000f300 	.word	0x2000f300
 80197e8:	0801fba8 	.word	0x0801fba8

080197ec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80197f0:	2005      	movs	r0, #5
 80197f2:	f7f6 fd27 	bl	8010244 <memp_malloc>
 80197f6:	4603      	mov	r3, r0
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	bd80      	pop	{r7, pc}

080197fc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b082      	sub	sp, #8
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d106      	bne.n	8019818 <ip_frag_free_pbuf_custom_ref+0x1c>
 801980a:	4b07      	ldr	r3, [pc, #28]	; (8019828 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801980c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019810:	4906      	ldr	r1, [pc, #24]	; (801982c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019812:	4807      	ldr	r0, [pc, #28]	; (8019830 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019814:	f001 f95c 	bl	801aad0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019818:	6879      	ldr	r1, [r7, #4]
 801981a:	2005      	movs	r0, #5
 801981c:	f7f6 fd88 	bl	8010330 <memp_free>
}
 8019820:	bf00      	nop
 8019822:	3708      	adds	r7, #8
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}
 8019828:	0801fa10 	.word	0x0801fa10
 801982c:	0801fbc8 	.word	0x0801fbc8
 8019830:	0801fa58 	.word	0x0801fa58

08019834 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b084      	sub	sp, #16
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d106      	bne.n	8019854 <ipfrag_free_pbuf_custom+0x20>
 8019846:	4b11      	ldr	r3, [pc, #68]	; (801988c <ipfrag_free_pbuf_custom+0x58>)
 8019848:	f240 22ce 	movw	r2, #718	; 0x2ce
 801984c:	4910      	ldr	r1, [pc, #64]	; (8019890 <ipfrag_free_pbuf_custom+0x5c>)
 801984e:	4811      	ldr	r0, [pc, #68]	; (8019894 <ipfrag_free_pbuf_custom+0x60>)
 8019850:	f001 f93e 	bl	801aad0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019854:	68fa      	ldr	r2, [r7, #12]
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	429a      	cmp	r2, r3
 801985a:	d006      	beq.n	801986a <ipfrag_free_pbuf_custom+0x36>
 801985c:	4b0b      	ldr	r3, [pc, #44]	; (801988c <ipfrag_free_pbuf_custom+0x58>)
 801985e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019862:	490d      	ldr	r1, [pc, #52]	; (8019898 <ipfrag_free_pbuf_custom+0x64>)
 8019864:	480b      	ldr	r0, [pc, #44]	; (8019894 <ipfrag_free_pbuf_custom+0x60>)
 8019866:	f001 f933 	bl	801aad0 <iprintf>
  if (pcr->original != NULL) {
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	695b      	ldr	r3, [r3, #20]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d004      	beq.n	801987c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	695b      	ldr	r3, [r3, #20]
 8019876:	4618      	mov	r0, r3
 8019878:	f7f7 fc1a 	bl	80110b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801987c:	68f8      	ldr	r0, [r7, #12]
 801987e:	f7ff ffbd 	bl	80197fc <ip_frag_free_pbuf_custom_ref>
}
 8019882:	bf00      	nop
 8019884:	3710      	adds	r7, #16
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	0801fa10 	.word	0x0801fa10
 8019890:	0801fbd4 	.word	0x0801fbd4
 8019894:	0801fa58 	.word	0x0801fa58
 8019898:	0801fbe0 	.word	0x0801fbe0

0801989c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b094      	sub	sp, #80	; 0x50
 80198a0:	af02      	add	r7, sp, #8
 80198a2:	60f8      	str	r0, [r7, #12]
 80198a4:	60b9      	str	r1, [r7, #8]
 80198a6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80198a8:	2300      	movs	r3, #0
 80198aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80198ae:	68bb      	ldr	r3, [r7, #8]
 80198b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198b2:	3b14      	subs	r3, #20
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	da00      	bge.n	80198ba <ip4_frag+0x1e>
 80198b8:	3307      	adds	r3, #7
 80198ba:	10db      	asrs	r3, r3, #3
 80198bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80198be:	2314      	movs	r3, #20
 80198c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	685b      	ldr	r3, [r3, #4]
 80198c6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80198c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80198cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ce:	781b      	ldrb	r3, [r3, #0]
 80198d0:	f003 030f 	and.w	r3, r3, #15
 80198d4:	b2db      	uxtb	r3, r3
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	b2db      	uxtb	r3, r3
 80198da:	2b14      	cmp	r3, #20
 80198dc:	d002      	beq.n	80198e4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80198de:	f06f 0305 	mvn.w	r3, #5
 80198e2:	e110      	b.n	8019b06 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	895b      	ldrh	r3, [r3, #10]
 80198e8:	2b13      	cmp	r3, #19
 80198ea:	d809      	bhi.n	8019900 <ip4_frag+0x64>
 80198ec:	4b88      	ldr	r3, [pc, #544]	; (8019b10 <ip4_frag+0x274>)
 80198ee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80198f2:	4988      	ldr	r1, [pc, #544]	; (8019b14 <ip4_frag+0x278>)
 80198f4:	4888      	ldr	r0, [pc, #544]	; (8019b18 <ip4_frag+0x27c>)
 80198f6:	f001 f8eb 	bl	801aad0 <iprintf>
 80198fa:	f06f 0305 	mvn.w	r3, #5
 80198fe:	e102      	b.n	8019b06 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019902:	88db      	ldrh	r3, [r3, #6]
 8019904:	b29b      	uxth	r3, r3
 8019906:	4618      	mov	r0, r3
 8019908:	f7f5 fcfa 	bl	800f300 <lwip_htons>
 801990c:	4603      	mov	r3, r0
 801990e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019910:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019916:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801991a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801991c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019920:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	891b      	ldrh	r3, [r3, #8]
 8019926:	3b14      	subs	r3, #20
 8019928:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801992c:	e0e1      	b.n	8019af2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801992e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019930:	00db      	lsls	r3, r3, #3
 8019932:	b29b      	uxth	r3, r3
 8019934:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019938:	4293      	cmp	r3, r2
 801993a:	bf28      	it	cs
 801993c:	4613      	movcs	r3, r2
 801993e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019940:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019944:	2114      	movs	r1, #20
 8019946:	200e      	movs	r0, #14
 8019948:	f7f7 f8ce 	bl	8010ae8 <pbuf_alloc>
 801994c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019950:	2b00      	cmp	r3, #0
 8019952:	f000 80d5 	beq.w	8019b00 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019958:	895b      	ldrh	r3, [r3, #10]
 801995a:	2b13      	cmp	r3, #19
 801995c:	d806      	bhi.n	801996c <ip4_frag+0xd0>
 801995e:	4b6c      	ldr	r3, [pc, #432]	; (8019b10 <ip4_frag+0x274>)
 8019960:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019964:	496d      	ldr	r1, [pc, #436]	; (8019b1c <ip4_frag+0x280>)
 8019966:	486c      	ldr	r0, [pc, #432]	; (8019b18 <ip4_frag+0x27c>)
 8019968:	f001 f8b2 	bl	801aad0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996e:	685b      	ldr	r3, [r3, #4]
 8019970:	2214      	movs	r2, #20
 8019972:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019974:	4618      	mov	r0, r3
 8019976:	f001 fa5e 	bl	801ae36 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019980:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019982:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019986:	e064      	b.n	8019a52 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	895a      	ldrh	r2, [r3, #10]
 801998c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801998e:	1ad3      	subs	r3, r2, r3
 8019990:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	895b      	ldrh	r3, [r3, #10]
 8019996:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019998:	429a      	cmp	r2, r3
 801999a:	d906      	bls.n	80199aa <ip4_frag+0x10e>
 801999c:	4b5c      	ldr	r3, [pc, #368]	; (8019b10 <ip4_frag+0x274>)
 801999e:	f240 322d 	movw	r2, #813	; 0x32d
 80199a2:	495f      	ldr	r1, [pc, #380]	; (8019b20 <ip4_frag+0x284>)
 80199a4:	485c      	ldr	r0, [pc, #368]	; (8019b18 <ip4_frag+0x27c>)
 80199a6:	f001 f893 	bl	801aad0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80199aa:	8bfa      	ldrh	r2, [r7, #30]
 80199ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80199b0:	4293      	cmp	r3, r2
 80199b2:	bf28      	it	cs
 80199b4:	4613      	movcs	r3, r2
 80199b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80199ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d105      	bne.n	80199ce <ip4_frag+0x132>
        poff = 0;
 80199c2:	2300      	movs	r3, #0
 80199c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	60fb      	str	r3, [r7, #12]
        continue;
 80199cc:	e041      	b.n	8019a52 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80199ce:	f7ff ff0d 	bl	80197ec <ip_frag_alloc_pbuf_custom_ref>
 80199d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80199d4:	69bb      	ldr	r3, [r7, #24]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d103      	bne.n	80199e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80199da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80199dc:	f7f7 fb68 	bl	80110b0 <pbuf_free>
        goto memerr;
 80199e0:	e08f      	b.n	8019b02 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80199e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80199e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80199ea:	4413      	add	r3, r2
 80199ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80199f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80199f4:	9201      	str	r2, [sp, #4]
 80199f6:	9300      	str	r3, [sp, #0]
 80199f8:	4603      	mov	r3, r0
 80199fa:	2241      	movs	r2, #65	; 0x41
 80199fc:	2000      	movs	r0, #0
 80199fe:	f7f7 f99d 	bl	8010d3c <pbuf_alloced_custom>
 8019a02:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d106      	bne.n	8019a18 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019a0a:	69b8      	ldr	r0, [r7, #24]
 8019a0c:	f7ff fef6 	bl	80197fc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a12:	f7f7 fb4d 	bl	80110b0 <pbuf_free>
        goto memerr;
 8019a16:	e074      	b.n	8019b02 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019a18:	68f8      	ldr	r0, [r7, #12]
 8019a1a:	f7f7 fbef 	bl	80111fc <pbuf_ref>
      pcr->original = p;
 8019a1e:	69bb      	ldr	r3, [r7, #24]
 8019a20:	68fa      	ldr	r2, [r7, #12]
 8019a22:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019a24:	69bb      	ldr	r3, [r7, #24]
 8019a26:	4a3f      	ldr	r2, [pc, #252]	; (8019b24 <ip4_frag+0x288>)
 8019a28:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019a2a:	6979      	ldr	r1, [r7, #20]
 8019a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a2e:	f7f7 fc0d 	bl	801124c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019a32:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019a36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019a3a:	1ad3      	subs	r3, r2, r3
 8019a3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019a40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d004      	beq.n	8019a52 <ip4_frag+0x1b6>
        poff = 0;
 8019a48:	2300      	movs	r3, #0
 8019a4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019a52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d196      	bne.n	8019988 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019a5a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019a5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019a60:	4413      	add	r3, r2
 8019a62:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019a68:	f1a3 0213 	sub.w	r2, r3, #19
 8019a6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019a70:	429a      	cmp	r2, r3
 8019a72:	bfcc      	ite	gt
 8019a74:	2301      	movgt	r3, #1
 8019a76:	2300      	movle	r3, #0
 8019a78:	b2db      	uxtb	r3, r3
 8019a7a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019a7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019a86:	6a3b      	ldr	r3, [r7, #32]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d002      	beq.n	8019a92 <ip4_frag+0x1f6>
 8019a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d003      	beq.n	8019a9a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019a92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019a98:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019a9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f7f5 fc2f 	bl	800f300 <lwip_htons>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	461a      	mov	r2, r3
 8019aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aa8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019aaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019aac:	3314      	adds	r3, #20
 8019aae:	b29b      	uxth	r3, r3
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f7f5 fc25 	bl	800f300 <lwip_htons>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	461a      	mov	r2, r3
 8019aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019abc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ac0:	2200      	movs	r2, #0
 8019ac2:	729a      	strb	r2, [r3, #10]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	695b      	ldr	r3, [r3, #20]
 8019acc:	687a      	ldr	r2, [r7, #4]
 8019ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ad0:	68b8      	ldr	r0, [r7, #8]
 8019ad2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ad6:	f7f7 faeb 	bl	80110b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019ada:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019ade:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019ae0:	1ad3      	subs	r3, r2, r3
 8019ae2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019ae6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019aea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019aec:	4413      	add	r3, r2
 8019aee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019af2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	f47f af19 	bne.w	801992e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019afc:	2300      	movs	r3, #0
 8019afe:	e002      	b.n	8019b06 <ip4_frag+0x26a>
      goto memerr;
 8019b00:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019b06:	4618      	mov	r0, r3
 8019b08:	3748      	adds	r7, #72	; 0x48
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	bd80      	pop	{r7, pc}
 8019b0e:	bf00      	nop
 8019b10:	0801fa10 	.word	0x0801fa10
 8019b14:	0801fbec 	.word	0x0801fbec
 8019b18:	0801fa58 	.word	0x0801fa58
 8019b1c:	0801fc08 	.word	0x0801fc08
 8019b20:	0801fc28 	.word	0x0801fc28
 8019b24:	08019835 	.word	0x08019835

08019b28 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b086      	sub	sp, #24
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019b32:	230e      	movs	r3, #14
 8019b34:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	895b      	ldrh	r3, [r3, #10]
 8019b3a:	2b0e      	cmp	r3, #14
 8019b3c:	d96e      	bls.n	8019c1c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	7bdb      	ldrb	r3, [r3, #15]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d106      	bne.n	8019b54 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	b2da      	uxtb	r2, r3
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	685b      	ldr	r3, [r3, #4]
 8019b58:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019b5a:	693b      	ldr	r3, [r7, #16]
 8019b5c:	7b1a      	ldrb	r2, [r3, #12]
 8019b5e:	7b5b      	ldrb	r3, [r3, #13]
 8019b60:	021b      	lsls	r3, r3, #8
 8019b62:	4313      	orrs	r3, r2
 8019b64:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019b66:	693b      	ldr	r3, [r7, #16]
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	f003 0301 	and.w	r3, r3, #1
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d023      	beq.n	8019bba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019b72:	693b      	ldr	r3, [r7, #16]
 8019b74:	781b      	ldrb	r3, [r3, #0]
 8019b76:	2b01      	cmp	r3, #1
 8019b78:	d10f      	bne.n	8019b9a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019b7a:	693b      	ldr	r3, [r7, #16]
 8019b7c:	785b      	ldrb	r3, [r3, #1]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d11b      	bne.n	8019bba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019b82:	693b      	ldr	r3, [r7, #16]
 8019b84:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019b86:	2b5e      	cmp	r3, #94	; 0x5e
 8019b88:	d117      	bne.n	8019bba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	7b5b      	ldrb	r3, [r3, #13]
 8019b8e:	f043 0310 	orr.w	r3, r3, #16
 8019b92:	b2da      	uxtb	r2, r3
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	735a      	strb	r2, [r3, #13]
 8019b98:	e00f      	b.n	8019bba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019b9a:	693b      	ldr	r3, [r7, #16]
 8019b9c:	2206      	movs	r2, #6
 8019b9e:	4928      	ldr	r1, [pc, #160]	; (8019c40 <ethernet_input+0x118>)
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f001 f89f 	bl	801ace4 <memcmp>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d106      	bne.n	8019bba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	7b5b      	ldrb	r3, [r3, #13]
 8019bb0:	f043 0308 	orr.w	r3, r3, #8
 8019bb4:	b2da      	uxtb	r2, r3
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019bba:	89fb      	ldrh	r3, [r7, #14]
 8019bbc:	2b08      	cmp	r3, #8
 8019bbe:	d003      	beq.n	8019bc8 <ethernet_input+0xa0>
 8019bc0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019bc4:	d014      	beq.n	8019bf0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019bc6:	e032      	b.n	8019c2e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019bce:	f003 0308 	and.w	r3, r3, #8
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d024      	beq.n	8019c20 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019bd6:	8afb      	ldrh	r3, [r7, #22]
 8019bd8:	4619      	mov	r1, r3
 8019bda:	6878      	ldr	r0, [r7, #4]
 8019bdc:	f7f7 f9e2 	bl	8010fa4 <pbuf_remove_header>
 8019be0:	4603      	mov	r3, r0
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d11e      	bne.n	8019c24 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019be6:	6839      	ldr	r1, [r7, #0]
 8019be8:	6878      	ldr	r0, [r7, #4]
 8019bea:	f7fe ff21 	bl	8018a30 <ip4_input>
      break;
 8019bee:	e013      	b.n	8019c18 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019bf6:	f003 0308 	and.w	r3, r3, #8
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d014      	beq.n	8019c28 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019bfe:	8afb      	ldrh	r3, [r7, #22]
 8019c00:	4619      	mov	r1, r3
 8019c02:	6878      	ldr	r0, [r7, #4]
 8019c04:	f7f7 f9ce 	bl	8010fa4 <pbuf_remove_header>
 8019c08:	4603      	mov	r3, r0
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d10e      	bne.n	8019c2c <ethernet_input+0x104>
        etharp_input(p, netif);
 8019c0e:	6839      	ldr	r1, [r7, #0]
 8019c10:	6878      	ldr	r0, [r7, #4]
 8019c12:	f7fe f8c1 	bl	8017d98 <etharp_input>
      break;
 8019c16:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	e00c      	b.n	8019c36 <ethernet_input+0x10e>
    goto free_and_return;
 8019c1c:	bf00      	nop
 8019c1e:	e006      	b.n	8019c2e <ethernet_input+0x106>
        goto free_and_return;
 8019c20:	bf00      	nop
 8019c22:	e004      	b.n	8019c2e <ethernet_input+0x106>
        goto free_and_return;
 8019c24:	bf00      	nop
 8019c26:	e002      	b.n	8019c2e <ethernet_input+0x106>
        goto free_and_return;
 8019c28:	bf00      	nop
 8019c2a:	e000      	b.n	8019c2e <ethernet_input+0x106>
        goto free_and_return;
 8019c2c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	f7f7 fa3e 	bl	80110b0 <pbuf_free>
  return ERR_OK;
 8019c34:	2300      	movs	r3, #0
}
 8019c36:	4618      	mov	r0, r3
 8019c38:	3718      	adds	r7, #24
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	0801fe24 	.word	0x0801fe24

08019c44 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b086      	sub	sp, #24
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	60f8      	str	r0, [r7, #12]
 8019c4c:	60b9      	str	r1, [r7, #8]
 8019c4e:	607a      	str	r2, [r7, #4]
 8019c50:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019c52:	8c3b      	ldrh	r3, [r7, #32]
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7f5 fb53 	bl	800f300 <lwip_htons>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019c5e:	210e      	movs	r1, #14
 8019c60:	68b8      	ldr	r0, [r7, #8]
 8019c62:	f7f7 f98f 	bl	8010f84 <pbuf_add_header>
 8019c66:	4603      	mov	r3, r0
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d125      	bne.n	8019cb8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019c72:	693b      	ldr	r3, [r7, #16]
 8019c74:	8afa      	ldrh	r2, [r7, #22]
 8019c76:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019c78:	693b      	ldr	r3, [r7, #16]
 8019c7a:	2206      	movs	r2, #6
 8019c7c:	6839      	ldr	r1, [r7, #0]
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f001 f8d9 	bl	801ae36 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019c84:	693b      	ldr	r3, [r7, #16]
 8019c86:	3306      	adds	r3, #6
 8019c88:	2206      	movs	r2, #6
 8019c8a:	6879      	ldr	r1, [r7, #4]
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	f001 f8d2 	bl	801ae36 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019c98:	2b06      	cmp	r3, #6
 8019c9a:	d006      	beq.n	8019caa <ethernet_output+0x66>
 8019c9c:	4b0a      	ldr	r3, [pc, #40]	; (8019cc8 <ethernet_output+0x84>)
 8019c9e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019ca2:	490a      	ldr	r1, [pc, #40]	; (8019ccc <ethernet_output+0x88>)
 8019ca4:	480a      	ldr	r0, [pc, #40]	; (8019cd0 <ethernet_output+0x8c>)
 8019ca6:	f000 ff13 	bl	801aad0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	699b      	ldr	r3, [r3, #24]
 8019cae:	68b9      	ldr	r1, [r7, #8]
 8019cb0:	68f8      	ldr	r0, [r7, #12]
 8019cb2:	4798      	blx	r3
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	e002      	b.n	8019cbe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019cb8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019cba:	f06f 0301 	mvn.w	r3, #1
}
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	3718      	adds	r7, #24
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	bd80      	pop	{r7, pc}
 8019cc6:	bf00      	nop
 8019cc8:	0801fc38 	.word	0x0801fc38
 8019ccc:	0801fc70 	.word	0x0801fc70
 8019cd0:	0801fca4 	.word	0x0801fca4

08019cd4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b084      	sub	sp, #16
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	60bb      	str	r3, [r7, #8]
 8019ce2:	2304      	movs	r3, #4
 8019ce4:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019ce6:	f107 0308 	add.w	r3, r7, #8
 8019cea:	2100      	movs	r1, #0
 8019cec:	4618      	mov	r0, r3
 8019cee:	f7f2 f8b9 	bl	800be64 <osMessageCreate>
 8019cf2:	4602      	mov	r2, r0
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d102      	bne.n	8019d06 <sys_mbox_new+0x32>
    return ERR_MEM;
 8019d00:	f04f 33ff 	mov.w	r3, #4294967295
 8019d04:	e000      	b.n	8019d08 <sys_mbox_new+0x34>

  return ERR_OK;
 8019d06:	2300      	movs	r3, #0
}
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3710      	adds	r7, #16
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b084      	sub	sp, #16
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	6839      	ldr	r1, [r7, #0]
 8019d20:	2200      	movs	r2, #0
 8019d22:	4618      	mov	r0, r3
 8019d24:	f7f2 f8b0 	bl	800be88 <osMessagePut>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d102      	bne.n	8019d34 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	73fb      	strb	r3, [r7, #15]
 8019d32:	e001      	b.n	8019d38 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019d34:	23ff      	movs	r3, #255	; 0xff
 8019d36:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	3710      	adds	r7, #16
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}

08019d44 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b08c      	sub	sp, #48	; 0x30
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	61f8      	str	r0, [r7, #28]
 8019d4c:	61b9      	str	r1, [r7, #24]
 8019d4e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019d50:	f7f1 ff28 	bl	800bba4 <osKernelSysTick>
 8019d54:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019d56:	697b      	ldr	r3, [r7, #20]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d017      	beq.n	8019d8c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019d5c:	69fb      	ldr	r3, [r7, #28]
 8019d5e:	6819      	ldr	r1, [r3, #0]
 8019d60:	f107 0320 	add.w	r3, r7, #32
 8019d64:	697a      	ldr	r2, [r7, #20]
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7f2 f8ce 	bl	800bf08 <osMessageGet>

    if(event.status == osEventMessage)
 8019d6c:	6a3b      	ldr	r3, [r7, #32]
 8019d6e:	2b10      	cmp	r3, #16
 8019d70:	d109      	bne.n	8019d86 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d74:	461a      	mov	r2, r3
 8019d76:	69bb      	ldr	r3, [r7, #24]
 8019d78:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019d7a:	f7f1 ff13 	bl	800bba4 <osKernelSysTick>
 8019d7e:	4602      	mov	r2, r0
 8019d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d82:	1ad3      	subs	r3, r2, r3
 8019d84:	e019      	b.n	8019dba <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019d86:	f04f 33ff 	mov.w	r3, #4294967295
 8019d8a:	e016      	b.n	8019dba <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019d8c:	69fb      	ldr	r3, [r7, #28]
 8019d8e:	6819      	ldr	r1, [r3, #0]
 8019d90:	463b      	mov	r3, r7
 8019d92:	f04f 32ff 	mov.w	r2, #4294967295
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7f2 f8b6 	bl	800bf08 <osMessageGet>
 8019d9c:	f107 0320 	add.w	r3, r7, #32
 8019da0:	463a      	mov	r2, r7
 8019da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8019da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019daa:	461a      	mov	r2, r3
 8019dac:	69bb      	ldr	r3, [r7, #24]
 8019dae:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019db0:	f7f1 fef8 	bl	800bba4 <osKernelSysTick>
 8019db4:	4602      	mov	r2, r0
 8019db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3730      	adds	r7, #48	; 0x30
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}

08019dc2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019dc2:	b480      	push	{r7}
 8019dc4:	b083      	sub	sp, #12
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d101      	bne.n	8019dd6 <sys_mbox_valid+0x14>
    return 0;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	e000      	b.n	8019dd8 <sys_mbox_valid+0x16>
  else
    return 1;
 8019dd6:	2301      	movs	r3, #1
}
 8019dd8:	4618      	mov	r0, r3
 8019dda:	370c      	adds	r7, #12
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de2:	4770      	bx	lr

08019de4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019de8:	4803      	ldr	r0, [pc, #12]	; (8019df8 <sys_init+0x14>)
 8019dea:	f7f1 ff26 	bl	800bc3a <osMutexCreate>
 8019dee:	4603      	mov	r3, r0
 8019df0:	4a02      	ldr	r2, [pc, #8]	; (8019dfc <sys_init+0x18>)
 8019df2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019df4:	bf00      	nop
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	0801fe34 	.word	0x0801fe34
 8019dfc:	2000f30c 	.word	0x2000f30c

08019e00 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b084      	sub	sp, #16
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019e08:	2300      	movs	r3, #0
 8019e0a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019e0c:	f107 030c 	add.w	r3, r7, #12
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7f1 ff12 	bl	800bc3a <osMutexCreate>
 8019e16:	4602      	mov	r2, r0
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d102      	bne.n	8019e2a <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019e24:	f04f 33ff 	mov.w	r3, #4294967295
 8019e28:	e000      	b.n	8019e2c <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019e2a:	2300      	movs	r3, #0
}
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	3710      	adds	r7, #16
 8019e30:	46bd      	mov	sp, r7
 8019e32:	bd80      	pop	{r7, pc}

08019e34 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b082      	sub	sp, #8
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	f04f 31ff 	mov.w	r1, #4294967295
 8019e44:	4618      	mov	r0, r3
 8019e46:	f7f1 ff05 	bl	800bc54 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019e4a:	bf00      	nop
 8019e4c:	3708      	adds	r7, #8
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}

08019e52 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b082      	sub	sp, #8
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f7f1 ff46 	bl	800bcf0 <osMutexRelease>
}
 8019e64:	bf00      	nop
 8019e66:	3708      	adds	r7, #8
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}

08019e6c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b08a      	sub	sp, #40	; 0x28
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	60f8      	str	r0, [r7, #12]
 8019e74:	60b9      	str	r1, [r7, #8]
 8019e76:	607a      	str	r2, [r7, #4]
 8019e78:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	617b      	str	r3, [r7, #20]
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	61bb      	str	r3, [r7, #24]
 8019e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e84:	b21b      	sxth	r3, r3
 8019e86:	83bb      	strh	r3, [r7, #28]
 8019e88:	2300      	movs	r3, #0
 8019e8a:	623b      	str	r3, [r7, #32]
 8019e8c:	683b      	ldr	r3, [r7, #0]
 8019e8e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019e90:	f107 0314 	add.w	r3, r7, #20
 8019e94:	6879      	ldr	r1, [r7, #4]
 8019e96:	4618      	mov	r0, r3
 8019e98:	f7f1 fe94 	bl	800bbc4 <osThreadCreate>
 8019e9c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	3728      	adds	r7, #40	; 0x28
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
	...

08019ea8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019eac:	4b04      	ldr	r3, [pc, #16]	; (8019ec0 <sys_arch_protect+0x18>)
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7f1 fecd 	bl	800bc54 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019eba:	2301      	movs	r3, #1
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	2000f30c 	.word	0x2000f30c

08019ec4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b082      	sub	sp, #8
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019ecc:	4b04      	ldr	r3, [pc, #16]	; (8019ee0 <sys_arch_unprotect+0x1c>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f7f1 ff0d 	bl	800bcf0 <osMutexRelease>
}
 8019ed6:	bf00      	nop
 8019ed8:	3708      	adds	r7, #8
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bd80      	pop	{r7, pc}
 8019ede:	bf00      	nop
 8019ee0:	2000f30c 	.word	0x2000f30c

08019ee4 <atoi>:
 8019ee4:	220a      	movs	r2, #10
 8019ee6:	2100      	movs	r1, #0
 8019ee8:	f000 b8c0 	b.w	801a06c <strtol>

08019eec <rand>:
 8019eec:	4b16      	ldr	r3, [pc, #88]	; (8019f48 <rand+0x5c>)
 8019eee:	b510      	push	{r4, lr}
 8019ef0:	681c      	ldr	r4, [r3, #0]
 8019ef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019ef4:	b9b3      	cbnz	r3, 8019f24 <rand+0x38>
 8019ef6:	2018      	movs	r0, #24
 8019ef8:	f001 fe90 	bl	801bc1c <malloc>
 8019efc:	4602      	mov	r2, r0
 8019efe:	6320      	str	r0, [r4, #48]	; 0x30
 8019f00:	b920      	cbnz	r0, 8019f0c <rand+0x20>
 8019f02:	4b12      	ldr	r3, [pc, #72]	; (8019f4c <rand+0x60>)
 8019f04:	4812      	ldr	r0, [pc, #72]	; (8019f50 <rand+0x64>)
 8019f06:	2152      	movs	r1, #82	; 0x52
 8019f08:	f000 ffa4 	bl	801ae54 <__assert_func>
 8019f0c:	4911      	ldr	r1, [pc, #68]	; (8019f54 <rand+0x68>)
 8019f0e:	4b12      	ldr	r3, [pc, #72]	; (8019f58 <rand+0x6c>)
 8019f10:	e9c0 1300 	strd	r1, r3, [r0]
 8019f14:	4b11      	ldr	r3, [pc, #68]	; (8019f5c <rand+0x70>)
 8019f16:	6083      	str	r3, [r0, #8]
 8019f18:	230b      	movs	r3, #11
 8019f1a:	8183      	strh	r3, [r0, #12]
 8019f1c:	2100      	movs	r1, #0
 8019f1e:	2001      	movs	r0, #1
 8019f20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019f24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019f26:	480e      	ldr	r0, [pc, #56]	; (8019f60 <rand+0x74>)
 8019f28:	690b      	ldr	r3, [r1, #16]
 8019f2a:	694c      	ldr	r4, [r1, #20]
 8019f2c:	4a0d      	ldr	r2, [pc, #52]	; (8019f64 <rand+0x78>)
 8019f2e:	4358      	muls	r0, r3
 8019f30:	fb02 0004 	mla	r0, r2, r4, r0
 8019f34:	fba3 3202 	umull	r3, r2, r3, r2
 8019f38:	3301      	adds	r3, #1
 8019f3a:	eb40 0002 	adc.w	r0, r0, r2
 8019f3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019f42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019f46:	bd10      	pop	{r4, pc}
 8019f48:	2000009c 	.word	0x2000009c
 8019f4c:	0801fe38 	.word	0x0801fe38
 8019f50:	0801fe4f 	.word	0x0801fe4f
 8019f54:	abcd330e 	.word	0xabcd330e
 8019f58:	e66d1234 	.word	0xe66d1234
 8019f5c:	0005deec 	.word	0x0005deec
 8019f60:	5851f42d 	.word	0x5851f42d
 8019f64:	4c957f2d 	.word	0x4c957f2d

08019f68 <_strtol_l.constprop.0>:
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f6e:	d001      	beq.n	8019f74 <_strtol_l.constprop.0+0xc>
 8019f70:	2b24      	cmp	r3, #36	; 0x24
 8019f72:	d906      	bls.n	8019f82 <_strtol_l.constprop.0+0x1a>
 8019f74:	f000 ff32 	bl	801addc <__errno>
 8019f78:	2316      	movs	r3, #22
 8019f7a:	6003      	str	r3, [r0, #0]
 8019f7c:	2000      	movs	r0, #0
 8019f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a068 <_strtol_l.constprop.0+0x100>
 8019f86:	460d      	mov	r5, r1
 8019f88:	462e      	mov	r6, r5
 8019f8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f8e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019f92:	f017 0708 	ands.w	r7, r7, #8
 8019f96:	d1f7      	bne.n	8019f88 <_strtol_l.constprop.0+0x20>
 8019f98:	2c2d      	cmp	r4, #45	; 0x2d
 8019f9a:	d132      	bne.n	801a002 <_strtol_l.constprop.0+0x9a>
 8019f9c:	782c      	ldrb	r4, [r5, #0]
 8019f9e:	2701      	movs	r7, #1
 8019fa0:	1cb5      	adds	r5, r6, #2
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d05b      	beq.n	801a05e <_strtol_l.constprop.0+0xf6>
 8019fa6:	2b10      	cmp	r3, #16
 8019fa8:	d109      	bne.n	8019fbe <_strtol_l.constprop.0+0x56>
 8019faa:	2c30      	cmp	r4, #48	; 0x30
 8019fac:	d107      	bne.n	8019fbe <_strtol_l.constprop.0+0x56>
 8019fae:	782c      	ldrb	r4, [r5, #0]
 8019fb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019fb4:	2c58      	cmp	r4, #88	; 0x58
 8019fb6:	d14d      	bne.n	801a054 <_strtol_l.constprop.0+0xec>
 8019fb8:	786c      	ldrb	r4, [r5, #1]
 8019fba:	2310      	movs	r3, #16
 8019fbc:	3502      	adds	r5, #2
 8019fbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019fc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8019fc6:	f04f 0e00 	mov.w	lr, #0
 8019fca:	fbb8 f9f3 	udiv	r9, r8, r3
 8019fce:	4676      	mov	r6, lr
 8019fd0:	fb03 8a19 	mls	sl, r3, r9, r8
 8019fd4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019fd8:	f1bc 0f09 	cmp.w	ip, #9
 8019fdc:	d816      	bhi.n	801a00c <_strtol_l.constprop.0+0xa4>
 8019fde:	4664      	mov	r4, ip
 8019fe0:	42a3      	cmp	r3, r4
 8019fe2:	dd24      	ble.n	801a02e <_strtol_l.constprop.0+0xc6>
 8019fe4:	f1be 3fff 	cmp.w	lr, #4294967295
 8019fe8:	d008      	beq.n	8019ffc <_strtol_l.constprop.0+0x94>
 8019fea:	45b1      	cmp	r9, r6
 8019fec:	d31c      	bcc.n	801a028 <_strtol_l.constprop.0+0xc0>
 8019fee:	d101      	bne.n	8019ff4 <_strtol_l.constprop.0+0x8c>
 8019ff0:	45a2      	cmp	sl, r4
 8019ff2:	db19      	blt.n	801a028 <_strtol_l.constprop.0+0xc0>
 8019ff4:	fb06 4603 	mla	r6, r6, r3, r4
 8019ff8:	f04f 0e01 	mov.w	lr, #1
 8019ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a000:	e7e8      	b.n	8019fd4 <_strtol_l.constprop.0+0x6c>
 801a002:	2c2b      	cmp	r4, #43	; 0x2b
 801a004:	bf04      	itt	eq
 801a006:	782c      	ldrbeq	r4, [r5, #0]
 801a008:	1cb5      	addeq	r5, r6, #2
 801a00a:	e7ca      	b.n	8019fa2 <_strtol_l.constprop.0+0x3a>
 801a00c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a010:	f1bc 0f19 	cmp.w	ip, #25
 801a014:	d801      	bhi.n	801a01a <_strtol_l.constprop.0+0xb2>
 801a016:	3c37      	subs	r4, #55	; 0x37
 801a018:	e7e2      	b.n	8019fe0 <_strtol_l.constprop.0+0x78>
 801a01a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a01e:	f1bc 0f19 	cmp.w	ip, #25
 801a022:	d804      	bhi.n	801a02e <_strtol_l.constprop.0+0xc6>
 801a024:	3c57      	subs	r4, #87	; 0x57
 801a026:	e7db      	b.n	8019fe0 <_strtol_l.constprop.0+0x78>
 801a028:	f04f 3eff 	mov.w	lr, #4294967295
 801a02c:	e7e6      	b.n	8019ffc <_strtol_l.constprop.0+0x94>
 801a02e:	f1be 3fff 	cmp.w	lr, #4294967295
 801a032:	d105      	bne.n	801a040 <_strtol_l.constprop.0+0xd8>
 801a034:	2322      	movs	r3, #34	; 0x22
 801a036:	6003      	str	r3, [r0, #0]
 801a038:	4646      	mov	r6, r8
 801a03a:	b942      	cbnz	r2, 801a04e <_strtol_l.constprop.0+0xe6>
 801a03c:	4630      	mov	r0, r6
 801a03e:	e79e      	b.n	8019f7e <_strtol_l.constprop.0+0x16>
 801a040:	b107      	cbz	r7, 801a044 <_strtol_l.constprop.0+0xdc>
 801a042:	4276      	negs	r6, r6
 801a044:	2a00      	cmp	r2, #0
 801a046:	d0f9      	beq.n	801a03c <_strtol_l.constprop.0+0xd4>
 801a048:	f1be 0f00 	cmp.w	lr, #0
 801a04c:	d000      	beq.n	801a050 <_strtol_l.constprop.0+0xe8>
 801a04e:	1e69      	subs	r1, r5, #1
 801a050:	6011      	str	r1, [r2, #0]
 801a052:	e7f3      	b.n	801a03c <_strtol_l.constprop.0+0xd4>
 801a054:	2430      	movs	r4, #48	; 0x30
 801a056:	2b00      	cmp	r3, #0
 801a058:	d1b1      	bne.n	8019fbe <_strtol_l.constprop.0+0x56>
 801a05a:	2308      	movs	r3, #8
 801a05c:	e7af      	b.n	8019fbe <_strtol_l.constprop.0+0x56>
 801a05e:	2c30      	cmp	r4, #48	; 0x30
 801a060:	d0a5      	beq.n	8019fae <_strtol_l.constprop.0+0x46>
 801a062:	230a      	movs	r3, #10
 801a064:	e7ab      	b.n	8019fbe <_strtol_l.constprop.0+0x56>
 801a066:	bf00      	nop
 801a068:	0801fea8 	.word	0x0801fea8

0801a06c <strtol>:
 801a06c:	4613      	mov	r3, r2
 801a06e:	460a      	mov	r2, r1
 801a070:	4601      	mov	r1, r0
 801a072:	4802      	ldr	r0, [pc, #8]	; (801a07c <strtol+0x10>)
 801a074:	6800      	ldr	r0, [r0, #0]
 801a076:	f7ff bf77 	b.w	8019f68 <_strtol_l.constprop.0>
 801a07a:	bf00      	nop
 801a07c:	2000009c 	.word	0x2000009c

0801a080 <__cvt>:
 801a080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a084:	ec55 4b10 	vmov	r4, r5, d0
 801a088:	2d00      	cmp	r5, #0
 801a08a:	460e      	mov	r6, r1
 801a08c:	4619      	mov	r1, r3
 801a08e:	462b      	mov	r3, r5
 801a090:	bfbb      	ittet	lt
 801a092:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a096:	461d      	movlt	r5, r3
 801a098:	2300      	movge	r3, #0
 801a09a:	232d      	movlt	r3, #45	; 0x2d
 801a09c:	700b      	strb	r3, [r1, #0]
 801a09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a0a4:	4691      	mov	r9, r2
 801a0a6:	f023 0820 	bic.w	r8, r3, #32
 801a0aa:	bfbc      	itt	lt
 801a0ac:	4622      	movlt	r2, r4
 801a0ae:	4614      	movlt	r4, r2
 801a0b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a0b4:	d005      	beq.n	801a0c2 <__cvt+0x42>
 801a0b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a0ba:	d100      	bne.n	801a0be <__cvt+0x3e>
 801a0bc:	3601      	adds	r6, #1
 801a0be:	2102      	movs	r1, #2
 801a0c0:	e000      	b.n	801a0c4 <__cvt+0x44>
 801a0c2:	2103      	movs	r1, #3
 801a0c4:	ab03      	add	r3, sp, #12
 801a0c6:	9301      	str	r3, [sp, #4]
 801a0c8:	ab02      	add	r3, sp, #8
 801a0ca:	9300      	str	r3, [sp, #0]
 801a0cc:	ec45 4b10 	vmov	d0, r4, r5
 801a0d0:	4653      	mov	r3, sl
 801a0d2:	4632      	mov	r2, r6
 801a0d4:	f000 ff64 	bl	801afa0 <_dtoa_r>
 801a0d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a0dc:	4607      	mov	r7, r0
 801a0de:	d102      	bne.n	801a0e6 <__cvt+0x66>
 801a0e0:	f019 0f01 	tst.w	r9, #1
 801a0e4:	d022      	beq.n	801a12c <__cvt+0xac>
 801a0e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a0ea:	eb07 0906 	add.w	r9, r7, r6
 801a0ee:	d110      	bne.n	801a112 <__cvt+0x92>
 801a0f0:	783b      	ldrb	r3, [r7, #0]
 801a0f2:	2b30      	cmp	r3, #48	; 0x30
 801a0f4:	d10a      	bne.n	801a10c <__cvt+0x8c>
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	4629      	mov	r1, r5
 801a0fe:	f7e6 fcf3 	bl	8000ae8 <__aeabi_dcmpeq>
 801a102:	b918      	cbnz	r0, 801a10c <__cvt+0x8c>
 801a104:	f1c6 0601 	rsb	r6, r6, #1
 801a108:	f8ca 6000 	str.w	r6, [sl]
 801a10c:	f8da 3000 	ldr.w	r3, [sl]
 801a110:	4499      	add	r9, r3
 801a112:	2200      	movs	r2, #0
 801a114:	2300      	movs	r3, #0
 801a116:	4620      	mov	r0, r4
 801a118:	4629      	mov	r1, r5
 801a11a:	f7e6 fce5 	bl	8000ae8 <__aeabi_dcmpeq>
 801a11e:	b108      	cbz	r0, 801a124 <__cvt+0xa4>
 801a120:	f8cd 900c 	str.w	r9, [sp, #12]
 801a124:	2230      	movs	r2, #48	; 0x30
 801a126:	9b03      	ldr	r3, [sp, #12]
 801a128:	454b      	cmp	r3, r9
 801a12a:	d307      	bcc.n	801a13c <__cvt+0xbc>
 801a12c:	9b03      	ldr	r3, [sp, #12]
 801a12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a130:	1bdb      	subs	r3, r3, r7
 801a132:	4638      	mov	r0, r7
 801a134:	6013      	str	r3, [r2, #0]
 801a136:	b004      	add	sp, #16
 801a138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a13c:	1c59      	adds	r1, r3, #1
 801a13e:	9103      	str	r1, [sp, #12]
 801a140:	701a      	strb	r2, [r3, #0]
 801a142:	e7f0      	b.n	801a126 <__cvt+0xa6>

0801a144 <__exponent>:
 801a144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a146:	4603      	mov	r3, r0
 801a148:	2900      	cmp	r1, #0
 801a14a:	bfb8      	it	lt
 801a14c:	4249      	neglt	r1, r1
 801a14e:	f803 2b02 	strb.w	r2, [r3], #2
 801a152:	bfb4      	ite	lt
 801a154:	222d      	movlt	r2, #45	; 0x2d
 801a156:	222b      	movge	r2, #43	; 0x2b
 801a158:	2909      	cmp	r1, #9
 801a15a:	7042      	strb	r2, [r0, #1]
 801a15c:	dd2a      	ble.n	801a1b4 <__exponent+0x70>
 801a15e:	f10d 0207 	add.w	r2, sp, #7
 801a162:	4617      	mov	r7, r2
 801a164:	260a      	movs	r6, #10
 801a166:	4694      	mov	ip, r2
 801a168:	fb91 f5f6 	sdiv	r5, r1, r6
 801a16c:	fb06 1415 	mls	r4, r6, r5, r1
 801a170:	3430      	adds	r4, #48	; 0x30
 801a172:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a176:	460c      	mov	r4, r1
 801a178:	2c63      	cmp	r4, #99	; 0x63
 801a17a:	f102 32ff 	add.w	r2, r2, #4294967295
 801a17e:	4629      	mov	r1, r5
 801a180:	dcf1      	bgt.n	801a166 <__exponent+0x22>
 801a182:	3130      	adds	r1, #48	; 0x30
 801a184:	f1ac 0402 	sub.w	r4, ip, #2
 801a188:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a18c:	1c41      	adds	r1, r0, #1
 801a18e:	4622      	mov	r2, r4
 801a190:	42ba      	cmp	r2, r7
 801a192:	d30a      	bcc.n	801a1aa <__exponent+0x66>
 801a194:	f10d 0209 	add.w	r2, sp, #9
 801a198:	eba2 020c 	sub.w	r2, r2, ip
 801a19c:	42bc      	cmp	r4, r7
 801a19e:	bf88      	it	hi
 801a1a0:	2200      	movhi	r2, #0
 801a1a2:	4413      	add	r3, r2
 801a1a4:	1a18      	subs	r0, r3, r0
 801a1a6:	b003      	add	sp, #12
 801a1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a1ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a1b2:	e7ed      	b.n	801a190 <__exponent+0x4c>
 801a1b4:	2330      	movs	r3, #48	; 0x30
 801a1b6:	3130      	adds	r1, #48	; 0x30
 801a1b8:	7083      	strb	r3, [r0, #2]
 801a1ba:	70c1      	strb	r1, [r0, #3]
 801a1bc:	1d03      	adds	r3, r0, #4
 801a1be:	e7f1      	b.n	801a1a4 <__exponent+0x60>

0801a1c0 <_printf_float>:
 801a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c4:	ed2d 8b02 	vpush	{d8}
 801a1c8:	b08d      	sub	sp, #52	; 0x34
 801a1ca:	460c      	mov	r4, r1
 801a1cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a1d0:	4616      	mov	r6, r2
 801a1d2:	461f      	mov	r7, r3
 801a1d4:	4605      	mov	r5, r0
 801a1d6:	f000 fdb7 	bl	801ad48 <_localeconv_r>
 801a1da:	f8d0 a000 	ldr.w	sl, [r0]
 801a1de:	4650      	mov	r0, sl
 801a1e0:	f7e6 f856 	bl	8000290 <strlen>
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	930a      	str	r3, [sp, #40]	; 0x28
 801a1e8:	6823      	ldr	r3, [r4, #0]
 801a1ea:	9305      	str	r3, [sp, #20]
 801a1ec:	f8d8 3000 	ldr.w	r3, [r8]
 801a1f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a1f4:	3307      	adds	r3, #7
 801a1f6:	f023 0307 	bic.w	r3, r3, #7
 801a1fa:	f103 0208 	add.w	r2, r3, #8
 801a1fe:	f8c8 2000 	str.w	r2, [r8]
 801a202:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a20a:	9307      	str	r3, [sp, #28]
 801a20c:	f8cd 8018 	str.w	r8, [sp, #24]
 801a210:	ee08 0a10 	vmov	s16, r0
 801a214:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801a218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a21c:	4b9e      	ldr	r3, [pc, #632]	; (801a498 <_printf_float+0x2d8>)
 801a21e:	f04f 32ff 	mov.w	r2, #4294967295
 801a222:	f7e6 fc93 	bl	8000b4c <__aeabi_dcmpun>
 801a226:	bb88      	cbnz	r0, 801a28c <_printf_float+0xcc>
 801a228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a22c:	4b9a      	ldr	r3, [pc, #616]	; (801a498 <_printf_float+0x2d8>)
 801a22e:	f04f 32ff 	mov.w	r2, #4294967295
 801a232:	f7e6 fc6d 	bl	8000b10 <__aeabi_dcmple>
 801a236:	bb48      	cbnz	r0, 801a28c <_printf_float+0xcc>
 801a238:	2200      	movs	r2, #0
 801a23a:	2300      	movs	r3, #0
 801a23c:	4640      	mov	r0, r8
 801a23e:	4649      	mov	r1, r9
 801a240:	f7e6 fc5c 	bl	8000afc <__aeabi_dcmplt>
 801a244:	b110      	cbz	r0, 801a24c <_printf_float+0x8c>
 801a246:	232d      	movs	r3, #45	; 0x2d
 801a248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a24c:	4a93      	ldr	r2, [pc, #588]	; (801a49c <_printf_float+0x2dc>)
 801a24e:	4b94      	ldr	r3, [pc, #592]	; (801a4a0 <_printf_float+0x2e0>)
 801a250:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a254:	bf94      	ite	ls
 801a256:	4690      	movls	r8, r2
 801a258:	4698      	movhi	r8, r3
 801a25a:	2303      	movs	r3, #3
 801a25c:	6123      	str	r3, [r4, #16]
 801a25e:	9b05      	ldr	r3, [sp, #20]
 801a260:	f023 0304 	bic.w	r3, r3, #4
 801a264:	6023      	str	r3, [r4, #0]
 801a266:	f04f 0900 	mov.w	r9, #0
 801a26a:	9700      	str	r7, [sp, #0]
 801a26c:	4633      	mov	r3, r6
 801a26e:	aa0b      	add	r2, sp, #44	; 0x2c
 801a270:	4621      	mov	r1, r4
 801a272:	4628      	mov	r0, r5
 801a274:	f000 f9da 	bl	801a62c <_printf_common>
 801a278:	3001      	adds	r0, #1
 801a27a:	f040 8090 	bne.w	801a39e <_printf_float+0x1de>
 801a27e:	f04f 30ff 	mov.w	r0, #4294967295
 801a282:	b00d      	add	sp, #52	; 0x34
 801a284:	ecbd 8b02 	vpop	{d8}
 801a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a28c:	4642      	mov	r2, r8
 801a28e:	464b      	mov	r3, r9
 801a290:	4640      	mov	r0, r8
 801a292:	4649      	mov	r1, r9
 801a294:	f7e6 fc5a 	bl	8000b4c <__aeabi_dcmpun>
 801a298:	b140      	cbz	r0, 801a2ac <_printf_float+0xec>
 801a29a:	464b      	mov	r3, r9
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	bfbc      	itt	lt
 801a2a0:	232d      	movlt	r3, #45	; 0x2d
 801a2a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a2a6:	4a7f      	ldr	r2, [pc, #508]	; (801a4a4 <_printf_float+0x2e4>)
 801a2a8:	4b7f      	ldr	r3, [pc, #508]	; (801a4a8 <_printf_float+0x2e8>)
 801a2aa:	e7d1      	b.n	801a250 <_printf_float+0x90>
 801a2ac:	6863      	ldr	r3, [r4, #4]
 801a2ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a2b2:	9206      	str	r2, [sp, #24]
 801a2b4:	1c5a      	adds	r2, r3, #1
 801a2b6:	d13f      	bne.n	801a338 <_printf_float+0x178>
 801a2b8:	2306      	movs	r3, #6
 801a2ba:	6063      	str	r3, [r4, #4]
 801a2bc:	9b05      	ldr	r3, [sp, #20]
 801a2be:	6861      	ldr	r1, [r4, #4]
 801a2c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	9303      	str	r3, [sp, #12]
 801a2c8:	ab0a      	add	r3, sp, #40	; 0x28
 801a2ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a2ce:	ab09      	add	r3, sp, #36	; 0x24
 801a2d0:	ec49 8b10 	vmov	d0, r8, r9
 801a2d4:	9300      	str	r3, [sp, #0]
 801a2d6:	6022      	str	r2, [r4, #0]
 801a2d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a2dc:	4628      	mov	r0, r5
 801a2de:	f7ff fecf 	bl	801a080 <__cvt>
 801a2e2:	9b06      	ldr	r3, [sp, #24]
 801a2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a2e6:	2b47      	cmp	r3, #71	; 0x47
 801a2e8:	4680      	mov	r8, r0
 801a2ea:	d108      	bne.n	801a2fe <_printf_float+0x13e>
 801a2ec:	1cc8      	adds	r0, r1, #3
 801a2ee:	db02      	blt.n	801a2f6 <_printf_float+0x136>
 801a2f0:	6863      	ldr	r3, [r4, #4]
 801a2f2:	4299      	cmp	r1, r3
 801a2f4:	dd41      	ble.n	801a37a <_printf_float+0x1ba>
 801a2f6:	f1ab 0302 	sub.w	r3, fp, #2
 801a2fa:	fa5f fb83 	uxtb.w	fp, r3
 801a2fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a302:	d820      	bhi.n	801a346 <_printf_float+0x186>
 801a304:	3901      	subs	r1, #1
 801a306:	465a      	mov	r2, fp
 801a308:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a30c:	9109      	str	r1, [sp, #36]	; 0x24
 801a30e:	f7ff ff19 	bl	801a144 <__exponent>
 801a312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a314:	1813      	adds	r3, r2, r0
 801a316:	2a01      	cmp	r2, #1
 801a318:	4681      	mov	r9, r0
 801a31a:	6123      	str	r3, [r4, #16]
 801a31c:	dc02      	bgt.n	801a324 <_printf_float+0x164>
 801a31e:	6822      	ldr	r2, [r4, #0]
 801a320:	07d2      	lsls	r2, r2, #31
 801a322:	d501      	bpl.n	801a328 <_printf_float+0x168>
 801a324:	3301      	adds	r3, #1
 801a326:	6123      	str	r3, [r4, #16]
 801a328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d09c      	beq.n	801a26a <_printf_float+0xaa>
 801a330:	232d      	movs	r3, #45	; 0x2d
 801a332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a336:	e798      	b.n	801a26a <_printf_float+0xaa>
 801a338:	9a06      	ldr	r2, [sp, #24]
 801a33a:	2a47      	cmp	r2, #71	; 0x47
 801a33c:	d1be      	bne.n	801a2bc <_printf_float+0xfc>
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d1bc      	bne.n	801a2bc <_printf_float+0xfc>
 801a342:	2301      	movs	r3, #1
 801a344:	e7b9      	b.n	801a2ba <_printf_float+0xfa>
 801a346:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a34a:	d118      	bne.n	801a37e <_printf_float+0x1be>
 801a34c:	2900      	cmp	r1, #0
 801a34e:	6863      	ldr	r3, [r4, #4]
 801a350:	dd0b      	ble.n	801a36a <_printf_float+0x1aa>
 801a352:	6121      	str	r1, [r4, #16]
 801a354:	b913      	cbnz	r3, 801a35c <_printf_float+0x19c>
 801a356:	6822      	ldr	r2, [r4, #0]
 801a358:	07d0      	lsls	r0, r2, #31
 801a35a:	d502      	bpl.n	801a362 <_printf_float+0x1a2>
 801a35c:	3301      	adds	r3, #1
 801a35e:	440b      	add	r3, r1
 801a360:	6123      	str	r3, [r4, #16]
 801a362:	65a1      	str	r1, [r4, #88]	; 0x58
 801a364:	f04f 0900 	mov.w	r9, #0
 801a368:	e7de      	b.n	801a328 <_printf_float+0x168>
 801a36a:	b913      	cbnz	r3, 801a372 <_printf_float+0x1b2>
 801a36c:	6822      	ldr	r2, [r4, #0]
 801a36e:	07d2      	lsls	r2, r2, #31
 801a370:	d501      	bpl.n	801a376 <_printf_float+0x1b6>
 801a372:	3302      	adds	r3, #2
 801a374:	e7f4      	b.n	801a360 <_printf_float+0x1a0>
 801a376:	2301      	movs	r3, #1
 801a378:	e7f2      	b.n	801a360 <_printf_float+0x1a0>
 801a37a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a380:	4299      	cmp	r1, r3
 801a382:	db05      	blt.n	801a390 <_printf_float+0x1d0>
 801a384:	6823      	ldr	r3, [r4, #0]
 801a386:	6121      	str	r1, [r4, #16]
 801a388:	07d8      	lsls	r0, r3, #31
 801a38a:	d5ea      	bpl.n	801a362 <_printf_float+0x1a2>
 801a38c:	1c4b      	adds	r3, r1, #1
 801a38e:	e7e7      	b.n	801a360 <_printf_float+0x1a0>
 801a390:	2900      	cmp	r1, #0
 801a392:	bfd4      	ite	le
 801a394:	f1c1 0202 	rsble	r2, r1, #2
 801a398:	2201      	movgt	r2, #1
 801a39a:	4413      	add	r3, r2
 801a39c:	e7e0      	b.n	801a360 <_printf_float+0x1a0>
 801a39e:	6823      	ldr	r3, [r4, #0]
 801a3a0:	055a      	lsls	r2, r3, #21
 801a3a2:	d407      	bmi.n	801a3b4 <_printf_float+0x1f4>
 801a3a4:	6923      	ldr	r3, [r4, #16]
 801a3a6:	4642      	mov	r2, r8
 801a3a8:	4631      	mov	r1, r6
 801a3aa:	4628      	mov	r0, r5
 801a3ac:	47b8      	blx	r7
 801a3ae:	3001      	adds	r0, #1
 801a3b0:	d12c      	bne.n	801a40c <_printf_float+0x24c>
 801a3b2:	e764      	b.n	801a27e <_printf_float+0xbe>
 801a3b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a3b8:	f240 80e0 	bls.w	801a57c <_printf_float+0x3bc>
 801a3bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	f7e6 fb90 	bl	8000ae8 <__aeabi_dcmpeq>
 801a3c8:	2800      	cmp	r0, #0
 801a3ca:	d034      	beq.n	801a436 <_printf_float+0x276>
 801a3cc:	4a37      	ldr	r2, [pc, #220]	; (801a4ac <_printf_float+0x2ec>)
 801a3ce:	2301      	movs	r3, #1
 801a3d0:	4631      	mov	r1, r6
 801a3d2:	4628      	mov	r0, r5
 801a3d4:	47b8      	blx	r7
 801a3d6:	3001      	adds	r0, #1
 801a3d8:	f43f af51 	beq.w	801a27e <_printf_float+0xbe>
 801a3dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a3e0:	429a      	cmp	r2, r3
 801a3e2:	db02      	blt.n	801a3ea <_printf_float+0x22a>
 801a3e4:	6823      	ldr	r3, [r4, #0]
 801a3e6:	07d8      	lsls	r0, r3, #31
 801a3e8:	d510      	bpl.n	801a40c <_printf_float+0x24c>
 801a3ea:	ee18 3a10 	vmov	r3, s16
 801a3ee:	4652      	mov	r2, sl
 801a3f0:	4631      	mov	r1, r6
 801a3f2:	4628      	mov	r0, r5
 801a3f4:	47b8      	blx	r7
 801a3f6:	3001      	adds	r0, #1
 801a3f8:	f43f af41 	beq.w	801a27e <_printf_float+0xbe>
 801a3fc:	f04f 0800 	mov.w	r8, #0
 801a400:	f104 091a 	add.w	r9, r4, #26
 801a404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a406:	3b01      	subs	r3, #1
 801a408:	4543      	cmp	r3, r8
 801a40a:	dc09      	bgt.n	801a420 <_printf_float+0x260>
 801a40c:	6823      	ldr	r3, [r4, #0]
 801a40e:	079b      	lsls	r3, r3, #30
 801a410:	f100 8107 	bmi.w	801a622 <_printf_float+0x462>
 801a414:	68e0      	ldr	r0, [r4, #12]
 801a416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a418:	4298      	cmp	r0, r3
 801a41a:	bfb8      	it	lt
 801a41c:	4618      	movlt	r0, r3
 801a41e:	e730      	b.n	801a282 <_printf_float+0xc2>
 801a420:	2301      	movs	r3, #1
 801a422:	464a      	mov	r2, r9
 801a424:	4631      	mov	r1, r6
 801a426:	4628      	mov	r0, r5
 801a428:	47b8      	blx	r7
 801a42a:	3001      	adds	r0, #1
 801a42c:	f43f af27 	beq.w	801a27e <_printf_float+0xbe>
 801a430:	f108 0801 	add.w	r8, r8, #1
 801a434:	e7e6      	b.n	801a404 <_printf_float+0x244>
 801a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a438:	2b00      	cmp	r3, #0
 801a43a:	dc39      	bgt.n	801a4b0 <_printf_float+0x2f0>
 801a43c:	4a1b      	ldr	r2, [pc, #108]	; (801a4ac <_printf_float+0x2ec>)
 801a43e:	2301      	movs	r3, #1
 801a440:	4631      	mov	r1, r6
 801a442:	4628      	mov	r0, r5
 801a444:	47b8      	blx	r7
 801a446:	3001      	adds	r0, #1
 801a448:	f43f af19 	beq.w	801a27e <_printf_float+0xbe>
 801a44c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a450:	4313      	orrs	r3, r2
 801a452:	d102      	bne.n	801a45a <_printf_float+0x29a>
 801a454:	6823      	ldr	r3, [r4, #0]
 801a456:	07d9      	lsls	r1, r3, #31
 801a458:	d5d8      	bpl.n	801a40c <_printf_float+0x24c>
 801a45a:	ee18 3a10 	vmov	r3, s16
 801a45e:	4652      	mov	r2, sl
 801a460:	4631      	mov	r1, r6
 801a462:	4628      	mov	r0, r5
 801a464:	47b8      	blx	r7
 801a466:	3001      	adds	r0, #1
 801a468:	f43f af09 	beq.w	801a27e <_printf_float+0xbe>
 801a46c:	f04f 0900 	mov.w	r9, #0
 801a470:	f104 0a1a 	add.w	sl, r4, #26
 801a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a476:	425b      	negs	r3, r3
 801a478:	454b      	cmp	r3, r9
 801a47a:	dc01      	bgt.n	801a480 <_printf_float+0x2c0>
 801a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a47e:	e792      	b.n	801a3a6 <_printf_float+0x1e6>
 801a480:	2301      	movs	r3, #1
 801a482:	4652      	mov	r2, sl
 801a484:	4631      	mov	r1, r6
 801a486:	4628      	mov	r0, r5
 801a488:	47b8      	blx	r7
 801a48a:	3001      	adds	r0, #1
 801a48c:	f43f aef7 	beq.w	801a27e <_printf_float+0xbe>
 801a490:	f109 0901 	add.w	r9, r9, #1
 801a494:	e7ee      	b.n	801a474 <_printf_float+0x2b4>
 801a496:	bf00      	nop
 801a498:	7fefffff 	.word	0x7fefffff
 801a49c:	0801ffa8 	.word	0x0801ffa8
 801a4a0:	0801ffac 	.word	0x0801ffac
 801a4a4:	0801ffb0 	.word	0x0801ffb0
 801a4a8:	0801ffb4 	.word	0x0801ffb4
 801a4ac:	0801ffb8 	.word	0x0801ffb8
 801a4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	bfa8      	it	ge
 801a4b8:	461a      	movge	r2, r3
 801a4ba:	2a00      	cmp	r2, #0
 801a4bc:	4691      	mov	r9, r2
 801a4be:	dc37      	bgt.n	801a530 <_printf_float+0x370>
 801a4c0:	f04f 0b00 	mov.w	fp, #0
 801a4c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a4c8:	f104 021a 	add.w	r2, r4, #26
 801a4cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a4ce:	9305      	str	r3, [sp, #20]
 801a4d0:	eba3 0309 	sub.w	r3, r3, r9
 801a4d4:	455b      	cmp	r3, fp
 801a4d6:	dc33      	bgt.n	801a540 <_printf_float+0x380>
 801a4d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a4dc:	429a      	cmp	r2, r3
 801a4de:	db3b      	blt.n	801a558 <_printf_float+0x398>
 801a4e0:	6823      	ldr	r3, [r4, #0]
 801a4e2:	07da      	lsls	r2, r3, #31
 801a4e4:	d438      	bmi.n	801a558 <_printf_float+0x398>
 801a4e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a4ea:	eba2 0903 	sub.w	r9, r2, r3
 801a4ee:	9b05      	ldr	r3, [sp, #20]
 801a4f0:	1ad2      	subs	r2, r2, r3
 801a4f2:	4591      	cmp	r9, r2
 801a4f4:	bfa8      	it	ge
 801a4f6:	4691      	movge	r9, r2
 801a4f8:	f1b9 0f00 	cmp.w	r9, #0
 801a4fc:	dc35      	bgt.n	801a56a <_printf_float+0x3aa>
 801a4fe:	f04f 0800 	mov.w	r8, #0
 801a502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a506:	f104 0a1a 	add.w	sl, r4, #26
 801a50a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a50e:	1a9b      	subs	r3, r3, r2
 801a510:	eba3 0309 	sub.w	r3, r3, r9
 801a514:	4543      	cmp	r3, r8
 801a516:	f77f af79 	ble.w	801a40c <_printf_float+0x24c>
 801a51a:	2301      	movs	r3, #1
 801a51c:	4652      	mov	r2, sl
 801a51e:	4631      	mov	r1, r6
 801a520:	4628      	mov	r0, r5
 801a522:	47b8      	blx	r7
 801a524:	3001      	adds	r0, #1
 801a526:	f43f aeaa 	beq.w	801a27e <_printf_float+0xbe>
 801a52a:	f108 0801 	add.w	r8, r8, #1
 801a52e:	e7ec      	b.n	801a50a <_printf_float+0x34a>
 801a530:	4613      	mov	r3, r2
 801a532:	4631      	mov	r1, r6
 801a534:	4642      	mov	r2, r8
 801a536:	4628      	mov	r0, r5
 801a538:	47b8      	blx	r7
 801a53a:	3001      	adds	r0, #1
 801a53c:	d1c0      	bne.n	801a4c0 <_printf_float+0x300>
 801a53e:	e69e      	b.n	801a27e <_printf_float+0xbe>
 801a540:	2301      	movs	r3, #1
 801a542:	4631      	mov	r1, r6
 801a544:	4628      	mov	r0, r5
 801a546:	9205      	str	r2, [sp, #20]
 801a548:	47b8      	blx	r7
 801a54a:	3001      	adds	r0, #1
 801a54c:	f43f ae97 	beq.w	801a27e <_printf_float+0xbe>
 801a550:	9a05      	ldr	r2, [sp, #20]
 801a552:	f10b 0b01 	add.w	fp, fp, #1
 801a556:	e7b9      	b.n	801a4cc <_printf_float+0x30c>
 801a558:	ee18 3a10 	vmov	r3, s16
 801a55c:	4652      	mov	r2, sl
 801a55e:	4631      	mov	r1, r6
 801a560:	4628      	mov	r0, r5
 801a562:	47b8      	blx	r7
 801a564:	3001      	adds	r0, #1
 801a566:	d1be      	bne.n	801a4e6 <_printf_float+0x326>
 801a568:	e689      	b.n	801a27e <_printf_float+0xbe>
 801a56a:	9a05      	ldr	r2, [sp, #20]
 801a56c:	464b      	mov	r3, r9
 801a56e:	4442      	add	r2, r8
 801a570:	4631      	mov	r1, r6
 801a572:	4628      	mov	r0, r5
 801a574:	47b8      	blx	r7
 801a576:	3001      	adds	r0, #1
 801a578:	d1c1      	bne.n	801a4fe <_printf_float+0x33e>
 801a57a:	e680      	b.n	801a27e <_printf_float+0xbe>
 801a57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a57e:	2a01      	cmp	r2, #1
 801a580:	dc01      	bgt.n	801a586 <_printf_float+0x3c6>
 801a582:	07db      	lsls	r3, r3, #31
 801a584:	d53a      	bpl.n	801a5fc <_printf_float+0x43c>
 801a586:	2301      	movs	r3, #1
 801a588:	4642      	mov	r2, r8
 801a58a:	4631      	mov	r1, r6
 801a58c:	4628      	mov	r0, r5
 801a58e:	47b8      	blx	r7
 801a590:	3001      	adds	r0, #1
 801a592:	f43f ae74 	beq.w	801a27e <_printf_float+0xbe>
 801a596:	ee18 3a10 	vmov	r3, s16
 801a59a:	4652      	mov	r2, sl
 801a59c:	4631      	mov	r1, r6
 801a59e:	4628      	mov	r0, r5
 801a5a0:	47b8      	blx	r7
 801a5a2:	3001      	adds	r0, #1
 801a5a4:	f43f ae6b 	beq.w	801a27e <_printf_float+0xbe>
 801a5a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a5ac:	2200      	movs	r2, #0
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801a5b4:	f7e6 fa98 	bl	8000ae8 <__aeabi_dcmpeq>
 801a5b8:	b9d8      	cbnz	r0, 801a5f2 <_printf_float+0x432>
 801a5ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a5be:	f108 0201 	add.w	r2, r8, #1
 801a5c2:	4631      	mov	r1, r6
 801a5c4:	4628      	mov	r0, r5
 801a5c6:	47b8      	blx	r7
 801a5c8:	3001      	adds	r0, #1
 801a5ca:	d10e      	bne.n	801a5ea <_printf_float+0x42a>
 801a5cc:	e657      	b.n	801a27e <_printf_float+0xbe>
 801a5ce:	2301      	movs	r3, #1
 801a5d0:	4652      	mov	r2, sl
 801a5d2:	4631      	mov	r1, r6
 801a5d4:	4628      	mov	r0, r5
 801a5d6:	47b8      	blx	r7
 801a5d8:	3001      	adds	r0, #1
 801a5da:	f43f ae50 	beq.w	801a27e <_printf_float+0xbe>
 801a5de:	f108 0801 	add.w	r8, r8, #1
 801a5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5e4:	3b01      	subs	r3, #1
 801a5e6:	4543      	cmp	r3, r8
 801a5e8:	dcf1      	bgt.n	801a5ce <_printf_float+0x40e>
 801a5ea:	464b      	mov	r3, r9
 801a5ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a5f0:	e6da      	b.n	801a3a8 <_printf_float+0x1e8>
 801a5f2:	f04f 0800 	mov.w	r8, #0
 801a5f6:	f104 0a1a 	add.w	sl, r4, #26
 801a5fa:	e7f2      	b.n	801a5e2 <_printf_float+0x422>
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	4642      	mov	r2, r8
 801a600:	e7df      	b.n	801a5c2 <_printf_float+0x402>
 801a602:	2301      	movs	r3, #1
 801a604:	464a      	mov	r2, r9
 801a606:	4631      	mov	r1, r6
 801a608:	4628      	mov	r0, r5
 801a60a:	47b8      	blx	r7
 801a60c:	3001      	adds	r0, #1
 801a60e:	f43f ae36 	beq.w	801a27e <_printf_float+0xbe>
 801a612:	f108 0801 	add.w	r8, r8, #1
 801a616:	68e3      	ldr	r3, [r4, #12]
 801a618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a61a:	1a5b      	subs	r3, r3, r1
 801a61c:	4543      	cmp	r3, r8
 801a61e:	dcf0      	bgt.n	801a602 <_printf_float+0x442>
 801a620:	e6f8      	b.n	801a414 <_printf_float+0x254>
 801a622:	f04f 0800 	mov.w	r8, #0
 801a626:	f104 0919 	add.w	r9, r4, #25
 801a62a:	e7f4      	b.n	801a616 <_printf_float+0x456>

0801a62c <_printf_common>:
 801a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a630:	4616      	mov	r6, r2
 801a632:	4699      	mov	r9, r3
 801a634:	688a      	ldr	r2, [r1, #8]
 801a636:	690b      	ldr	r3, [r1, #16]
 801a638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a63c:	4293      	cmp	r3, r2
 801a63e:	bfb8      	it	lt
 801a640:	4613      	movlt	r3, r2
 801a642:	6033      	str	r3, [r6, #0]
 801a644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a648:	4607      	mov	r7, r0
 801a64a:	460c      	mov	r4, r1
 801a64c:	b10a      	cbz	r2, 801a652 <_printf_common+0x26>
 801a64e:	3301      	adds	r3, #1
 801a650:	6033      	str	r3, [r6, #0]
 801a652:	6823      	ldr	r3, [r4, #0]
 801a654:	0699      	lsls	r1, r3, #26
 801a656:	bf42      	ittt	mi
 801a658:	6833      	ldrmi	r3, [r6, #0]
 801a65a:	3302      	addmi	r3, #2
 801a65c:	6033      	strmi	r3, [r6, #0]
 801a65e:	6825      	ldr	r5, [r4, #0]
 801a660:	f015 0506 	ands.w	r5, r5, #6
 801a664:	d106      	bne.n	801a674 <_printf_common+0x48>
 801a666:	f104 0a19 	add.w	sl, r4, #25
 801a66a:	68e3      	ldr	r3, [r4, #12]
 801a66c:	6832      	ldr	r2, [r6, #0]
 801a66e:	1a9b      	subs	r3, r3, r2
 801a670:	42ab      	cmp	r3, r5
 801a672:	dc26      	bgt.n	801a6c2 <_printf_common+0x96>
 801a674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a678:	1e13      	subs	r3, r2, #0
 801a67a:	6822      	ldr	r2, [r4, #0]
 801a67c:	bf18      	it	ne
 801a67e:	2301      	movne	r3, #1
 801a680:	0692      	lsls	r2, r2, #26
 801a682:	d42b      	bmi.n	801a6dc <_printf_common+0xb0>
 801a684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a688:	4649      	mov	r1, r9
 801a68a:	4638      	mov	r0, r7
 801a68c:	47c0      	blx	r8
 801a68e:	3001      	adds	r0, #1
 801a690:	d01e      	beq.n	801a6d0 <_printf_common+0xa4>
 801a692:	6823      	ldr	r3, [r4, #0]
 801a694:	6922      	ldr	r2, [r4, #16]
 801a696:	f003 0306 	and.w	r3, r3, #6
 801a69a:	2b04      	cmp	r3, #4
 801a69c:	bf02      	ittt	eq
 801a69e:	68e5      	ldreq	r5, [r4, #12]
 801a6a0:	6833      	ldreq	r3, [r6, #0]
 801a6a2:	1aed      	subeq	r5, r5, r3
 801a6a4:	68a3      	ldr	r3, [r4, #8]
 801a6a6:	bf0c      	ite	eq
 801a6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a6ac:	2500      	movne	r5, #0
 801a6ae:	4293      	cmp	r3, r2
 801a6b0:	bfc4      	itt	gt
 801a6b2:	1a9b      	subgt	r3, r3, r2
 801a6b4:	18ed      	addgt	r5, r5, r3
 801a6b6:	2600      	movs	r6, #0
 801a6b8:	341a      	adds	r4, #26
 801a6ba:	42b5      	cmp	r5, r6
 801a6bc:	d11a      	bne.n	801a6f4 <_printf_common+0xc8>
 801a6be:	2000      	movs	r0, #0
 801a6c0:	e008      	b.n	801a6d4 <_printf_common+0xa8>
 801a6c2:	2301      	movs	r3, #1
 801a6c4:	4652      	mov	r2, sl
 801a6c6:	4649      	mov	r1, r9
 801a6c8:	4638      	mov	r0, r7
 801a6ca:	47c0      	blx	r8
 801a6cc:	3001      	adds	r0, #1
 801a6ce:	d103      	bne.n	801a6d8 <_printf_common+0xac>
 801a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 801a6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6d8:	3501      	adds	r5, #1
 801a6da:	e7c6      	b.n	801a66a <_printf_common+0x3e>
 801a6dc:	18e1      	adds	r1, r4, r3
 801a6de:	1c5a      	adds	r2, r3, #1
 801a6e0:	2030      	movs	r0, #48	; 0x30
 801a6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a6e6:	4422      	add	r2, r4
 801a6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a6f0:	3302      	adds	r3, #2
 801a6f2:	e7c7      	b.n	801a684 <_printf_common+0x58>
 801a6f4:	2301      	movs	r3, #1
 801a6f6:	4622      	mov	r2, r4
 801a6f8:	4649      	mov	r1, r9
 801a6fa:	4638      	mov	r0, r7
 801a6fc:	47c0      	blx	r8
 801a6fe:	3001      	adds	r0, #1
 801a700:	d0e6      	beq.n	801a6d0 <_printf_common+0xa4>
 801a702:	3601      	adds	r6, #1
 801a704:	e7d9      	b.n	801a6ba <_printf_common+0x8e>
	...

0801a708 <_printf_i>:
 801a708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a70c:	7e0f      	ldrb	r7, [r1, #24]
 801a70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a710:	2f78      	cmp	r7, #120	; 0x78
 801a712:	4691      	mov	r9, r2
 801a714:	4680      	mov	r8, r0
 801a716:	460c      	mov	r4, r1
 801a718:	469a      	mov	sl, r3
 801a71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a71e:	d807      	bhi.n	801a730 <_printf_i+0x28>
 801a720:	2f62      	cmp	r7, #98	; 0x62
 801a722:	d80a      	bhi.n	801a73a <_printf_i+0x32>
 801a724:	2f00      	cmp	r7, #0
 801a726:	f000 80d4 	beq.w	801a8d2 <_printf_i+0x1ca>
 801a72a:	2f58      	cmp	r7, #88	; 0x58
 801a72c:	f000 80c0 	beq.w	801a8b0 <_printf_i+0x1a8>
 801a730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a738:	e03a      	b.n	801a7b0 <_printf_i+0xa8>
 801a73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a73e:	2b15      	cmp	r3, #21
 801a740:	d8f6      	bhi.n	801a730 <_printf_i+0x28>
 801a742:	a101      	add	r1, pc, #4	; (adr r1, 801a748 <_printf_i+0x40>)
 801a744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a748:	0801a7a1 	.word	0x0801a7a1
 801a74c:	0801a7b5 	.word	0x0801a7b5
 801a750:	0801a731 	.word	0x0801a731
 801a754:	0801a731 	.word	0x0801a731
 801a758:	0801a731 	.word	0x0801a731
 801a75c:	0801a731 	.word	0x0801a731
 801a760:	0801a7b5 	.word	0x0801a7b5
 801a764:	0801a731 	.word	0x0801a731
 801a768:	0801a731 	.word	0x0801a731
 801a76c:	0801a731 	.word	0x0801a731
 801a770:	0801a731 	.word	0x0801a731
 801a774:	0801a8b9 	.word	0x0801a8b9
 801a778:	0801a7e1 	.word	0x0801a7e1
 801a77c:	0801a873 	.word	0x0801a873
 801a780:	0801a731 	.word	0x0801a731
 801a784:	0801a731 	.word	0x0801a731
 801a788:	0801a8db 	.word	0x0801a8db
 801a78c:	0801a731 	.word	0x0801a731
 801a790:	0801a7e1 	.word	0x0801a7e1
 801a794:	0801a731 	.word	0x0801a731
 801a798:	0801a731 	.word	0x0801a731
 801a79c:	0801a87b 	.word	0x0801a87b
 801a7a0:	682b      	ldr	r3, [r5, #0]
 801a7a2:	1d1a      	adds	r2, r3, #4
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	602a      	str	r2, [r5, #0]
 801a7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a7b0:	2301      	movs	r3, #1
 801a7b2:	e09f      	b.n	801a8f4 <_printf_i+0x1ec>
 801a7b4:	6820      	ldr	r0, [r4, #0]
 801a7b6:	682b      	ldr	r3, [r5, #0]
 801a7b8:	0607      	lsls	r7, r0, #24
 801a7ba:	f103 0104 	add.w	r1, r3, #4
 801a7be:	6029      	str	r1, [r5, #0]
 801a7c0:	d501      	bpl.n	801a7c6 <_printf_i+0xbe>
 801a7c2:	681e      	ldr	r6, [r3, #0]
 801a7c4:	e003      	b.n	801a7ce <_printf_i+0xc6>
 801a7c6:	0646      	lsls	r6, r0, #25
 801a7c8:	d5fb      	bpl.n	801a7c2 <_printf_i+0xba>
 801a7ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a7ce:	2e00      	cmp	r6, #0
 801a7d0:	da03      	bge.n	801a7da <_printf_i+0xd2>
 801a7d2:	232d      	movs	r3, #45	; 0x2d
 801a7d4:	4276      	negs	r6, r6
 801a7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7da:	485a      	ldr	r0, [pc, #360]	; (801a944 <_printf_i+0x23c>)
 801a7dc:	230a      	movs	r3, #10
 801a7de:	e012      	b.n	801a806 <_printf_i+0xfe>
 801a7e0:	682b      	ldr	r3, [r5, #0]
 801a7e2:	6820      	ldr	r0, [r4, #0]
 801a7e4:	1d19      	adds	r1, r3, #4
 801a7e6:	6029      	str	r1, [r5, #0]
 801a7e8:	0605      	lsls	r5, r0, #24
 801a7ea:	d501      	bpl.n	801a7f0 <_printf_i+0xe8>
 801a7ec:	681e      	ldr	r6, [r3, #0]
 801a7ee:	e002      	b.n	801a7f6 <_printf_i+0xee>
 801a7f0:	0641      	lsls	r1, r0, #25
 801a7f2:	d5fb      	bpl.n	801a7ec <_printf_i+0xe4>
 801a7f4:	881e      	ldrh	r6, [r3, #0]
 801a7f6:	4853      	ldr	r0, [pc, #332]	; (801a944 <_printf_i+0x23c>)
 801a7f8:	2f6f      	cmp	r7, #111	; 0x6f
 801a7fa:	bf0c      	ite	eq
 801a7fc:	2308      	moveq	r3, #8
 801a7fe:	230a      	movne	r3, #10
 801a800:	2100      	movs	r1, #0
 801a802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a806:	6865      	ldr	r5, [r4, #4]
 801a808:	60a5      	str	r5, [r4, #8]
 801a80a:	2d00      	cmp	r5, #0
 801a80c:	bfa2      	ittt	ge
 801a80e:	6821      	ldrge	r1, [r4, #0]
 801a810:	f021 0104 	bicge.w	r1, r1, #4
 801a814:	6021      	strge	r1, [r4, #0]
 801a816:	b90e      	cbnz	r6, 801a81c <_printf_i+0x114>
 801a818:	2d00      	cmp	r5, #0
 801a81a:	d04b      	beq.n	801a8b4 <_printf_i+0x1ac>
 801a81c:	4615      	mov	r5, r2
 801a81e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a822:	fb03 6711 	mls	r7, r3, r1, r6
 801a826:	5dc7      	ldrb	r7, [r0, r7]
 801a828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a82c:	4637      	mov	r7, r6
 801a82e:	42bb      	cmp	r3, r7
 801a830:	460e      	mov	r6, r1
 801a832:	d9f4      	bls.n	801a81e <_printf_i+0x116>
 801a834:	2b08      	cmp	r3, #8
 801a836:	d10b      	bne.n	801a850 <_printf_i+0x148>
 801a838:	6823      	ldr	r3, [r4, #0]
 801a83a:	07de      	lsls	r6, r3, #31
 801a83c:	d508      	bpl.n	801a850 <_printf_i+0x148>
 801a83e:	6923      	ldr	r3, [r4, #16]
 801a840:	6861      	ldr	r1, [r4, #4]
 801a842:	4299      	cmp	r1, r3
 801a844:	bfde      	ittt	le
 801a846:	2330      	movle	r3, #48	; 0x30
 801a848:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a84c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a850:	1b52      	subs	r2, r2, r5
 801a852:	6122      	str	r2, [r4, #16]
 801a854:	f8cd a000 	str.w	sl, [sp]
 801a858:	464b      	mov	r3, r9
 801a85a:	aa03      	add	r2, sp, #12
 801a85c:	4621      	mov	r1, r4
 801a85e:	4640      	mov	r0, r8
 801a860:	f7ff fee4 	bl	801a62c <_printf_common>
 801a864:	3001      	adds	r0, #1
 801a866:	d14a      	bne.n	801a8fe <_printf_i+0x1f6>
 801a868:	f04f 30ff 	mov.w	r0, #4294967295
 801a86c:	b004      	add	sp, #16
 801a86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a872:	6823      	ldr	r3, [r4, #0]
 801a874:	f043 0320 	orr.w	r3, r3, #32
 801a878:	6023      	str	r3, [r4, #0]
 801a87a:	4833      	ldr	r0, [pc, #204]	; (801a948 <_printf_i+0x240>)
 801a87c:	2778      	movs	r7, #120	; 0x78
 801a87e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a882:	6823      	ldr	r3, [r4, #0]
 801a884:	6829      	ldr	r1, [r5, #0]
 801a886:	061f      	lsls	r7, r3, #24
 801a888:	f851 6b04 	ldr.w	r6, [r1], #4
 801a88c:	d402      	bmi.n	801a894 <_printf_i+0x18c>
 801a88e:	065f      	lsls	r7, r3, #25
 801a890:	bf48      	it	mi
 801a892:	b2b6      	uxthmi	r6, r6
 801a894:	07df      	lsls	r7, r3, #31
 801a896:	bf48      	it	mi
 801a898:	f043 0320 	orrmi.w	r3, r3, #32
 801a89c:	6029      	str	r1, [r5, #0]
 801a89e:	bf48      	it	mi
 801a8a0:	6023      	strmi	r3, [r4, #0]
 801a8a2:	b91e      	cbnz	r6, 801a8ac <_printf_i+0x1a4>
 801a8a4:	6823      	ldr	r3, [r4, #0]
 801a8a6:	f023 0320 	bic.w	r3, r3, #32
 801a8aa:	6023      	str	r3, [r4, #0]
 801a8ac:	2310      	movs	r3, #16
 801a8ae:	e7a7      	b.n	801a800 <_printf_i+0xf8>
 801a8b0:	4824      	ldr	r0, [pc, #144]	; (801a944 <_printf_i+0x23c>)
 801a8b2:	e7e4      	b.n	801a87e <_printf_i+0x176>
 801a8b4:	4615      	mov	r5, r2
 801a8b6:	e7bd      	b.n	801a834 <_printf_i+0x12c>
 801a8b8:	682b      	ldr	r3, [r5, #0]
 801a8ba:	6826      	ldr	r6, [r4, #0]
 801a8bc:	6961      	ldr	r1, [r4, #20]
 801a8be:	1d18      	adds	r0, r3, #4
 801a8c0:	6028      	str	r0, [r5, #0]
 801a8c2:	0635      	lsls	r5, r6, #24
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	d501      	bpl.n	801a8cc <_printf_i+0x1c4>
 801a8c8:	6019      	str	r1, [r3, #0]
 801a8ca:	e002      	b.n	801a8d2 <_printf_i+0x1ca>
 801a8cc:	0670      	lsls	r0, r6, #25
 801a8ce:	d5fb      	bpl.n	801a8c8 <_printf_i+0x1c0>
 801a8d0:	8019      	strh	r1, [r3, #0]
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	6123      	str	r3, [r4, #16]
 801a8d6:	4615      	mov	r5, r2
 801a8d8:	e7bc      	b.n	801a854 <_printf_i+0x14c>
 801a8da:	682b      	ldr	r3, [r5, #0]
 801a8dc:	1d1a      	adds	r2, r3, #4
 801a8de:	602a      	str	r2, [r5, #0]
 801a8e0:	681d      	ldr	r5, [r3, #0]
 801a8e2:	6862      	ldr	r2, [r4, #4]
 801a8e4:	2100      	movs	r1, #0
 801a8e6:	4628      	mov	r0, r5
 801a8e8:	f7e5 fc82 	bl	80001f0 <memchr>
 801a8ec:	b108      	cbz	r0, 801a8f2 <_printf_i+0x1ea>
 801a8ee:	1b40      	subs	r0, r0, r5
 801a8f0:	6060      	str	r0, [r4, #4]
 801a8f2:	6863      	ldr	r3, [r4, #4]
 801a8f4:	6123      	str	r3, [r4, #16]
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8fc:	e7aa      	b.n	801a854 <_printf_i+0x14c>
 801a8fe:	6923      	ldr	r3, [r4, #16]
 801a900:	462a      	mov	r2, r5
 801a902:	4649      	mov	r1, r9
 801a904:	4640      	mov	r0, r8
 801a906:	47d0      	blx	sl
 801a908:	3001      	adds	r0, #1
 801a90a:	d0ad      	beq.n	801a868 <_printf_i+0x160>
 801a90c:	6823      	ldr	r3, [r4, #0]
 801a90e:	079b      	lsls	r3, r3, #30
 801a910:	d413      	bmi.n	801a93a <_printf_i+0x232>
 801a912:	68e0      	ldr	r0, [r4, #12]
 801a914:	9b03      	ldr	r3, [sp, #12]
 801a916:	4298      	cmp	r0, r3
 801a918:	bfb8      	it	lt
 801a91a:	4618      	movlt	r0, r3
 801a91c:	e7a6      	b.n	801a86c <_printf_i+0x164>
 801a91e:	2301      	movs	r3, #1
 801a920:	4632      	mov	r2, r6
 801a922:	4649      	mov	r1, r9
 801a924:	4640      	mov	r0, r8
 801a926:	47d0      	blx	sl
 801a928:	3001      	adds	r0, #1
 801a92a:	d09d      	beq.n	801a868 <_printf_i+0x160>
 801a92c:	3501      	adds	r5, #1
 801a92e:	68e3      	ldr	r3, [r4, #12]
 801a930:	9903      	ldr	r1, [sp, #12]
 801a932:	1a5b      	subs	r3, r3, r1
 801a934:	42ab      	cmp	r3, r5
 801a936:	dcf2      	bgt.n	801a91e <_printf_i+0x216>
 801a938:	e7eb      	b.n	801a912 <_printf_i+0x20a>
 801a93a:	2500      	movs	r5, #0
 801a93c:	f104 0619 	add.w	r6, r4, #25
 801a940:	e7f5      	b.n	801a92e <_printf_i+0x226>
 801a942:	bf00      	nop
 801a944:	0801ffba 	.word	0x0801ffba
 801a948:	0801ffcb 	.word	0x0801ffcb

0801a94c <std>:
 801a94c:	2300      	movs	r3, #0
 801a94e:	b510      	push	{r4, lr}
 801a950:	4604      	mov	r4, r0
 801a952:	e9c0 3300 	strd	r3, r3, [r0]
 801a956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a95a:	6083      	str	r3, [r0, #8]
 801a95c:	8181      	strh	r1, [r0, #12]
 801a95e:	6643      	str	r3, [r0, #100]	; 0x64
 801a960:	81c2      	strh	r2, [r0, #14]
 801a962:	6183      	str	r3, [r0, #24]
 801a964:	4619      	mov	r1, r3
 801a966:	2208      	movs	r2, #8
 801a968:	305c      	adds	r0, #92	; 0x5c
 801a96a:	f000 f9e5 	bl	801ad38 <memset>
 801a96e:	4b0d      	ldr	r3, [pc, #52]	; (801a9a4 <std+0x58>)
 801a970:	6263      	str	r3, [r4, #36]	; 0x24
 801a972:	4b0d      	ldr	r3, [pc, #52]	; (801a9a8 <std+0x5c>)
 801a974:	62a3      	str	r3, [r4, #40]	; 0x28
 801a976:	4b0d      	ldr	r3, [pc, #52]	; (801a9ac <std+0x60>)
 801a978:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a97a:	4b0d      	ldr	r3, [pc, #52]	; (801a9b0 <std+0x64>)
 801a97c:	6323      	str	r3, [r4, #48]	; 0x30
 801a97e:	4b0d      	ldr	r3, [pc, #52]	; (801a9b4 <std+0x68>)
 801a980:	6224      	str	r4, [r4, #32]
 801a982:	429c      	cmp	r4, r3
 801a984:	d006      	beq.n	801a994 <std+0x48>
 801a986:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a98a:	4294      	cmp	r4, r2
 801a98c:	d002      	beq.n	801a994 <std+0x48>
 801a98e:	33d0      	adds	r3, #208	; 0xd0
 801a990:	429c      	cmp	r4, r3
 801a992:	d105      	bne.n	801a9a0 <std+0x54>
 801a994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a99c:	f000 ba48 	b.w	801ae30 <__retarget_lock_init_recursive>
 801a9a0:	bd10      	pop	{r4, pc}
 801a9a2:	bf00      	nop
 801a9a4:	0801ab35 	.word	0x0801ab35
 801a9a8:	0801ab57 	.word	0x0801ab57
 801a9ac:	0801ab8f 	.word	0x0801ab8f
 801a9b0:	0801abb3 	.word	0x0801abb3
 801a9b4:	2000f310 	.word	0x2000f310

0801a9b8 <stdio_exit_handler>:
 801a9b8:	4a02      	ldr	r2, [pc, #8]	; (801a9c4 <stdio_exit_handler+0xc>)
 801a9ba:	4903      	ldr	r1, [pc, #12]	; (801a9c8 <stdio_exit_handler+0x10>)
 801a9bc:	4803      	ldr	r0, [pc, #12]	; (801a9cc <stdio_exit_handler+0x14>)
 801a9be:	f000 b869 	b.w	801aa94 <_fwalk_sglue>
 801a9c2:	bf00      	nop
 801a9c4:	20000044 	.word	0x20000044
 801a9c8:	0801cac1 	.word	0x0801cac1
 801a9cc:	20000050 	.word	0x20000050

0801a9d0 <cleanup_stdio>:
 801a9d0:	6841      	ldr	r1, [r0, #4]
 801a9d2:	4b0c      	ldr	r3, [pc, #48]	; (801aa04 <cleanup_stdio+0x34>)
 801a9d4:	4299      	cmp	r1, r3
 801a9d6:	b510      	push	{r4, lr}
 801a9d8:	4604      	mov	r4, r0
 801a9da:	d001      	beq.n	801a9e0 <cleanup_stdio+0x10>
 801a9dc:	f002 f870 	bl	801cac0 <_fflush_r>
 801a9e0:	68a1      	ldr	r1, [r4, #8]
 801a9e2:	4b09      	ldr	r3, [pc, #36]	; (801aa08 <cleanup_stdio+0x38>)
 801a9e4:	4299      	cmp	r1, r3
 801a9e6:	d002      	beq.n	801a9ee <cleanup_stdio+0x1e>
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f002 f869 	bl	801cac0 <_fflush_r>
 801a9ee:	68e1      	ldr	r1, [r4, #12]
 801a9f0:	4b06      	ldr	r3, [pc, #24]	; (801aa0c <cleanup_stdio+0x3c>)
 801a9f2:	4299      	cmp	r1, r3
 801a9f4:	d004      	beq.n	801aa00 <cleanup_stdio+0x30>
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9fc:	f002 b860 	b.w	801cac0 <_fflush_r>
 801aa00:	bd10      	pop	{r4, pc}
 801aa02:	bf00      	nop
 801aa04:	2000f310 	.word	0x2000f310
 801aa08:	2000f378 	.word	0x2000f378
 801aa0c:	2000f3e0 	.word	0x2000f3e0

0801aa10 <global_stdio_init.part.0>:
 801aa10:	b510      	push	{r4, lr}
 801aa12:	4b0b      	ldr	r3, [pc, #44]	; (801aa40 <global_stdio_init.part.0+0x30>)
 801aa14:	4c0b      	ldr	r4, [pc, #44]	; (801aa44 <global_stdio_init.part.0+0x34>)
 801aa16:	4a0c      	ldr	r2, [pc, #48]	; (801aa48 <global_stdio_init.part.0+0x38>)
 801aa18:	601a      	str	r2, [r3, #0]
 801aa1a:	4620      	mov	r0, r4
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	2104      	movs	r1, #4
 801aa20:	f7ff ff94 	bl	801a94c <std>
 801aa24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801aa28:	2201      	movs	r2, #1
 801aa2a:	2109      	movs	r1, #9
 801aa2c:	f7ff ff8e 	bl	801a94c <std>
 801aa30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801aa34:	2202      	movs	r2, #2
 801aa36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa3a:	2112      	movs	r1, #18
 801aa3c:	f7ff bf86 	b.w	801a94c <std>
 801aa40:	2000f448 	.word	0x2000f448
 801aa44:	2000f310 	.word	0x2000f310
 801aa48:	0801a9b9 	.word	0x0801a9b9

0801aa4c <__sfp_lock_acquire>:
 801aa4c:	4801      	ldr	r0, [pc, #4]	; (801aa54 <__sfp_lock_acquire+0x8>)
 801aa4e:	f000 b9f0 	b.w	801ae32 <__retarget_lock_acquire_recursive>
 801aa52:	bf00      	nop
 801aa54:	2000f44d 	.word	0x2000f44d

0801aa58 <__sfp_lock_release>:
 801aa58:	4801      	ldr	r0, [pc, #4]	; (801aa60 <__sfp_lock_release+0x8>)
 801aa5a:	f000 b9eb 	b.w	801ae34 <__retarget_lock_release_recursive>
 801aa5e:	bf00      	nop
 801aa60:	2000f44d 	.word	0x2000f44d

0801aa64 <__sinit>:
 801aa64:	b510      	push	{r4, lr}
 801aa66:	4604      	mov	r4, r0
 801aa68:	f7ff fff0 	bl	801aa4c <__sfp_lock_acquire>
 801aa6c:	6a23      	ldr	r3, [r4, #32]
 801aa6e:	b11b      	cbz	r3, 801aa78 <__sinit+0x14>
 801aa70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa74:	f7ff bff0 	b.w	801aa58 <__sfp_lock_release>
 801aa78:	4b04      	ldr	r3, [pc, #16]	; (801aa8c <__sinit+0x28>)
 801aa7a:	6223      	str	r3, [r4, #32]
 801aa7c:	4b04      	ldr	r3, [pc, #16]	; (801aa90 <__sinit+0x2c>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d1f5      	bne.n	801aa70 <__sinit+0xc>
 801aa84:	f7ff ffc4 	bl	801aa10 <global_stdio_init.part.0>
 801aa88:	e7f2      	b.n	801aa70 <__sinit+0xc>
 801aa8a:	bf00      	nop
 801aa8c:	0801a9d1 	.word	0x0801a9d1
 801aa90:	2000f448 	.word	0x2000f448

0801aa94 <_fwalk_sglue>:
 801aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa98:	4607      	mov	r7, r0
 801aa9a:	4688      	mov	r8, r1
 801aa9c:	4614      	mov	r4, r2
 801aa9e:	2600      	movs	r6, #0
 801aaa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aaa4:	f1b9 0901 	subs.w	r9, r9, #1
 801aaa8:	d505      	bpl.n	801aab6 <_fwalk_sglue+0x22>
 801aaaa:	6824      	ldr	r4, [r4, #0]
 801aaac:	2c00      	cmp	r4, #0
 801aaae:	d1f7      	bne.n	801aaa0 <_fwalk_sglue+0xc>
 801aab0:	4630      	mov	r0, r6
 801aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aab6:	89ab      	ldrh	r3, [r5, #12]
 801aab8:	2b01      	cmp	r3, #1
 801aaba:	d907      	bls.n	801aacc <_fwalk_sglue+0x38>
 801aabc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aac0:	3301      	adds	r3, #1
 801aac2:	d003      	beq.n	801aacc <_fwalk_sglue+0x38>
 801aac4:	4629      	mov	r1, r5
 801aac6:	4638      	mov	r0, r7
 801aac8:	47c0      	blx	r8
 801aaca:	4306      	orrs	r6, r0
 801aacc:	3568      	adds	r5, #104	; 0x68
 801aace:	e7e9      	b.n	801aaa4 <_fwalk_sglue+0x10>

0801aad0 <iprintf>:
 801aad0:	b40f      	push	{r0, r1, r2, r3}
 801aad2:	b507      	push	{r0, r1, r2, lr}
 801aad4:	4906      	ldr	r1, [pc, #24]	; (801aaf0 <iprintf+0x20>)
 801aad6:	ab04      	add	r3, sp, #16
 801aad8:	6808      	ldr	r0, [r1, #0]
 801aada:	f853 2b04 	ldr.w	r2, [r3], #4
 801aade:	6881      	ldr	r1, [r0, #8]
 801aae0:	9301      	str	r3, [sp, #4]
 801aae2:	f001 fe4d 	bl	801c780 <_vfiprintf_r>
 801aae6:	b003      	add	sp, #12
 801aae8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aaec:	b004      	add	sp, #16
 801aaee:	4770      	bx	lr
 801aaf0:	2000009c 	.word	0x2000009c

0801aaf4 <siprintf>:
 801aaf4:	b40e      	push	{r1, r2, r3}
 801aaf6:	b500      	push	{lr}
 801aaf8:	b09c      	sub	sp, #112	; 0x70
 801aafa:	ab1d      	add	r3, sp, #116	; 0x74
 801aafc:	9002      	str	r0, [sp, #8]
 801aafe:	9006      	str	r0, [sp, #24]
 801ab00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ab04:	4809      	ldr	r0, [pc, #36]	; (801ab2c <siprintf+0x38>)
 801ab06:	9107      	str	r1, [sp, #28]
 801ab08:	9104      	str	r1, [sp, #16]
 801ab0a:	4909      	ldr	r1, [pc, #36]	; (801ab30 <siprintf+0x3c>)
 801ab0c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab10:	9105      	str	r1, [sp, #20]
 801ab12:	6800      	ldr	r0, [r0, #0]
 801ab14:	9301      	str	r3, [sp, #4]
 801ab16:	a902      	add	r1, sp, #8
 801ab18:	f001 fd0a 	bl	801c530 <_svfiprintf_r>
 801ab1c:	9b02      	ldr	r3, [sp, #8]
 801ab1e:	2200      	movs	r2, #0
 801ab20:	701a      	strb	r2, [r3, #0]
 801ab22:	b01c      	add	sp, #112	; 0x70
 801ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab28:	b003      	add	sp, #12
 801ab2a:	4770      	bx	lr
 801ab2c:	2000009c 	.word	0x2000009c
 801ab30:	ffff0208 	.word	0xffff0208

0801ab34 <__sread>:
 801ab34:	b510      	push	{r4, lr}
 801ab36:	460c      	mov	r4, r1
 801ab38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab3c:	f000 f92a 	bl	801ad94 <_read_r>
 801ab40:	2800      	cmp	r0, #0
 801ab42:	bfab      	itete	ge
 801ab44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ab46:	89a3      	ldrhlt	r3, [r4, #12]
 801ab48:	181b      	addge	r3, r3, r0
 801ab4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ab4e:	bfac      	ite	ge
 801ab50:	6563      	strge	r3, [r4, #84]	; 0x54
 801ab52:	81a3      	strhlt	r3, [r4, #12]
 801ab54:	bd10      	pop	{r4, pc}

0801ab56 <__swrite>:
 801ab56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab5a:	461f      	mov	r7, r3
 801ab5c:	898b      	ldrh	r3, [r1, #12]
 801ab5e:	05db      	lsls	r3, r3, #23
 801ab60:	4605      	mov	r5, r0
 801ab62:	460c      	mov	r4, r1
 801ab64:	4616      	mov	r6, r2
 801ab66:	d505      	bpl.n	801ab74 <__swrite+0x1e>
 801ab68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab6c:	2302      	movs	r3, #2
 801ab6e:	2200      	movs	r2, #0
 801ab70:	f000 f8fe 	bl	801ad70 <_lseek_r>
 801ab74:	89a3      	ldrh	r3, [r4, #12]
 801ab76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab7e:	81a3      	strh	r3, [r4, #12]
 801ab80:	4632      	mov	r2, r6
 801ab82:	463b      	mov	r3, r7
 801ab84:	4628      	mov	r0, r5
 801ab86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab8a:	f000 b915 	b.w	801adb8 <_write_r>

0801ab8e <__sseek>:
 801ab8e:	b510      	push	{r4, lr}
 801ab90:	460c      	mov	r4, r1
 801ab92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab96:	f000 f8eb 	bl	801ad70 <_lseek_r>
 801ab9a:	1c43      	adds	r3, r0, #1
 801ab9c:	89a3      	ldrh	r3, [r4, #12]
 801ab9e:	bf15      	itete	ne
 801aba0:	6560      	strne	r0, [r4, #84]	; 0x54
 801aba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801abaa:	81a3      	strheq	r3, [r4, #12]
 801abac:	bf18      	it	ne
 801abae:	81a3      	strhne	r3, [r4, #12]
 801abb0:	bd10      	pop	{r4, pc}

0801abb2 <__sclose>:
 801abb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abb6:	f000 b8cb 	b.w	801ad50 <_close_r>

0801abba <__swbuf_r>:
 801abba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abbc:	460e      	mov	r6, r1
 801abbe:	4614      	mov	r4, r2
 801abc0:	4605      	mov	r5, r0
 801abc2:	b118      	cbz	r0, 801abcc <__swbuf_r+0x12>
 801abc4:	6a03      	ldr	r3, [r0, #32]
 801abc6:	b90b      	cbnz	r3, 801abcc <__swbuf_r+0x12>
 801abc8:	f7ff ff4c 	bl	801aa64 <__sinit>
 801abcc:	69a3      	ldr	r3, [r4, #24]
 801abce:	60a3      	str	r3, [r4, #8]
 801abd0:	89a3      	ldrh	r3, [r4, #12]
 801abd2:	071a      	lsls	r2, r3, #28
 801abd4:	d525      	bpl.n	801ac22 <__swbuf_r+0x68>
 801abd6:	6923      	ldr	r3, [r4, #16]
 801abd8:	b31b      	cbz	r3, 801ac22 <__swbuf_r+0x68>
 801abda:	6823      	ldr	r3, [r4, #0]
 801abdc:	6922      	ldr	r2, [r4, #16]
 801abde:	1a98      	subs	r0, r3, r2
 801abe0:	6963      	ldr	r3, [r4, #20]
 801abe2:	b2f6      	uxtb	r6, r6
 801abe4:	4283      	cmp	r3, r0
 801abe6:	4637      	mov	r7, r6
 801abe8:	dc04      	bgt.n	801abf4 <__swbuf_r+0x3a>
 801abea:	4621      	mov	r1, r4
 801abec:	4628      	mov	r0, r5
 801abee:	f001 ff67 	bl	801cac0 <_fflush_r>
 801abf2:	b9e0      	cbnz	r0, 801ac2e <__swbuf_r+0x74>
 801abf4:	68a3      	ldr	r3, [r4, #8]
 801abf6:	3b01      	subs	r3, #1
 801abf8:	60a3      	str	r3, [r4, #8]
 801abfa:	6823      	ldr	r3, [r4, #0]
 801abfc:	1c5a      	adds	r2, r3, #1
 801abfe:	6022      	str	r2, [r4, #0]
 801ac00:	701e      	strb	r6, [r3, #0]
 801ac02:	6962      	ldr	r2, [r4, #20]
 801ac04:	1c43      	adds	r3, r0, #1
 801ac06:	429a      	cmp	r2, r3
 801ac08:	d004      	beq.n	801ac14 <__swbuf_r+0x5a>
 801ac0a:	89a3      	ldrh	r3, [r4, #12]
 801ac0c:	07db      	lsls	r3, r3, #31
 801ac0e:	d506      	bpl.n	801ac1e <__swbuf_r+0x64>
 801ac10:	2e0a      	cmp	r6, #10
 801ac12:	d104      	bne.n	801ac1e <__swbuf_r+0x64>
 801ac14:	4621      	mov	r1, r4
 801ac16:	4628      	mov	r0, r5
 801ac18:	f001 ff52 	bl	801cac0 <_fflush_r>
 801ac1c:	b938      	cbnz	r0, 801ac2e <__swbuf_r+0x74>
 801ac1e:	4638      	mov	r0, r7
 801ac20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac22:	4621      	mov	r1, r4
 801ac24:	4628      	mov	r0, r5
 801ac26:	f000 f805 	bl	801ac34 <__swsetup_r>
 801ac2a:	2800      	cmp	r0, #0
 801ac2c:	d0d5      	beq.n	801abda <__swbuf_r+0x20>
 801ac2e:	f04f 37ff 	mov.w	r7, #4294967295
 801ac32:	e7f4      	b.n	801ac1e <__swbuf_r+0x64>

0801ac34 <__swsetup_r>:
 801ac34:	b538      	push	{r3, r4, r5, lr}
 801ac36:	4b2a      	ldr	r3, [pc, #168]	; (801ace0 <__swsetup_r+0xac>)
 801ac38:	4605      	mov	r5, r0
 801ac3a:	6818      	ldr	r0, [r3, #0]
 801ac3c:	460c      	mov	r4, r1
 801ac3e:	b118      	cbz	r0, 801ac48 <__swsetup_r+0x14>
 801ac40:	6a03      	ldr	r3, [r0, #32]
 801ac42:	b90b      	cbnz	r3, 801ac48 <__swsetup_r+0x14>
 801ac44:	f7ff ff0e 	bl	801aa64 <__sinit>
 801ac48:	89a3      	ldrh	r3, [r4, #12]
 801ac4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ac4e:	0718      	lsls	r0, r3, #28
 801ac50:	d422      	bmi.n	801ac98 <__swsetup_r+0x64>
 801ac52:	06d9      	lsls	r1, r3, #27
 801ac54:	d407      	bmi.n	801ac66 <__swsetup_r+0x32>
 801ac56:	2309      	movs	r3, #9
 801ac58:	602b      	str	r3, [r5, #0]
 801ac5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ac5e:	81a3      	strh	r3, [r4, #12]
 801ac60:	f04f 30ff 	mov.w	r0, #4294967295
 801ac64:	e034      	b.n	801acd0 <__swsetup_r+0x9c>
 801ac66:	0758      	lsls	r0, r3, #29
 801ac68:	d512      	bpl.n	801ac90 <__swsetup_r+0x5c>
 801ac6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac6c:	b141      	cbz	r1, 801ac80 <__swsetup_r+0x4c>
 801ac6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac72:	4299      	cmp	r1, r3
 801ac74:	d002      	beq.n	801ac7c <__swsetup_r+0x48>
 801ac76:	4628      	mov	r0, r5
 801ac78:	f000 ff84 	bl	801bb84 <_free_r>
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	6363      	str	r3, [r4, #52]	; 0x34
 801ac80:	89a3      	ldrh	r3, [r4, #12]
 801ac82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ac86:	81a3      	strh	r3, [r4, #12]
 801ac88:	2300      	movs	r3, #0
 801ac8a:	6063      	str	r3, [r4, #4]
 801ac8c:	6923      	ldr	r3, [r4, #16]
 801ac8e:	6023      	str	r3, [r4, #0]
 801ac90:	89a3      	ldrh	r3, [r4, #12]
 801ac92:	f043 0308 	orr.w	r3, r3, #8
 801ac96:	81a3      	strh	r3, [r4, #12]
 801ac98:	6923      	ldr	r3, [r4, #16]
 801ac9a:	b94b      	cbnz	r3, 801acb0 <__swsetup_r+0x7c>
 801ac9c:	89a3      	ldrh	r3, [r4, #12]
 801ac9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aca6:	d003      	beq.n	801acb0 <__swsetup_r+0x7c>
 801aca8:	4621      	mov	r1, r4
 801acaa:	4628      	mov	r0, r5
 801acac:	f001 ff68 	bl	801cb80 <__smakebuf_r>
 801acb0:	89a0      	ldrh	r0, [r4, #12]
 801acb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801acb6:	f010 0301 	ands.w	r3, r0, #1
 801acba:	d00a      	beq.n	801acd2 <__swsetup_r+0x9e>
 801acbc:	2300      	movs	r3, #0
 801acbe:	60a3      	str	r3, [r4, #8]
 801acc0:	6963      	ldr	r3, [r4, #20]
 801acc2:	425b      	negs	r3, r3
 801acc4:	61a3      	str	r3, [r4, #24]
 801acc6:	6923      	ldr	r3, [r4, #16]
 801acc8:	b943      	cbnz	r3, 801acdc <__swsetup_r+0xa8>
 801acca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801acce:	d1c4      	bne.n	801ac5a <__swsetup_r+0x26>
 801acd0:	bd38      	pop	{r3, r4, r5, pc}
 801acd2:	0781      	lsls	r1, r0, #30
 801acd4:	bf58      	it	pl
 801acd6:	6963      	ldrpl	r3, [r4, #20]
 801acd8:	60a3      	str	r3, [r4, #8]
 801acda:	e7f4      	b.n	801acc6 <__swsetup_r+0x92>
 801acdc:	2000      	movs	r0, #0
 801acde:	e7f7      	b.n	801acd0 <__swsetup_r+0x9c>
 801ace0:	2000009c 	.word	0x2000009c

0801ace4 <memcmp>:
 801ace4:	b510      	push	{r4, lr}
 801ace6:	3901      	subs	r1, #1
 801ace8:	4402      	add	r2, r0
 801acea:	4290      	cmp	r0, r2
 801acec:	d101      	bne.n	801acf2 <memcmp+0xe>
 801acee:	2000      	movs	r0, #0
 801acf0:	e005      	b.n	801acfe <memcmp+0x1a>
 801acf2:	7803      	ldrb	r3, [r0, #0]
 801acf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801acf8:	42a3      	cmp	r3, r4
 801acfa:	d001      	beq.n	801ad00 <memcmp+0x1c>
 801acfc:	1b18      	subs	r0, r3, r4
 801acfe:	bd10      	pop	{r4, pc}
 801ad00:	3001      	adds	r0, #1
 801ad02:	e7f2      	b.n	801acea <memcmp+0x6>

0801ad04 <memmove>:
 801ad04:	4288      	cmp	r0, r1
 801ad06:	b510      	push	{r4, lr}
 801ad08:	eb01 0402 	add.w	r4, r1, r2
 801ad0c:	d902      	bls.n	801ad14 <memmove+0x10>
 801ad0e:	4284      	cmp	r4, r0
 801ad10:	4623      	mov	r3, r4
 801ad12:	d807      	bhi.n	801ad24 <memmove+0x20>
 801ad14:	1e43      	subs	r3, r0, #1
 801ad16:	42a1      	cmp	r1, r4
 801ad18:	d008      	beq.n	801ad2c <memmove+0x28>
 801ad1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad22:	e7f8      	b.n	801ad16 <memmove+0x12>
 801ad24:	4402      	add	r2, r0
 801ad26:	4601      	mov	r1, r0
 801ad28:	428a      	cmp	r2, r1
 801ad2a:	d100      	bne.n	801ad2e <memmove+0x2a>
 801ad2c:	bd10      	pop	{r4, pc}
 801ad2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad36:	e7f7      	b.n	801ad28 <memmove+0x24>

0801ad38 <memset>:
 801ad38:	4402      	add	r2, r0
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	4293      	cmp	r3, r2
 801ad3e:	d100      	bne.n	801ad42 <memset+0xa>
 801ad40:	4770      	bx	lr
 801ad42:	f803 1b01 	strb.w	r1, [r3], #1
 801ad46:	e7f9      	b.n	801ad3c <memset+0x4>

0801ad48 <_localeconv_r>:
 801ad48:	4800      	ldr	r0, [pc, #0]	; (801ad4c <_localeconv_r+0x4>)
 801ad4a:	4770      	bx	lr
 801ad4c:	20000190 	.word	0x20000190

0801ad50 <_close_r>:
 801ad50:	b538      	push	{r3, r4, r5, lr}
 801ad52:	4d06      	ldr	r5, [pc, #24]	; (801ad6c <_close_r+0x1c>)
 801ad54:	2300      	movs	r3, #0
 801ad56:	4604      	mov	r4, r0
 801ad58:	4608      	mov	r0, r1
 801ad5a:	602b      	str	r3, [r5, #0]
 801ad5c:	f7e7 fa57 	bl	800220e <_close>
 801ad60:	1c43      	adds	r3, r0, #1
 801ad62:	d102      	bne.n	801ad6a <_close_r+0x1a>
 801ad64:	682b      	ldr	r3, [r5, #0]
 801ad66:	b103      	cbz	r3, 801ad6a <_close_r+0x1a>
 801ad68:	6023      	str	r3, [r4, #0]
 801ad6a:	bd38      	pop	{r3, r4, r5, pc}
 801ad6c:	2000f308 	.word	0x2000f308

0801ad70 <_lseek_r>:
 801ad70:	b538      	push	{r3, r4, r5, lr}
 801ad72:	4d07      	ldr	r5, [pc, #28]	; (801ad90 <_lseek_r+0x20>)
 801ad74:	4604      	mov	r4, r0
 801ad76:	4608      	mov	r0, r1
 801ad78:	4611      	mov	r1, r2
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	602a      	str	r2, [r5, #0]
 801ad7e:	461a      	mov	r2, r3
 801ad80:	f7e7 fa6c 	bl	800225c <_lseek>
 801ad84:	1c43      	adds	r3, r0, #1
 801ad86:	d102      	bne.n	801ad8e <_lseek_r+0x1e>
 801ad88:	682b      	ldr	r3, [r5, #0]
 801ad8a:	b103      	cbz	r3, 801ad8e <_lseek_r+0x1e>
 801ad8c:	6023      	str	r3, [r4, #0]
 801ad8e:	bd38      	pop	{r3, r4, r5, pc}
 801ad90:	2000f308 	.word	0x2000f308

0801ad94 <_read_r>:
 801ad94:	b538      	push	{r3, r4, r5, lr}
 801ad96:	4d07      	ldr	r5, [pc, #28]	; (801adb4 <_read_r+0x20>)
 801ad98:	4604      	mov	r4, r0
 801ad9a:	4608      	mov	r0, r1
 801ad9c:	4611      	mov	r1, r2
 801ad9e:	2200      	movs	r2, #0
 801ada0:	602a      	str	r2, [r5, #0]
 801ada2:	461a      	mov	r2, r3
 801ada4:	f7e7 f9fa 	bl	800219c <_read>
 801ada8:	1c43      	adds	r3, r0, #1
 801adaa:	d102      	bne.n	801adb2 <_read_r+0x1e>
 801adac:	682b      	ldr	r3, [r5, #0]
 801adae:	b103      	cbz	r3, 801adb2 <_read_r+0x1e>
 801adb0:	6023      	str	r3, [r4, #0]
 801adb2:	bd38      	pop	{r3, r4, r5, pc}
 801adb4:	2000f308 	.word	0x2000f308

0801adb8 <_write_r>:
 801adb8:	b538      	push	{r3, r4, r5, lr}
 801adba:	4d07      	ldr	r5, [pc, #28]	; (801add8 <_write_r+0x20>)
 801adbc:	4604      	mov	r4, r0
 801adbe:	4608      	mov	r0, r1
 801adc0:	4611      	mov	r1, r2
 801adc2:	2200      	movs	r2, #0
 801adc4:	602a      	str	r2, [r5, #0]
 801adc6:	461a      	mov	r2, r3
 801adc8:	f7e7 fa05 	bl	80021d6 <_write>
 801adcc:	1c43      	adds	r3, r0, #1
 801adce:	d102      	bne.n	801add6 <_write_r+0x1e>
 801add0:	682b      	ldr	r3, [r5, #0]
 801add2:	b103      	cbz	r3, 801add6 <_write_r+0x1e>
 801add4:	6023      	str	r3, [r4, #0]
 801add6:	bd38      	pop	{r3, r4, r5, pc}
 801add8:	2000f308 	.word	0x2000f308

0801addc <__errno>:
 801addc:	4b01      	ldr	r3, [pc, #4]	; (801ade4 <__errno+0x8>)
 801adde:	6818      	ldr	r0, [r3, #0]
 801ade0:	4770      	bx	lr
 801ade2:	bf00      	nop
 801ade4:	2000009c 	.word	0x2000009c

0801ade8 <__libc_init_array>:
 801ade8:	b570      	push	{r4, r5, r6, lr}
 801adea:	4d0d      	ldr	r5, [pc, #52]	; (801ae20 <__libc_init_array+0x38>)
 801adec:	4c0d      	ldr	r4, [pc, #52]	; (801ae24 <__libc_init_array+0x3c>)
 801adee:	1b64      	subs	r4, r4, r5
 801adf0:	10a4      	asrs	r4, r4, #2
 801adf2:	2600      	movs	r6, #0
 801adf4:	42a6      	cmp	r6, r4
 801adf6:	d109      	bne.n	801ae0c <__libc_init_array+0x24>
 801adf8:	4d0b      	ldr	r5, [pc, #44]	; (801ae28 <__libc_init_array+0x40>)
 801adfa:	4c0c      	ldr	r4, [pc, #48]	; (801ae2c <__libc_init_array+0x44>)
 801adfc:	f001 ffe6 	bl	801cdcc <_init>
 801ae00:	1b64      	subs	r4, r4, r5
 801ae02:	10a4      	asrs	r4, r4, #2
 801ae04:	2600      	movs	r6, #0
 801ae06:	42a6      	cmp	r6, r4
 801ae08:	d105      	bne.n	801ae16 <__libc_init_array+0x2e>
 801ae0a:	bd70      	pop	{r4, r5, r6, pc}
 801ae0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae10:	4798      	blx	r3
 801ae12:	3601      	adds	r6, #1
 801ae14:	e7ee      	b.n	801adf4 <__libc_init_array+0xc>
 801ae16:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae1a:	4798      	blx	r3
 801ae1c:	3601      	adds	r6, #1
 801ae1e:	e7f2      	b.n	801ae06 <__libc_init_array+0x1e>
 801ae20:	08020208 	.word	0x08020208
 801ae24:	08020208 	.word	0x08020208
 801ae28:	08020208 	.word	0x08020208
 801ae2c:	0802020c 	.word	0x0802020c

0801ae30 <__retarget_lock_init_recursive>:
 801ae30:	4770      	bx	lr

0801ae32 <__retarget_lock_acquire_recursive>:
 801ae32:	4770      	bx	lr

0801ae34 <__retarget_lock_release_recursive>:
 801ae34:	4770      	bx	lr

0801ae36 <memcpy>:
 801ae36:	440a      	add	r2, r1
 801ae38:	4291      	cmp	r1, r2
 801ae3a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ae3e:	d100      	bne.n	801ae42 <memcpy+0xc>
 801ae40:	4770      	bx	lr
 801ae42:	b510      	push	{r4, lr}
 801ae44:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae48:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ae4c:	4291      	cmp	r1, r2
 801ae4e:	d1f9      	bne.n	801ae44 <memcpy+0xe>
 801ae50:	bd10      	pop	{r4, pc}
	...

0801ae54 <__assert_func>:
 801ae54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae56:	4614      	mov	r4, r2
 801ae58:	461a      	mov	r2, r3
 801ae5a:	4b09      	ldr	r3, [pc, #36]	; (801ae80 <__assert_func+0x2c>)
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	4605      	mov	r5, r0
 801ae60:	68d8      	ldr	r0, [r3, #12]
 801ae62:	b14c      	cbz	r4, 801ae78 <__assert_func+0x24>
 801ae64:	4b07      	ldr	r3, [pc, #28]	; (801ae84 <__assert_func+0x30>)
 801ae66:	9100      	str	r1, [sp, #0]
 801ae68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ae6c:	4906      	ldr	r1, [pc, #24]	; (801ae88 <__assert_func+0x34>)
 801ae6e:	462b      	mov	r3, r5
 801ae70:	f001 fe4e 	bl	801cb10 <fiprintf>
 801ae74:	f001 fef2 	bl	801cc5c <abort>
 801ae78:	4b04      	ldr	r3, [pc, #16]	; (801ae8c <__assert_func+0x38>)
 801ae7a:	461c      	mov	r4, r3
 801ae7c:	e7f3      	b.n	801ae66 <__assert_func+0x12>
 801ae7e:	bf00      	nop
 801ae80:	2000009c 	.word	0x2000009c
 801ae84:	0801ffdc 	.word	0x0801ffdc
 801ae88:	0801ffe9 	.word	0x0801ffe9
 801ae8c:	08020017 	.word	0x08020017

0801ae90 <quorem>:
 801ae90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae94:	6903      	ldr	r3, [r0, #16]
 801ae96:	690c      	ldr	r4, [r1, #16]
 801ae98:	42a3      	cmp	r3, r4
 801ae9a:	4607      	mov	r7, r0
 801ae9c:	db7e      	blt.n	801af9c <quorem+0x10c>
 801ae9e:	3c01      	subs	r4, #1
 801aea0:	f101 0814 	add.w	r8, r1, #20
 801aea4:	f100 0514 	add.w	r5, r0, #20
 801aea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aeac:	9301      	str	r3, [sp, #4]
 801aeae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801aeb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801aebe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801aec2:	fbb2 f6f3 	udiv	r6, r2, r3
 801aec6:	d331      	bcc.n	801af2c <quorem+0x9c>
 801aec8:	f04f 0e00 	mov.w	lr, #0
 801aecc:	4640      	mov	r0, r8
 801aece:	46ac      	mov	ip, r5
 801aed0:	46f2      	mov	sl, lr
 801aed2:	f850 2b04 	ldr.w	r2, [r0], #4
 801aed6:	b293      	uxth	r3, r2
 801aed8:	fb06 e303 	mla	r3, r6, r3, lr
 801aedc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aee0:	0c1a      	lsrs	r2, r3, #16
 801aee2:	b29b      	uxth	r3, r3
 801aee4:	ebaa 0303 	sub.w	r3, sl, r3
 801aee8:	f8dc a000 	ldr.w	sl, [ip]
 801aeec:	fa13 f38a 	uxtah	r3, r3, sl
 801aef0:	fb06 220e 	mla	r2, r6, lr, r2
 801aef4:	9300      	str	r3, [sp, #0]
 801aef6:	9b00      	ldr	r3, [sp, #0]
 801aef8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aefc:	b292      	uxth	r2, r2
 801aefe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801af02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801af06:	f8bd 3000 	ldrh.w	r3, [sp]
 801af0a:	4581      	cmp	r9, r0
 801af0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801af10:	f84c 3b04 	str.w	r3, [ip], #4
 801af14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801af18:	d2db      	bcs.n	801aed2 <quorem+0x42>
 801af1a:	f855 300b 	ldr.w	r3, [r5, fp]
 801af1e:	b92b      	cbnz	r3, 801af2c <quorem+0x9c>
 801af20:	9b01      	ldr	r3, [sp, #4]
 801af22:	3b04      	subs	r3, #4
 801af24:	429d      	cmp	r5, r3
 801af26:	461a      	mov	r2, r3
 801af28:	d32c      	bcc.n	801af84 <quorem+0xf4>
 801af2a:	613c      	str	r4, [r7, #16]
 801af2c:	4638      	mov	r0, r7
 801af2e:	f001 f9a5 	bl	801c27c <__mcmp>
 801af32:	2800      	cmp	r0, #0
 801af34:	db22      	blt.n	801af7c <quorem+0xec>
 801af36:	3601      	adds	r6, #1
 801af38:	4629      	mov	r1, r5
 801af3a:	2000      	movs	r0, #0
 801af3c:	f858 2b04 	ldr.w	r2, [r8], #4
 801af40:	f8d1 c000 	ldr.w	ip, [r1]
 801af44:	b293      	uxth	r3, r2
 801af46:	1ac3      	subs	r3, r0, r3
 801af48:	0c12      	lsrs	r2, r2, #16
 801af4a:	fa13 f38c 	uxtah	r3, r3, ip
 801af4e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801af52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801af56:	b29b      	uxth	r3, r3
 801af58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801af5c:	45c1      	cmp	r9, r8
 801af5e:	f841 3b04 	str.w	r3, [r1], #4
 801af62:	ea4f 4022 	mov.w	r0, r2, asr #16
 801af66:	d2e9      	bcs.n	801af3c <quorem+0xac>
 801af68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801af6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801af70:	b922      	cbnz	r2, 801af7c <quorem+0xec>
 801af72:	3b04      	subs	r3, #4
 801af74:	429d      	cmp	r5, r3
 801af76:	461a      	mov	r2, r3
 801af78:	d30a      	bcc.n	801af90 <quorem+0x100>
 801af7a:	613c      	str	r4, [r7, #16]
 801af7c:	4630      	mov	r0, r6
 801af7e:	b003      	add	sp, #12
 801af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af84:	6812      	ldr	r2, [r2, #0]
 801af86:	3b04      	subs	r3, #4
 801af88:	2a00      	cmp	r2, #0
 801af8a:	d1ce      	bne.n	801af2a <quorem+0x9a>
 801af8c:	3c01      	subs	r4, #1
 801af8e:	e7c9      	b.n	801af24 <quorem+0x94>
 801af90:	6812      	ldr	r2, [r2, #0]
 801af92:	3b04      	subs	r3, #4
 801af94:	2a00      	cmp	r2, #0
 801af96:	d1f0      	bne.n	801af7a <quorem+0xea>
 801af98:	3c01      	subs	r4, #1
 801af9a:	e7eb      	b.n	801af74 <quorem+0xe4>
 801af9c:	2000      	movs	r0, #0
 801af9e:	e7ee      	b.n	801af7e <quorem+0xee>

0801afa0 <_dtoa_r>:
 801afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa4:	ed2d 8b04 	vpush	{d8-d9}
 801afa8:	69c5      	ldr	r5, [r0, #28]
 801afaa:	b093      	sub	sp, #76	; 0x4c
 801afac:	ed8d 0b02 	vstr	d0, [sp, #8]
 801afb0:	ec57 6b10 	vmov	r6, r7, d0
 801afb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801afb8:	9107      	str	r1, [sp, #28]
 801afba:	4604      	mov	r4, r0
 801afbc:	920a      	str	r2, [sp, #40]	; 0x28
 801afbe:	930d      	str	r3, [sp, #52]	; 0x34
 801afc0:	b975      	cbnz	r5, 801afe0 <_dtoa_r+0x40>
 801afc2:	2010      	movs	r0, #16
 801afc4:	f000 fe2a 	bl	801bc1c <malloc>
 801afc8:	4602      	mov	r2, r0
 801afca:	61e0      	str	r0, [r4, #28]
 801afcc:	b920      	cbnz	r0, 801afd8 <_dtoa_r+0x38>
 801afce:	4bae      	ldr	r3, [pc, #696]	; (801b288 <_dtoa_r+0x2e8>)
 801afd0:	21ef      	movs	r1, #239	; 0xef
 801afd2:	48ae      	ldr	r0, [pc, #696]	; (801b28c <_dtoa_r+0x2ec>)
 801afd4:	f7ff ff3e 	bl	801ae54 <__assert_func>
 801afd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801afdc:	6005      	str	r5, [r0, #0]
 801afde:	60c5      	str	r5, [r0, #12]
 801afe0:	69e3      	ldr	r3, [r4, #28]
 801afe2:	6819      	ldr	r1, [r3, #0]
 801afe4:	b151      	cbz	r1, 801affc <_dtoa_r+0x5c>
 801afe6:	685a      	ldr	r2, [r3, #4]
 801afe8:	604a      	str	r2, [r1, #4]
 801afea:	2301      	movs	r3, #1
 801afec:	4093      	lsls	r3, r2
 801afee:	608b      	str	r3, [r1, #8]
 801aff0:	4620      	mov	r0, r4
 801aff2:	f000 ff07 	bl	801be04 <_Bfree>
 801aff6:	69e3      	ldr	r3, [r4, #28]
 801aff8:	2200      	movs	r2, #0
 801affa:	601a      	str	r2, [r3, #0]
 801affc:	1e3b      	subs	r3, r7, #0
 801affe:	bfbb      	ittet	lt
 801b000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b004:	9303      	strlt	r3, [sp, #12]
 801b006:	2300      	movge	r3, #0
 801b008:	2201      	movlt	r2, #1
 801b00a:	bfac      	ite	ge
 801b00c:	f8c8 3000 	strge.w	r3, [r8]
 801b010:	f8c8 2000 	strlt.w	r2, [r8]
 801b014:	4b9e      	ldr	r3, [pc, #632]	; (801b290 <_dtoa_r+0x2f0>)
 801b016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801b01a:	ea33 0308 	bics.w	r3, r3, r8
 801b01e:	d11b      	bne.n	801b058 <_dtoa_r+0xb8>
 801b020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b022:	f242 730f 	movw	r3, #9999	; 0x270f
 801b026:	6013      	str	r3, [r2, #0]
 801b028:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801b02c:	4333      	orrs	r3, r6
 801b02e:	f000 8593 	beq.w	801bb58 <_dtoa_r+0xbb8>
 801b032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b034:	b963      	cbnz	r3, 801b050 <_dtoa_r+0xb0>
 801b036:	4b97      	ldr	r3, [pc, #604]	; (801b294 <_dtoa_r+0x2f4>)
 801b038:	e027      	b.n	801b08a <_dtoa_r+0xea>
 801b03a:	4b97      	ldr	r3, [pc, #604]	; (801b298 <_dtoa_r+0x2f8>)
 801b03c:	9300      	str	r3, [sp, #0]
 801b03e:	3308      	adds	r3, #8
 801b040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b042:	6013      	str	r3, [r2, #0]
 801b044:	9800      	ldr	r0, [sp, #0]
 801b046:	b013      	add	sp, #76	; 0x4c
 801b048:	ecbd 8b04 	vpop	{d8-d9}
 801b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b050:	4b90      	ldr	r3, [pc, #576]	; (801b294 <_dtoa_r+0x2f4>)
 801b052:	9300      	str	r3, [sp, #0]
 801b054:	3303      	adds	r3, #3
 801b056:	e7f3      	b.n	801b040 <_dtoa_r+0xa0>
 801b058:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b05c:	2200      	movs	r2, #0
 801b05e:	ec51 0b17 	vmov	r0, r1, d7
 801b062:	eeb0 8a47 	vmov.f32	s16, s14
 801b066:	eef0 8a67 	vmov.f32	s17, s15
 801b06a:	2300      	movs	r3, #0
 801b06c:	f7e5 fd3c 	bl	8000ae8 <__aeabi_dcmpeq>
 801b070:	4681      	mov	r9, r0
 801b072:	b160      	cbz	r0, 801b08e <_dtoa_r+0xee>
 801b074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b076:	2301      	movs	r3, #1
 801b078:	6013      	str	r3, [r2, #0]
 801b07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	f000 8568 	beq.w	801bb52 <_dtoa_r+0xbb2>
 801b082:	4b86      	ldr	r3, [pc, #536]	; (801b29c <_dtoa_r+0x2fc>)
 801b084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b086:	6013      	str	r3, [r2, #0]
 801b088:	3b01      	subs	r3, #1
 801b08a:	9300      	str	r3, [sp, #0]
 801b08c:	e7da      	b.n	801b044 <_dtoa_r+0xa4>
 801b08e:	aa10      	add	r2, sp, #64	; 0x40
 801b090:	a911      	add	r1, sp, #68	; 0x44
 801b092:	4620      	mov	r0, r4
 801b094:	eeb0 0a48 	vmov.f32	s0, s16
 801b098:	eef0 0a68 	vmov.f32	s1, s17
 801b09c:	f001 f994 	bl	801c3c8 <__d2b>
 801b0a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801b0a4:	4682      	mov	sl, r0
 801b0a6:	2d00      	cmp	r5, #0
 801b0a8:	d07f      	beq.n	801b1aa <_dtoa_r+0x20a>
 801b0aa:	ee18 3a90 	vmov	r3, s17
 801b0ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b0b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801b0b6:	ec51 0b18 	vmov	r0, r1, d8
 801b0ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b0be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b0c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b0c6:	4619      	mov	r1, r3
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	4b75      	ldr	r3, [pc, #468]	; (801b2a0 <_dtoa_r+0x300>)
 801b0cc:	f7e5 f8ec 	bl	80002a8 <__aeabi_dsub>
 801b0d0:	a367      	add	r3, pc, #412	; (adr r3, 801b270 <_dtoa_r+0x2d0>)
 801b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d6:	f7e5 fa9f 	bl	8000618 <__aeabi_dmul>
 801b0da:	a367      	add	r3, pc, #412	; (adr r3, 801b278 <_dtoa_r+0x2d8>)
 801b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e0:	f7e5 f8e4 	bl	80002ac <__adddf3>
 801b0e4:	4606      	mov	r6, r0
 801b0e6:	4628      	mov	r0, r5
 801b0e8:	460f      	mov	r7, r1
 801b0ea:	f7e5 fa2b 	bl	8000544 <__aeabi_i2d>
 801b0ee:	a364      	add	r3, pc, #400	; (adr r3, 801b280 <_dtoa_r+0x2e0>)
 801b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f4:	f7e5 fa90 	bl	8000618 <__aeabi_dmul>
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	4630      	mov	r0, r6
 801b0fe:	4639      	mov	r1, r7
 801b100:	f7e5 f8d4 	bl	80002ac <__adddf3>
 801b104:	4606      	mov	r6, r0
 801b106:	460f      	mov	r7, r1
 801b108:	f7e5 fd36 	bl	8000b78 <__aeabi_d2iz>
 801b10c:	2200      	movs	r2, #0
 801b10e:	4683      	mov	fp, r0
 801b110:	2300      	movs	r3, #0
 801b112:	4630      	mov	r0, r6
 801b114:	4639      	mov	r1, r7
 801b116:	f7e5 fcf1 	bl	8000afc <__aeabi_dcmplt>
 801b11a:	b148      	cbz	r0, 801b130 <_dtoa_r+0x190>
 801b11c:	4658      	mov	r0, fp
 801b11e:	f7e5 fa11 	bl	8000544 <__aeabi_i2d>
 801b122:	4632      	mov	r2, r6
 801b124:	463b      	mov	r3, r7
 801b126:	f7e5 fcdf 	bl	8000ae8 <__aeabi_dcmpeq>
 801b12a:	b908      	cbnz	r0, 801b130 <_dtoa_r+0x190>
 801b12c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b130:	f1bb 0f16 	cmp.w	fp, #22
 801b134:	d857      	bhi.n	801b1e6 <_dtoa_r+0x246>
 801b136:	4b5b      	ldr	r3, [pc, #364]	; (801b2a4 <_dtoa_r+0x304>)
 801b138:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b140:	ec51 0b18 	vmov	r0, r1, d8
 801b144:	f7e5 fcda 	bl	8000afc <__aeabi_dcmplt>
 801b148:	2800      	cmp	r0, #0
 801b14a:	d04e      	beq.n	801b1ea <_dtoa_r+0x24a>
 801b14c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b150:	2300      	movs	r3, #0
 801b152:	930c      	str	r3, [sp, #48]	; 0x30
 801b154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b156:	1b5b      	subs	r3, r3, r5
 801b158:	1e5a      	subs	r2, r3, #1
 801b15a:	bf45      	ittet	mi
 801b15c:	f1c3 0301 	rsbmi	r3, r3, #1
 801b160:	9305      	strmi	r3, [sp, #20]
 801b162:	2300      	movpl	r3, #0
 801b164:	2300      	movmi	r3, #0
 801b166:	9206      	str	r2, [sp, #24]
 801b168:	bf54      	ite	pl
 801b16a:	9305      	strpl	r3, [sp, #20]
 801b16c:	9306      	strmi	r3, [sp, #24]
 801b16e:	f1bb 0f00 	cmp.w	fp, #0
 801b172:	db3c      	blt.n	801b1ee <_dtoa_r+0x24e>
 801b174:	9b06      	ldr	r3, [sp, #24]
 801b176:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801b17a:	445b      	add	r3, fp
 801b17c:	9306      	str	r3, [sp, #24]
 801b17e:	2300      	movs	r3, #0
 801b180:	9308      	str	r3, [sp, #32]
 801b182:	9b07      	ldr	r3, [sp, #28]
 801b184:	2b09      	cmp	r3, #9
 801b186:	d868      	bhi.n	801b25a <_dtoa_r+0x2ba>
 801b188:	2b05      	cmp	r3, #5
 801b18a:	bfc4      	itt	gt
 801b18c:	3b04      	subgt	r3, #4
 801b18e:	9307      	strgt	r3, [sp, #28]
 801b190:	9b07      	ldr	r3, [sp, #28]
 801b192:	f1a3 0302 	sub.w	r3, r3, #2
 801b196:	bfcc      	ite	gt
 801b198:	2500      	movgt	r5, #0
 801b19a:	2501      	movle	r5, #1
 801b19c:	2b03      	cmp	r3, #3
 801b19e:	f200 8085 	bhi.w	801b2ac <_dtoa_r+0x30c>
 801b1a2:	e8df f003 	tbb	[pc, r3]
 801b1a6:	3b2e      	.short	0x3b2e
 801b1a8:	5839      	.short	0x5839
 801b1aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b1ae:	441d      	add	r5, r3
 801b1b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b1b4:	2b20      	cmp	r3, #32
 801b1b6:	bfc1      	itttt	gt
 801b1b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b1bc:	fa08 f803 	lslgt.w	r8, r8, r3
 801b1c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801b1c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 801b1c8:	bfd6      	itet	le
 801b1ca:	f1c3 0320 	rsble	r3, r3, #32
 801b1ce:	ea48 0003 	orrgt.w	r0, r8, r3
 801b1d2:	fa06 f003 	lslle.w	r0, r6, r3
 801b1d6:	f7e5 f9a5 	bl	8000524 <__aeabi_ui2d>
 801b1da:	2201      	movs	r2, #1
 801b1dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801b1e0:	3d01      	subs	r5, #1
 801b1e2:	920e      	str	r2, [sp, #56]	; 0x38
 801b1e4:	e76f      	b.n	801b0c6 <_dtoa_r+0x126>
 801b1e6:	2301      	movs	r3, #1
 801b1e8:	e7b3      	b.n	801b152 <_dtoa_r+0x1b2>
 801b1ea:	900c      	str	r0, [sp, #48]	; 0x30
 801b1ec:	e7b2      	b.n	801b154 <_dtoa_r+0x1b4>
 801b1ee:	9b05      	ldr	r3, [sp, #20]
 801b1f0:	eba3 030b 	sub.w	r3, r3, fp
 801b1f4:	9305      	str	r3, [sp, #20]
 801b1f6:	f1cb 0300 	rsb	r3, fp, #0
 801b1fa:	9308      	str	r3, [sp, #32]
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801b200:	e7bf      	b.n	801b182 <_dtoa_r+0x1e2>
 801b202:	2300      	movs	r3, #0
 801b204:	9309      	str	r3, [sp, #36]	; 0x24
 801b206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b208:	2b00      	cmp	r3, #0
 801b20a:	dc52      	bgt.n	801b2b2 <_dtoa_r+0x312>
 801b20c:	2301      	movs	r3, #1
 801b20e:	9301      	str	r3, [sp, #4]
 801b210:	9304      	str	r3, [sp, #16]
 801b212:	461a      	mov	r2, r3
 801b214:	920a      	str	r2, [sp, #40]	; 0x28
 801b216:	e00b      	b.n	801b230 <_dtoa_r+0x290>
 801b218:	2301      	movs	r3, #1
 801b21a:	e7f3      	b.n	801b204 <_dtoa_r+0x264>
 801b21c:	2300      	movs	r3, #0
 801b21e:	9309      	str	r3, [sp, #36]	; 0x24
 801b220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b222:	445b      	add	r3, fp
 801b224:	9301      	str	r3, [sp, #4]
 801b226:	3301      	adds	r3, #1
 801b228:	2b01      	cmp	r3, #1
 801b22a:	9304      	str	r3, [sp, #16]
 801b22c:	bfb8      	it	lt
 801b22e:	2301      	movlt	r3, #1
 801b230:	69e0      	ldr	r0, [r4, #28]
 801b232:	2100      	movs	r1, #0
 801b234:	2204      	movs	r2, #4
 801b236:	f102 0614 	add.w	r6, r2, #20
 801b23a:	429e      	cmp	r6, r3
 801b23c:	d93d      	bls.n	801b2ba <_dtoa_r+0x31a>
 801b23e:	6041      	str	r1, [r0, #4]
 801b240:	4620      	mov	r0, r4
 801b242:	f000 fd9f 	bl	801bd84 <_Balloc>
 801b246:	9000      	str	r0, [sp, #0]
 801b248:	2800      	cmp	r0, #0
 801b24a:	d139      	bne.n	801b2c0 <_dtoa_r+0x320>
 801b24c:	4b16      	ldr	r3, [pc, #88]	; (801b2a8 <_dtoa_r+0x308>)
 801b24e:	4602      	mov	r2, r0
 801b250:	f240 11af 	movw	r1, #431	; 0x1af
 801b254:	e6bd      	b.n	801afd2 <_dtoa_r+0x32>
 801b256:	2301      	movs	r3, #1
 801b258:	e7e1      	b.n	801b21e <_dtoa_r+0x27e>
 801b25a:	2501      	movs	r5, #1
 801b25c:	2300      	movs	r3, #0
 801b25e:	9307      	str	r3, [sp, #28]
 801b260:	9509      	str	r5, [sp, #36]	; 0x24
 801b262:	f04f 33ff 	mov.w	r3, #4294967295
 801b266:	9301      	str	r3, [sp, #4]
 801b268:	9304      	str	r3, [sp, #16]
 801b26a:	2200      	movs	r2, #0
 801b26c:	2312      	movs	r3, #18
 801b26e:	e7d1      	b.n	801b214 <_dtoa_r+0x274>
 801b270:	636f4361 	.word	0x636f4361
 801b274:	3fd287a7 	.word	0x3fd287a7
 801b278:	8b60c8b3 	.word	0x8b60c8b3
 801b27c:	3fc68a28 	.word	0x3fc68a28
 801b280:	509f79fb 	.word	0x509f79fb
 801b284:	3fd34413 	.word	0x3fd34413
 801b288:	0801fe38 	.word	0x0801fe38
 801b28c:	08020025 	.word	0x08020025
 801b290:	7ff00000 	.word	0x7ff00000
 801b294:	08020021 	.word	0x08020021
 801b298:	08020018 	.word	0x08020018
 801b29c:	0801ffb9 	.word	0x0801ffb9
 801b2a0:	3ff80000 	.word	0x3ff80000
 801b2a4:	08020110 	.word	0x08020110
 801b2a8:	0802007d 	.word	0x0802007d
 801b2ac:	2301      	movs	r3, #1
 801b2ae:	9309      	str	r3, [sp, #36]	; 0x24
 801b2b0:	e7d7      	b.n	801b262 <_dtoa_r+0x2c2>
 801b2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2b4:	9301      	str	r3, [sp, #4]
 801b2b6:	9304      	str	r3, [sp, #16]
 801b2b8:	e7ba      	b.n	801b230 <_dtoa_r+0x290>
 801b2ba:	3101      	adds	r1, #1
 801b2bc:	0052      	lsls	r2, r2, #1
 801b2be:	e7ba      	b.n	801b236 <_dtoa_r+0x296>
 801b2c0:	69e3      	ldr	r3, [r4, #28]
 801b2c2:	9a00      	ldr	r2, [sp, #0]
 801b2c4:	601a      	str	r2, [r3, #0]
 801b2c6:	9b04      	ldr	r3, [sp, #16]
 801b2c8:	2b0e      	cmp	r3, #14
 801b2ca:	f200 80a8 	bhi.w	801b41e <_dtoa_r+0x47e>
 801b2ce:	2d00      	cmp	r5, #0
 801b2d0:	f000 80a5 	beq.w	801b41e <_dtoa_r+0x47e>
 801b2d4:	f1bb 0f00 	cmp.w	fp, #0
 801b2d8:	dd38      	ble.n	801b34c <_dtoa_r+0x3ac>
 801b2da:	4bc0      	ldr	r3, [pc, #768]	; (801b5dc <_dtoa_r+0x63c>)
 801b2dc:	f00b 020f 	and.w	r2, fp, #15
 801b2e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b2e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b2e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 801b2ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 801b2f0:	d019      	beq.n	801b326 <_dtoa_r+0x386>
 801b2f2:	4bbb      	ldr	r3, [pc, #748]	; (801b5e0 <_dtoa_r+0x640>)
 801b2f4:	ec51 0b18 	vmov	r0, r1, d8
 801b2f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b2fc:	f7e5 fab6 	bl	800086c <__aeabi_ddiv>
 801b300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b304:	f008 080f 	and.w	r8, r8, #15
 801b308:	2503      	movs	r5, #3
 801b30a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801b5e0 <_dtoa_r+0x640>
 801b30e:	f1b8 0f00 	cmp.w	r8, #0
 801b312:	d10a      	bne.n	801b32a <_dtoa_r+0x38a>
 801b314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b318:	4632      	mov	r2, r6
 801b31a:	463b      	mov	r3, r7
 801b31c:	f7e5 faa6 	bl	800086c <__aeabi_ddiv>
 801b320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b324:	e02b      	b.n	801b37e <_dtoa_r+0x3de>
 801b326:	2502      	movs	r5, #2
 801b328:	e7ef      	b.n	801b30a <_dtoa_r+0x36a>
 801b32a:	f018 0f01 	tst.w	r8, #1
 801b32e:	d008      	beq.n	801b342 <_dtoa_r+0x3a2>
 801b330:	4630      	mov	r0, r6
 801b332:	4639      	mov	r1, r7
 801b334:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b338:	f7e5 f96e 	bl	8000618 <__aeabi_dmul>
 801b33c:	3501      	adds	r5, #1
 801b33e:	4606      	mov	r6, r0
 801b340:	460f      	mov	r7, r1
 801b342:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b346:	f109 0908 	add.w	r9, r9, #8
 801b34a:	e7e0      	b.n	801b30e <_dtoa_r+0x36e>
 801b34c:	f000 809f 	beq.w	801b48e <_dtoa_r+0x4ee>
 801b350:	f1cb 0600 	rsb	r6, fp, #0
 801b354:	4ba1      	ldr	r3, [pc, #644]	; (801b5dc <_dtoa_r+0x63c>)
 801b356:	4fa2      	ldr	r7, [pc, #648]	; (801b5e0 <_dtoa_r+0x640>)
 801b358:	f006 020f 	and.w	r2, r6, #15
 801b35c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b364:	ec51 0b18 	vmov	r0, r1, d8
 801b368:	f7e5 f956 	bl	8000618 <__aeabi_dmul>
 801b36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b370:	1136      	asrs	r6, r6, #4
 801b372:	2300      	movs	r3, #0
 801b374:	2502      	movs	r5, #2
 801b376:	2e00      	cmp	r6, #0
 801b378:	d17e      	bne.n	801b478 <_dtoa_r+0x4d8>
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d1d0      	bne.n	801b320 <_dtoa_r+0x380>
 801b37e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b380:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b384:	2b00      	cmp	r3, #0
 801b386:	f000 8084 	beq.w	801b492 <_dtoa_r+0x4f2>
 801b38a:	4b96      	ldr	r3, [pc, #600]	; (801b5e4 <_dtoa_r+0x644>)
 801b38c:	2200      	movs	r2, #0
 801b38e:	4640      	mov	r0, r8
 801b390:	4649      	mov	r1, r9
 801b392:	f7e5 fbb3 	bl	8000afc <__aeabi_dcmplt>
 801b396:	2800      	cmp	r0, #0
 801b398:	d07b      	beq.n	801b492 <_dtoa_r+0x4f2>
 801b39a:	9b04      	ldr	r3, [sp, #16]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d078      	beq.n	801b492 <_dtoa_r+0x4f2>
 801b3a0:	9b01      	ldr	r3, [sp, #4]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	dd39      	ble.n	801b41a <_dtoa_r+0x47a>
 801b3a6:	4b90      	ldr	r3, [pc, #576]	; (801b5e8 <_dtoa_r+0x648>)
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	4640      	mov	r0, r8
 801b3ac:	4649      	mov	r1, r9
 801b3ae:	f7e5 f933 	bl	8000618 <__aeabi_dmul>
 801b3b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3b6:	9e01      	ldr	r6, [sp, #4]
 801b3b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 801b3bc:	3501      	adds	r5, #1
 801b3be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	f7e5 f8be 	bl	8000544 <__aeabi_i2d>
 801b3c8:	4642      	mov	r2, r8
 801b3ca:	464b      	mov	r3, r9
 801b3cc:	f7e5 f924 	bl	8000618 <__aeabi_dmul>
 801b3d0:	4b86      	ldr	r3, [pc, #536]	; (801b5ec <_dtoa_r+0x64c>)
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	f7e4 ff6a 	bl	80002ac <__adddf3>
 801b3d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801b3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3e0:	9303      	str	r3, [sp, #12]
 801b3e2:	2e00      	cmp	r6, #0
 801b3e4:	d158      	bne.n	801b498 <_dtoa_r+0x4f8>
 801b3e6:	4b82      	ldr	r3, [pc, #520]	; (801b5f0 <_dtoa_r+0x650>)
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	4640      	mov	r0, r8
 801b3ec:	4649      	mov	r1, r9
 801b3ee:	f7e4 ff5b 	bl	80002a8 <__aeabi_dsub>
 801b3f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b3f6:	4680      	mov	r8, r0
 801b3f8:	4689      	mov	r9, r1
 801b3fa:	f7e5 fb9d 	bl	8000b38 <__aeabi_dcmpgt>
 801b3fe:	2800      	cmp	r0, #0
 801b400:	f040 8296 	bne.w	801b930 <_dtoa_r+0x990>
 801b404:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b408:	4640      	mov	r0, r8
 801b40a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b40e:	4649      	mov	r1, r9
 801b410:	f7e5 fb74 	bl	8000afc <__aeabi_dcmplt>
 801b414:	2800      	cmp	r0, #0
 801b416:	f040 8289 	bne.w	801b92c <_dtoa_r+0x98c>
 801b41a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b420:	2b00      	cmp	r3, #0
 801b422:	f2c0 814e 	blt.w	801b6c2 <_dtoa_r+0x722>
 801b426:	f1bb 0f0e 	cmp.w	fp, #14
 801b42a:	f300 814a 	bgt.w	801b6c2 <_dtoa_r+0x722>
 801b42e:	4b6b      	ldr	r3, [pc, #428]	; (801b5dc <_dtoa_r+0x63c>)
 801b430:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b434:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	f280 80dc 	bge.w	801b5f8 <_dtoa_r+0x658>
 801b440:	9b04      	ldr	r3, [sp, #16]
 801b442:	2b00      	cmp	r3, #0
 801b444:	f300 80d8 	bgt.w	801b5f8 <_dtoa_r+0x658>
 801b448:	f040 826f 	bne.w	801b92a <_dtoa_r+0x98a>
 801b44c:	4b68      	ldr	r3, [pc, #416]	; (801b5f0 <_dtoa_r+0x650>)
 801b44e:	2200      	movs	r2, #0
 801b450:	4640      	mov	r0, r8
 801b452:	4649      	mov	r1, r9
 801b454:	f7e5 f8e0 	bl	8000618 <__aeabi_dmul>
 801b458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b45c:	f7e5 fb62 	bl	8000b24 <__aeabi_dcmpge>
 801b460:	9e04      	ldr	r6, [sp, #16]
 801b462:	4637      	mov	r7, r6
 801b464:	2800      	cmp	r0, #0
 801b466:	f040 8245 	bne.w	801b8f4 <_dtoa_r+0x954>
 801b46a:	9d00      	ldr	r5, [sp, #0]
 801b46c:	2331      	movs	r3, #49	; 0x31
 801b46e:	f805 3b01 	strb.w	r3, [r5], #1
 801b472:	f10b 0b01 	add.w	fp, fp, #1
 801b476:	e241      	b.n	801b8fc <_dtoa_r+0x95c>
 801b478:	07f2      	lsls	r2, r6, #31
 801b47a:	d505      	bpl.n	801b488 <_dtoa_r+0x4e8>
 801b47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b480:	f7e5 f8ca 	bl	8000618 <__aeabi_dmul>
 801b484:	3501      	adds	r5, #1
 801b486:	2301      	movs	r3, #1
 801b488:	1076      	asrs	r6, r6, #1
 801b48a:	3708      	adds	r7, #8
 801b48c:	e773      	b.n	801b376 <_dtoa_r+0x3d6>
 801b48e:	2502      	movs	r5, #2
 801b490:	e775      	b.n	801b37e <_dtoa_r+0x3de>
 801b492:	9e04      	ldr	r6, [sp, #16]
 801b494:	465f      	mov	r7, fp
 801b496:	e792      	b.n	801b3be <_dtoa_r+0x41e>
 801b498:	9900      	ldr	r1, [sp, #0]
 801b49a:	4b50      	ldr	r3, [pc, #320]	; (801b5dc <_dtoa_r+0x63c>)
 801b49c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b4a0:	4431      	add	r1, r6
 801b4a2:	9102      	str	r1, [sp, #8]
 801b4a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4a6:	eeb0 9a47 	vmov.f32	s18, s14
 801b4aa:	eef0 9a67 	vmov.f32	s19, s15
 801b4ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b4b6:	2900      	cmp	r1, #0
 801b4b8:	d044      	beq.n	801b544 <_dtoa_r+0x5a4>
 801b4ba:	494e      	ldr	r1, [pc, #312]	; (801b5f4 <_dtoa_r+0x654>)
 801b4bc:	2000      	movs	r0, #0
 801b4be:	f7e5 f9d5 	bl	800086c <__aeabi_ddiv>
 801b4c2:	ec53 2b19 	vmov	r2, r3, d9
 801b4c6:	f7e4 feef 	bl	80002a8 <__aeabi_dsub>
 801b4ca:	9d00      	ldr	r5, [sp, #0]
 801b4cc:	ec41 0b19 	vmov	d9, r0, r1
 801b4d0:	4649      	mov	r1, r9
 801b4d2:	4640      	mov	r0, r8
 801b4d4:	f7e5 fb50 	bl	8000b78 <__aeabi_d2iz>
 801b4d8:	4606      	mov	r6, r0
 801b4da:	f7e5 f833 	bl	8000544 <__aeabi_i2d>
 801b4de:	4602      	mov	r2, r0
 801b4e0:	460b      	mov	r3, r1
 801b4e2:	4640      	mov	r0, r8
 801b4e4:	4649      	mov	r1, r9
 801b4e6:	f7e4 fedf 	bl	80002a8 <__aeabi_dsub>
 801b4ea:	3630      	adds	r6, #48	; 0x30
 801b4ec:	f805 6b01 	strb.w	r6, [r5], #1
 801b4f0:	ec53 2b19 	vmov	r2, r3, d9
 801b4f4:	4680      	mov	r8, r0
 801b4f6:	4689      	mov	r9, r1
 801b4f8:	f7e5 fb00 	bl	8000afc <__aeabi_dcmplt>
 801b4fc:	2800      	cmp	r0, #0
 801b4fe:	d164      	bne.n	801b5ca <_dtoa_r+0x62a>
 801b500:	4642      	mov	r2, r8
 801b502:	464b      	mov	r3, r9
 801b504:	4937      	ldr	r1, [pc, #220]	; (801b5e4 <_dtoa_r+0x644>)
 801b506:	2000      	movs	r0, #0
 801b508:	f7e4 fece 	bl	80002a8 <__aeabi_dsub>
 801b50c:	ec53 2b19 	vmov	r2, r3, d9
 801b510:	f7e5 faf4 	bl	8000afc <__aeabi_dcmplt>
 801b514:	2800      	cmp	r0, #0
 801b516:	f040 80b6 	bne.w	801b686 <_dtoa_r+0x6e6>
 801b51a:	9b02      	ldr	r3, [sp, #8]
 801b51c:	429d      	cmp	r5, r3
 801b51e:	f43f af7c 	beq.w	801b41a <_dtoa_r+0x47a>
 801b522:	4b31      	ldr	r3, [pc, #196]	; (801b5e8 <_dtoa_r+0x648>)
 801b524:	ec51 0b19 	vmov	r0, r1, d9
 801b528:	2200      	movs	r2, #0
 801b52a:	f7e5 f875 	bl	8000618 <__aeabi_dmul>
 801b52e:	4b2e      	ldr	r3, [pc, #184]	; (801b5e8 <_dtoa_r+0x648>)
 801b530:	ec41 0b19 	vmov	d9, r0, r1
 801b534:	2200      	movs	r2, #0
 801b536:	4640      	mov	r0, r8
 801b538:	4649      	mov	r1, r9
 801b53a:	f7e5 f86d 	bl	8000618 <__aeabi_dmul>
 801b53e:	4680      	mov	r8, r0
 801b540:	4689      	mov	r9, r1
 801b542:	e7c5      	b.n	801b4d0 <_dtoa_r+0x530>
 801b544:	ec51 0b17 	vmov	r0, r1, d7
 801b548:	f7e5 f866 	bl	8000618 <__aeabi_dmul>
 801b54c:	9b02      	ldr	r3, [sp, #8]
 801b54e:	9d00      	ldr	r5, [sp, #0]
 801b550:	930f      	str	r3, [sp, #60]	; 0x3c
 801b552:	ec41 0b19 	vmov	d9, r0, r1
 801b556:	4649      	mov	r1, r9
 801b558:	4640      	mov	r0, r8
 801b55a:	f7e5 fb0d 	bl	8000b78 <__aeabi_d2iz>
 801b55e:	4606      	mov	r6, r0
 801b560:	f7e4 fff0 	bl	8000544 <__aeabi_i2d>
 801b564:	3630      	adds	r6, #48	; 0x30
 801b566:	4602      	mov	r2, r0
 801b568:	460b      	mov	r3, r1
 801b56a:	4640      	mov	r0, r8
 801b56c:	4649      	mov	r1, r9
 801b56e:	f7e4 fe9b 	bl	80002a8 <__aeabi_dsub>
 801b572:	f805 6b01 	strb.w	r6, [r5], #1
 801b576:	9b02      	ldr	r3, [sp, #8]
 801b578:	429d      	cmp	r5, r3
 801b57a:	4680      	mov	r8, r0
 801b57c:	4689      	mov	r9, r1
 801b57e:	f04f 0200 	mov.w	r2, #0
 801b582:	d124      	bne.n	801b5ce <_dtoa_r+0x62e>
 801b584:	4b1b      	ldr	r3, [pc, #108]	; (801b5f4 <_dtoa_r+0x654>)
 801b586:	ec51 0b19 	vmov	r0, r1, d9
 801b58a:	f7e4 fe8f 	bl	80002ac <__adddf3>
 801b58e:	4602      	mov	r2, r0
 801b590:	460b      	mov	r3, r1
 801b592:	4640      	mov	r0, r8
 801b594:	4649      	mov	r1, r9
 801b596:	f7e5 facf 	bl	8000b38 <__aeabi_dcmpgt>
 801b59a:	2800      	cmp	r0, #0
 801b59c:	d173      	bne.n	801b686 <_dtoa_r+0x6e6>
 801b59e:	ec53 2b19 	vmov	r2, r3, d9
 801b5a2:	4914      	ldr	r1, [pc, #80]	; (801b5f4 <_dtoa_r+0x654>)
 801b5a4:	2000      	movs	r0, #0
 801b5a6:	f7e4 fe7f 	bl	80002a8 <__aeabi_dsub>
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	460b      	mov	r3, r1
 801b5ae:	4640      	mov	r0, r8
 801b5b0:	4649      	mov	r1, r9
 801b5b2:	f7e5 faa3 	bl	8000afc <__aeabi_dcmplt>
 801b5b6:	2800      	cmp	r0, #0
 801b5b8:	f43f af2f 	beq.w	801b41a <_dtoa_r+0x47a>
 801b5bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b5be:	1e6b      	subs	r3, r5, #1
 801b5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 801b5c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b5c6:	2b30      	cmp	r3, #48	; 0x30
 801b5c8:	d0f8      	beq.n	801b5bc <_dtoa_r+0x61c>
 801b5ca:	46bb      	mov	fp, r7
 801b5cc:	e04a      	b.n	801b664 <_dtoa_r+0x6c4>
 801b5ce:	4b06      	ldr	r3, [pc, #24]	; (801b5e8 <_dtoa_r+0x648>)
 801b5d0:	f7e5 f822 	bl	8000618 <__aeabi_dmul>
 801b5d4:	4680      	mov	r8, r0
 801b5d6:	4689      	mov	r9, r1
 801b5d8:	e7bd      	b.n	801b556 <_dtoa_r+0x5b6>
 801b5da:	bf00      	nop
 801b5dc:	08020110 	.word	0x08020110
 801b5e0:	080200e8 	.word	0x080200e8
 801b5e4:	3ff00000 	.word	0x3ff00000
 801b5e8:	40240000 	.word	0x40240000
 801b5ec:	401c0000 	.word	0x401c0000
 801b5f0:	40140000 	.word	0x40140000
 801b5f4:	3fe00000 	.word	0x3fe00000
 801b5f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b5fc:	9d00      	ldr	r5, [sp, #0]
 801b5fe:	4642      	mov	r2, r8
 801b600:	464b      	mov	r3, r9
 801b602:	4630      	mov	r0, r6
 801b604:	4639      	mov	r1, r7
 801b606:	f7e5 f931 	bl	800086c <__aeabi_ddiv>
 801b60a:	f7e5 fab5 	bl	8000b78 <__aeabi_d2iz>
 801b60e:	9001      	str	r0, [sp, #4]
 801b610:	f7e4 ff98 	bl	8000544 <__aeabi_i2d>
 801b614:	4642      	mov	r2, r8
 801b616:	464b      	mov	r3, r9
 801b618:	f7e4 fffe 	bl	8000618 <__aeabi_dmul>
 801b61c:	4602      	mov	r2, r0
 801b61e:	460b      	mov	r3, r1
 801b620:	4630      	mov	r0, r6
 801b622:	4639      	mov	r1, r7
 801b624:	f7e4 fe40 	bl	80002a8 <__aeabi_dsub>
 801b628:	9e01      	ldr	r6, [sp, #4]
 801b62a:	9f04      	ldr	r7, [sp, #16]
 801b62c:	3630      	adds	r6, #48	; 0x30
 801b62e:	f805 6b01 	strb.w	r6, [r5], #1
 801b632:	9e00      	ldr	r6, [sp, #0]
 801b634:	1bae      	subs	r6, r5, r6
 801b636:	42b7      	cmp	r7, r6
 801b638:	4602      	mov	r2, r0
 801b63a:	460b      	mov	r3, r1
 801b63c:	d134      	bne.n	801b6a8 <_dtoa_r+0x708>
 801b63e:	f7e4 fe35 	bl	80002ac <__adddf3>
 801b642:	4642      	mov	r2, r8
 801b644:	464b      	mov	r3, r9
 801b646:	4606      	mov	r6, r0
 801b648:	460f      	mov	r7, r1
 801b64a:	f7e5 fa75 	bl	8000b38 <__aeabi_dcmpgt>
 801b64e:	b9c8      	cbnz	r0, 801b684 <_dtoa_r+0x6e4>
 801b650:	4642      	mov	r2, r8
 801b652:	464b      	mov	r3, r9
 801b654:	4630      	mov	r0, r6
 801b656:	4639      	mov	r1, r7
 801b658:	f7e5 fa46 	bl	8000ae8 <__aeabi_dcmpeq>
 801b65c:	b110      	cbz	r0, 801b664 <_dtoa_r+0x6c4>
 801b65e:	9b01      	ldr	r3, [sp, #4]
 801b660:	07db      	lsls	r3, r3, #31
 801b662:	d40f      	bmi.n	801b684 <_dtoa_r+0x6e4>
 801b664:	4651      	mov	r1, sl
 801b666:	4620      	mov	r0, r4
 801b668:	f000 fbcc 	bl	801be04 <_Bfree>
 801b66c:	2300      	movs	r3, #0
 801b66e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b670:	702b      	strb	r3, [r5, #0]
 801b672:	f10b 0301 	add.w	r3, fp, #1
 801b676:	6013      	str	r3, [r2, #0]
 801b678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	f43f ace2 	beq.w	801b044 <_dtoa_r+0xa4>
 801b680:	601d      	str	r5, [r3, #0]
 801b682:	e4df      	b.n	801b044 <_dtoa_r+0xa4>
 801b684:	465f      	mov	r7, fp
 801b686:	462b      	mov	r3, r5
 801b688:	461d      	mov	r5, r3
 801b68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b68e:	2a39      	cmp	r2, #57	; 0x39
 801b690:	d106      	bne.n	801b6a0 <_dtoa_r+0x700>
 801b692:	9a00      	ldr	r2, [sp, #0]
 801b694:	429a      	cmp	r2, r3
 801b696:	d1f7      	bne.n	801b688 <_dtoa_r+0x6e8>
 801b698:	9900      	ldr	r1, [sp, #0]
 801b69a:	2230      	movs	r2, #48	; 0x30
 801b69c:	3701      	adds	r7, #1
 801b69e:	700a      	strb	r2, [r1, #0]
 801b6a0:	781a      	ldrb	r2, [r3, #0]
 801b6a2:	3201      	adds	r2, #1
 801b6a4:	701a      	strb	r2, [r3, #0]
 801b6a6:	e790      	b.n	801b5ca <_dtoa_r+0x62a>
 801b6a8:	4ba3      	ldr	r3, [pc, #652]	; (801b938 <_dtoa_r+0x998>)
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	f7e4 ffb4 	bl	8000618 <__aeabi_dmul>
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	4606      	mov	r6, r0
 801b6b6:	460f      	mov	r7, r1
 801b6b8:	f7e5 fa16 	bl	8000ae8 <__aeabi_dcmpeq>
 801b6bc:	2800      	cmp	r0, #0
 801b6be:	d09e      	beq.n	801b5fe <_dtoa_r+0x65e>
 801b6c0:	e7d0      	b.n	801b664 <_dtoa_r+0x6c4>
 801b6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6c4:	2a00      	cmp	r2, #0
 801b6c6:	f000 80ca 	beq.w	801b85e <_dtoa_r+0x8be>
 801b6ca:	9a07      	ldr	r2, [sp, #28]
 801b6cc:	2a01      	cmp	r2, #1
 801b6ce:	f300 80ad 	bgt.w	801b82c <_dtoa_r+0x88c>
 801b6d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6d4:	2a00      	cmp	r2, #0
 801b6d6:	f000 80a5 	beq.w	801b824 <_dtoa_r+0x884>
 801b6da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b6de:	9e08      	ldr	r6, [sp, #32]
 801b6e0:	9d05      	ldr	r5, [sp, #20]
 801b6e2:	9a05      	ldr	r2, [sp, #20]
 801b6e4:	441a      	add	r2, r3
 801b6e6:	9205      	str	r2, [sp, #20]
 801b6e8:	9a06      	ldr	r2, [sp, #24]
 801b6ea:	2101      	movs	r1, #1
 801b6ec:	441a      	add	r2, r3
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	9206      	str	r2, [sp, #24]
 801b6f2:	f000 fc3d 	bl	801bf70 <__i2b>
 801b6f6:	4607      	mov	r7, r0
 801b6f8:	b165      	cbz	r5, 801b714 <_dtoa_r+0x774>
 801b6fa:	9b06      	ldr	r3, [sp, #24]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	dd09      	ble.n	801b714 <_dtoa_r+0x774>
 801b700:	42ab      	cmp	r3, r5
 801b702:	9a05      	ldr	r2, [sp, #20]
 801b704:	bfa8      	it	ge
 801b706:	462b      	movge	r3, r5
 801b708:	1ad2      	subs	r2, r2, r3
 801b70a:	9205      	str	r2, [sp, #20]
 801b70c:	9a06      	ldr	r2, [sp, #24]
 801b70e:	1aed      	subs	r5, r5, r3
 801b710:	1ad3      	subs	r3, r2, r3
 801b712:	9306      	str	r3, [sp, #24]
 801b714:	9b08      	ldr	r3, [sp, #32]
 801b716:	b1f3      	cbz	r3, 801b756 <_dtoa_r+0x7b6>
 801b718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	f000 80a3 	beq.w	801b866 <_dtoa_r+0x8c6>
 801b720:	2e00      	cmp	r6, #0
 801b722:	dd10      	ble.n	801b746 <_dtoa_r+0x7a6>
 801b724:	4639      	mov	r1, r7
 801b726:	4632      	mov	r2, r6
 801b728:	4620      	mov	r0, r4
 801b72a:	f000 fce1 	bl	801c0f0 <__pow5mult>
 801b72e:	4652      	mov	r2, sl
 801b730:	4601      	mov	r1, r0
 801b732:	4607      	mov	r7, r0
 801b734:	4620      	mov	r0, r4
 801b736:	f000 fc31 	bl	801bf9c <__multiply>
 801b73a:	4651      	mov	r1, sl
 801b73c:	4680      	mov	r8, r0
 801b73e:	4620      	mov	r0, r4
 801b740:	f000 fb60 	bl	801be04 <_Bfree>
 801b744:	46c2      	mov	sl, r8
 801b746:	9b08      	ldr	r3, [sp, #32]
 801b748:	1b9a      	subs	r2, r3, r6
 801b74a:	d004      	beq.n	801b756 <_dtoa_r+0x7b6>
 801b74c:	4651      	mov	r1, sl
 801b74e:	4620      	mov	r0, r4
 801b750:	f000 fcce 	bl	801c0f0 <__pow5mult>
 801b754:	4682      	mov	sl, r0
 801b756:	2101      	movs	r1, #1
 801b758:	4620      	mov	r0, r4
 801b75a:	f000 fc09 	bl	801bf70 <__i2b>
 801b75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b760:	2b00      	cmp	r3, #0
 801b762:	4606      	mov	r6, r0
 801b764:	f340 8081 	ble.w	801b86a <_dtoa_r+0x8ca>
 801b768:	461a      	mov	r2, r3
 801b76a:	4601      	mov	r1, r0
 801b76c:	4620      	mov	r0, r4
 801b76e:	f000 fcbf 	bl	801c0f0 <__pow5mult>
 801b772:	9b07      	ldr	r3, [sp, #28]
 801b774:	2b01      	cmp	r3, #1
 801b776:	4606      	mov	r6, r0
 801b778:	dd7a      	ble.n	801b870 <_dtoa_r+0x8d0>
 801b77a:	f04f 0800 	mov.w	r8, #0
 801b77e:	6933      	ldr	r3, [r6, #16]
 801b780:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b784:	6918      	ldr	r0, [r3, #16]
 801b786:	f000 fba5 	bl	801bed4 <__hi0bits>
 801b78a:	f1c0 0020 	rsb	r0, r0, #32
 801b78e:	9b06      	ldr	r3, [sp, #24]
 801b790:	4418      	add	r0, r3
 801b792:	f010 001f 	ands.w	r0, r0, #31
 801b796:	f000 8094 	beq.w	801b8c2 <_dtoa_r+0x922>
 801b79a:	f1c0 0320 	rsb	r3, r0, #32
 801b79e:	2b04      	cmp	r3, #4
 801b7a0:	f340 8085 	ble.w	801b8ae <_dtoa_r+0x90e>
 801b7a4:	9b05      	ldr	r3, [sp, #20]
 801b7a6:	f1c0 001c 	rsb	r0, r0, #28
 801b7aa:	4403      	add	r3, r0
 801b7ac:	9305      	str	r3, [sp, #20]
 801b7ae:	9b06      	ldr	r3, [sp, #24]
 801b7b0:	4403      	add	r3, r0
 801b7b2:	4405      	add	r5, r0
 801b7b4:	9306      	str	r3, [sp, #24]
 801b7b6:	9b05      	ldr	r3, [sp, #20]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	dd05      	ble.n	801b7c8 <_dtoa_r+0x828>
 801b7bc:	4651      	mov	r1, sl
 801b7be:	461a      	mov	r2, r3
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f000 fcef 	bl	801c1a4 <__lshift>
 801b7c6:	4682      	mov	sl, r0
 801b7c8:	9b06      	ldr	r3, [sp, #24]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	dd05      	ble.n	801b7da <_dtoa_r+0x83a>
 801b7ce:	4631      	mov	r1, r6
 801b7d0:	461a      	mov	r2, r3
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	f000 fce6 	bl	801c1a4 <__lshift>
 801b7d8:	4606      	mov	r6, r0
 801b7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d072      	beq.n	801b8c6 <_dtoa_r+0x926>
 801b7e0:	4631      	mov	r1, r6
 801b7e2:	4650      	mov	r0, sl
 801b7e4:	f000 fd4a 	bl	801c27c <__mcmp>
 801b7e8:	2800      	cmp	r0, #0
 801b7ea:	da6c      	bge.n	801b8c6 <_dtoa_r+0x926>
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	4651      	mov	r1, sl
 801b7f0:	220a      	movs	r2, #10
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	f000 fb28 	bl	801be48 <__multadd>
 801b7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b7fe:	4682      	mov	sl, r0
 801b800:	2b00      	cmp	r3, #0
 801b802:	f000 81b0 	beq.w	801bb66 <_dtoa_r+0xbc6>
 801b806:	2300      	movs	r3, #0
 801b808:	4639      	mov	r1, r7
 801b80a:	220a      	movs	r2, #10
 801b80c:	4620      	mov	r0, r4
 801b80e:	f000 fb1b 	bl	801be48 <__multadd>
 801b812:	9b01      	ldr	r3, [sp, #4]
 801b814:	2b00      	cmp	r3, #0
 801b816:	4607      	mov	r7, r0
 801b818:	f300 8096 	bgt.w	801b948 <_dtoa_r+0x9a8>
 801b81c:	9b07      	ldr	r3, [sp, #28]
 801b81e:	2b02      	cmp	r3, #2
 801b820:	dc59      	bgt.n	801b8d6 <_dtoa_r+0x936>
 801b822:	e091      	b.n	801b948 <_dtoa_r+0x9a8>
 801b824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b82a:	e758      	b.n	801b6de <_dtoa_r+0x73e>
 801b82c:	9b04      	ldr	r3, [sp, #16]
 801b82e:	1e5e      	subs	r6, r3, #1
 801b830:	9b08      	ldr	r3, [sp, #32]
 801b832:	42b3      	cmp	r3, r6
 801b834:	bfbf      	itttt	lt
 801b836:	9b08      	ldrlt	r3, [sp, #32]
 801b838:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801b83a:	9608      	strlt	r6, [sp, #32]
 801b83c:	1af3      	sublt	r3, r6, r3
 801b83e:	bfb4      	ite	lt
 801b840:	18d2      	addlt	r2, r2, r3
 801b842:	1b9e      	subge	r6, r3, r6
 801b844:	9b04      	ldr	r3, [sp, #16]
 801b846:	bfbc      	itt	lt
 801b848:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801b84a:	2600      	movlt	r6, #0
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	bfb7      	itett	lt
 801b850:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801b854:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801b858:	1a9d      	sublt	r5, r3, r2
 801b85a:	2300      	movlt	r3, #0
 801b85c:	e741      	b.n	801b6e2 <_dtoa_r+0x742>
 801b85e:	9e08      	ldr	r6, [sp, #32]
 801b860:	9d05      	ldr	r5, [sp, #20]
 801b862:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b864:	e748      	b.n	801b6f8 <_dtoa_r+0x758>
 801b866:	9a08      	ldr	r2, [sp, #32]
 801b868:	e770      	b.n	801b74c <_dtoa_r+0x7ac>
 801b86a:	9b07      	ldr	r3, [sp, #28]
 801b86c:	2b01      	cmp	r3, #1
 801b86e:	dc19      	bgt.n	801b8a4 <_dtoa_r+0x904>
 801b870:	9b02      	ldr	r3, [sp, #8]
 801b872:	b9bb      	cbnz	r3, 801b8a4 <_dtoa_r+0x904>
 801b874:	9b03      	ldr	r3, [sp, #12]
 801b876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b87a:	b99b      	cbnz	r3, 801b8a4 <_dtoa_r+0x904>
 801b87c:	9b03      	ldr	r3, [sp, #12]
 801b87e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b882:	0d1b      	lsrs	r3, r3, #20
 801b884:	051b      	lsls	r3, r3, #20
 801b886:	b183      	cbz	r3, 801b8aa <_dtoa_r+0x90a>
 801b888:	9b05      	ldr	r3, [sp, #20]
 801b88a:	3301      	adds	r3, #1
 801b88c:	9305      	str	r3, [sp, #20]
 801b88e:	9b06      	ldr	r3, [sp, #24]
 801b890:	3301      	adds	r3, #1
 801b892:	9306      	str	r3, [sp, #24]
 801b894:	f04f 0801 	mov.w	r8, #1
 801b898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	f47f af6f 	bne.w	801b77e <_dtoa_r+0x7de>
 801b8a0:	2001      	movs	r0, #1
 801b8a2:	e774      	b.n	801b78e <_dtoa_r+0x7ee>
 801b8a4:	f04f 0800 	mov.w	r8, #0
 801b8a8:	e7f6      	b.n	801b898 <_dtoa_r+0x8f8>
 801b8aa:	4698      	mov	r8, r3
 801b8ac:	e7f4      	b.n	801b898 <_dtoa_r+0x8f8>
 801b8ae:	d082      	beq.n	801b7b6 <_dtoa_r+0x816>
 801b8b0:	9a05      	ldr	r2, [sp, #20]
 801b8b2:	331c      	adds	r3, #28
 801b8b4:	441a      	add	r2, r3
 801b8b6:	9205      	str	r2, [sp, #20]
 801b8b8:	9a06      	ldr	r2, [sp, #24]
 801b8ba:	441a      	add	r2, r3
 801b8bc:	441d      	add	r5, r3
 801b8be:	9206      	str	r2, [sp, #24]
 801b8c0:	e779      	b.n	801b7b6 <_dtoa_r+0x816>
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	e7f4      	b.n	801b8b0 <_dtoa_r+0x910>
 801b8c6:	9b04      	ldr	r3, [sp, #16]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	dc37      	bgt.n	801b93c <_dtoa_r+0x99c>
 801b8cc:	9b07      	ldr	r3, [sp, #28]
 801b8ce:	2b02      	cmp	r3, #2
 801b8d0:	dd34      	ble.n	801b93c <_dtoa_r+0x99c>
 801b8d2:	9b04      	ldr	r3, [sp, #16]
 801b8d4:	9301      	str	r3, [sp, #4]
 801b8d6:	9b01      	ldr	r3, [sp, #4]
 801b8d8:	b963      	cbnz	r3, 801b8f4 <_dtoa_r+0x954>
 801b8da:	4631      	mov	r1, r6
 801b8dc:	2205      	movs	r2, #5
 801b8de:	4620      	mov	r0, r4
 801b8e0:	f000 fab2 	bl	801be48 <__multadd>
 801b8e4:	4601      	mov	r1, r0
 801b8e6:	4606      	mov	r6, r0
 801b8e8:	4650      	mov	r0, sl
 801b8ea:	f000 fcc7 	bl	801c27c <__mcmp>
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	f73f adbb 	bgt.w	801b46a <_dtoa_r+0x4ca>
 801b8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8f6:	9d00      	ldr	r5, [sp, #0]
 801b8f8:	ea6f 0b03 	mvn.w	fp, r3
 801b8fc:	f04f 0800 	mov.w	r8, #0
 801b900:	4631      	mov	r1, r6
 801b902:	4620      	mov	r0, r4
 801b904:	f000 fa7e 	bl	801be04 <_Bfree>
 801b908:	2f00      	cmp	r7, #0
 801b90a:	f43f aeab 	beq.w	801b664 <_dtoa_r+0x6c4>
 801b90e:	f1b8 0f00 	cmp.w	r8, #0
 801b912:	d005      	beq.n	801b920 <_dtoa_r+0x980>
 801b914:	45b8      	cmp	r8, r7
 801b916:	d003      	beq.n	801b920 <_dtoa_r+0x980>
 801b918:	4641      	mov	r1, r8
 801b91a:	4620      	mov	r0, r4
 801b91c:	f000 fa72 	bl	801be04 <_Bfree>
 801b920:	4639      	mov	r1, r7
 801b922:	4620      	mov	r0, r4
 801b924:	f000 fa6e 	bl	801be04 <_Bfree>
 801b928:	e69c      	b.n	801b664 <_dtoa_r+0x6c4>
 801b92a:	2600      	movs	r6, #0
 801b92c:	4637      	mov	r7, r6
 801b92e:	e7e1      	b.n	801b8f4 <_dtoa_r+0x954>
 801b930:	46bb      	mov	fp, r7
 801b932:	4637      	mov	r7, r6
 801b934:	e599      	b.n	801b46a <_dtoa_r+0x4ca>
 801b936:	bf00      	nop
 801b938:	40240000 	.word	0x40240000
 801b93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b93e:	2b00      	cmp	r3, #0
 801b940:	f000 80c8 	beq.w	801bad4 <_dtoa_r+0xb34>
 801b944:	9b04      	ldr	r3, [sp, #16]
 801b946:	9301      	str	r3, [sp, #4]
 801b948:	2d00      	cmp	r5, #0
 801b94a:	dd05      	ble.n	801b958 <_dtoa_r+0x9b8>
 801b94c:	4639      	mov	r1, r7
 801b94e:	462a      	mov	r2, r5
 801b950:	4620      	mov	r0, r4
 801b952:	f000 fc27 	bl	801c1a4 <__lshift>
 801b956:	4607      	mov	r7, r0
 801b958:	f1b8 0f00 	cmp.w	r8, #0
 801b95c:	d05b      	beq.n	801ba16 <_dtoa_r+0xa76>
 801b95e:	6879      	ldr	r1, [r7, #4]
 801b960:	4620      	mov	r0, r4
 801b962:	f000 fa0f 	bl	801bd84 <_Balloc>
 801b966:	4605      	mov	r5, r0
 801b968:	b928      	cbnz	r0, 801b976 <_dtoa_r+0x9d6>
 801b96a:	4b83      	ldr	r3, [pc, #524]	; (801bb78 <_dtoa_r+0xbd8>)
 801b96c:	4602      	mov	r2, r0
 801b96e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801b972:	f7ff bb2e 	b.w	801afd2 <_dtoa_r+0x32>
 801b976:	693a      	ldr	r2, [r7, #16]
 801b978:	3202      	adds	r2, #2
 801b97a:	0092      	lsls	r2, r2, #2
 801b97c:	f107 010c 	add.w	r1, r7, #12
 801b980:	300c      	adds	r0, #12
 801b982:	f7ff fa58 	bl	801ae36 <memcpy>
 801b986:	2201      	movs	r2, #1
 801b988:	4629      	mov	r1, r5
 801b98a:	4620      	mov	r0, r4
 801b98c:	f000 fc0a 	bl	801c1a4 <__lshift>
 801b990:	9b00      	ldr	r3, [sp, #0]
 801b992:	3301      	adds	r3, #1
 801b994:	9304      	str	r3, [sp, #16]
 801b996:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b99a:	4413      	add	r3, r2
 801b99c:	9308      	str	r3, [sp, #32]
 801b99e:	9b02      	ldr	r3, [sp, #8]
 801b9a0:	f003 0301 	and.w	r3, r3, #1
 801b9a4:	46b8      	mov	r8, r7
 801b9a6:	9306      	str	r3, [sp, #24]
 801b9a8:	4607      	mov	r7, r0
 801b9aa:	9b04      	ldr	r3, [sp, #16]
 801b9ac:	4631      	mov	r1, r6
 801b9ae:	3b01      	subs	r3, #1
 801b9b0:	4650      	mov	r0, sl
 801b9b2:	9301      	str	r3, [sp, #4]
 801b9b4:	f7ff fa6c 	bl	801ae90 <quorem>
 801b9b8:	4641      	mov	r1, r8
 801b9ba:	9002      	str	r0, [sp, #8]
 801b9bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b9c0:	4650      	mov	r0, sl
 801b9c2:	f000 fc5b 	bl	801c27c <__mcmp>
 801b9c6:	463a      	mov	r2, r7
 801b9c8:	9005      	str	r0, [sp, #20]
 801b9ca:	4631      	mov	r1, r6
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	f000 fc71 	bl	801c2b4 <__mdiff>
 801b9d2:	68c2      	ldr	r2, [r0, #12]
 801b9d4:	4605      	mov	r5, r0
 801b9d6:	bb02      	cbnz	r2, 801ba1a <_dtoa_r+0xa7a>
 801b9d8:	4601      	mov	r1, r0
 801b9da:	4650      	mov	r0, sl
 801b9dc:	f000 fc4e 	bl	801c27c <__mcmp>
 801b9e0:	4602      	mov	r2, r0
 801b9e2:	4629      	mov	r1, r5
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	9209      	str	r2, [sp, #36]	; 0x24
 801b9e8:	f000 fa0c 	bl	801be04 <_Bfree>
 801b9ec:	9b07      	ldr	r3, [sp, #28]
 801b9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9f0:	9d04      	ldr	r5, [sp, #16]
 801b9f2:	ea43 0102 	orr.w	r1, r3, r2
 801b9f6:	9b06      	ldr	r3, [sp, #24]
 801b9f8:	4319      	orrs	r1, r3
 801b9fa:	d110      	bne.n	801ba1e <_dtoa_r+0xa7e>
 801b9fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ba00:	d029      	beq.n	801ba56 <_dtoa_r+0xab6>
 801ba02:	9b05      	ldr	r3, [sp, #20]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	dd02      	ble.n	801ba0e <_dtoa_r+0xa6e>
 801ba08:	9b02      	ldr	r3, [sp, #8]
 801ba0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ba0e:	9b01      	ldr	r3, [sp, #4]
 801ba10:	f883 9000 	strb.w	r9, [r3]
 801ba14:	e774      	b.n	801b900 <_dtoa_r+0x960>
 801ba16:	4638      	mov	r0, r7
 801ba18:	e7ba      	b.n	801b990 <_dtoa_r+0x9f0>
 801ba1a:	2201      	movs	r2, #1
 801ba1c:	e7e1      	b.n	801b9e2 <_dtoa_r+0xa42>
 801ba1e:	9b05      	ldr	r3, [sp, #20]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	db04      	blt.n	801ba2e <_dtoa_r+0xa8e>
 801ba24:	9907      	ldr	r1, [sp, #28]
 801ba26:	430b      	orrs	r3, r1
 801ba28:	9906      	ldr	r1, [sp, #24]
 801ba2a:	430b      	orrs	r3, r1
 801ba2c:	d120      	bne.n	801ba70 <_dtoa_r+0xad0>
 801ba2e:	2a00      	cmp	r2, #0
 801ba30:	dded      	ble.n	801ba0e <_dtoa_r+0xa6e>
 801ba32:	4651      	mov	r1, sl
 801ba34:	2201      	movs	r2, #1
 801ba36:	4620      	mov	r0, r4
 801ba38:	f000 fbb4 	bl	801c1a4 <__lshift>
 801ba3c:	4631      	mov	r1, r6
 801ba3e:	4682      	mov	sl, r0
 801ba40:	f000 fc1c 	bl	801c27c <__mcmp>
 801ba44:	2800      	cmp	r0, #0
 801ba46:	dc03      	bgt.n	801ba50 <_dtoa_r+0xab0>
 801ba48:	d1e1      	bne.n	801ba0e <_dtoa_r+0xa6e>
 801ba4a:	f019 0f01 	tst.w	r9, #1
 801ba4e:	d0de      	beq.n	801ba0e <_dtoa_r+0xa6e>
 801ba50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ba54:	d1d8      	bne.n	801ba08 <_dtoa_r+0xa68>
 801ba56:	9a01      	ldr	r2, [sp, #4]
 801ba58:	2339      	movs	r3, #57	; 0x39
 801ba5a:	7013      	strb	r3, [r2, #0]
 801ba5c:	462b      	mov	r3, r5
 801ba5e:	461d      	mov	r5, r3
 801ba60:	3b01      	subs	r3, #1
 801ba62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ba66:	2a39      	cmp	r2, #57	; 0x39
 801ba68:	d06c      	beq.n	801bb44 <_dtoa_r+0xba4>
 801ba6a:	3201      	adds	r2, #1
 801ba6c:	701a      	strb	r2, [r3, #0]
 801ba6e:	e747      	b.n	801b900 <_dtoa_r+0x960>
 801ba70:	2a00      	cmp	r2, #0
 801ba72:	dd07      	ble.n	801ba84 <_dtoa_r+0xae4>
 801ba74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ba78:	d0ed      	beq.n	801ba56 <_dtoa_r+0xab6>
 801ba7a:	9a01      	ldr	r2, [sp, #4]
 801ba7c:	f109 0301 	add.w	r3, r9, #1
 801ba80:	7013      	strb	r3, [r2, #0]
 801ba82:	e73d      	b.n	801b900 <_dtoa_r+0x960>
 801ba84:	9b04      	ldr	r3, [sp, #16]
 801ba86:	9a08      	ldr	r2, [sp, #32]
 801ba88:	f803 9c01 	strb.w	r9, [r3, #-1]
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	d043      	beq.n	801bb18 <_dtoa_r+0xb78>
 801ba90:	4651      	mov	r1, sl
 801ba92:	2300      	movs	r3, #0
 801ba94:	220a      	movs	r2, #10
 801ba96:	4620      	mov	r0, r4
 801ba98:	f000 f9d6 	bl	801be48 <__multadd>
 801ba9c:	45b8      	cmp	r8, r7
 801ba9e:	4682      	mov	sl, r0
 801baa0:	f04f 0300 	mov.w	r3, #0
 801baa4:	f04f 020a 	mov.w	r2, #10
 801baa8:	4641      	mov	r1, r8
 801baaa:	4620      	mov	r0, r4
 801baac:	d107      	bne.n	801babe <_dtoa_r+0xb1e>
 801baae:	f000 f9cb 	bl	801be48 <__multadd>
 801bab2:	4680      	mov	r8, r0
 801bab4:	4607      	mov	r7, r0
 801bab6:	9b04      	ldr	r3, [sp, #16]
 801bab8:	3301      	adds	r3, #1
 801baba:	9304      	str	r3, [sp, #16]
 801babc:	e775      	b.n	801b9aa <_dtoa_r+0xa0a>
 801babe:	f000 f9c3 	bl	801be48 <__multadd>
 801bac2:	4639      	mov	r1, r7
 801bac4:	4680      	mov	r8, r0
 801bac6:	2300      	movs	r3, #0
 801bac8:	220a      	movs	r2, #10
 801baca:	4620      	mov	r0, r4
 801bacc:	f000 f9bc 	bl	801be48 <__multadd>
 801bad0:	4607      	mov	r7, r0
 801bad2:	e7f0      	b.n	801bab6 <_dtoa_r+0xb16>
 801bad4:	9b04      	ldr	r3, [sp, #16]
 801bad6:	9301      	str	r3, [sp, #4]
 801bad8:	9d00      	ldr	r5, [sp, #0]
 801bada:	4631      	mov	r1, r6
 801badc:	4650      	mov	r0, sl
 801bade:	f7ff f9d7 	bl	801ae90 <quorem>
 801bae2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801bae6:	9b00      	ldr	r3, [sp, #0]
 801bae8:	f805 9b01 	strb.w	r9, [r5], #1
 801baec:	1aea      	subs	r2, r5, r3
 801baee:	9b01      	ldr	r3, [sp, #4]
 801baf0:	4293      	cmp	r3, r2
 801baf2:	dd07      	ble.n	801bb04 <_dtoa_r+0xb64>
 801baf4:	4651      	mov	r1, sl
 801baf6:	2300      	movs	r3, #0
 801baf8:	220a      	movs	r2, #10
 801bafa:	4620      	mov	r0, r4
 801bafc:	f000 f9a4 	bl	801be48 <__multadd>
 801bb00:	4682      	mov	sl, r0
 801bb02:	e7ea      	b.n	801bada <_dtoa_r+0xb3a>
 801bb04:	9b01      	ldr	r3, [sp, #4]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	bfc8      	it	gt
 801bb0a:	461d      	movgt	r5, r3
 801bb0c:	9b00      	ldr	r3, [sp, #0]
 801bb0e:	bfd8      	it	le
 801bb10:	2501      	movle	r5, #1
 801bb12:	441d      	add	r5, r3
 801bb14:	f04f 0800 	mov.w	r8, #0
 801bb18:	4651      	mov	r1, sl
 801bb1a:	2201      	movs	r2, #1
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	f000 fb41 	bl	801c1a4 <__lshift>
 801bb22:	4631      	mov	r1, r6
 801bb24:	4682      	mov	sl, r0
 801bb26:	f000 fba9 	bl	801c27c <__mcmp>
 801bb2a:	2800      	cmp	r0, #0
 801bb2c:	dc96      	bgt.n	801ba5c <_dtoa_r+0xabc>
 801bb2e:	d102      	bne.n	801bb36 <_dtoa_r+0xb96>
 801bb30:	f019 0f01 	tst.w	r9, #1
 801bb34:	d192      	bne.n	801ba5c <_dtoa_r+0xabc>
 801bb36:	462b      	mov	r3, r5
 801bb38:	461d      	mov	r5, r3
 801bb3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bb3e:	2a30      	cmp	r2, #48	; 0x30
 801bb40:	d0fa      	beq.n	801bb38 <_dtoa_r+0xb98>
 801bb42:	e6dd      	b.n	801b900 <_dtoa_r+0x960>
 801bb44:	9a00      	ldr	r2, [sp, #0]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d189      	bne.n	801ba5e <_dtoa_r+0xabe>
 801bb4a:	f10b 0b01 	add.w	fp, fp, #1
 801bb4e:	2331      	movs	r3, #49	; 0x31
 801bb50:	e796      	b.n	801ba80 <_dtoa_r+0xae0>
 801bb52:	4b0a      	ldr	r3, [pc, #40]	; (801bb7c <_dtoa_r+0xbdc>)
 801bb54:	f7ff ba99 	b.w	801b08a <_dtoa_r+0xea>
 801bb58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	f47f aa6d 	bne.w	801b03a <_dtoa_r+0x9a>
 801bb60:	4b07      	ldr	r3, [pc, #28]	; (801bb80 <_dtoa_r+0xbe0>)
 801bb62:	f7ff ba92 	b.w	801b08a <_dtoa_r+0xea>
 801bb66:	9b01      	ldr	r3, [sp, #4]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	dcb5      	bgt.n	801bad8 <_dtoa_r+0xb38>
 801bb6c:	9b07      	ldr	r3, [sp, #28]
 801bb6e:	2b02      	cmp	r3, #2
 801bb70:	f73f aeb1 	bgt.w	801b8d6 <_dtoa_r+0x936>
 801bb74:	e7b0      	b.n	801bad8 <_dtoa_r+0xb38>
 801bb76:	bf00      	nop
 801bb78:	0802007d 	.word	0x0802007d
 801bb7c:	0801ffb8 	.word	0x0801ffb8
 801bb80:	08020018 	.word	0x08020018

0801bb84 <_free_r>:
 801bb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb86:	2900      	cmp	r1, #0
 801bb88:	d044      	beq.n	801bc14 <_free_r+0x90>
 801bb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb8e:	9001      	str	r0, [sp, #4]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	f1a1 0404 	sub.w	r4, r1, #4
 801bb96:	bfb8      	it	lt
 801bb98:	18e4      	addlt	r4, r4, r3
 801bb9a:	f000 f8e7 	bl	801bd6c <__malloc_lock>
 801bb9e:	4a1e      	ldr	r2, [pc, #120]	; (801bc18 <_free_r+0x94>)
 801bba0:	9801      	ldr	r0, [sp, #4]
 801bba2:	6813      	ldr	r3, [r2, #0]
 801bba4:	b933      	cbnz	r3, 801bbb4 <_free_r+0x30>
 801bba6:	6063      	str	r3, [r4, #4]
 801bba8:	6014      	str	r4, [r2, #0]
 801bbaa:	b003      	add	sp, #12
 801bbac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bbb0:	f000 b8e2 	b.w	801bd78 <__malloc_unlock>
 801bbb4:	42a3      	cmp	r3, r4
 801bbb6:	d908      	bls.n	801bbca <_free_r+0x46>
 801bbb8:	6825      	ldr	r5, [r4, #0]
 801bbba:	1961      	adds	r1, r4, r5
 801bbbc:	428b      	cmp	r3, r1
 801bbbe:	bf01      	itttt	eq
 801bbc0:	6819      	ldreq	r1, [r3, #0]
 801bbc2:	685b      	ldreq	r3, [r3, #4]
 801bbc4:	1949      	addeq	r1, r1, r5
 801bbc6:	6021      	streq	r1, [r4, #0]
 801bbc8:	e7ed      	b.n	801bba6 <_free_r+0x22>
 801bbca:	461a      	mov	r2, r3
 801bbcc:	685b      	ldr	r3, [r3, #4]
 801bbce:	b10b      	cbz	r3, 801bbd4 <_free_r+0x50>
 801bbd0:	42a3      	cmp	r3, r4
 801bbd2:	d9fa      	bls.n	801bbca <_free_r+0x46>
 801bbd4:	6811      	ldr	r1, [r2, #0]
 801bbd6:	1855      	adds	r5, r2, r1
 801bbd8:	42a5      	cmp	r5, r4
 801bbda:	d10b      	bne.n	801bbf4 <_free_r+0x70>
 801bbdc:	6824      	ldr	r4, [r4, #0]
 801bbde:	4421      	add	r1, r4
 801bbe0:	1854      	adds	r4, r2, r1
 801bbe2:	42a3      	cmp	r3, r4
 801bbe4:	6011      	str	r1, [r2, #0]
 801bbe6:	d1e0      	bne.n	801bbaa <_free_r+0x26>
 801bbe8:	681c      	ldr	r4, [r3, #0]
 801bbea:	685b      	ldr	r3, [r3, #4]
 801bbec:	6053      	str	r3, [r2, #4]
 801bbee:	440c      	add	r4, r1
 801bbf0:	6014      	str	r4, [r2, #0]
 801bbf2:	e7da      	b.n	801bbaa <_free_r+0x26>
 801bbf4:	d902      	bls.n	801bbfc <_free_r+0x78>
 801bbf6:	230c      	movs	r3, #12
 801bbf8:	6003      	str	r3, [r0, #0]
 801bbfa:	e7d6      	b.n	801bbaa <_free_r+0x26>
 801bbfc:	6825      	ldr	r5, [r4, #0]
 801bbfe:	1961      	adds	r1, r4, r5
 801bc00:	428b      	cmp	r3, r1
 801bc02:	bf04      	itt	eq
 801bc04:	6819      	ldreq	r1, [r3, #0]
 801bc06:	685b      	ldreq	r3, [r3, #4]
 801bc08:	6063      	str	r3, [r4, #4]
 801bc0a:	bf04      	itt	eq
 801bc0c:	1949      	addeq	r1, r1, r5
 801bc0e:	6021      	streq	r1, [r4, #0]
 801bc10:	6054      	str	r4, [r2, #4]
 801bc12:	e7ca      	b.n	801bbaa <_free_r+0x26>
 801bc14:	b003      	add	sp, #12
 801bc16:	bd30      	pop	{r4, r5, pc}
 801bc18:	2000f450 	.word	0x2000f450

0801bc1c <malloc>:
 801bc1c:	4b02      	ldr	r3, [pc, #8]	; (801bc28 <malloc+0xc>)
 801bc1e:	4601      	mov	r1, r0
 801bc20:	6818      	ldr	r0, [r3, #0]
 801bc22:	f000 b823 	b.w	801bc6c <_malloc_r>
 801bc26:	bf00      	nop
 801bc28:	2000009c 	.word	0x2000009c

0801bc2c <sbrk_aligned>:
 801bc2c:	b570      	push	{r4, r5, r6, lr}
 801bc2e:	4e0e      	ldr	r6, [pc, #56]	; (801bc68 <sbrk_aligned+0x3c>)
 801bc30:	460c      	mov	r4, r1
 801bc32:	6831      	ldr	r1, [r6, #0]
 801bc34:	4605      	mov	r5, r0
 801bc36:	b911      	cbnz	r1, 801bc3e <sbrk_aligned+0x12>
 801bc38:	f001 f800 	bl	801cc3c <_sbrk_r>
 801bc3c:	6030      	str	r0, [r6, #0]
 801bc3e:	4621      	mov	r1, r4
 801bc40:	4628      	mov	r0, r5
 801bc42:	f000 fffb 	bl	801cc3c <_sbrk_r>
 801bc46:	1c43      	adds	r3, r0, #1
 801bc48:	d00a      	beq.n	801bc60 <sbrk_aligned+0x34>
 801bc4a:	1cc4      	adds	r4, r0, #3
 801bc4c:	f024 0403 	bic.w	r4, r4, #3
 801bc50:	42a0      	cmp	r0, r4
 801bc52:	d007      	beq.n	801bc64 <sbrk_aligned+0x38>
 801bc54:	1a21      	subs	r1, r4, r0
 801bc56:	4628      	mov	r0, r5
 801bc58:	f000 fff0 	bl	801cc3c <_sbrk_r>
 801bc5c:	3001      	adds	r0, #1
 801bc5e:	d101      	bne.n	801bc64 <sbrk_aligned+0x38>
 801bc60:	f04f 34ff 	mov.w	r4, #4294967295
 801bc64:	4620      	mov	r0, r4
 801bc66:	bd70      	pop	{r4, r5, r6, pc}
 801bc68:	2000f454 	.word	0x2000f454

0801bc6c <_malloc_r>:
 801bc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc70:	1ccd      	adds	r5, r1, #3
 801bc72:	f025 0503 	bic.w	r5, r5, #3
 801bc76:	3508      	adds	r5, #8
 801bc78:	2d0c      	cmp	r5, #12
 801bc7a:	bf38      	it	cc
 801bc7c:	250c      	movcc	r5, #12
 801bc7e:	2d00      	cmp	r5, #0
 801bc80:	4607      	mov	r7, r0
 801bc82:	db01      	blt.n	801bc88 <_malloc_r+0x1c>
 801bc84:	42a9      	cmp	r1, r5
 801bc86:	d905      	bls.n	801bc94 <_malloc_r+0x28>
 801bc88:	230c      	movs	r3, #12
 801bc8a:	603b      	str	r3, [r7, #0]
 801bc8c:	2600      	movs	r6, #0
 801bc8e:	4630      	mov	r0, r6
 801bc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bd68 <_malloc_r+0xfc>
 801bc98:	f000 f868 	bl	801bd6c <__malloc_lock>
 801bc9c:	f8d8 3000 	ldr.w	r3, [r8]
 801bca0:	461c      	mov	r4, r3
 801bca2:	bb5c      	cbnz	r4, 801bcfc <_malloc_r+0x90>
 801bca4:	4629      	mov	r1, r5
 801bca6:	4638      	mov	r0, r7
 801bca8:	f7ff ffc0 	bl	801bc2c <sbrk_aligned>
 801bcac:	1c43      	adds	r3, r0, #1
 801bcae:	4604      	mov	r4, r0
 801bcb0:	d155      	bne.n	801bd5e <_malloc_r+0xf2>
 801bcb2:	f8d8 4000 	ldr.w	r4, [r8]
 801bcb6:	4626      	mov	r6, r4
 801bcb8:	2e00      	cmp	r6, #0
 801bcba:	d145      	bne.n	801bd48 <_malloc_r+0xdc>
 801bcbc:	2c00      	cmp	r4, #0
 801bcbe:	d048      	beq.n	801bd52 <_malloc_r+0xe6>
 801bcc0:	6823      	ldr	r3, [r4, #0]
 801bcc2:	4631      	mov	r1, r6
 801bcc4:	4638      	mov	r0, r7
 801bcc6:	eb04 0903 	add.w	r9, r4, r3
 801bcca:	f000 ffb7 	bl	801cc3c <_sbrk_r>
 801bcce:	4581      	cmp	r9, r0
 801bcd0:	d13f      	bne.n	801bd52 <_malloc_r+0xe6>
 801bcd2:	6821      	ldr	r1, [r4, #0]
 801bcd4:	1a6d      	subs	r5, r5, r1
 801bcd6:	4629      	mov	r1, r5
 801bcd8:	4638      	mov	r0, r7
 801bcda:	f7ff ffa7 	bl	801bc2c <sbrk_aligned>
 801bcde:	3001      	adds	r0, #1
 801bce0:	d037      	beq.n	801bd52 <_malloc_r+0xe6>
 801bce2:	6823      	ldr	r3, [r4, #0]
 801bce4:	442b      	add	r3, r5
 801bce6:	6023      	str	r3, [r4, #0]
 801bce8:	f8d8 3000 	ldr.w	r3, [r8]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d038      	beq.n	801bd62 <_malloc_r+0xf6>
 801bcf0:	685a      	ldr	r2, [r3, #4]
 801bcf2:	42a2      	cmp	r2, r4
 801bcf4:	d12b      	bne.n	801bd4e <_malloc_r+0xe2>
 801bcf6:	2200      	movs	r2, #0
 801bcf8:	605a      	str	r2, [r3, #4]
 801bcfa:	e00f      	b.n	801bd1c <_malloc_r+0xb0>
 801bcfc:	6822      	ldr	r2, [r4, #0]
 801bcfe:	1b52      	subs	r2, r2, r5
 801bd00:	d41f      	bmi.n	801bd42 <_malloc_r+0xd6>
 801bd02:	2a0b      	cmp	r2, #11
 801bd04:	d917      	bls.n	801bd36 <_malloc_r+0xca>
 801bd06:	1961      	adds	r1, r4, r5
 801bd08:	42a3      	cmp	r3, r4
 801bd0a:	6025      	str	r5, [r4, #0]
 801bd0c:	bf18      	it	ne
 801bd0e:	6059      	strne	r1, [r3, #4]
 801bd10:	6863      	ldr	r3, [r4, #4]
 801bd12:	bf08      	it	eq
 801bd14:	f8c8 1000 	streq.w	r1, [r8]
 801bd18:	5162      	str	r2, [r4, r5]
 801bd1a:	604b      	str	r3, [r1, #4]
 801bd1c:	4638      	mov	r0, r7
 801bd1e:	f104 060b 	add.w	r6, r4, #11
 801bd22:	f000 f829 	bl	801bd78 <__malloc_unlock>
 801bd26:	f026 0607 	bic.w	r6, r6, #7
 801bd2a:	1d23      	adds	r3, r4, #4
 801bd2c:	1af2      	subs	r2, r6, r3
 801bd2e:	d0ae      	beq.n	801bc8e <_malloc_r+0x22>
 801bd30:	1b9b      	subs	r3, r3, r6
 801bd32:	50a3      	str	r3, [r4, r2]
 801bd34:	e7ab      	b.n	801bc8e <_malloc_r+0x22>
 801bd36:	42a3      	cmp	r3, r4
 801bd38:	6862      	ldr	r2, [r4, #4]
 801bd3a:	d1dd      	bne.n	801bcf8 <_malloc_r+0x8c>
 801bd3c:	f8c8 2000 	str.w	r2, [r8]
 801bd40:	e7ec      	b.n	801bd1c <_malloc_r+0xb0>
 801bd42:	4623      	mov	r3, r4
 801bd44:	6864      	ldr	r4, [r4, #4]
 801bd46:	e7ac      	b.n	801bca2 <_malloc_r+0x36>
 801bd48:	4634      	mov	r4, r6
 801bd4a:	6876      	ldr	r6, [r6, #4]
 801bd4c:	e7b4      	b.n	801bcb8 <_malloc_r+0x4c>
 801bd4e:	4613      	mov	r3, r2
 801bd50:	e7cc      	b.n	801bcec <_malloc_r+0x80>
 801bd52:	230c      	movs	r3, #12
 801bd54:	603b      	str	r3, [r7, #0]
 801bd56:	4638      	mov	r0, r7
 801bd58:	f000 f80e 	bl	801bd78 <__malloc_unlock>
 801bd5c:	e797      	b.n	801bc8e <_malloc_r+0x22>
 801bd5e:	6025      	str	r5, [r4, #0]
 801bd60:	e7dc      	b.n	801bd1c <_malloc_r+0xb0>
 801bd62:	605b      	str	r3, [r3, #4]
 801bd64:	deff      	udf	#255	; 0xff
 801bd66:	bf00      	nop
 801bd68:	2000f450 	.word	0x2000f450

0801bd6c <__malloc_lock>:
 801bd6c:	4801      	ldr	r0, [pc, #4]	; (801bd74 <__malloc_lock+0x8>)
 801bd6e:	f7ff b860 	b.w	801ae32 <__retarget_lock_acquire_recursive>
 801bd72:	bf00      	nop
 801bd74:	2000f44c 	.word	0x2000f44c

0801bd78 <__malloc_unlock>:
 801bd78:	4801      	ldr	r0, [pc, #4]	; (801bd80 <__malloc_unlock+0x8>)
 801bd7a:	f7ff b85b 	b.w	801ae34 <__retarget_lock_release_recursive>
 801bd7e:	bf00      	nop
 801bd80:	2000f44c 	.word	0x2000f44c

0801bd84 <_Balloc>:
 801bd84:	b570      	push	{r4, r5, r6, lr}
 801bd86:	69c6      	ldr	r6, [r0, #28]
 801bd88:	4604      	mov	r4, r0
 801bd8a:	460d      	mov	r5, r1
 801bd8c:	b976      	cbnz	r6, 801bdac <_Balloc+0x28>
 801bd8e:	2010      	movs	r0, #16
 801bd90:	f7ff ff44 	bl	801bc1c <malloc>
 801bd94:	4602      	mov	r2, r0
 801bd96:	61e0      	str	r0, [r4, #28]
 801bd98:	b920      	cbnz	r0, 801bda4 <_Balloc+0x20>
 801bd9a:	4b18      	ldr	r3, [pc, #96]	; (801bdfc <_Balloc+0x78>)
 801bd9c:	4818      	ldr	r0, [pc, #96]	; (801be00 <_Balloc+0x7c>)
 801bd9e:	216b      	movs	r1, #107	; 0x6b
 801bda0:	f7ff f858 	bl	801ae54 <__assert_func>
 801bda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bda8:	6006      	str	r6, [r0, #0]
 801bdaa:	60c6      	str	r6, [r0, #12]
 801bdac:	69e6      	ldr	r6, [r4, #28]
 801bdae:	68f3      	ldr	r3, [r6, #12]
 801bdb0:	b183      	cbz	r3, 801bdd4 <_Balloc+0x50>
 801bdb2:	69e3      	ldr	r3, [r4, #28]
 801bdb4:	68db      	ldr	r3, [r3, #12]
 801bdb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bdba:	b9b8      	cbnz	r0, 801bdec <_Balloc+0x68>
 801bdbc:	2101      	movs	r1, #1
 801bdbe:	fa01 f605 	lsl.w	r6, r1, r5
 801bdc2:	1d72      	adds	r2, r6, #5
 801bdc4:	0092      	lsls	r2, r2, #2
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	f000 ff4f 	bl	801cc6a <_calloc_r>
 801bdcc:	b160      	cbz	r0, 801bde8 <_Balloc+0x64>
 801bdce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bdd2:	e00e      	b.n	801bdf2 <_Balloc+0x6e>
 801bdd4:	2221      	movs	r2, #33	; 0x21
 801bdd6:	2104      	movs	r1, #4
 801bdd8:	4620      	mov	r0, r4
 801bdda:	f000 ff46 	bl	801cc6a <_calloc_r>
 801bdde:	69e3      	ldr	r3, [r4, #28]
 801bde0:	60f0      	str	r0, [r6, #12]
 801bde2:	68db      	ldr	r3, [r3, #12]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d1e4      	bne.n	801bdb2 <_Balloc+0x2e>
 801bde8:	2000      	movs	r0, #0
 801bdea:	bd70      	pop	{r4, r5, r6, pc}
 801bdec:	6802      	ldr	r2, [r0, #0]
 801bdee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bdf8:	e7f7      	b.n	801bdea <_Balloc+0x66>
 801bdfa:	bf00      	nop
 801bdfc:	0801fe38 	.word	0x0801fe38
 801be00:	0802008e 	.word	0x0802008e

0801be04 <_Bfree>:
 801be04:	b570      	push	{r4, r5, r6, lr}
 801be06:	69c6      	ldr	r6, [r0, #28]
 801be08:	4605      	mov	r5, r0
 801be0a:	460c      	mov	r4, r1
 801be0c:	b976      	cbnz	r6, 801be2c <_Bfree+0x28>
 801be0e:	2010      	movs	r0, #16
 801be10:	f7ff ff04 	bl	801bc1c <malloc>
 801be14:	4602      	mov	r2, r0
 801be16:	61e8      	str	r0, [r5, #28]
 801be18:	b920      	cbnz	r0, 801be24 <_Bfree+0x20>
 801be1a:	4b09      	ldr	r3, [pc, #36]	; (801be40 <_Bfree+0x3c>)
 801be1c:	4809      	ldr	r0, [pc, #36]	; (801be44 <_Bfree+0x40>)
 801be1e:	218f      	movs	r1, #143	; 0x8f
 801be20:	f7ff f818 	bl	801ae54 <__assert_func>
 801be24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be28:	6006      	str	r6, [r0, #0]
 801be2a:	60c6      	str	r6, [r0, #12]
 801be2c:	b13c      	cbz	r4, 801be3e <_Bfree+0x3a>
 801be2e:	69eb      	ldr	r3, [r5, #28]
 801be30:	6862      	ldr	r2, [r4, #4]
 801be32:	68db      	ldr	r3, [r3, #12]
 801be34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be38:	6021      	str	r1, [r4, #0]
 801be3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801be3e:	bd70      	pop	{r4, r5, r6, pc}
 801be40:	0801fe38 	.word	0x0801fe38
 801be44:	0802008e 	.word	0x0802008e

0801be48 <__multadd>:
 801be48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be4c:	690d      	ldr	r5, [r1, #16]
 801be4e:	4607      	mov	r7, r0
 801be50:	460c      	mov	r4, r1
 801be52:	461e      	mov	r6, r3
 801be54:	f101 0c14 	add.w	ip, r1, #20
 801be58:	2000      	movs	r0, #0
 801be5a:	f8dc 3000 	ldr.w	r3, [ip]
 801be5e:	b299      	uxth	r1, r3
 801be60:	fb02 6101 	mla	r1, r2, r1, r6
 801be64:	0c1e      	lsrs	r6, r3, #16
 801be66:	0c0b      	lsrs	r3, r1, #16
 801be68:	fb02 3306 	mla	r3, r2, r6, r3
 801be6c:	b289      	uxth	r1, r1
 801be6e:	3001      	adds	r0, #1
 801be70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801be74:	4285      	cmp	r5, r0
 801be76:	f84c 1b04 	str.w	r1, [ip], #4
 801be7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801be7e:	dcec      	bgt.n	801be5a <__multadd+0x12>
 801be80:	b30e      	cbz	r6, 801bec6 <__multadd+0x7e>
 801be82:	68a3      	ldr	r3, [r4, #8]
 801be84:	42ab      	cmp	r3, r5
 801be86:	dc19      	bgt.n	801bebc <__multadd+0x74>
 801be88:	6861      	ldr	r1, [r4, #4]
 801be8a:	4638      	mov	r0, r7
 801be8c:	3101      	adds	r1, #1
 801be8e:	f7ff ff79 	bl	801bd84 <_Balloc>
 801be92:	4680      	mov	r8, r0
 801be94:	b928      	cbnz	r0, 801bea2 <__multadd+0x5a>
 801be96:	4602      	mov	r2, r0
 801be98:	4b0c      	ldr	r3, [pc, #48]	; (801becc <__multadd+0x84>)
 801be9a:	480d      	ldr	r0, [pc, #52]	; (801bed0 <__multadd+0x88>)
 801be9c:	21ba      	movs	r1, #186	; 0xba
 801be9e:	f7fe ffd9 	bl	801ae54 <__assert_func>
 801bea2:	6922      	ldr	r2, [r4, #16]
 801bea4:	3202      	adds	r2, #2
 801bea6:	f104 010c 	add.w	r1, r4, #12
 801beaa:	0092      	lsls	r2, r2, #2
 801beac:	300c      	adds	r0, #12
 801beae:	f7fe ffc2 	bl	801ae36 <memcpy>
 801beb2:	4621      	mov	r1, r4
 801beb4:	4638      	mov	r0, r7
 801beb6:	f7ff ffa5 	bl	801be04 <_Bfree>
 801beba:	4644      	mov	r4, r8
 801bebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bec0:	3501      	adds	r5, #1
 801bec2:	615e      	str	r6, [r3, #20]
 801bec4:	6125      	str	r5, [r4, #16]
 801bec6:	4620      	mov	r0, r4
 801bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801becc:	0802007d 	.word	0x0802007d
 801bed0:	0802008e 	.word	0x0802008e

0801bed4 <__hi0bits>:
 801bed4:	0c03      	lsrs	r3, r0, #16
 801bed6:	041b      	lsls	r3, r3, #16
 801bed8:	b9d3      	cbnz	r3, 801bf10 <__hi0bits+0x3c>
 801beda:	0400      	lsls	r0, r0, #16
 801bedc:	2310      	movs	r3, #16
 801bede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bee2:	bf04      	itt	eq
 801bee4:	0200      	lsleq	r0, r0, #8
 801bee6:	3308      	addeq	r3, #8
 801bee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801beec:	bf04      	itt	eq
 801beee:	0100      	lsleq	r0, r0, #4
 801bef0:	3304      	addeq	r3, #4
 801bef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bef6:	bf04      	itt	eq
 801bef8:	0080      	lsleq	r0, r0, #2
 801befa:	3302      	addeq	r3, #2
 801befc:	2800      	cmp	r0, #0
 801befe:	db05      	blt.n	801bf0c <__hi0bits+0x38>
 801bf00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801bf04:	f103 0301 	add.w	r3, r3, #1
 801bf08:	bf08      	it	eq
 801bf0a:	2320      	moveq	r3, #32
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	4770      	bx	lr
 801bf10:	2300      	movs	r3, #0
 801bf12:	e7e4      	b.n	801bede <__hi0bits+0xa>

0801bf14 <__lo0bits>:
 801bf14:	6803      	ldr	r3, [r0, #0]
 801bf16:	f013 0207 	ands.w	r2, r3, #7
 801bf1a:	d00c      	beq.n	801bf36 <__lo0bits+0x22>
 801bf1c:	07d9      	lsls	r1, r3, #31
 801bf1e:	d422      	bmi.n	801bf66 <__lo0bits+0x52>
 801bf20:	079a      	lsls	r2, r3, #30
 801bf22:	bf49      	itett	mi
 801bf24:	085b      	lsrmi	r3, r3, #1
 801bf26:	089b      	lsrpl	r3, r3, #2
 801bf28:	6003      	strmi	r3, [r0, #0]
 801bf2a:	2201      	movmi	r2, #1
 801bf2c:	bf5c      	itt	pl
 801bf2e:	6003      	strpl	r3, [r0, #0]
 801bf30:	2202      	movpl	r2, #2
 801bf32:	4610      	mov	r0, r2
 801bf34:	4770      	bx	lr
 801bf36:	b299      	uxth	r1, r3
 801bf38:	b909      	cbnz	r1, 801bf3e <__lo0bits+0x2a>
 801bf3a:	0c1b      	lsrs	r3, r3, #16
 801bf3c:	2210      	movs	r2, #16
 801bf3e:	b2d9      	uxtb	r1, r3
 801bf40:	b909      	cbnz	r1, 801bf46 <__lo0bits+0x32>
 801bf42:	3208      	adds	r2, #8
 801bf44:	0a1b      	lsrs	r3, r3, #8
 801bf46:	0719      	lsls	r1, r3, #28
 801bf48:	bf04      	itt	eq
 801bf4a:	091b      	lsreq	r3, r3, #4
 801bf4c:	3204      	addeq	r2, #4
 801bf4e:	0799      	lsls	r1, r3, #30
 801bf50:	bf04      	itt	eq
 801bf52:	089b      	lsreq	r3, r3, #2
 801bf54:	3202      	addeq	r2, #2
 801bf56:	07d9      	lsls	r1, r3, #31
 801bf58:	d403      	bmi.n	801bf62 <__lo0bits+0x4e>
 801bf5a:	085b      	lsrs	r3, r3, #1
 801bf5c:	f102 0201 	add.w	r2, r2, #1
 801bf60:	d003      	beq.n	801bf6a <__lo0bits+0x56>
 801bf62:	6003      	str	r3, [r0, #0]
 801bf64:	e7e5      	b.n	801bf32 <__lo0bits+0x1e>
 801bf66:	2200      	movs	r2, #0
 801bf68:	e7e3      	b.n	801bf32 <__lo0bits+0x1e>
 801bf6a:	2220      	movs	r2, #32
 801bf6c:	e7e1      	b.n	801bf32 <__lo0bits+0x1e>
	...

0801bf70 <__i2b>:
 801bf70:	b510      	push	{r4, lr}
 801bf72:	460c      	mov	r4, r1
 801bf74:	2101      	movs	r1, #1
 801bf76:	f7ff ff05 	bl	801bd84 <_Balloc>
 801bf7a:	4602      	mov	r2, r0
 801bf7c:	b928      	cbnz	r0, 801bf8a <__i2b+0x1a>
 801bf7e:	4b05      	ldr	r3, [pc, #20]	; (801bf94 <__i2b+0x24>)
 801bf80:	4805      	ldr	r0, [pc, #20]	; (801bf98 <__i2b+0x28>)
 801bf82:	f240 1145 	movw	r1, #325	; 0x145
 801bf86:	f7fe ff65 	bl	801ae54 <__assert_func>
 801bf8a:	2301      	movs	r3, #1
 801bf8c:	6144      	str	r4, [r0, #20]
 801bf8e:	6103      	str	r3, [r0, #16]
 801bf90:	bd10      	pop	{r4, pc}
 801bf92:	bf00      	nop
 801bf94:	0802007d 	.word	0x0802007d
 801bf98:	0802008e 	.word	0x0802008e

0801bf9c <__multiply>:
 801bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa0:	4691      	mov	r9, r2
 801bfa2:	690a      	ldr	r2, [r1, #16]
 801bfa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bfa8:	429a      	cmp	r2, r3
 801bfaa:	bfb8      	it	lt
 801bfac:	460b      	movlt	r3, r1
 801bfae:	460c      	mov	r4, r1
 801bfb0:	bfbc      	itt	lt
 801bfb2:	464c      	movlt	r4, r9
 801bfb4:	4699      	movlt	r9, r3
 801bfb6:	6927      	ldr	r7, [r4, #16]
 801bfb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bfbc:	68a3      	ldr	r3, [r4, #8]
 801bfbe:	6861      	ldr	r1, [r4, #4]
 801bfc0:	eb07 060a 	add.w	r6, r7, sl
 801bfc4:	42b3      	cmp	r3, r6
 801bfc6:	b085      	sub	sp, #20
 801bfc8:	bfb8      	it	lt
 801bfca:	3101      	addlt	r1, #1
 801bfcc:	f7ff feda 	bl	801bd84 <_Balloc>
 801bfd0:	b930      	cbnz	r0, 801bfe0 <__multiply+0x44>
 801bfd2:	4602      	mov	r2, r0
 801bfd4:	4b44      	ldr	r3, [pc, #272]	; (801c0e8 <__multiply+0x14c>)
 801bfd6:	4845      	ldr	r0, [pc, #276]	; (801c0ec <__multiply+0x150>)
 801bfd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801bfdc:	f7fe ff3a 	bl	801ae54 <__assert_func>
 801bfe0:	f100 0514 	add.w	r5, r0, #20
 801bfe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bfe8:	462b      	mov	r3, r5
 801bfea:	2200      	movs	r2, #0
 801bfec:	4543      	cmp	r3, r8
 801bfee:	d321      	bcc.n	801c034 <__multiply+0x98>
 801bff0:	f104 0314 	add.w	r3, r4, #20
 801bff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bff8:	f109 0314 	add.w	r3, r9, #20
 801bffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c000:	9202      	str	r2, [sp, #8]
 801c002:	1b3a      	subs	r2, r7, r4
 801c004:	3a15      	subs	r2, #21
 801c006:	f022 0203 	bic.w	r2, r2, #3
 801c00a:	3204      	adds	r2, #4
 801c00c:	f104 0115 	add.w	r1, r4, #21
 801c010:	428f      	cmp	r7, r1
 801c012:	bf38      	it	cc
 801c014:	2204      	movcc	r2, #4
 801c016:	9201      	str	r2, [sp, #4]
 801c018:	9a02      	ldr	r2, [sp, #8]
 801c01a:	9303      	str	r3, [sp, #12]
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d80c      	bhi.n	801c03a <__multiply+0x9e>
 801c020:	2e00      	cmp	r6, #0
 801c022:	dd03      	ble.n	801c02c <__multiply+0x90>
 801c024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d05b      	beq.n	801c0e4 <__multiply+0x148>
 801c02c:	6106      	str	r6, [r0, #16]
 801c02e:	b005      	add	sp, #20
 801c030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c034:	f843 2b04 	str.w	r2, [r3], #4
 801c038:	e7d8      	b.n	801bfec <__multiply+0x50>
 801c03a:	f8b3 a000 	ldrh.w	sl, [r3]
 801c03e:	f1ba 0f00 	cmp.w	sl, #0
 801c042:	d024      	beq.n	801c08e <__multiply+0xf2>
 801c044:	f104 0e14 	add.w	lr, r4, #20
 801c048:	46a9      	mov	r9, r5
 801c04a:	f04f 0c00 	mov.w	ip, #0
 801c04e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c052:	f8d9 1000 	ldr.w	r1, [r9]
 801c056:	fa1f fb82 	uxth.w	fp, r2
 801c05a:	b289      	uxth	r1, r1
 801c05c:	fb0a 110b 	mla	r1, sl, fp, r1
 801c060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c064:	f8d9 2000 	ldr.w	r2, [r9]
 801c068:	4461      	add	r1, ip
 801c06a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c06e:	fb0a c20b 	mla	r2, sl, fp, ip
 801c072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c076:	b289      	uxth	r1, r1
 801c078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c07c:	4577      	cmp	r7, lr
 801c07e:	f849 1b04 	str.w	r1, [r9], #4
 801c082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c086:	d8e2      	bhi.n	801c04e <__multiply+0xb2>
 801c088:	9a01      	ldr	r2, [sp, #4]
 801c08a:	f845 c002 	str.w	ip, [r5, r2]
 801c08e:	9a03      	ldr	r2, [sp, #12]
 801c090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c094:	3304      	adds	r3, #4
 801c096:	f1b9 0f00 	cmp.w	r9, #0
 801c09a:	d021      	beq.n	801c0e0 <__multiply+0x144>
 801c09c:	6829      	ldr	r1, [r5, #0]
 801c09e:	f104 0c14 	add.w	ip, r4, #20
 801c0a2:	46ae      	mov	lr, r5
 801c0a4:	f04f 0a00 	mov.w	sl, #0
 801c0a8:	f8bc b000 	ldrh.w	fp, [ip]
 801c0ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c0b0:	fb09 220b 	mla	r2, r9, fp, r2
 801c0b4:	4452      	add	r2, sl
 801c0b6:	b289      	uxth	r1, r1
 801c0b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c0bc:	f84e 1b04 	str.w	r1, [lr], #4
 801c0c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c0c8:	f8be 1000 	ldrh.w	r1, [lr]
 801c0cc:	fb09 110a 	mla	r1, r9, sl, r1
 801c0d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c0d4:	4567      	cmp	r7, ip
 801c0d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c0da:	d8e5      	bhi.n	801c0a8 <__multiply+0x10c>
 801c0dc:	9a01      	ldr	r2, [sp, #4]
 801c0de:	50a9      	str	r1, [r5, r2]
 801c0e0:	3504      	adds	r5, #4
 801c0e2:	e799      	b.n	801c018 <__multiply+0x7c>
 801c0e4:	3e01      	subs	r6, #1
 801c0e6:	e79b      	b.n	801c020 <__multiply+0x84>
 801c0e8:	0802007d 	.word	0x0802007d
 801c0ec:	0802008e 	.word	0x0802008e

0801c0f0 <__pow5mult>:
 801c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0f4:	4615      	mov	r5, r2
 801c0f6:	f012 0203 	ands.w	r2, r2, #3
 801c0fa:	4606      	mov	r6, r0
 801c0fc:	460f      	mov	r7, r1
 801c0fe:	d007      	beq.n	801c110 <__pow5mult+0x20>
 801c100:	4c25      	ldr	r4, [pc, #148]	; (801c198 <__pow5mult+0xa8>)
 801c102:	3a01      	subs	r2, #1
 801c104:	2300      	movs	r3, #0
 801c106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c10a:	f7ff fe9d 	bl	801be48 <__multadd>
 801c10e:	4607      	mov	r7, r0
 801c110:	10ad      	asrs	r5, r5, #2
 801c112:	d03d      	beq.n	801c190 <__pow5mult+0xa0>
 801c114:	69f4      	ldr	r4, [r6, #28]
 801c116:	b97c      	cbnz	r4, 801c138 <__pow5mult+0x48>
 801c118:	2010      	movs	r0, #16
 801c11a:	f7ff fd7f 	bl	801bc1c <malloc>
 801c11e:	4602      	mov	r2, r0
 801c120:	61f0      	str	r0, [r6, #28]
 801c122:	b928      	cbnz	r0, 801c130 <__pow5mult+0x40>
 801c124:	4b1d      	ldr	r3, [pc, #116]	; (801c19c <__pow5mult+0xac>)
 801c126:	481e      	ldr	r0, [pc, #120]	; (801c1a0 <__pow5mult+0xb0>)
 801c128:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c12c:	f7fe fe92 	bl	801ae54 <__assert_func>
 801c130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c134:	6004      	str	r4, [r0, #0]
 801c136:	60c4      	str	r4, [r0, #12]
 801c138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c140:	b94c      	cbnz	r4, 801c156 <__pow5mult+0x66>
 801c142:	f240 2171 	movw	r1, #625	; 0x271
 801c146:	4630      	mov	r0, r6
 801c148:	f7ff ff12 	bl	801bf70 <__i2b>
 801c14c:	2300      	movs	r3, #0
 801c14e:	f8c8 0008 	str.w	r0, [r8, #8]
 801c152:	4604      	mov	r4, r0
 801c154:	6003      	str	r3, [r0, #0]
 801c156:	f04f 0900 	mov.w	r9, #0
 801c15a:	07eb      	lsls	r3, r5, #31
 801c15c:	d50a      	bpl.n	801c174 <__pow5mult+0x84>
 801c15e:	4639      	mov	r1, r7
 801c160:	4622      	mov	r2, r4
 801c162:	4630      	mov	r0, r6
 801c164:	f7ff ff1a 	bl	801bf9c <__multiply>
 801c168:	4639      	mov	r1, r7
 801c16a:	4680      	mov	r8, r0
 801c16c:	4630      	mov	r0, r6
 801c16e:	f7ff fe49 	bl	801be04 <_Bfree>
 801c172:	4647      	mov	r7, r8
 801c174:	106d      	asrs	r5, r5, #1
 801c176:	d00b      	beq.n	801c190 <__pow5mult+0xa0>
 801c178:	6820      	ldr	r0, [r4, #0]
 801c17a:	b938      	cbnz	r0, 801c18c <__pow5mult+0x9c>
 801c17c:	4622      	mov	r2, r4
 801c17e:	4621      	mov	r1, r4
 801c180:	4630      	mov	r0, r6
 801c182:	f7ff ff0b 	bl	801bf9c <__multiply>
 801c186:	6020      	str	r0, [r4, #0]
 801c188:	f8c0 9000 	str.w	r9, [r0]
 801c18c:	4604      	mov	r4, r0
 801c18e:	e7e4      	b.n	801c15a <__pow5mult+0x6a>
 801c190:	4638      	mov	r0, r7
 801c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c196:	bf00      	nop
 801c198:	080201d8 	.word	0x080201d8
 801c19c:	0801fe38 	.word	0x0801fe38
 801c1a0:	0802008e 	.word	0x0802008e

0801c1a4 <__lshift>:
 801c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1a8:	460c      	mov	r4, r1
 801c1aa:	6849      	ldr	r1, [r1, #4]
 801c1ac:	6923      	ldr	r3, [r4, #16]
 801c1ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c1b2:	68a3      	ldr	r3, [r4, #8]
 801c1b4:	4607      	mov	r7, r0
 801c1b6:	4691      	mov	r9, r2
 801c1b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c1bc:	f108 0601 	add.w	r6, r8, #1
 801c1c0:	42b3      	cmp	r3, r6
 801c1c2:	db0b      	blt.n	801c1dc <__lshift+0x38>
 801c1c4:	4638      	mov	r0, r7
 801c1c6:	f7ff fddd 	bl	801bd84 <_Balloc>
 801c1ca:	4605      	mov	r5, r0
 801c1cc:	b948      	cbnz	r0, 801c1e2 <__lshift+0x3e>
 801c1ce:	4602      	mov	r2, r0
 801c1d0:	4b28      	ldr	r3, [pc, #160]	; (801c274 <__lshift+0xd0>)
 801c1d2:	4829      	ldr	r0, [pc, #164]	; (801c278 <__lshift+0xd4>)
 801c1d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c1d8:	f7fe fe3c 	bl	801ae54 <__assert_func>
 801c1dc:	3101      	adds	r1, #1
 801c1de:	005b      	lsls	r3, r3, #1
 801c1e0:	e7ee      	b.n	801c1c0 <__lshift+0x1c>
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	f100 0114 	add.w	r1, r0, #20
 801c1e8:	f100 0210 	add.w	r2, r0, #16
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	4553      	cmp	r3, sl
 801c1f0:	db33      	blt.n	801c25a <__lshift+0xb6>
 801c1f2:	6920      	ldr	r0, [r4, #16]
 801c1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c1f8:	f104 0314 	add.w	r3, r4, #20
 801c1fc:	f019 091f 	ands.w	r9, r9, #31
 801c200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c208:	d02b      	beq.n	801c262 <__lshift+0xbe>
 801c20a:	f1c9 0e20 	rsb	lr, r9, #32
 801c20e:	468a      	mov	sl, r1
 801c210:	2200      	movs	r2, #0
 801c212:	6818      	ldr	r0, [r3, #0]
 801c214:	fa00 f009 	lsl.w	r0, r0, r9
 801c218:	4310      	orrs	r0, r2
 801c21a:	f84a 0b04 	str.w	r0, [sl], #4
 801c21e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c222:	459c      	cmp	ip, r3
 801c224:	fa22 f20e 	lsr.w	r2, r2, lr
 801c228:	d8f3      	bhi.n	801c212 <__lshift+0x6e>
 801c22a:	ebac 0304 	sub.w	r3, ip, r4
 801c22e:	3b15      	subs	r3, #21
 801c230:	f023 0303 	bic.w	r3, r3, #3
 801c234:	3304      	adds	r3, #4
 801c236:	f104 0015 	add.w	r0, r4, #21
 801c23a:	4584      	cmp	ip, r0
 801c23c:	bf38      	it	cc
 801c23e:	2304      	movcc	r3, #4
 801c240:	50ca      	str	r2, [r1, r3]
 801c242:	b10a      	cbz	r2, 801c248 <__lshift+0xa4>
 801c244:	f108 0602 	add.w	r6, r8, #2
 801c248:	3e01      	subs	r6, #1
 801c24a:	4638      	mov	r0, r7
 801c24c:	612e      	str	r6, [r5, #16]
 801c24e:	4621      	mov	r1, r4
 801c250:	f7ff fdd8 	bl	801be04 <_Bfree>
 801c254:	4628      	mov	r0, r5
 801c256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c25a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c25e:	3301      	adds	r3, #1
 801c260:	e7c5      	b.n	801c1ee <__lshift+0x4a>
 801c262:	3904      	subs	r1, #4
 801c264:	f853 2b04 	ldr.w	r2, [r3], #4
 801c268:	f841 2f04 	str.w	r2, [r1, #4]!
 801c26c:	459c      	cmp	ip, r3
 801c26e:	d8f9      	bhi.n	801c264 <__lshift+0xc0>
 801c270:	e7ea      	b.n	801c248 <__lshift+0xa4>
 801c272:	bf00      	nop
 801c274:	0802007d 	.word	0x0802007d
 801c278:	0802008e 	.word	0x0802008e

0801c27c <__mcmp>:
 801c27c:	b530      	push	{r4, r5, lr}
 801c27e:	6902      	ldr	r2, [r0, #16]
 801c280:	690c      	ldr	r4, [r1, #16]
 801c282:	1b12      	subs	r2, r2, r4
 801c284:	d10e      	bne.n	801c2a4 <__mcmp+0x28>
 801c286:	f100 0314 	add.w	r3, r0, #20
 801c28a:	3114      	adds	r1, #20
 801c28c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c29c:	42a5      	cmp	r5, r4
 801c29e:	d003      	beq.n	801c2a8 <__mcmp+0x2c>
 801c2a0:	d305      	bcc.n	801c2ae <__mcmp+0x32>
 801c2a2:	2201      	movs	r2, #1
 801c2a4:	4610      	mov	r0, r2
 801c2a6:	bd30      	pop	{r4, r5, pc}
 801c2a8:	4283      	cmp	r3, r0
 801c2aa:	d3f3      	bcc.n	801c294 <__mcmp+0x18>
 801c2ac:	e7fa      	b.n	801c2a4 <__mcmp+0x28>
 801c2ae:	f04f 32ff 	mov.w	r2, #4294967295
 801c2b2:	e7f7      	b.n	801c2a4 <__mcmp+0x28>

0801c2b4 <__mdiff>:
 801c2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2b8:	460c      	mov	r4, r1
 801c2ba:	4606      	mov	r6, r0
 801c2bc:	4611      	mov	r1, r2
 801c2be:	4620      	mov	r0, r4
 801c2c0:	4690      	mov	r8, r2
 801c2c2:	f7ff ffdb 	bl	801c27c <__mcmp>
 801c2c6:	1e05      	subs	r5, r0, #0
 801c2c8:	d110      	bne.n	801c2ec <__mdiff+0x38>
 801c2ca:	4629      	mov	r1, r5
 801c2cc:	4630      	mov	r0, r6
 801c2ce:	f7ff fd59 	bl	801bd84 <_Balloc>
 801c2d2:	b930      	cbnz	r0, 801c2e2 <__mdiff+0x2e>
 801c2d4:	4b3a      	ldr	r3, [pc, #232]	; (801c3c0 <__mdiff+0x10c>)
 801c2d6:	4602      	mov	r2, r0
 801c2d8:	f240 2137 	movw	r1, #567	; 0x237
 801c2dc:	4839      	ldr	r0, [pc, #228]	; (801c3c4 <__mdiff+0x110>)
 801c2de:	f7fe fdb9 	bl	801ae54 <__assert_func>
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2ec:	bfa4      	itt	ge
 801c2ee:	4643      	movge	r3, r8
 801c2f0:	46a0      	movge	r8, r4
 801c2f2:	4630      	mov	r0, r6
 801c2f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c2f8:	bfa6      	itte	ge
 801c2fa:	461c      	movge	r4, r3
 801c2fc:	2500      	movge	r5, #0
 801c2fe:	2501      	movlt	r5, #1
 801c300:	f7ff fd40 	bl	801bd84 <_Balloc>
 801c304:	b920      	cbnz	r0, 801c310 <__mdiff+0x5c>
 801c306:	4b2e      	ldr	r3, [pc, #184]	; (801c3c0 <__mdiff+0x10c>)
 801c308:	4602      	mov	r2, r0
 801c30a:	f240 2145 	movw	r1, #581	; 0x245
 801c30e:	e7e5      	b.n	801c2dc <__mdiff+0x28>
 801c310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c314:	6926      	ldr	r6, [r4, #16]
 801c316:	60c5      	str	r5, [r0, #12]
 801c318:	f104 0914 	add.w	r9, r4, #20
 801c31c:	f108 0514 	add.w	r5, r8, #20
 801c320:	f100 0e14 	add.w	lr, r0, #20
 801c324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c32c:	f108 0210 	add.w	r2, r8, #16
 801c330:	46f2      	mov	sl, lr
 801c332:	2100      	movs	r1, #0
 801c334:	f859 3b04 	ldr.w	r3, [r9], #4
 801c338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c33c:	fa11 f88b 	uxtah	r8, r1, fp
 801c340:	b299      	uxth	r1, r3
 801c342:	0c1b      	lsrs	r3, r3, #16
 801c344:	eba8 0801 	sub.w	r8, r8, r1
 801c348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c34c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c350:	fa1f f888 	uxth.w	r8, r8
 801c354:	1419      	asrs	r1, r3, #16
 801c356:	454e      	cmp	r6, r9
 801c358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c35c:	f84a 3b04 	str.w	r3, [sl], #4
 801c360:	d8e8      	bhi.n	801c334 <__mdiff+0x80>
 801c362:	1b33      	subs	r3, r6, r4
 801c364:	3b15      	subs	r3, #21
 801c366:	f023 0303 	bic.w	r3, r3, #3
 801c36a:	3304      	adds	r3, #4
 801c36c:	3415      	adds	r4, #21
 801c36e:	42a6      	cmp	r6, r4
 801c370:	bf38      	it	cc
 801c372:	2304      	movcc	r3, #4
 801c374:	441d      	add	r5, r3
 801c376:	4473      	add	r3, lr
 801c378:	469e      	mov	lr, r3
 801c37a:	462e      	mov	r6, r5
 801c37c:	4566      	cmp	r6, ip
 801c37e:	d30e      	bcc.n	801c39e <__mdiff+0xea>
 801c380:	f10c 0203 	add.w	r2, ip, #3
 801c384:	1b52      	subs	r2, r2, r5
 801c386:	f022 0203 	bic.w	r2, r2, #3
 801c38a:	3d03      	subs	r5, #3
 801c38c:	45ac      	cmp	ip, r5
 801c38e:	bf38      	it	cc
 801c390:	2200      	movcc	r2, #0
 801c392:	4413      	add	r3, r2
 801c394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c398:	b17a      	cbz	r2, 801c3ba <__mdiff+0x106>
 801c39a:	6107      	str	r7, [r0, #16]
 801c39c:	e7a4      	b.n	801c2e8 <__mdiff+0x34>
 801c39e:	f856 8b04 	ldr.w	r8, [r6], #4
 801c3a2:	fa11 f288 	uxtah	r2, r1, r8
 801c3a6:	1414      	asrs	r4, r2, #16
 801c3a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c3ac:	b292      	uxth	r2, r2
 801c3ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c3b2:	f84e 2b04 	str.w	r2, [lr], #4
 801c3b6:	1421      	asrs	r1, r4, #16
 801c3b8:	e7e0      	b.n	801c37c <__mdiff+0xc8>
 801c3ba:	3f01      	subs	r7, #1
 801c3bc:	e7ea      	b.n	801c394 <__mdiff+0xe0>
 801c3be:	bf00      	nop
 801c3c0:	0802007d 	.word	0x0802007d
 801c3c4:	0802008e 	.word	0x0802008e

0801c3c8 <__d2b>:
 801c3c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c3cc:	460f      	mov	r7, r1
 801c3ce:	2101      	movs	r1, #1
 801c3d0:	ec59 8b10 	vmov	r8, r9, d0
 801c3d4:	4616      	mov	r6, r2
 801c3d6:	f7ff fcd5 	bl	801bd84 <_Balloc>
 801c3da:	4604      	mov	r4, r0
 801c3dc:	b930      	cbnz	r0, 801c3ec <__d2b+0x24>
 801c3de:	4602      	mov	r2, r0
 801c3e0:	4b24      	ldr	r3, [pc, #144]	; (801c474 <__d2b+0xac>)
 801c3e2:	4825      	ldr	r0, [pc, #148]	; (801c478 <__d2b+0xb0>)
 801c3e4:	f240 310f 	movw	r1, #783	; 0x30f
 801c3e8:	f7fe fd34 	bl	801ae54 <__assert_func>
 801c3ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c3f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c3f4:	bb2d      	cbnz	r5, 801c442 <__d2b+0x7a>
 801c3f6:	9301      	str	r3, [sp, #4]
 801c3f8:	f1b8 0300 	subs.w	r3, r8, #0
 801c3fc:	d026      	beq.n	801c44c <__d2b+0x84>
 801c3fe:	4668      	mov	r0, sp
 801c400:	9300      	str	r3, [sp, #0]
 801c402:	f7ff fd87 	bl	801bf14 <__lo0bits>
 801c406:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c40a:	b1e8      	cbz	r0, 801c448 <__d2b+0x80>
 801c40c:	f1c0 0320 	rsb	r3, r0, #32
 801c410:	fa02 f303 	lsl.w	r3, r2, r3
 801c414:	430b      	orrs	r3, r1
 801c416:	40c2      	lsrs	r2, r0
 801c418:	6163      	str	r3, [r4, #20]
 801c41a:	9201      	str	r2, [sp, #4]
 801c41c:	9b01      	ldr	r3, [sp, #4]
 801c41e:	61a3      	str	r3, [r4, #24]
 801c420:	2b00      	cmp	r3, #0
 801c422:	bf14      	ite	ne
 801c424:	2202      	movne	r2, #2
 801c426:	2201      	moveq	r2, #1
 801c428:	6122      	str	r2, [r4, #16]
 801c42a:	b1bd      	cbz	r5, 801c45c <__d2b+0x94>
 801c42c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c430:	4405      	add	r5, r0
 801c432:	603d      	str	r5, [r7, #0]
 801c434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c438:	6030      	str	r0, [r6, #0]
 801c43a:	4620      	mov	r0, r4
 801c43c:	b003      	add	sp, #12
 801c43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c446:	e7d6      	b.n	801c3f6 <__d2b+0x2e>
 801c448:	6161      	str	r1, [r4, #20]
 801c44a:	e7e7      	b.n	801c41c <__d2b+0x54>
 801c44c:	a801      	add	r0, sp, #4
 801c44e:	f7ff fd61 	bl	801bf14 <__lo0bits>
 801c452:	9b01      	ldr	r3, [sp, #4]
 801c454:	6163      	str	r3, [r4, #20]
 801c456:	3020      	adds	r0, #32
 801c458:	2201      	movs	r2, #1
 801c45a:	e7e5      	b.n	801c428 <__d2b+0x60>
 801c45c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c464:	6038      	str	r0, [r7, #0]
 801c466:	6918      	ldr	r0, [r3, #16]
 801c468:	f7ff fd34 	bl	801bed4 <__hi0bits>
 801c46c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c470:	e7e2      	b.n	801c438 <__d2b+0x70>
 801c472:	bf00      	nop
 801c474:	0802007d 	.word	0x0802007d
 801c478:	0802008e 	.word	0x0802008e

0801c47c <__ssputs_r>:
 801c47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c480:	688e      	ldr	r6, [r1, #8]
 801c482:	461f      	mov	r7, r3
 801c484:	42be      	cmp	r6, r7
 801c486:	680b      	ldr	r3, [r1, #0]
 801c488:	4682      	mov	sl, r0
 801c48a:	460c      	mov	r4, r1
 801c48c:	4690      	mov	r8, r2
 801c48e:	d82c      	bhi.n	801c4ea <__ssputs_r+0x6e>
 801c490:	898a      	ldrh	r2, [r1, #12]
 801c492:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c496:	d026      	beq.n	801c4e6 <__ssputs_r+0x6a>
 801c498:	6965      	ldr	r5, [r4, #20]
 801c49a:	6909      	ldr	r1, [r1, #16]
 801c49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c4a0:	eba3 0901 	sub.w	r9, r3, r1
 801c4a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c4a8:	1c7b      	adds	r3, r7, #1
 801c4aa:	444b      	add	r3, r9
 801c4ac:	106d      	asrs	r5, r5, #1
 801c4ae:	429d      	cmp	r5, r3
 801c4b0:	bf38      	it	cc
 801c4b2:	461d      	movcc	r5, r3
 801c4b4:	0553      	lsls	r3, r2, #21
 801c4b6:	d527      	bpl.n	801c508 <__ssputs_r+0x8c>
 801c4b8:	4629      	mov	r1, r5
 801c4ba:	f7ff fbd7 	bl	801bc6c <_malloc_r>
 801c4be:	4606      	mov	r6, r0
 801c4c0:	b360      	cbz	r0, 801c51c <__ssputs_r+0xa0>
 801c4c2:	6921      	ldr	r1, [r4, #16]
 801c4c4:	464a      	mov	r2, r9
 801c4c6:	f7fe fcb6 	bl	801ae36 <memcpy>
 801c4ca:	89a3      	ldrh	r3, [r4, #12]
 801c4cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c4d4:	81a3      	strh	r3, [r4, #12]
 801c4d6:	6126      	str	r6, [r4, #16]
 801c4d8:	6165      	str	r5, [r4, #20]
 801c4da:	444e      	add	r6, r9
 801c4dc:	eba5 0509 	sub.w	r5, r5, r9
 801c4e0:	6026      	str	r6, [r4, #0]
 801c4e2:	60a5      	str	r5, [r4, #8]
 801c4e4:	463e      	mov	r6, r7
 801c4e6:	42be      	cmp	r6, r7
 801c4e8:	d900      	bls.n	801c4ec <__ssputs_r+0x70>
 801c4ea:	463e      	mov	r6, r7
 801c4ec:	6820      	ldr	r0, [r4, #0]
 801c4ee:	4632      	mov	r2, r6
 801c4f0:	4641      	mov	r1, r8
 801c4f2:	f7fe fc07 	bl	801ad04 <memmove>
 801c4f6:	68a3      	ldr	r3, [r4, #8]
 801c4f8:	1b9b      	subs	r3, r3, r6
 801c4fa:	60a3      	str	r3, [r4, #8]
 801c4fc:	6823      	ldr	r3, [r4, #0]
 801c4fe:	4433      	add	r3, r6
 801c500:	6023      	str	r3, [r4, #0]
 801c502:	2000      	movs	r0, #0
 801c504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c508:	462a      	mov	r2, r5
 801c50a:	f000 fbd6 	bl	801ccba <_realloc_r>
 801c50e:	4606      	mov	r6, r0
 801c510:	2800      	cmp	r0, #0
 801c512:	d1e0      	bne.n	801c4d6 <__ssputs_r+0x5a>
 801c514:	6921      	ldr	r1, [r4, #16]
 801c516:	4650      	mov	r0, sl
 801c518:	f7ff fb34 	bl	801bb84 <_free_r>
 801c51c:	230c      	movs	r3, #12
 801c51e:	f8ca 3000 	str.w	r3, [sl]
 801c522:	89a3      	ldrh	r3, [r4, #12]
 801c524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c528:	81a3      	strh	r3, [r4, #12]
 801c52a:	f04f 30ff 	mov.w	r0, #4294967295
 801c52e:	e7e9      	b.n	801c504 <__ssputs_r+0x88>

0801c530 <_svfiprintf_r>:
 801c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c534:	4698      	mov	r8, r3
 801c536:	898b      	ldrh	r3, [r1, #12]
 801c538:	061b      	lsls	r3, r3, #24
 801c53a:	b09d      	sub	sp, #116	; 0x74
 801c53c:	4607      	mov	r7, r0
 801c53e:	460d      	mov	r5, r1
 801c540:	4614      	mov	r4, r2
 801c542:	d50e      	bpl.n	801c562 <_svfiprintf_r+0x32>
 801c544:	690b      	ldr	r3, [r1, #16]
 801c546:	b963      	cbnz	r3, 801c562 <_svfiprintf_r+0x32>
 801c548:	2140      	movs	r1, #64	; 0x40
 801c54a:	f7ff fb8f 	bl	801bc6c <_malloc_r>
 801c54e:	6028      	str	r0, [r5, #0]
 801c550:	6128      	str	r0, [r5, #16]
 801c552:	b920      	cbnz	r0, 801c55e <_svfiprintf_r+0x2e>
 801c554:	230c      	movs	r3, #12
 801c556:	603b      	str	r3, [r7, #0]
 801c558:	f04f 30ff 	mov.w	r0, #4294967295
 801c55c:	e0d0      	b.n	801c700 <_svfiprintf_r+0x1d0>
 801c55e:	2340      	movs	r3, #64	; 0x40
 801c560:	616b      	str	r3, [r5, #20]
 801c562:	2300      	movs	r3, #0
 801c564:	9309      	str	r3, [sp, #36]	; 0x24
 801c566:	2320      	movs	r3, #32
 801c568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c56c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c570:	2330      	movs	r3, #48	; 0x30
 801c572:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801c718 <_svfiprintf_r+0x1e8>
 801c576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c57a:	f04f 0901 	mov.w	r9, #1
 801c57e:	4623      	mov	r3, r4
 801c580:	469a      	mov	sl, r3
 801c582:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c586:	b10a      	cbz	r2, 801c58c <_svfiprintf_r+0x5c>
 801c588:	2a25      	cmp	r2, #37	; 0x25
 801c58a:	d1f9      	bne.n	801c580 <_svfiprintf_r+0x50>
 801c58c:	ebba 0b04 	subs.w	fp, sl, r4
 801c590:	d00b      	beq.n	801c5aa <_svfiprintf_r+0x7a>
 801c592:	465b      	mov	r3, fp
 801c594:	4622      	mov	r2, r4
 801c596:	4629      	mov	r1, r5
 801c598:	4638      	mov	r0, r7
 801c59a:	f7ff ff6f 	bl	801c47c <__ssputs_r>
 801c59e:	3001      	adds	r0, #1
 801c5a0:	f000 80a9 	beq.w	801c6f6 <_svfiprintf_r+0x1c6>
 801c5a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c5a6:	445a      	add	r2, fp
 801c5a8:	9209      	str	r2, [sp, #36]	; 0x24
 801c5aa:	f89a 3000 	ldrb.w	r3, [sl]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	f000 80a1 	beq.w	801c6f6 <_svfiprintf_r+0x1c6>
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	f04f 32ff 	mov.w	r2, #4294967295
 801c5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c5be:	f10a 0a01 	add.w	sl, sl, #1
 801c5c2:	9304      	str	r3, [sp, #16]
 801c5c4:	9307      	str	r3, [sp, #28]
 801c5c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c5ca:	931a      	str	r3, [sp, #104]	; 0x68
 801c5cc:	4654      	mov	r4, sl
 801c5ce:	2205      	movs	r2, #5
 801c5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5d4:	4850      	ldr	r0, [pc, #320]	; (801c718 <_svfiprintf_r+0x1e8>)
 801c5d6:	f7e3 fe0b 	bl	80001f0 <memchr>
 801c5da:	9a04      	ldr	r2, [sp, #16]
 801c5dc:	b9d8      	cbnz	r0, 801c616 <_svfiprintf_r+0xe6>
 801c5de:	06d0      	lsls	r0, r2, #27
 801c5e0:	bf44      	itt	mi
 801c5e2:	2320      	movmi	r3, #32
 801c5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c5e8:	0711      	lsls	r1, r2, #28
 801c5ea:	bf44      	itt	mi
 801c5ec:	232b      	movmi	r3, #43	; 0x2b
 801c5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c5f2:	f89a 3000 	ldrb.w	r3, [sl]
 801c5f6:	2b2a      	cmp	r3, #42	; 0x2a
 801c5f8:	d015      	beq.n	801c626 <_svfiprintf_r+0xf6>
 801c5fa:	9a07      	ldr	r2, [sp, #28]
 801c5fc:	4654      	mov	r4, sl
 801c5fe:	2000      	movs	r0, #0
 801c600:	f04f 0c0a 	mov.w	ip, #10
 801c604:	4621      	mov	r1, r4
 801c606:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c60a:	3b30      	subs	r3, #48	; 0x30
 801c60c:	2b09      	cmp	r3, #9
 801c60e:	d94d      	bls.n	801c6ac <_svfiprintf_r+0x17c>
 801c610:	b1b0      	cbz	r0, 801c640 <_svfiprintf_r+0x110>
 801c612:	9207      	str	r2, [sp, #28]
 801c614:	e014      	b.n	801c640 <_svfiprintf_r+0x110>
 801c616:	eba0 0308 	sub.w	r3, r0, r8
 801c61a:	fa09 f303 	lsl.w	r3, r9, r3
 801c61e:	4313      	orrs	r3, r2
 801c620:	9304      	str	r3, [sp, #16]
 801c622:	46a2      	mov	sl, r4
 801c624:	e7d2      	b.n	801c5cc <_svfiprintf_r+0x9c>
 801c626:	9b03      	ldr	r3, [sp, #12]
 801c628:	1d19      	adds	r1, r3, #4
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	9103      	str	r1, [sp, #12]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	bfbb      	ittet	lt
 801c632:	425b      	neglt	r3, r3
 801c634:	f042 0202 	orrlt.w	r2, r2, #2
 801c638:	9307      	strge	r3, [sp, #28]
 801c63a:	9307      	strlt	r3, [sp, #28]
 801c63c:	bfb8      	it	lt
 801c63e:	9204      	strlt	r2, [sp, #16]
 801c640:	7823      	ldrb	r3, [r4, #0]
 801c642:	2b2e      	cmp	r3, #46	; 0x2e
 801c644:	d10c      	bne.n	801c660 <_svfiprintf_r+0x130>
 801c646:	7863      	ldrb	r3, [r4, #1]
 801c648:	2b2a      	cmp	r3, #42	; 0x2a
 801c64a:	d134      	bne.n	801c6b6 <_svfiprintf_r+0x186>
 801c64c:	9b03      	ldr	r3, [sp, #12]
 801c64e:	1d1a      	adds	r2, r3, #4
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	9203      	str	r2, [sp, #12]
 801c654:	2b00      	cmp	r3, #0
 801c656:	bfb8      	it	lt
 801c658:	f04f 33ff 	movlt.w	r3, #4294967295
 801c65c:	3402      	adds	r4, #2
 801c65e:	9305      	str	r3, [sp, #20]
 801c660:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c728 <_svfiprintf_r+0x1f8>
 801c664:	7821      	ldrb	r1, [r4, #0]
 801c666:	2203      	movs	r2, #3
 801c668:	4650      	mov	r0, sl
 801c66a:	f7e3 fdc1 	bl	80001f0 <memchr>
 801c66e:	b138      	cbz	r0, 801c680 <_svfiprintf_r+0x150>
 801c670:	9b04      	ldr	r3, [sp, #16]
 801c672:	eba0 000a 	sub.w	r0, r0, sl
 801c676:	2240      	movs	r2, #64	; 0x40
 801c678:	4082      	lsls	r2, r0
 801c67a:	4313      	orrs	r3, r2
 801c67c:	3401      	adds	r4, #1
 801c67e:	9304      	str	r3, [sp, #16]
 801c680:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c684:	4825      	ldr	r0, [pc, #148]	; (801c71c <_svfiprintf_r+0x1ec>)
 801c686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c68a:	2206      	movs	r2, #6
 801c68c:	f7e3 fdb0 	bl	80001f0 <memchr>
 801c690:	2800      	cmp	r0, #0
 801c692:	d038      	beq.n	801c706 <_svfiprintf_r+0x1d6>
 801c694:	4b22      	ldr	r3, [pc, #136]	; (801c720 <_svfiprintf_r+0x1f0>)
 801c696:	bb1b      	cbnz	r3, 801c6e0 <_svfiprintf_r+0x1b0>
 801c698:	9b03      	ldr	r3, [sp, #12]
 801c69a:	3307      	adds	r3, #7
 801c69c:	f023 0307 	bic.w	r3, r3, #7
 801c6a0:	3308      	adds	r3, #8
 801c6a2:	9303      	str	r3, [sp, #12]
 801c6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6a6:	4433      	add	r3, r6
 801c6a8:	9309      	str	r3, [sp, #36]	; 0x24
 801c6aa:	e768      	b.n	801c57e <_svfiprintf_r+0x4e>
 801c6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801c6b0:	460c      	mov	r4, r1
 801c6b2:	2001      	movs	r0, #1
 801c6b4:	e7a6      	b.n	801c604 <_svfiprintf_r+0xd4>
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	3401      	adds	r4, #1
 801c6ba:	9305      	str	r3, [sp, #20]
 801c6bc:	4619      	mov	r1, r3
 801c6be:	f04f 0c0a 	mov.w	ip, #10
 801c6c2:	4620      	mov	r0, r4
 801c6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6c8:	3a30      	subs	r2, #48	; 0x30
 801c6ca:	2a09      	cmp	r2, #9
 801c6cc:	d903      	bls.n	801c6d6 <_svfiprintf_r+0x1a6>
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d0c6      	beq.n	801c660 <_svfiprintf_r+0x130>
 801c6d2:	9105      	str	r1, [sp, #20]
 801c6d4:	e7c4      	b.n	801c660 <_svfiprintf_r+0x130>
 801c6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801c6da:	4604      	mov	r4, r0
 801c6dc:	2301      	movs	r3, #1
 801c6de:	e7f0      	b.n	801c6c2 <_svfiprintf_r+0x192>
 801c6e0:	ab03      	add	r3, sp, #12
 801c6e2:	9300      	str	r3, [sp, #0]
 801c6e4:	462a      	mov	r2, r5
 801c6e6:	4b0f      	ldr	r3, [pc, #60]	; (801c724 <_svfiprintf_r+0x1f4>)
 801c6e8:	a904      	add	r1, sp, #16
 801c6ea:	4638      	mov	r0, r7
 801c6ec:	f7fd fd68 	bl	801a1c0 <_printf_float>
 801c6f0:	1c42      	adds	r2, r0, #1
 801c6f2:	4606      	mov	r6, r0
 801c6f4:	d1d6      	bne.n	801c6a4 <_svfiprintf_r+0x174>
 801c6f6:	89ab      	ldrh	r3, [r5, #12]
 801c6f8:	065b      	lsls	r3, r3, #25
 801c6fa:	f53f af2d 	bmi.w	801c558 <_svfiprintf_r+0x28>
 801c6fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c700:	b01d      	add	sp, #116	; 0x74
 801c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c706:	ab03      	add	r3, sp, #12
 801c708:	9300      	str	r3, [sp, #0]
 801c70a:	462a      	mov	r2, r5
 801c70c:	4b05      	ldr	r3, [pc, #20]	; (801c724 <_svfiprintf_r+0x1f4>)
 801c70e:	a904      	add	r1, sp, #16
 801c710:	4638      	mov	r0, r7
 801c712:	f7fd fff9 	bl	801a708 <_printf_i>
 801c716:	e7eb      	b.n	801c6f0 <_svfiprintf_r+0x1c0>
 801c718:	080201e4 	.word	0x080201e4
 801c71c:	080201ee 	.word	0x080201ee
 801c720:	0801a1c1 	.word	0x0801a1c1
 801c724:	0801c47d 	.word	0x0801c47d
 801c728:	080201ea 	.word	0x080201ea

0801c72c <__sfputc_r>:
 801c72c:	6893      	ldr	r3, [r2, #8]
 801c72e:	3b01      	subs	r3, #1
 801c730:	2b00      	cmp	r3, #0
 801c732:	b410      	push	{r4}
 801c734:	6093      	str	r3, [r2, #8]
 801c736:	da08      	bge.n	801c74a <__sfputc_r+0x1e>
 801c738:	6994      	ldr	r4, [r2, #24]
 801c73a:	42a3      	cmp	r3, r4
 801c73c:	db01      	blt.n	801c742 <__sfputc_r+0x16>
 801c73e:	290a      	cmp	r1, #10
 801c740:	d103      	bne.n	801c74a <__sfputc_r+0x1e>
 801c742:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c746:	f7fe ba38 	b.w	801abba <__swbuf_r>
 801c74a:	6813      	ldr	r3, [r2, #0]
 801c74c:	1c58      	adds	r0, r3, #1
 801c74e:	6010      	str	r0, [r2, #0]
 801c750:	7019      	strb	r1, [r3, #0]
 801c752:	4608      	mov	r0, r1
 801c754:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c758:	4770      	bx	lr

0801c75a <__sfputs_r>:
 801c75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c75c:	4606      	mov	r6, r0
 801c75e:	460f      	mov	r7, r1
 801c760:	4614      	mov	r4, r2
 801c762:	18d5      	adds	r5, r2, r3
 801c764:	42ac      	cmp	r4, r5
 801c766:	d101      	bne.n	801c76c <__sfputs_r+0x12>
 801c768:	2000      	movs	r0, #0
 801c76a:	e007      	b.n	801c77c <__sfputs_r+0x22>
 801c76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c770:	463a      	mov	r2, r7
 801c772:	4630      	mov	r0, r6
 801c774:	f7ff ffda 	bl	801c72c <__sfputc_r>
 801c778:	1c43      	adds	r3, r0, #1
 801c77a:	d1f3      	bne.n	801c764 <__sfputs_r+0xa>
 801c77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c780 <_vfiprintf_r>:
 801c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c784:	460d      	mov	r5, r1
 801c786:	b09d      	sub	sp, #116	; 0x74
 801c788:	4614      	mov	r4, r2
 801c78a:	4698      	mov	r8, r3
 801c78c:	4606      	mov	r6, r0
 801c78e:	b118      	cbz	r0, 801c798 <_vfiprintf_r+0x18>
 801c790:	6a03      	ldr	r3, [r0, #32]
 801c792:	b90b      	cbnz	r3, 801c798 <_vfiprintf_r+0x18>
 801c794:	f7fe f966 	bl	801aa64 <__sinit>
 801c798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c79a:	07d9      	lsls	r1, r3, #31
 801c79c:	d405      	bmi.n	801c7aa <_vfiprintf_r+0x2a>
 801c79e:	89ab      	ldrh	r3, [r5, #12]
 801c7a0:	059a      	lsls	r2, r3, #22
 801c7a2:	d402      	bmi.n	801c7aa <_vfiprintf_r+0x2a>
 801c7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7a6:	f7fe fb44 	bl	801ae32 <__retarget_lock_acquire_recursive>
 801c7aa:	89ab      	ldrh	r3, [r5, #12]
 801c7ac:	071b      	lsls	r3, r3, #28
 801c7ae:	d501      	bpl.n	801c7b4 <_vfiprintf_r+0x34>
 801c7b0:	692b      	ldr	r3, [r5, #16]
 801c7b2:	b99b      	cbnz	r3, 801c7dc <_vfiprintf_r+0x5c>
 801c7b4:	4629      	mov	r1, r5
 801c7b6:	4630      	mov	r0, r6
 801c7b8:	f7fe fa3c 	bl	801ac34 <__swsetup_r>
 801c7bc:	b170      	cbz	r0, 801c7dc <_vfiprintf_r+0x5c>
 801c7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c7c0:	07dc      	lsls	r4, r3, #31
 801c7c2:	d504      	bpl.n	801c7ce <_vfiprintf_r+0x4e>
 801c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 801c7c8:	b01d      	add	sp, #116	; 0x74
 801c7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7ce:	89ab      	ldrh	r3, [r5, #12]
 801c7d0:	0598      	lsls	r0, r3, #22
 801c7d2:	d4f7      	bmi.n	801c7c4 <_vfiprintf_r+0x44>
 801c7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7d6:	f7fe fb2d 	bl	801ae34 <__retarget_lock_release_recursive>
 801c7da:	e7f3      	b.n	801c7c4 <_vfiprintf_r+0x44>
 801c7dc:	2300      	movs	r3, #0
 801c7de:	9309      	str	r3, [sp, #36]	; 0x24
 801c7e0:	2320      	movs	r3, #32
 801c7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c7ea:	2330      	movs	r3, #48	; 0x30
 801c7ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c9a0 <_vfiprintf_r+0x220>
 801c7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c7f4:	f04f 0901 	mov.w	r9, #1
 801c7f8:	4623      	mov	r3, r4
 801c7fa:	469a      	mov	sl, r3
 801c7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c800:	b10a      	cbz	r2, 801c806 <_vfiprintf_r+0x86>
 801c802:	2a25      	cmp	r2, #37	; 0x25
 801c804:	d1f9      	bne.n	801c7fa <_vfiprintf_r+0x7a>
 801c806:	ebba 0b04 	subs.w	fp, sl, r4
 801c80a:	d00b      	beq.n	801c824 <_vfiprintf_r+0xa4>
 801c80c:	465b      	mov	r3, fp
 801c80e:	4622      	mov	r2, r4
 801c810:	4629      	mov	r1, r5
 801c812:	4630      	mov	r0, r6
 801c814:	f7ff ffa1 	bl	801c75a <__sfputs_r>
 801c818:	3001      	adds	r0, #1
 801c81a:	f000 80a9 	beq.w	801c970 <_vfiprintf_r+0x1f0>
 801c81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c820:	445a      	add	r2, fp
 801c822:	9209      	str	r2, [sp, #36]	; 0x24
 801c824:	f89a 3000 	ldrb.w	r3, [sl]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	f000 80a1 	beq.w	801c970 <_vfiprintf_r+0x1f0>
 801c82e:	2300      	movs	r3, #0
 801c830:	f04f 32ff 	mov.w	r2, #4294967295
 801c834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c838:	f10a 0a01 	add.w	sl, sl, #1
 801c83c:	9304      	str	r3, [sp, #16]
 801c83e:	9307      	str	r3, [sp, #28]
 801c840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c844:	931a      	str	r3, [sp, #104]	; 0x68
 801c846:	4654      	mov	r4, sl
 801c848:	2205      	movs	r2, #5
 801c84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c84e:	4854      	ldr	r0, [pc, #336]	; (801c9a0 <_vfiprintf_r+0x220>)
 801c850:	f7e3 fcce 	bl	80001f0 <memchr>
 801c854:	9a04      	ldr	r2, [sp, #16]
 801c856:	b9d8      	cbnz	r0, 801c890 <_vfiprintf_r+0x110>
 801c858:	06d1      	lsls	r1, r2, #27
 801c85a:	bf44      	itt	mi
 801c85c:	2320      	movmi	r3, #32
 801c85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c862:	0713      	lsls	r3, r2, #28
 801c864:	bf44      	itt	mi
 801c866:	232b      	movmi	r3, #43	; 0x2b
 801c868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c86c:	f89a 3000 	ldrb.w	r3, [sl]
 801c870:	2b2a      	cmp	r3, #42	; 0x2a
 801c872:	d015      	beq.n	801c8a0 <_vfiprintf_r+0x120>
 801c874:	9a07      	ldr	r2, [sp, #28]
 801c876:	4654      	mov	r4, sl
 801c878:	2000      	movs	r0, #0
 801c87a:	f04f 0c0a 	mov.w	ip, #10
 801c87e:	4621      	mov	r1, r4
 801c880:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c884:	3b30      	subs	r3, #48	; 0x30
 801c886:	2b09      	cmp	r3, #9
 801c888:	d94d      	bls.n	801c926 <_vfiprintf_r+0x1a6>
 801c88a:	b1b0      	cbz	r0, 801c8ba <_vfiprintf_r+0x13a>
 801c88c:	9207      	str	r2, [sp, #28]
 801c88e:	e014      	b.n	801c8ba <_vfiprintf_r+0x13a>
 801c890:	eba0 0308 	sub.w	r3, r0, r8
 801c894:	fa09 f303 	lsl.w	r3, r9, r3
 801c898:	4313      	orrs	r3, r2
 801c89a:	9304      	str	r3, [sp, #16]
 801c89c:	46a2      	mov	sl, r4
 801c89e:	e7d2      	b.n	801c846 <_vfiprintf_r+0xc6>
 801c8a0:	9b03      	ldr	r3, [sp, #12]
 801c8a2:	1d19      	adds	r1, r3, #4
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	9103      	str	r1, [sp, #12]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	bfbb      	ittet	lt
 801c8ac:	425b      	neglt	r3, r3
 801c8ae:	f042 0202 	orrlt.w	r2, r2, #2
 801c8b2:	9307      	strge	r3, [sp, #28]
 801c8b4:	9307      	strlt	r3, [sp, #28]
 801c8b6:	bfb8      	it	lt
 801c8b8:	9204      	strlt	r2, [sp, #16]
 801c8ba:	7823      	ldrb	r3, [r4, #0]
 801c8bc:	2b2e      	cmp	r3, #46	; 0x2e
 801c8be:	d10c      	bne.n	801c8da <_vfiprintf_r+0x15a>
 801c8c0:	7863      	ldrb	r3, [r4, #1]
 801c8c2:	2b2a      	cmp	r3, #42	; 0x2a
 801c8c4:	d134      	bne.n	801c930 <_vfiprintf_r+0x1b0>
 801c8c6:	9b03      	ldr	r3, [sp, #12]
 801c8c8:	1d1a      	adds	r2, r3, #4
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	9203      	str	r2, [sp, #12]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	bfb8      	it	lt
 801c8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 801c8d6:	3402      	adds	r4, #2
 801c8d8:	9305      	str	r3, [sp, #20]
 801c8da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c9b0 <_vfiprintf_r+0x230>
 801c8de:	7821      	ldrb	r1, [r4, #0]
 801c8e0:	2203      	movs	r2, #3
 801c8e2:	4650      	mov	r0, sl
 801c8e4:	f7e3 fc84 	bl	80001f0 <memchr>
 801c8e8:	b138      	cbz	r0, 801c8fa <_vfiprintf_r+0x17a>
 801c8ea:	9b04      	ldr	r3, [sp, #16]
 801c8ec:	eba0 000a 	sub.w	r0, r0, sl
 801c8f0:	2240      	movs	r2, #64	; 0x40
 801c8f2:	4082      	lsls	r2, r0
 801c8f4:	4313      	orrs	r3, r2
 801c8f6:	3401      	adds	r4, #1
 801c8f8:	9304      	str	r3, [sp, #16]
 801c8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8fe:	4829      	ldr	r0, [pc, #164]	; (801c9a4 <_vfiprintf_r+0x224>)
 801c900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c904:	2206      	movs	r2, #6
 801c906:	f7e3 fc73 	bl	80001f0 <memchr>
 801c90a:	2800      	cmp	r0, #0
 801c90c:	d03f      	beq.n	801c98e <_vfiprintf_r+0x20e>
 801c90e:	4b26      	ldr	r3, [pc, #152]	; (801c9a8 <_vfiprintf_r+0x228>)
 801c910:	bb1b      	cbnz	r3, 801c95a <_vfiprintf_r+0x1da>
 801c912:	9b03      	ldr	r3, [sp, #12]
 801c914:	3307      	adds	r3, #7
 801c916:	f023 0307 	bic.w	r3, r3, #7
 801c91a:	3308      	adds	r3, #8
 801c91c:	9303      	str	r3, [sp, #12]
 801c91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c920:	443b      	add	r3, r7
 801c922:	9309      	str	r3, [sp, #36]	; 0x24
 801c924:	e768      	b.n	801c7f8 <_vfiprintf_r+0x78>
 801c926:	fb0c 3202 	mla	r2, ip, r2, r3
 801c92a:	460c      	mov	r4, r1
 801c92c:	2001      	movs	r0, #1
 801c92e:	e7a6      	b.n	801c87e <_vfiprintf_r+0xfe>
 801c930:	2300      	movs	r3, #0
 801c932:	3401      	adds	r4, #1
 801c934:	9305      	str	r3, [sp, #20]
 801c936:	4619      	mov	r1, r3
 801c938:	f04f 0c0a 	mov.w	ip, #10
 801c93c:	4620      	mov	r0, r4
 801c93e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c942:	3a30      	subs	r2, #48	; 0x30
 801c944:	2a09      	cmp	r2, #9
 801c946:	d903      	bls.n	801c950 <_vfiprintf_r+0x1d0>
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d0c6      	beq.n	801c8da <_vfiprintf_r+0x15a>
 801c94c:	9105      	str	r1, [sp, #20]
 801c94e:	e7c4      	b.n	801c8da <_vfiprintf_r+0x15a>
 801c950:	fb0c 2101 	mla	r1, ip, r1, r2
 801c954:	4604      	mov	r4, r0
 801c956:	2301      	movs	r3, #1
 801c958:	e7f0      	b.n	801c93c <_vfiprintf_r+0x1bc>
 801c95a:	ab03      	add	r3, sp, #12
 801c95c:	9300      	str	r3, [sp, #0]
 801c95e:	462a      	mov	r2, r5
 801c960:	4b12      	ldr	r3, [pc, #72]	; (801c9ac <_vfiprintf_r+0x22c>)
 801c962:	a904      	add	r1, sp, #16
 801c964:	4630      	mov	r0, r6
 801c966:	f7fd fc2b 	bl	801a1c0 <_printf_float>
 801c96a:	4607      	mov	r7, r0
 801c96c:	1c78      	adds	r0, r7, #1
 801c96e:	d1d6      	bne.n	801c91e <_vfiprintf_r+0x19e>
 801c970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c972:	07d9      	lsls	r1, r3, #31
 801c974:	d405      	bmi.n	801c982 <_vfiprintf_r+0x202>
 801c976:	89ab      	ldrh	r3, [r5, #12]
 801c978:	059a      	lsls	r2, r3, #22
 801c97a:	d402      	bmi.n	801c982 <_vfiprintf_r+0x202>
 801c97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c97e:	f7fe fa59 	bl	801ae34 <__retarget_lock_release_recursive>
 801c982:	89ab      	ldrh	r3, [r5, #12]
 801c984:	065b      	lsls	r3, r3, #25
 801c986:	f53f af1d 	bmi.w	801c7c4 <_vfiprintf_r+0x44>
 801c98a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c98c:	e71c      	b.n	801c7c8 <_vfiprintf_r+0x48>
 801c98e:	ab03      	add	r3, sp, #12
 801c990:	9300      	str	r3, [sp, #0]
 801c992:	462a      	mov	r2, r5
 801c994:	4b05      	ldr	r3, [pc, #20]	; (801c9ac <_vfiprintf_r+0x22c>)
 801c996:	a904      	add	r1, sp, #16
 801c998:	4630      	mov	r0, r6
 801c99a:	f7fd feb5 	bl	801a708 <_printf_i>
 801c99e:	e7e4      	b.n	801c96a <_vfiprintf_r+0x1ea>
 801c9a0:	080201e4 	.word	0x080201e4
 801c9a4:	080201ee 	.word	0x080201ee
 801c9a8:	0801a1c1 	.word	0x0801a1c1
 801c9ac:	0801c75b 	.word	0x0801c75b
 801c9b0:	080201ea 	.word	0x080201ea

0801c9b4 <__sflush_r>:
 801c9b4:	898a      	ldrh	r2, [r1, #12]
 801c9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9ba:	4605      	mov	r5, r0
 801c9bc:	0710      	lsls	r0, r2, #28
 801c9be:	460c      	mov	r4, r1
 801c9c0:	d458      	bmi.n	801ca74 <__sflush_r+0xc0>
 801c9c2:	684b      	ldr	r3, [r1, #4]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	dc05      	bgt.n	801c9d4 <__sflush_r+0x20>
 801c9c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	dc02      	bgt.n	801c9d4 <__sflush_r+0x20>
 801c9ce:	2000      	movs	r0, #0
 801c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c9d6:	2e00      	cmp	r6, #0
 801c9d8:	d0f9      	beq.n	801c9ce <__sflush_r+0x1a>
 801c9da:	2300      	movs	r3, #0
 801c9dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c9e0:	682f      	ldr	r7, [r5, #0]
 801c9e2:	6a21      	ldr	r1, [r4, #32]
 801c9e4:	602b      	str	r3, [r5, #0]
 801c9e6:	d032      	beq.n	801ca4e <__sflush_r+0x9a>
 801c9e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c9ea:	89a3      	ldrh	r3, [r4, #12]
 801c9ec:	075a      	lsls	r2, r3, #29
 801c9ee:	d505      	bpl.n	801c9fc <__sflush_r+0x48>
 801c9f0:	6863      	ldr	r3, [r4, #4]
 801c9f2:	1ac0      	subs	r0, r0, r3
 801c9f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c9f6:	b10b      	cbz	r3, 801c9fc <__sflush_r+0x48>
 801c9f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c9fa:	1ac0      	subs	r0, r0, r3
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	4602      	mov	r2, r0
 801ca00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca02:	6a21      	ldr	r1, [r4, #32]
 801ca04:	4628      	mov	r0, r5
 801ca06:	47b0      	blx	r6
 801ca08:	1c43      	adds	r3, r0, #1
 801ca0a:	89a3      	ldrh	r3, [r4, #12]
 801ca0c:	d106      	bne.n	801ca1c <__sflush_r+0x68>
 801ca0e:	6829      	ldr	r1, [r5, #0]
 801ca10:	291d      	cmp	r1, #29
 801ca12:	d82b      	bhi.n	801ca6c <__sflush_r+0xb8>
 801ca14:	4a29      	ldr	r2, [pc, #164]	; (801cabc <__sflush_r+0x108>)
 801ca16:	410a      	asrs	r2, r1
 801ca18:	07d6      	lsls	r6, r2, #31
 801ca1a:	d427      	bmi.n	801ca6c <__sflush_r+0xb8>
 801ca1c:	2200      	movs	r2, #0
 801ca1e:	6062      	str	r2, [r4, #4]
 801ca20:	04d9      	lsls	r1, r3, #19
 801ca22:	6922      	ldr	r2, [r4, #16]
 801ca24:	6022      	str	r2, [r4, #0]
 801ca26:	d504      	bpl.n	801ca32 <__sflush_r+0x7e>
 801ca28:	1c42      	adds	r2, r0, #1
 801ca2a:	d101      	bne.n	801ca30 <__sflush_r+0x7c>
 801ca2c:	682b      	ldr	r3, [r5, #0]
 801ca2e:	b903      	cbnz	r3, 801ca32 <__sflush_r+0x7e>
 801ca30:	6560      	str	r0, [r4, #84]	; 0x54
 801ca32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ca34:	602f      	str	r7, [r5, #0]
 801ca36:	2900      	cmp	r1, #0
 801ca38:	d0c9      	beq.n	801c9ce <__sflush_r+0x1a>
 801ca3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca3e:	4299      	cmp	r1, r3
 801ca40:	d002      	beq.n	801ca48 <__sflush_r+0x94>
 801ca42:	4628      	mov	r0, r5
 801ca44:	f7ff f89e 	bl	801bb84 <_free_r>
 801ca48:	2000      	movs	r0, #0
 801ca4a:	6360      	str	r0, [r4, #52]	; 0x34
 801ca4c:	e7c0      	b.n	801c9d0 <__sflush_r+0x1c>
 801ca4e:	2301      	movs	r3, #1
 801ca50:	4628      	mov	r0, r5
 801ca52:	47b0      	blx	r6
 801ca54:	1c41      	adds	r1, r0, #1
 801ca56:	d1c8      	bne.n	801c9ea <__sflush_r+0x36>
 801ca58:	682b      	ldr	r3, [r5, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d0c5      	beq.n	801c9ea <__sflush_r+0x36>
 801ca5e:	2b1d      	cmp	r3, #29
 801ca60:	d001      	beq.n	801ca66 <__sflush_r+0xb2>
 801ca62:	2b16      	cmp	r3, #22
 801ca64:	d101      	bne.n	801ca6a <__sflush_r+0xb6>
 801ca66:	602f      	str	r7, [r5, #0]
 801ca68:	e7b1      	b.n	801c9ce <__sflush_r+0x1a>
 801ca6a:	89a3      	ldrh	r3, [r4, #12]
 801ca6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ca70:	81a3      	strh	r3, [r4, #12]
 801ca72:	e7ad      	b.n	801c9d0 <__sflush_r+0x1c>
 801ca74:	690f      	ldr	r7, [r1, #16]
 801ca76:	2f00      	cmp	r7, #0
 801ca78:	d0a9      	beq.n	801c9ce <__sflush_r+0x1a>
 801ca7a:	0793      	lsls	r3, r2, #30
 801ca7c:	680e      	ldr	r6, [r1, #0]
 801ca7e:	bf08      	it	eq
 801ca80:	694b      	ldreq	r3, [r1, #20]
 801ca82:	600f      	str	r7, [r1, #0]
 801ca84:	bf18      	it	ne
 801ca86:	2300      	movne	r3, #0
 801ca88:	eba6 0807 	sub.w	r8, r6, r7
 801ca8c:	608b      	str	r3, [r1, #8]
 801ca8e:	f1b8 0f00 	cmp.w	r8, #0
 801ca92:	dd9c      	ble.n	801c9ce <__sflush_r+0x1a>
 801ca94:	6a21      	ldr	r1, [r4, #32]
 801ca96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ca98:	4643      	mov	r3, r8
 801ca9a:	463a      	mov	r2, r7
 801ca9c:	4628      	mov	r0, r5
 801ca9e:	47b0      	blx	r6
 801caa0:	2800      	cmp	r0, #0
 801caa2:	dc06      	bgt.n	801cab2 <__sflush_r+0xfe>
 801caa4:	89a3      	ldrh	r3, [r4, #12]
 801caa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801caaa:	81a3      	strh	r3, [r4, #12]
 801caac:	f04f 30ff 	mov.w	r0, #4294967295
 801cab0:	e78e      	b.n	801c9d0 <__sflush_r+0x1c>
 801cab2:	4407      	add	r7, r0
 801cab4:	eba8 0800 	sub.w	r8, r8, r0
 801cab8:	e7e9      	b.n	801ca8e <__sflush_r+0xda>
 801caba:	bf00      	nop
 801cabc:	dfbffffe 	.word	0xdfbffffe

0801cac0 <_fflush_r>:
 801cac0:	b538      	push	{r3, r4, r5, lr}
 801cac2:	690b      	ldr	r3, [r1, #16]
 801cac4:	4605      	mov	r5, r0
 801cac6:	460c      	mov	r4, r1
 801cac8:	b913      	cbnz	r3, 801cad0 <_fflush_r+0x10>
 801caca:	2500      	movs	r5, #0
 801cacc:	4628      	mov	r0, r5
 801cace:	bd38      	pop	{r3, r4, r5, pc}
 801cad0:	b118      	cbz	r0, 801cada <_fflush_r+0x1a>
 801cad2:	6a03      	ldr	r3, [r0, #32]
 801cad4:	b90b      	cbnz	r3, 801cada <_fflush_r+0x1a>
 801cad6:	f7fd ffc5 	bl	801aa64 <__sinit>
 801cada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d0f3      	beq.n	801caca <_fflush_r+0xa>
 801cae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cae4:	07d0      	lsls	r0, r2, #31
 801cae6:	d404      	bmi.n	801caf2 <_fflush_r+0x32>
 801cae8:	0599      	lsls	r1, r3, #22
 801caea:	d402      	bmi.n	801caf2 <_fflush_r+0x32>
 801caec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801caee:	f7fe f9a0 	bl	801ae32 <__retarget_lock_acquire_recursive>
 801caf2:	4628      	mov	r0, r5
 801caf4:	4621      	mov	r1, r4
 801caf6:	f7ff ff5d 	bl	801c9b4 <__sflush_r>
 801cafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cafc:	07da      	lsls	r2, r3, #31
 801cafe:	4605      	mov	r5, r0
 801cb00:	d4e4      	bmi.n	801cacc <_fflush_r+0xc>
 801cb02:	89a3      	ldrh	r3, [r4, #12]
 801cb04:	059b      	lsls	r3, r3, #22
 801cb06:	d4e1      	bmi.n	801cacc <_fflush_r+0xc>
 801cb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb0a:	f7fe f993 	bl	801ae34 <__retarget_lock_release_recursive>
 801cb0e:	e7dd      	b.n	801cacc <_fflush_r+0xc>

0801cb10 <fiprintf>:
 801cb10:	b40e      	push	{r1, r2, r3}
 801cb12:	b503      	push	{r0, r1, lr}
 801cb14:	4601      	mov	r1, r0
 801cb16:	ab03      	add	r3, sp, #12
 801cb18:	4805      	ldr	r0, [pc, #20]	; (801cb30 <fiprintf+0x20>)
 801cb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb1e:	6800      	ldr	r0, [r0, #0]
 801cb20:	9301      	str	r3, [sp, #4]
 801cb22:	f7ff fe2d 	bl	801c780 <_vfiprintf_r>
 801cb26:	b002      	add	sp, #8
 801cb28:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb2c:	b003      	add	sp, #12
 801cb2e:	4770      	bx	lr
 801cb30:	2000009c 	.word	0x2000009c

0801cb34 <__swhatbuf_r>:
 801cb34:	b570      	push	{r4, r5, r6, lr}
 801cb36:	460c      	mov	r4, r1
 801cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb3c:	2900      	cmp	r1, #0
 801cb3e:	b096      	sub	sp, #88	; 0x58
 801cb40:	4615      	mov	r5, r2
 801cb42:	461e      	mov	r6, r3
 801cb44:	da0d      	bge.n	801cb62 <__swhatbuf_r+0x2e>
 801cb46:	89a3      	ldrh	r3, [r4, #12]
 801cb48:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cb4c:	f04f 0100 	mov.w	r1, #0
 801cb50:	bf0c      	ite	eq
 801cb52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cb56:	2340      	movne	r3, #64	; 0x40
 801cb58:	2000      	movs	r0, #0
 801cb5a:	6031      	str	r1, [r6, #0]
 801cb5c:	602b      	str	r3, [r5, #0]
 801cb5e:	b016      	add	sp, #88	; 0x58
 801cb60:	bd70      	pop	{r4, r5, r6, pc}
 801cb62:	466a      	mov	r2, sp
 801cb64:	f000 f848 	bl	801cbf8 <_fstat_r>
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	dbec      	blt.n	801cb46 <__swhatbuf_r+0x12>
 801cb6c:	9901      	ldr	r1, [sp, #4]
 801cb6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cb72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cb76:	4259      	negs	r1, r3
 801cb78:	4159      	adcs	r1, r3
 801cb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cb7e:	e7eb      	b.n	801cb58 <__swhatbuf_r+0x24>

0801cb80 <__smakebuf_r>:
 801cb80:	898b      	ldrh	r3, [r1, #12]
 801cb82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cb84:	079d      	lsls	r5, r3, #30
 801cb86:	4606      	mov	r6, r0
 801cb88:	460c      	mov	r4, r1
 801cb8a:	d507      	bpl.n	801cb9c <__smakebuf_r+0x1c>
 801cb8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cb90:	6023      	str	r3, [r4, #0]
 801cb92:	6123      	str	r3, [r4, #16]
 801cb94:	2301      	movs	r3, #1
 801cb96:	6163      	str	r3, [r4, #20]
 801cb98:	b002      	add	sp, #8
 801cb9a:	bd70      	pop	{r4, r5, r6, pc}
 801cb9c:	ab01      	add	r3, sp, #4
 801cb9e:	466a      	mov	r2, sp
 801cba0:	f7ff ffc8 	bl	801cb34 <__swhatbuf_r>
 801cba4:	9900      	ldr	r1, [sp, #0]
 801cba6:	4605      	mov	r5, r0
 801cba8:	4630      	mov	r0, r6
 801cbaa:	f7ff f85f 	bl	801bc6c <_malloc_r>
 801cbae:	b948      	cbnz	r0, 801cbc4 <__smakebuf_r+0x44>
 801cbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbb4:	059a      	lsls	r2, r3, #22
 801cbb6:	d4ef      	bmi.n	801cb98 <__smakebuf_r+0x18>
 801cbb8:	f023 0303 	bic.w	r3, r3, #3
 801cbbc:	f043 0302 	orr.w	r3, r3, #2
 801cbc0:	81a3      	strh	r3, [r4, #12]
 801cbc2:	e7e3      	b.n	801cb8c <__smakebuf_r+0xc>
 801cbc4:	89a3      	ldrh	r3, [r4, #12]
 801cbc6:	6020      	str	r0, [r4, #0]
 801cbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbcc:	81a3      	strh	r3, [r4, #12]
 801cbce:	9b00      	ldr	r3, [sp, #0]
 801cbd0:	6163      	str	r3, [r4, #20]
 801cbd2:	9b01      	ldr	r3, [sp, #4]
 801cbd4:	6120      	str	r0, [r4, #16]
 801cbd6:	b15b      	cbz	r3, 801cbf0 <__smakebuf_r+0x70>
 801cbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cbdc:	4630      	mov	r0, r6
 801cbde:	f000 f81d 	bl	801cc1c <_isatty_r>
 801cbe2:	b128      	cbz	r0, 801cbf0 <__smakebuf_r+0x70>
 801cbe4:	89a3      	ldrh	r3, [r4, #12]
 801cbe6:	f023 0303 	bic.w	r3, r3, #3
 801cbea:	f043 0301 	orr.w	r3, r3, #1
 801cbee:	81a3      	strh	r3, [r4, #12]
 801cbf0:	89a3      	ldrh	r3, [r4, #12]
 801cbf2:	431d      	orrs	r5, r3
 801cbf4:	81a5      	strh	r5, [r4, #12]
 801cbf6:	e7cf      	b.n	801cb98 <__smakebuf_r+0x18>

0801cbf8 <_fstat_r>:
 801cbf8:	b538      	push	{r3, r4, r5, lr}
 801cbfa:	4d07      	ldr	r5, [pc, #28]	; (801cc18 <_fstat_r+0x20>)
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	4604      	mov	r4, r0
 801cc00:	4608      	mov	r0, r1
 801cc02:	4611      	mov	r1, r2
 801cc04:	602b      	str	r3, [r5, #0]
 801cc06:	f7e5 fb0e 	bl	8002226 <_fstat>
 801cc0a:	1c43      	adds	r3, r0, #1
 801cc0c:	d102      	bne.n	801cc14 <_fstat_r+0x1c>
 801cc0e:	682b      	ldr	r3, [r5, #0]
 801cc10:	b103      	cbz	r3, 801cc14 <_fstat_r+0x1c>
 801cc12:	6023      	str	r3, [r4, #0]
 801cc14:	bd38      	pop	{r3, r4, r5, pc}
 801cc16:	bf00      	nop
 801cc18:	2000f308 	.word	0x2000f308

0801cc1c <_isatty_r>:
 801cc1c:	b538      	push	{r3, r4, r5, lr}
 801cc1e:	4d06      	ldr	r5, [pc, #24]	; (801cc38 <_isatty_r+0x1c>)
 801cc20:	2300      	movs	r3, #0
 801cc22:	4604      	mov	r4, r0
 801cc24:	4608      	mov	r0, r1
 801cc26:	602b      	str	r3, [r5, #0]
 801cc28:	f7e5 fb0d 	bl	8002246 <_isatty>
 801cc2c:	1c43      	adds	r3, r0, #1
 801cc2e:	d102      	bne.n	801cc36 <_isatty_r+0x1a>
 801cc30:	682b      	ldr	r3, [r5, #0]
 801cc32:	b103      	cbz	r3, 801cc36 <_isatty_r+0x1a>
 801cc34:	6023      	str	r3, [r4, #0]
 801cc36:	bd38      	pop	{r3, r4, r5, pc}
 801cc38:	2000f308 	.word	0x2000f308

0801cc3c <_sbrk_r>:
 801cc3c:	b538      	push	{r3, r4, r5, lr}
 801cc3e:	4d06      	ldr	r5, [pc, #24]	; (801cc58 <_sbrk_r+0x1c>)
 801cc40:	2300      	movs	r3, #0
 801cc42:	4604      	mov	r4, r0
 801cc44:	4608      	mov	r0, r1
 801cc46:	602b      	str	r3, [r5, #0]
 801cc48:	f7e5 fb16 	bl	8002278 <_sbrk>
 801cc4c:	1c43      	adds	r3, r0, #1
 801cc4e:	d102      	bne.n	801cc56 <_sbrk_r+0x1a>
 801cc50:	682b      	ldr	r3, [r5, #0]
 801cc52:	b103      	cbz	r3, 801cc56 <_sbrk_r+0x1a>
 801cc54:	6023      	str	r3, [r4, #0]
 801cc56:	bd38      	pop	{r3, r4, r5, pc}
 801cc58:	2000f308 	.word	0x2000f308

0801cc5c <abort>:
 801cc5c:	b508      	push	{r3, lr}
 801cc5e:	2006      	movs	r0, #6
 801cc60:	f000 f890 	bl	801cd84 <raise>
 801cc64:	2001      	movs	r0, #1
 801cc66:	f7e5 fa8f 	bl	8002188 <_exit>

0801cc6a <_calloc_r>:
 801cc6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc6c:	fba1 2402 	umull	r2, r4, r1, r2
 801cc70:	b94c      	cbnz	r4, 801cc86 <_calloc_r+0x1c>
 801cc72:	4611      	mov	r1, r2
 801cc74:	9201      	str	r2, [sp, #4]
 801cc76:	f7fe fff9 	bl	801bc6c <_malloc_r>
 801cc7a:	9a01      	ldr	r2, [sp, #4]
 801cc7c:	4605      	mov	r5, r0
 801cc7e:	b930      	cbnz	r0, 801cc8e <_calloc_r+0x24>
 801cc80:	4628      	mov	r0, r5
 801cc82:	b003      	add	sp, #12
 801cc84:	bd30      	pop	{r4, r5, pc}
 801cc86:	220c      	movs	r2, #12
 801cc88:	6002      	str	r2, [r0, #0]
 801cc8a:	2500      	movs	r5, #0
 801cc8c:	e7f8      	b.n	801cc80 <_calloc_r+0x16>
 801cc8e:	4621      	mov	r1, r4
 801cc90:	f7fe f852 	bl	801ad38 <memset>
 801cc94:	e7f4      	b.n	801cc80 <_calloc_r+0x16>

0801cc96 <__ascii_mbtowc>:
 801cc96:	b082      	sub	sp, #8
 801cc98:	b901      	cbnz	r1, 801cc9c <__ascii_mbtowc+0x6>
 801cc9a:	a901      	add	r1, sp, #4
 801cc9c:	b142      	cbz	r2, 801ccb0 <__ascii_mbtowc+0x1a>
 801cc9e:	b14b      	cbz	r3, 801ccb4 <__ascii_mbtowc+0x1e>
 801cca0:	7813      	ldrb	r3, [r2, #0]
 801cca2:	600b      	str	r3, [r1, #0]
 801cca4:	7812      	ldrb	r2, [r2, #0]
 801cca6:	1e10      	subs	r0, r2, #0
 801cca8:	bf18      	it	ne
 801ccaa:	2001      	movne	r0, #1
 801ccac:	b002      	add	sp, #8
 801ccae:	4770      	bx	lr
 801ccb0:	4610      	mov	r0, r2
 801ccb2:	e7fb      	b.n	801ccac <__ascii_mbtowc+0x16>
 801ccb4:	f06f 0001 	mvn.w	r0, #1
 801ccb8:	e7f8      	b.n	801ccac <__ascii_mbtowc+0x16>

0801ccba <_realloc_r>:
 801ccba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccbe:	4680      	mov	r8, r0
 801ccc0:	4614      	mov	r4, r2
 801ccc2:	460e      	mov	r6, r1
 801ccc4:	b921      	cbnz	r1, 801ccd0 <_realloc_r+0x16>
 801ccc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccca:	4611      	mov	r1, r2
 801cccc:	f7fe bfce 	b.w	801bc6c <_malloc_r>
 801ccd0:	b92a      	cbnz	r2, 801ccde <_realloc_r+0x24>
 801ccd2:	f7fe ff57 	bl	801bb84 <_free_r>
 801ccd6:	4625      	mov	r5, r4
 801ccd8:	4628      	mov	r0, r5
 801ccda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccde:	f000 f86d 	bl	801cdbc <_malloc_usable_size_r>
 801cce2:	4284      	cmp	r4, r0
 801cce4:	4607      	mov	r7, r0
 801cce6:	d802      	bhi.n	801ccee <_realloc_r+0x34>
 801cce8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ccec:	d812      	bhi.n	801cd14 <_realloc_r+0x5a>
 801ccee:	4621      	mov	r1, r4
 801ccf0:	4640      	mov	r0, r8
 801ccf2:	f7fe ffbb 	bl	801bc6c <_malloc_r>
 801ccf6:	4605      	mov	r5, r0
 801ccf8:	2800      	cmp	r0, #0
 801ccfa:	d0ed      	beq.n	801ccd8 <_realloc_r+0x1e>
 801ccfc:	42bc      	cmp	r4, r7
 801ccfe:	4622      	mov	r2, r4
 801cd00:	4631      	mov	r1, r6
 801cd02:	bf28      	it	cs
 801cd04:	463a      	movcs	r2, r7
 801cd06:	f7fe f896 	bl	801ae36 <memcpy>
 801cd0a:	4631      	mov	r1, r6
 801cd0c:	4640      	mov	r0, r8
 801cd0e:	f7fe ff39 	bl	801bb84 <_free_r>
 801cd12:	e7e1      	b.n	801ccd8 <_realloc_r+0x1e>
 801cd14:	4635      	mov	r5, r6
 801cd16:	e7df      	b.n	801ccd8 <_realloc_r+0x1e>

0801cd18 <__ascii_wctomb>:
 801cd18:	b149      	cbz	r1, 801cd2e <__ascii_wctomb+0x16>
 801cd1a:	2aff      	cmp	r2, #255	; 0xff
 801cd1c:	bf85      	ittet	hi
 801cd1e:	238a      	movhi	r3, #138	; 0x8a
 801cd20:	6003      	strhi	r3, [r0, #0]
 801cd22:	700a      	strbls	r2, [r1, #0]
 801cd24:	f04f 30ff 	movhi.w	r0, #4294967295
 801cd28:	bf98      	it	ls
 801cd2a:	2001      	movls	r0, #1
 801cd2c:	4770      	bx	lr
 801cd2e:	4608      	mov	r0, r1
 801cd30:	4770      	bx	lr

0801cd32 <_raise_r>:
 801cd32:	291f      	cmp	r1, #31
 801cd34:	b538      	push	{r3, r4, r5, lr}
 801cd36:	4604      	mov	r4, r0
 801cd38:	460d      	mov	r5, r1
 801cd3a:	d904      	bls.n	801cd46 <_raise_r+0x14>
 801cd3c:	2316      	movs	r3, #22
 801cd3e:	6003      	str	r3, [r0, #0]
 801cd40:	f04f 30ff 	mov.w	r0, #4294967295
 801cd44:	bd38      	pop	{r3, r4, r5, pc}
 801cd46:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cd48:	b112      	cbz	r2, 801cd50 <_raise_r+0x1e>
 801cd4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cd4e:	b94b      	cbnz	r3, 801cd64 <_raise_r+0x32>
 801cd50:	4620      	mov	r0, r4
 801cd52:	f000 f831 	bl	801cdb8 <_getpid_r>
 801cd56:	462a      	mov	r2, r5
 801cd58:	4601      	mov	r1, r0
 801cd5a:	4620      	mov	r0, r4
 801cd5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cd60:	f000 b818 	b.w	801cd94 <_kill_r>
 801cd64:	2b01      	cmp	r3, #1
 801cd66:	d00a      	beq.n	801cd7e <_raise_r+0x4c>
 801cd68:	1c59      	adds	r1, r3, #1
 801cd6a:	d103      	bne.n	801cd74 <_raise_r+0x42>
 801cd6c:	2316      	movs	r3, #22
 801cd6e:	6003      	str	r3, [r0, #0]
 801cd70:	2001      	movs	r0, #1
 801cd72:	e7e7      	b.n	801cd44 <_raise_r+0x12>
 801cd74:	2400      	movs	r4, #0
 801cd76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cd7a:	4628      	mov	r0, r5
 801cd7c:	4798      	blx	r3
 801cd7e:	2000      	movs	r0, #0
 801cd80:	e7e0      	b.n	801cd44 <_raise_r+0x12>
	...

0801cd84 <raise>:
 801cd84:	4b02      	ldr	r3, [pc, #8]	; (801cd90 <raise+0xc>)
 801cd86:	4601      	mov	r1, r0
 801cd88:	6818      	ldr	r0, [r3, #0]
 801cd8a:	f7ff bfd2 	b.w	801cd32 <_raise_r>
 801cd8e:	bf00      	nop
 801cd90:	2000009c 	.word	0x2000009c

0801cd94 <_kill_r>:
 801cd94:	b538      	push	{r3, r4, r5, lr}
 801cd96:	4d07      	ldr	r5, [pc, #28]	; (801cdb4 <_kill_r+0x20>)
 801cd98:	2300      	movs	r3, #0
 801cd9a:	4604      	mov	r4, r0
 801cd9c:	4608      	mov	r0, r1
 801cd9e:	4611      	mov	r1, r2
 801cda0:	602b      	str	r3, [r5, #0]
 801cda2:	f7e5 f9e1 	bl	8002168 <_kill>
 801cda6:	1c43      	adds	r3, r0, #1
 801cda8:	d102      	bne.n	801cdb0 <_kill_r+0x1c>
 801cdaa:	682b      	ldr	r3, [r5, #0]
 801cdac:	b103      	cbz	r3, 801cdb0 <_kill_r+0x1c>
 801cdae:	6023      	str	r3, [r4, #0]
 801cdb0:	bd38      	pop	{r3, r4, r5, pc}
 801cdb2:	bf00      	nop
 801cdb4:	2000f308 	.word	0x2000f308

0801cdb8 <_getpid_r>:
 801cdb8:	f7e5 b9ce 	b.w	8002158 <_getpid>

0801cdbc <_malloc_usable_size_r>:
 801cdbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cdc0:	1f18      	subs	r0, r3, #4
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	bfbc      	itt	lt
 801cdc6:	580b      	ldrlt	r3, [r1, r0]
 801cdc8:	18c0      	addlt	r0, r0, r3
 801cdca:	4770      	bx	lr

0801cdcc <_init>:
 801cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdce:	bf00      	nop
 801cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdd2:	bc08      	pop	{r3}
 801cdd4:	469e      	mov	lr, r3
 801cdd6:	4770      	bx	lr

0801cdd8 <_fini>:
 801cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdda:	bf00      	nop
 801cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdde:	bc08      	pop	{r3}
 801cde0:	469e      	mov	lr, r3
 801cde2:	4770      	bx	lr
